using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Services;
using System.Web.Script.Serialization;
using System.Web.Script.Services;
using System.Web.Services.Protocols;
using BusinessLayer;
using System.Xml;
using System.Data;
using System.IO;
using DAL;
using System.Data.SqlClient;
using System.Configuration;
using System.Text;
using System.Net;
using System.Net.Mail;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.Collections;
using BAL;
using System.Globalization;
using System.IO.Compression;
using BAL.AdvanceReq;
using AstralFFMS.ServiceReferenceDMTracker;
using System.Net.Mime;
using System.Drawing;
using System.Diagnostics;
using System.Dynamic;
using AstralFFMS;
using Newtonsoft.Json.Linq;
//using AstralFFMS.SalesOrder;
//using AstralFFMS.Nav_SalesPrice_ItemDiscountReference;
using AstralFFMS.SaleOrderReference;
using System.Transactions;
using System.Net.Http;
using System.Net.Http.Headers;

namespace AstralFFMS
{
    /// <summary>
    /// Summary description for And_Sync
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    //  [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    [System.Web.Script.Services.ScriptService]
    public class GrahaakWebservice : System.Web.Services.WebService
    {
        String Query = "";
        BAL.LeaveRequest.LeaveAll lvAll = new BAL.LeaveRequest.LeaveAll();
        BAL.ExpensesGroupBAL EXG = new ExpensesGroupBAL();
        BAL.AdvanceReq.AdvanceReqBAL obj = new BAL.AdvanceReq.AdvanceReqBAL();
        DistributorBAL DB = new DistributorBAL();
        MasterOperation _mo = new MasterOperation();
        SMSAdapter sms = new SMSAdapter();

        [WebMethod]
        public bool CheckWebServiceResponse()
        {
            System.Threading.Thread.Sleep(1000);
            return true;
        }

        #region PostService Import

        public class disUserList
        {
            public List<Userdetail> body;
        }
        public class Userdetail
        {
            public string minDate { get; set; }
            public string PDA_Id { get; set; }
            public string Mobile { get; set; }
            public string SMID { get; set; }
            public string ConPer_Id { get; set; }
            public string userId { get; set; }
            public string type { get; set; }
            public string app { get; set; }
            public string Visitdate { get; set; }
            public string androidid { get; set; }
            public string DistId { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }


        }

        [DataContract]
        public class UserDetailbyPDA_ID
        {
            [DataMember]
            public string ConPerId { get; set; }
            [DataMember]
            public string User_Name { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string PassWd { get; set; }
            [DataMember]
            public string Level { get; set; }
            [DataMember]
            public string ReportingPerson { get; set; }
            [DataMember]
            public string RoleId { get; set; }
            [DataMember]
            public string DeptId { get; set; }
            [DataMember]
            public string DesigId { get; set; }
            [DataMember]
            public string PDA_Id { get; set; }
            [DataMember]
            public string DSRAllowDays { get; set; }
            [DataMember]
            public string Email { get; set; }
            [DataMember]
            public string ActiveYN { get; set; }
            [DataMember]
            public string CreatedDate { get; set; }
            [DataMember]
            public string Millisecond { get; set; }
            [DataMember]
            public string RoleType { get; set; }
            [DataMember]
            public string Companyname { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetUserDetailByPDAId_mobile()
        {
            string MQry = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            Query = "select * from (SELECT (select ISNULL (compname,'') from mastenviro ) company,sm.SMID As ConPerId,sm.[SMName] As User_Name,um.Id As UserId, um.[Pwd] As PassWd,sm.[lvl] As Level,msp.SMName As ReportingPerson,um.[RoleId],um.DeptId,um.DesigId ,sm.DeviceNo As [PDA_Id],sm.[DSRAllowDays],sm.Email, um.Active As ActiveYN,um.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(um.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(um.Createddate AS date), um.Createddate) AS [Milliseconds], RoleType = (Case when mr.RoleType ='AreaIncharge' then 'L1' when mr.RoleType in ('CityHead','DistrictHead') then 'L2' when mr.RoleType in ('RegionHead','StateHead') then 'L3' else '' end) FROM [MastLogin] um left join MastSalesRep sm on sm.UserId = um.Id inner join MastSalesRep msp on sm.UnderId=msp.SMId left join mastrole mr on mr.RoleId=um.RoleId WHERE mr.RoleType IN ('AreaIncharge','CityHead','DistrictHead','StateHead') AND (sm.[DeviceNo] = '" + objResponse.body[0].PDA_Id + "') AND um.[Active] = '1'  and sm.mobile='" + objResponse.body[0].Mobile + "') AS T " + MQry + "";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<UserDetailbyPDA_ID> rst = new List<UserDetailbyPDA_ID>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new UserDetailbyPDA_ID
                    {
                        ConPerId = dt.Rows[i]["ConPerId"].ToString(),
                        User_Name = dt.Rows[i]["User_Name"].ToString(),
                        UserId = dt.Rows[i]["UserId"].ToString(),
                        PassWd = dt.Rows[i]["PassWd"].ToString(),
                        Level = dt.Rows[i]["Level"].ToString(),
                        ReportingPerson = dt.Rows[i]["ReportingPerson"].ToString(),
                        RoleId = dt.Rows[i]["RoleId"].ToString(),
                        DeptId = dt.Rows[i]["DeptId"].ToString(),
                        DesigId = dt.Rows[i]["DesigId"].ToString(),
                        PDA_Id = dt.Rows[i]["PDA_Id"].ToString(),
                        DSRAllowDays = dt.Rows[i]["DSRAllowDays"].ToString(),
                        Email = dt.Rows[i]["Email"].ToString(),
                        ActiveYN = dt.Rows[i]["ActiveYN"].ToString(),
                        CreatedDate = dt.Rows[i]["Createddate"].ToString(),
                        Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                        RoleType = dt.Rows[i]["RoleType"].ToString(),
                        Companyname = dt.Rows[i]["company"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class EnviroSetting
        {

            [DataMember]
            public string UseCamera { get; set; }
            [DataMember]
            public string EmpGraceDays { get; set; }
            [DataMember]
            public string PartyCaption { get; set; }
            [DataMember]
            public string DistSearch { get; set; }
            [DataMember]
            public string ItemSearch { get; set; }
            [DataMember]
            public string Itemwisesale { get; set; }
            [DataMember]
            public string AreawiseDistributor { get; set; }
            [DataMember]
            public string Host { get; set; }
            [DataMember]
            public string UserName { get; set; }
            [DataMember]
            public string Password { get; set; }
            [DataMember]
            public string Port { get; set; }
            [DataMember]
            public string FTP_DIRECTORY { get; set; }
            [DataMember]
            public string IMAGE_DIRECTORY_NAME { get; set; }
            [DataMember]
            public string DistDiscussionStock { get; set; }
            [DataMember]
            public string DsrRemarkMandatory { get; set; }
            [DataMember]
            public string DSREntry_WithWhom { get; set; }
            [DataMember]
            public string DSREntry_NextVisitWithWhom { get; set; }
            [DataMember]
            public string DSREntry_NextVisitDate { get; set; }
            [DataMember]
            public string DSREntry_RetailerOrderByEmail { get; set; }
            [DataMember]
            public string DSREntry_RetailerOrderByPhone { get; set; }
            [DataMember]
            public string DSREntry_Remarks { get; set; }
            [DataMember]
            public string DSREntry_ExpensesFromArea { get; set; }
            [DataMember]
            public string DSREntry_VisitType { get; set; }
            [DataMember]
            public string DSREntry_Attendance { get; set; }
            [DataMember]
            public string DSREntry_OtherExpenses { get; set; }
            [DataMember]
            public string DSREntry_OtherExpensesRemarks { get; set; }
            [DataMember]
            public string DSREntry_WithWhom_Rq { get; set; }
            [DataMember]
            public string DSREntry_NextVisitWithWhom_Rq { get; set; }
            [DataMember]
            public string DSREntry_NextVisitDate_Rq { get; set; }
            [DataMember]
            public string DSREntry_RetailerOrderByEmail_Rq { get; set; }
            [DataMember]
            public string DSREntry_RetailerOrderByPhone_Rq { get; set; }
            [DataMember]
            public string DSREntry_Remarks_Rq { get; set; }
            [DataMember]
            public string DSREntry_ExpensesFromArea_Rq { get; set; }
            [DataMember]
            public string DSREntry_VisitType_Rq { get; set; }
            [DataMember]
            public string DSREntry_Attendance_Rq { get; set; }
            [DataMember]
            public string DSREntry_OtherExpenses_Rq { get; set; }
            [DataMember]
            public string DSREntry_OtherExpensesRemarks_Rq { get; set; }
            [DataMember]
            public string DSRENTRY_ExpenseToArea { get; set; }
            [DataMember]
            public string DSRENTRY_ExpenseToArea_req { get; set; }
            [DataMember]
            public string DSRENTRY_Chargeable { get; set; }
            [DataMember]
            public string DSRENTRY_Chargeable_req { get; set; }
            [DataMember]
            public string Show_PartyCollection { get; set; }
            [DataMember]
            public string CheckTransactionForLock { get; set; }
            [DataMember]
            public string Show_GeneratePDF { get; set; }
            [DataMember]
            public string PartyMaster_Mobile_Req { get; set; }
            [DataMember]
            public string DSR_Competitor_StdPck_Req { get; set; }
            [DataMember]
            public string NotificationInterval_Android { get; set; }
            [DataMember]
            public string Primary_Disc_NextVDate { get; set; }
            [DataMember]
            public string Primary_Disc_NextVDate_Req { get; set; }
            [DataMember]
            public string Primary_Disc_Remark { get; set; }
            [DataMember]
            public string Primary_Disc_Remark_Req { get; set; }
            [DataMember]
            public string Primary_FailedVisit_NextVDate { get; set; }
            [DataMember]
            public string Primary_FailedVisit_NextVDate_Req { get; set; }
            [DataMember]
            public string Primary_FailedVisit_Remark { get; set; }
            [DataMember]
            public string Primary_FailedVisit_Remark_Req { get; set; }
            [DataMember]
            public string Primary_Collection_Remark { get; set; }
            [DataMember]
            public string Primary_Collection_Remark_Req { get; set; }
            [DataMember]
            public string Sec_BookordRemarkItem { get; set; }
            [DataMember]
            public string Sec_BookordRemarkItem_Req { get; set; }
            [DataMember]
            public string Sec_BookordRemark { get; set; }
            [DataMember]
            public string Sec_BookordRemark_Req { get; set; }
            [DataMember]
            public string Sec_DemoEntryRemark { get; set; }
            [DataMember]
            public string Sec_DemoEntryRemark_Req { get; set; }
            [DataMember]
            public string Sec_FailedVisit_NextVDate { get; set; }
            [DataMember]
            public string Sec_FailedVisit_NextVDateReq { get; set; }
            [DataMember]
            public string Primary_Disc_NextVTime { get; set; }
            [DataMember]
            public string Primary_Disc_NextVTime_Req { get; set; }
            [DataMember]
            public string DSREntry_AttendanceByphoto { get; set; }
            [DataMember]
            public string DSREntry_AttendanceByphoto_Req { get; set; }
            [DataMember]
            public string DSREntry_Attendancebyorder { get; set; }
            [DataMember]
            public string DSREntry_Attendancebyorder_Req { get; set; }
            [DataMember]
            public string DSREntry_Attendancemannual { get; set; }
            [DataMember]
            public string DSREntry_AttendancemannualReq { get; set; }
            [DataMember]
            public string Sec_Order_Rate_Editable { get; set; }
            [DataMember]
            public string purchase_order_rate_editable { get; set; }
            [DataMember]
            public string PartyCreditlimitVisibility { get; set; }
            [DataMember]
            public string PartyOutstandingVisibility { get; set; }
            [DataMember]
            public string distributorwiseretailer { get; set; }
            [DataMember]
            public string discApplicable { get; set; }
            [DataMember]
            public string SplashScreenImageUrl { get; set; }
            [DataMember]
            public string showDispatchInfo { get; set; }
            [DataMember]
            public string PartyOffline { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetEnviroSetting()
        {
            //string str = "Select EmpGraceDays,DistSearchByName,ItemSearchByName,ItemwiseSeconadarySales,AreawiseDistributor,Host,UserName,Password,PortServer, FTP_DIRECTORY,IMAGE_DIRECTORY_NAME,DistDiscussionStock,DsrRemarkMandatory, PartyCaption from MastEnviro";
            string str = "Select * from MastEnviro";
            DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            List<EnviroSetting> rst = new List<EnviroSetting>();
            {
                rst.Add(
                    new EnviroSetting
                    {
                        DistSearch = dt.Rows[0]["DistSearchByName"].ToString(),
                        ItemSearch = dt.Rows[0]["ItemSearchByName"].ToString(),
                        Itemwisesale = dt.Rows[0]["ItemwiseSeconadarySales"].ToString(),
                        AreawiseDistributor = dt.Rows[0]["AreawiseDistributor"].ToString(),
                        Host = dt.Rows[0]["Host"].ToString(),
                        UserName = dt.Rows[0]["UserName"].ToString(),
                        Password = dt.Rows[0]["Password"].ToString(),
                        Port = dt.Rows[0]["PortServer"].ToString(),
                        FTP_DIRECTORY = dt.Rows[0]["FTP_DIRECTORY"].ToString(),
                        IMAGE_DIRECTORY_NAME = dt.Rows[0]["IMAGE_DIRECTORY_NAME"].ToString(),
                        DistDiscussionStock = dt.Rows[0]["DistDiscussionStock"].ToString(),
                        DsrRemarkMandatory = dt.Rows[0]["DsrRemarkMandatory"].ToString(),
                        EmpGraceDays = dt.Rows[0]["EmpGraceDays"].ToString(),
                        PartyCaption = dt.Rows[0]["PartyCaption"].ToString(),
                        DSREntry_WithWhom = dt.Rows[0]["DSREntry_WithWhom"].ToString(),
                        DSREntry_NextVisitWithWhom = dt.Rows[0]["DSREntry_NextVisitWithWhom"].ToString(),
                        DSREntry_NextVisitDate = dt.Rows[0]["DSREntry_NextVisitDate"].ToString(),
                        DSREntry_RetailerOrderByEmail = dt.Rows[0]["DSREntry_RetailerOrderByEmail"].ToString(),
                        DSREntry_RetailerOrderByPhone = dt.Rows[0]["DSREntry_RetailerOrderByPhone"].ToString(),
                        DSREntry_Remarks = dt.Rows[0]["DSREntry_Remarks"].ToString(),
                        DSREntry_ExpensesFromArea = dt.Rows[0]["DSREntry_ExpensesFromArea"].ToString(),
                        DSREntry_VisitType = dt.Rows[0]["DSREntry_VisitType"].ToString(),
                        DSREntry_Attendance = dt.Rows[0]["DSREntry_Attendance"].ToString(),
                        DSREntry_OtherExpenses = dt.Rows[0]["DSREntry_OtherExpenses"].ToString(),
                        DSREntry_OtherExpensesRemarks = dt.Rows[0]["DSREntry_OtherExpensesRemarks"].ToString(),
                        DSREntry_WithWhom_Rq = dt.Rows[0]["DSREntry_WithWhom_Rq"].ToString(),
                        DSREntry_NextVisitWithWhom_Rq = dt.Rows[0]["DSREntry_NextVisitWithWhom_Rq"].ToString(),
                        DSREntry_NextVisitDate_Rq = dt.Rows[0]["DSREntry_NextVisitDate_Rq"].ToString(),
                        DSREntry_RetailerOrderByEmail_Rq = dt.Rows[0]["DSREntry_RetailerOrderByEmail_Rq"].ToString(),
                        DSREntry_RetailerOrderByPhone_Rq = dt.Rows[0]["DSREntry_RetailerOrderByPhone_Rq"].ToString(),
                        DSREntry_Remarks_Rq = dt.Rows[0]["DSREntry_Remarks_Rq"].ToString(),
                        DSREntry_ExpensesFromArea_Rq = dt.Rows[0]["DSREntry_ExpensesFromArea_Rq"].ToString(),
                        DSREntry_VisitType_Rq = dt.Rows[0]["DSREntry_VisitType_Rq"].ToString(),
                        DSREntry_Attendance_Rq = dt.Rows[0]["DSREntry_Attendance_Rq"].ToString(),
                        DSREntry_OtherExpenses_Rq = dt.Rows[0]["DSREntry_OtherExpenses_Rq"].ToString(),
                        DSREntry_OtherExpensesRemarks_Rq = dt.Rows[0]["DSREntry_OtherExpensesRemarks_Rq"].ToString(),
                        DSRENTRY_ExpenseToArea = dt.Rows[0]["DSRENTRY_ExpenseToArea"].ToString(),
                        DSRENTRY_ExpenseToArea_req = dt.Rows[0]["DSRENTRY_ExpenseToArea_req"].ToString(),
                        DSRENTRY_Chargeable = dt.Rows[0]["DSRENTRY_Chargeable"].ToString(),
                        DSRENTRY_Chargeable_req = dt.Rows[0]["DSRENTRY_Chargeable_req"].ToString(),
                        Show_PartyCollection = dt.Rows[0]["Show_PartyCollection"].ToString(),
                        CheckTransactionForLock = dt.Rows[0]["CheckTransactionForLock"].ToString(),
                        Show_GeneratePDF = dt.Rows[0]["Show_GeneratePDF"].ToString(),
                        UseCamera = dt.Rows[0]["UseCamera"].ToString(),
                        PartyMaster_Mobile_Req = dt.Rows[0]["PartyMaster_Mobile_Req"].ToString(),
                        DSR_Competitor_StdPck_Req = dt.Rows[0]["DSR_Competitor_StdPck_Req"].ToString(),
                        NotificationInterval_Android = dt.Rows[0]["NotificationInterval_Android"].ToString(),
                        Primary_Disc_NextVDate = dt.Rows[0]["PrimaryDistributorDis_NextVisitDate"].ToString(),
                        Primary_Disc_NextVDate_Req = dt.Rows[0]["PrimaryDistributorDis_NextVisitDate_Rq"].ToString(),
                        Primary_Disc_NextVTime = dt.Rows[0]["PrimaryDistributorDis_NextVisitTime"].ToString(),
                        Primary_Disc_NextVTime_Req = dt.Rows[0]["PrimaryDistributorDis_NextVisitTime_Rq"].ToString(),
                        Primary_FailedVisit_NextVDate = dt.Rows[0]["primaryfailedvisit_nextvisitdate"].ToString(),
                        Primary_FailedVisit_NextVDate_Req = dt.Rows[0]["primaryfailedvisit_nextvisitdate_rq"].ToString(),
                        DSREntry_AttendanceByphoto = dt.Rows[0]["AttByPhoto"].ToString(),
                        DSREntry_AttendanceByphoto_Req = dt.Rows[0]["AttByPhoto_Rq"].ToString(),
                        DSREntry_Attendancebyorder = dt.Rows[0]["AttByFirstLastOrder"].ToString(),
                        DSREntry_Attendancebyorder_Req = dt.Rows[0]["AttByFirstLastOrder_Rq"].ToString(),
                        DSREntry_Attendancemannual = dt.Rows[0]["attbymanual"].ToString(),
                        DSREntry_AttendancemannualReq = dt.Rows[0]["AttByManual_Rq"].ToString(),
                        Sec_Order_Rate_Editable = dt.Rows[0]["Sec_Order_Rate_Editable"].ToString(),
                        purchase_order_rate_editable = dt.Rows[0]["Pri_Order_Rate_Editable"].ToString(),
                        PartyCreditlimitVisibility = dt.Rows[0]["PartyCreditlimitVisibility"].ToString(),
                        PartyOutstandingVisibility = dt.Rows[0]["PartyOutstandingVisibility"].ToString(),
                        distributorwiseretailer = dt.Rows[0]["distributorwiseretailer"].ToString(),
                        discApplicable = dt.Rows[0]["DiscApplicable"].ToString(),
                        showDispatchInfo = dt.Rows[0]["showDispatchInfo"].ToString(),
                        SplashScreenImageUrl = dt.Rows[0]["SplashScreenImageUrl"].ToString(),
                        PartyOffline = dt.Rows[0]["PartyOffline"].ToString()



                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xAndroidEnviro
        {

            [DataMember]
            public string AOrdNo { get; set; }
            [DataMember]
            public string APOrdNo { get; set; }
            [DataMember]
            public string ADemoNo { get; set; }
            [DataMember]
            public string AFVNo { get; set; }
            [DataMember]
            public string AVisNo { get; set; }
            [DataMember]
            public string ACmpNo { get; set; }
            [DataMember]
            public string APtyNo { get; set; }
            [DataMember]
            public string ADiscNo { get; set; }
            [DataMember]
            public string ADisColNo { get; set; }
            [DataMember]
            public string APtyColNo { get; set; }
            [DataMember]
            public string APOrd1No { get; set; }
            [DataMember]
            public string AOrd1No { get; set; }
            [DataMember]
            public string AdistStockno { get; set; }
            [DataMember]
            public string A_SalesReturn_no { get; set; }
            [DataMember]
            public string A_SalesReturn1_no { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetAndroidEnviro()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            Query = "select * from AndroidEnviro where SMID=" + objResponse.body[0].SMID + "";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xAndroidEnviro> rst = new List<xAndroidEnviro>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xAndroidEnviro
                    {
                        AOrdNo = dt.Rows[i]["A_OrderNo"].ToString(),
                        APOrdNo = dt.Rows[i]["A_POrderNo"].ToString(),
                        ADemoNo = dt.Rows[i]["A_DemoNo"].ToString(),
                        AFVNo = dt.Rows[i]["A_FailedVisitNo"].ToString(),
                        AVisNo = dt.Rows[i]["A_VisitNo"].ToString(),
                        ACmpNo = dt.Rows[i]["A_CompetitorNo"].ToString(),
                        APtyNo = dt.Rows[i]["A_PartyNo"].ToString(),
                        ADiscNo = dt.Rows[i]["A_DiscussionNo"].ToString(),
                        ADisColNo = dt.Rows[i]["A_DistributorCollectionNo"].ToString(),
                        APtyColNo = dt.Rows[i]["A_PartyCollectionNo"].ToString(),
                        APOrd1No = dt.Rows[i]["A_POrder1No"].ToString(),
                        AdistStockno = dt.Rows[i]["A_distStock_no"].ToString(),
                        AOrd1No = dt.Rows[i]["A_Order1No"].ToString(),
                        A_SalesReturn_no = dt.Rows[i]["A_SalesReturn_no"].ToString(),
                        A_SalesReturn1_no = dt.Rows[i]["A_SalesReturn1_no"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xTransporter_TimeStamp
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string Nm { get; set; }
            [DataMember]
            public string MS { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetTransporter_TimeStampWise()
        {
            string MQry = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string minDate = objResponse.body[0].minDate;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where T.Milliseconds >'" + minDate + "'";
            }

            Query = "select top " + NoOfRec + " * from (select Id,Name,SyncId,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds] from MastTransporter where 1=1 ) As T " + MQry + " ";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xTransporter_TimeStamp> rst = new List<xTransporter_TimeStamp>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xTransporter_TimeStamp
                    {
                        Id = dt.Rows[i]["Id"].ToString(),
                        Nm = dt.Rows[i]["Name"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xProjects_TimeStamp
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string Nm { get; set; }
            [DataMember]
            public string MS { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetProjects_TimeStampWise()
        {

            string MQry = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = objResponse.body[0].minDate;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where  T.[Milliseconds] >'" + minDate + "'";
            }
            Query = "select top " + NoOfRec + " * from (select Id,Name,SyncId,Active,Createddate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds] from MastProject where 1=1 ) as T " + MQry + " order by Createddate ";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xProjects_TimeStamp> rst = new List<xProjects_TimeStamp>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xProjects_TimeStamp
                    {
                        Id = dt.Rows[i]["Id"].ToString(),
                        Nm = dt.Rows[i]["Name"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xCountry_TimeStamp
        {
            [DataMember]
            public string Cid { get; set; }
            [DataMember]
            public string NM { get; set; }
            [DataMember]
            public string MS { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetCountry_TimeStampWise()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = objResponse.body[0].minDate;

            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where T.Milliseconds > '" + minDate + "'";
            }
            Query = "select top " + NoOfRec + " * from (select AreaId As Id,AreaName As [Description],SyncID,Active,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds] from MastArea where AreaType='COUNTRY') As T " + MQry + "";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xCountry_TimeStamp> rst = new List<xCountry_TimeStamp>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xCountry_TimeStamp
                    {
                        Cid = dt.Rows[i]["Id"].ToString(),
                        NM = dt.Rows[i]["Description"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xRegion_TimeStamp
        {
            [DataMember]
            public string Rid { get; set; }
            [DataMember]
            public string NM { get; set; }
            [DataMember]
            public string Cid { get; set; }
            [DataMember]
            public string MS { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetRegions_TimeStampWise()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                Query = "select * from (SELECT DISTINCT(VG.regionName) as Description,VG.regionId as Id,VG.CountryID, Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] FROM ViewGeo VG LEFT JOIN MastLink ML ON VG.areaId=ML.LinkCode Left Join MastArea Ma On Vg.regionId=Ma.AreaId WHERE ML.ECode='SA' AND vg.areaid=" + minDate + " ) As T ";
            }
            else
            {
                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                string MQry = "";
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                if (Convert.ToInt64(minDate) > 0)
                {
                    MQry = " where T.Milliseconds >'" + minDate + "'";
                }

                Query = "select top " + NoOfRec + " * from (SELECT DISTINCT(VG.regionName) as Description,VG.regionId as Id,VG.CountryID, Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] FROM ViewGeo VG LEFT JOIN MastLink ML ON VG.areaId=ML.LinkCode Left Join MastArea Ma On Vg.regionId=Ma.AreaId WHERE ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + " ) As T " + MQry + "";
            }
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xRegion_TimeStamp> rst = new List<xRegion_TimeStamp>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xRegion_TimeStamp
                    {
                        NM = dt.Rows[i]["Description"].ToString(),
                        Rid = dt.Rows[i]["Id"].ToString(),
                        Cid = dt.Rows[i]["CountryId"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xPartytype
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string Nm { get; set; }
            [DataMember]
            public string MS { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetPartyType()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = objResponse.body[0].minDate;

            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where T.Milliseconds>'" + minDate + "'";
            }

            Query = "select * from (select PartyTypeId As Id,PartyTypeName As Name,Createddate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds] from PartyType) As T " + MQry + "";
            //1970-01-01 05:30:00
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xPartytype> rst = new List<xPartytype>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xPartytype
                    {
                        Id = dt.Rows[i]["Id"].ToString(),
                        Nm = dt.Rows[i]["Name"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xArea
        {

            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string Nm { get; set; }
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string CID { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetArea_TimeStampWise()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                Query = "select Name, Id, Type_Id ,CityID,SyncId,Active,CreatedDate, Milliseconds from (SELECT DISTINCT  (VG.AreaName) As Name,VG.AreaId As Id,AreaType As [Type_Id],Vg.CityID,Ma.SyncId,Ma.Active,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds]  FROM MastLink ML INNER JOIN ViewGeo VG ON ML.LinkCode=VG.areaId Inner Join MastArea Ma On Vg.AreaId=Ma.AreaId WHERE vg.areaact=1 and ML.ECode='SA' AND vg.areaid=" + minDate + " ) as T order by CreatedDate ";
            }
            else
            {
                //DataAmt
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                string MQry = "";
                if (minDate == "-1")
                {

                }
                else if (Convert.ToInt64(minDate) > 0)
                {
                    MQry = " where  T.[Milliseconds] > '" + minDate + "'";
                }
                Query = "select top " + NoOfRec + " Name, Id, Type_Id ,CityID,SyncId,Active,CreatedDate, Milliseconds from (SELECT DISTINCT  (VG.AreaName) As Name,VG.AreaId As Id,AreaType As [Type_Id],Vg.CityID,Ma.SyncId,Ma.Active,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds]  FROM MastLink ML INNER JOIN ViewGeo VG ON ML.LinkCode=VG.areaId Inner Join MastArea Ma On Vg.AreaId=Ma.AreaId WHERE vg.areaact=1 and ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + " ) as T " + MQry + " order by CreatedDate ";

            }
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xArea> rst = new List<xArea>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xArea
                    {
                        Nm = dt.Rows[i]["Name"].ToString(),
                        Id = dt.Rows[i]["Id"].ToString(),
                        CID = dt.Rows[i]["CityID"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString(),
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));

        }

        [DataContract]
        public class xDistributor
        {
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string Pid { get; set; }
            [DataMember]
            public string Pnm { get; set; }
            [DataMember]
            public string Add1 { get; set; }
            [DataMember]
            public string Add2 { get; set; }
            [DataMember]
            public string Pin { get; set; }
            [DataMember]
            public string Aid { get; set; }
            [DataMember]
            public string Em { get; set; }
            [DataMember]
            public string Mo { get; set; }
            [DataMember]
            public string Indid { get; set; }
            [DataMember]
            public string Rmk { get; set; }
            [DataMember]
            public string Ctp { get; set; }
            [DataMember]
            public string CSTNo { get; set; }
            [DataMember]
            public string Vattin { get; set; }
            [DataMember]
            public string SrTx { get; set; }
            [DataMember]
            public string Panno { get; set; }
            [DataMember]
            public string Cid { get; set; }
            [DataMember]
            public string Crlmt { get; set; }
            [DataMember]
            public string OS { get; set; }
            [DataMember]
            public string Ph { get; set; }
            [DataMember]
            public string Opor { get; set; }
            [DataMember]
            public string Crd { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string SyncId { get; set; }
            [DataMember]
            public string OrderDate { get; set; }
            [DataMember]
            public string totalOrderAmount { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetDistributors_TimeStampWise()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());


            string MQry = "";

            string query = "select * from mastenviro  ";
            DataTable dtenviro = DbConnectionDAL.GetDataTable(CommandType.Text, query);

            string flagdistributor = dtenviro.Rows[0]["areawisedistributor"].ToString();

            if (flagdistributor == "Y")
            {
                if (minDate.Contains("A"))
                {
                    minDate = minDate.TrimStart('A');
                    Query = "SELECT Partyid,PartyName,Address1, Address2,Pin,Areaid,Email,Mobile,Indid,Potential,Active,blockreason,Blockdate,BlockBy,Remark,Partydist,Logincreated,Userid,SyncId,Lvl,Underid,Created_date, [Milliseconds],Created_User_id,DisplayName,beatid,Partytype,Contactperson,CSTNo, Vattin,Servicetax,Panno,Cityid,CreditLimit,Outstanding,Phone,OpenOrder,Creditdays,Android_Id,SMID, DistributorName2, Fax,telex,DOA,DOB,CityName from (SELECT mp.Partyid,mp.PartyName,Mp.Address1,isnull(mp.Address2, '') as Address2,isnull(mp.Pin, '') as Pin,mp.Areaid,mp.Email,mp.Mobile,Mp.Indid,mp.Potential,mp.Active,mp.blockreason,mp.Blockdate,mp.BlockBy,isnull(Mp.Remark,'') as Remark,mp.Partydist,mp.Logincreated,mp.Userid,mp.SyncId,mp.Lvl,mp.Underid,mp.Created_date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(mp.Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(mp.Created_date AS date), mp.Created_date) AS [Milliseconds],mp.Created_User_id,mp.DisplayName,mp.beatid,mp.Partytype,isnull(mp.Contactperson,'' ) as Contactperson,isnull(mp.CSTNo,'') as CSTNo,isnull(mp.Vattin,'') as Vattin, isnull(mp.Servicetax,'') as Servicetax,isnull(mp.Panno,'') as Panno,mp.Cityid,mp.CreditLimit,mp.Outstanding,mp.Phone,mp.OpenOrder,mp.Creditdays,mp.Android_Id,mp.SMID,isnull(mp.DistributorName2, '') as DistributorName2,isnull(mp.Fax,'') as Fax,isnull(mp.telex,'') as telex,mp.DOA,mp.DOB,ma.AreaName as CityName FROM MastParty mp left join MastArea ma on mp.CityId=ma.AreaID  WHERE  mp.areaid IN (SELECT LinkCode FROM MastLink WHERE ECode='SA' AND PrimCode=" + ConPer_Id + ") AND mp.partydist=1 and mp.Active=1 and ma.areatype='City' ) As T order by Created_date";
                }
                else
                {
                    double ticks = double.Parse(minDate);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    if (Convert.ToInt64(minDate) > 0)
                    {
                        MQry = " where  T.[Milliseconds] > '" + minDate + "'";
                    }

                    Query = "SELECT top " + NoOfRec + " Partyid,PartyName,Address1, Address2,Pin,Areaid,Email,Mobile,Indid,Potential,Active,blockreason,Blockdate,BlockBy,Remark,Partydist,Logincreated,Userid,SyncId,Lvl,Underid,Created_date, [Milliseconds],Created_User_id,DisplayName,beatid,Partytype,Contactperson,CSTNo, Vattin,Servicetax,Panno,Cityid,CreditLimit,Outstanding,Phone,OpenOrder,Creditdays,Android_Id,SMID, DistributorName2, Fax,telex,DOA,DOB,CityName from (SELECT mp.Partyid,mp.PartyName,Mp.Address1,isnull(mp.Address2, '') as Address2,isnull(mp.Pin, '') as Pin,mp.Areaid,mp.Email,mp.Mobile,Mp.Indid,mp.Potential,mp.Active,mp.blockreason,mp.Blockdate,mp.BlockBy,isnull(Mp.Remark,'') as Remark,mp.Partydist,mp.Logincreated,mp.Userid,mp.SyncId,mp.Lvl,mp.Underid,mp.Created_date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(mp.Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(mp.Created_date AS date), mp.Created_date) AS [Milliseconds],mp.Created_User_id,mp.DisplayName,mp.beatid,mp.Partytype,isnull(mp.Contactperson,'' ) as Contactperson,isnull(mp.CSTNo,'') as CSTNo,isnull(mp.Vattin,'') as Vattin, isnull(mp.Servicetax,'') as Servicetax,isnull(mp.Panno,'') as Panno,mp.Cityid,mp.CreditLimit,mp.Outstanding,mp.Phone,mp.OpenOrder,mp.Creditdays,mp.Android_Id,mp.SMID,isnull(mp.DistributorName2, '') as DistributorName2,isnull(mp.Fax,'') as Fax,isnull(mp.telex,'') as telex,mp.DOA,mp.DOB,ma.AreaName as CityName FROM MastParty mp left join MastArea ma on mp.CityId=ma.AreaID  WHERE  mp.areaid IN (SELECT LinkCode FROM MastLink WHERE ECode='SA' AND PrimCode=" + ConPer_Id + ") AND mp.partydist=1 and mp.Active=1 and ma.areatype='City' ) As T " + MQry + " order by Created_date";
                }
            }
            else
            {
                if (minDate.Contains("A"))
                {
                    minDate = minDate.TrimStart('A');
                    Query = "SELECT * from (SELECT mp.Partyid,mp.PartyName,Mp.Address1,isnull(mp.Address2, '') as Address2,isnull(mp.Pin, '') as Pin,mp.Areaid,mp.Email,mp.Mobile,Mp.Indid,mp.Potential,mp.Active,mp.blockreason,mp.Blockdate,mp.BlockBy,isnull(Mp.Remark,'') as Remark,mp.Partydist,mp.Logincreated,mp.Userid,mp.SyncId,mp.Lvl,mp.Underid,mp.Created_date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(mp.Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(mp.Created_date AS date), mp.Created_date) AS [Milliseconds],mp.Created_User_id,mp.DisplayName,mp.beatid,mp.Partytype,isnull(mp.Contactperson,'' ) as Contactperson,isnull(mp.CSTNo,'') as CSTNo,isnull(mp.Vattin,'') as Vattin, isnull(mp.Servicetax,'') as Servicetax,isnull(mp.Panno,'') as Panno,mp.Cityid,mp.CreditLimit,mp.Outstanding,mp.Phone,mp.OpenOrder,mp.Creditdays,mp.Android_Id,mp.SMID,isnull(mp.DistributorName2, '') as DistributorName2,isnull(mp.Fax,'') as Fax,isnull(mp.telex,'') as telex,mp.DOA,mp.DOB,ma.AreaName as CityName FROM MastParty mp left join MastArea ma on mp.CityId=ma.AreaID  WHERE mp.CityId IN (SELECT DISTINCT UnderId FROM MastArea WHERE AreaType='Area' AND  AreaId IN (" + minDate + ")) AND mp.partydist=1 and mp.Active=1 and ma.areatype='City'  and smid in ((select maingrp from mastsalesrepgrp where smid in (" + ConPer_Id + ") union SELECT smid FROM mastsalesrepgrp WHERE  maingrp in (" + ConPer_Id + ")))) As T   order by T.Created_date ";
                }
                else
                {
                    double ticks = double.Parse(minDate);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    if (Convert.ToInt64(minDate) > 0)
                    {
                        MQry = " where  T.[Milliseconds] > '" + minDate + "'";
                    }
                    //Query = "SELECT top " + NoOfRec + " * from (SELECT mp.Partyid,mp.PartyName,Mp.Address1,isnull(mp.Address2, '') as Address2,isnull(mp.Pin, '') as Pin,mp.Areaid,mp.Email,mp.Mobile,Mp.Indid,mp.Potential,mp.Active,mp.blockreason,mp.Blockdate,mp.BlockBy,isnull(Mp.Remark,'') as Remark,mp.Partydist,mp.Logincreated,mp.Userid,mp.SyncId,mp.Lvl,mp.Underid,mp.Created_date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(mp.Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(mp.Created_date AS date), mp.Created_date) AS [Milliseconds],mp.Created_User_id,mp.DisplayName,mp.beatid,mp.Partytype,isnull(mp.Contactperson,'' ) as Contactperson,isnull(mp.CSTNo,'') as CSTNo,isnull(mp.Vattin,'') as Vattin, isnull(mp.Servicetax,'') as Servicetax,isnull(mp.Panno,'') as Panno,mp.Cityid,mp.CreditLimit,mp.Outstanding,mp.Phone,mp.OpenOrder,mp.Creditdays,mp.Android_Id,mp.SMID,isnull(mp.DistributorName2, '') as DistributorName2,isnull(mp.Fax,'') as Fax,isnull(mp.telex,'') as telex,mp.DOA,mp.DOB,ma.AreaName as CityName FROM MastParty mp left join MastArea ma on mp.CityId=ma.AreaID  WHERE mp.CityId IN (SELECT DISTINCT UnderId FROM MastArea WHERE AreaType='Area' AND  AreaId IN (SELECT LinkCode FROM MastLink WHERE ECode='SA' AND PrimCode=" + ConPer_Id + ")) AND mp.partydist=1 and mp.Active=1 and ma.areatype='City'  and smid in ((select maingrp from mastsalesrepgrp where smid in (" + ConPer_Id + ") union SELECT smid FROM mastsalesrepgrp WHERE  maingrp in (" + ConPer_Id + ")))) As T  " + MQry + " order by T.Created_date ";
                    Query = "SELECT top " + NoOfRec + " * from (SELECT mp.Partyid,mp.PartyName,Mp.Address1,isnull(mp.Address2, '') as Address2,isnull(mp.Pin, '') as Pin,mp.Areaid,mp.Email,mp.Mobile,Mp.Indid,mp.Potential,mp.Active,mp.blockreason,mp.Blockdate,mp.BlockBy,isnull(Mp.Remark,'') as Remark,mp.Partydist,mp.Logincreated,mp.Userid,mp.SyncId,mp.Lvl,mp.Underid,mp.Created_date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(mp.Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(mp.Created_date AS date), mp.Created_date) AS [Milliseconds],mp.Created_User_id,mp.DisplayName,mp.beatid,mp.Partytype,isnull(mp.Contactperson,'' ) as Contactperson,isnull(mp.CSTNo,'') as CSTNo,isnull(mp.Vattin,'') as Vattin, isnull(mp.Servicetax,'') as Servicetax,isnull(mp.Panno,'') as Panno,mp.Cityid,mp.CreditLimit,mp.Outstanding,mp.Phone,mp.OpenOrder,mp.Creditdays,mp.Android_Id,mp.SMID,isnull(mp.DistributorName2, '') as DistributorName2,isnull(mp.Fax,'') as Fax,isnull(mp.telex,'') as telex,mp.DOA,mp.DOB,'' as CityName FROM MastParty mp WHERE mp.PartyDist=1 AND mp.Active=1 AND mp.smid in (select smid from mastsalesrepgrp  where maingrp=" + ConPer_Id + ") ) As T  " + MQry + " order by T.Created_date ";
                }
            }

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xDistributor> rst = new List<xDistributor>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xDistributor
                    {
                        Pid = dt.Rows[i]["PartyId"].ToString(),
                        Pnm = dt.Rows[i]["PartyName"].ToString(),
                        Add1 = dt.Rows[i]["Address1"].ToString(),
                        Add2 = dt.Rows[i]["Address2"].ToString(),
                        Pin = dt.Rows[i]["Pin"].ToString(),
                        Aid = dt.Rows[i]["AreaId"].ToString(),
                        Em = dt.Rows[i]["Email"].ToString(),
                        Mo = dt.Rows[i]["Mobile"].ToString(),
                        Indid = dt.Rows[i]["Indid"].ToString(),
                        Rmk = dt.Rows[i]["Remark"].ToString(),
                        Ctp = dt.Rows[i]["ContactPerson"].ToString(),
                        CSTNo = dt.Rows[i]["CSTNo"].ToString(),
                        Vattin = dt.Rows[i]["Vattin"].ToString(),
                        SrTx = dt.Rows[i]["ServiceTax"].ToString(),
                        Panno = dt.Rows[i]["Panno"].ToString(),
                        Cid = dt.Rows[i]["CityId"].ToString(),
                        Crlmt = dt.Rows[i]["CreditLimit"].ToString(),
                        OS = dt.Rows[i]["outstanding"].ToString(),
                        Ph = dt.Rows[i]["Phone"].ToString(),
                        Opor = dt.Rows[i]["OpenOrder"].ToString(),
                        Crd = dt.Rows[i]["Creditdays"].ToString(),
                        SMID = dt.Rows[i]["SMID"].ToString(),
                        SyncId = dt.Rows[i]["SyncId"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString(),

                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xScheme_timeStamp
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string Nm { get; set; }
            [DataMember]
            public string MS { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetScheme_TimeStampWise()
        {
            string MQry = "";

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = objResponse.body[0].minDate;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where T.Milliseconds >'" + minDate + "'";
            }
            Query = "select top " + NoOfRec + " * from (SELECT Id,Name,Active,Syncid,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds] FROM MastScheme ) AS T " + MQry + " order by T.CreatedDate";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xScheme_timeStamp> rst = new List<xScheme_timeStamp>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xScheme_timeStamp
                    {
                        Id = dt.Rows[i]["Id"].ToString(),
                        Nm = dt.Rows[i]["Name"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xBeats
        {
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string BID { get; set; }
            [DataMember]
            public string NM { get; set; }
            [DataMember]
            public string AId { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetBeats_TimeStampWise()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;


            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                Query = "SELECT DISTINCT  Description, Id,AreaId,SyncId,Active,CreatedDate,[Milliseconds] from (SELECT DISTINCT (VG.BeatName) As Description,VG.BeatId As Id,Vg.AreaId,Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] FROM MastLink ML Left JOIN ViewGeo VG ON ML.LinkCode=VG.areaId Left Join MastArea Ma On Vg.BeatId=Ma.AreaId  WHERE vg.beat=1 and ML.ECode='SA' and Vg.AreaId=" + Convert.ToInt32(minDate) + " ) as T  order by Createddate";
            }
            else
            {
                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");

                string MQry = "";
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                if (Convert.ToInt64(minDate) > 0)
                {
                    MQry = " where  T.[Milliseconds] > '" + minDate + "'";
                }
                Query = "SELECT DISTINCT top " + NoOfRec + " Description, Id,AreaId,SyncId,Active,CreatedDate,[Milliseconds] from (SELECT DISTINCT (VG.BeatName) As Description,VG.BeatId As Id,Vg.AreaId,Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] FROM MastLink ML Left JOIN ViewGeo VG ON ML.LinkCode=VG.areaId Left Join MastArea Ma On Vg.BeatId=Ma.AreaId WHERE vg.beat=1 and ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + ") as T " + MQry + " order by Createddate";
            }

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xBeats> rst = new List<xBeats>();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                rst.Add(
                    new xBeats
                    {
                        NM = dt.Rows[i]["Description"].ToString(),
                        BID = dt.Rows[i]["Id"].ToString(),
                        AId = dt.Rows[i]["AreaId"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString(),
                    }
                );
            }
            //return new JavaScriptSerializer().Serialize(rst);
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xCities
        {
            [DataMember]
            public string SId { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string NM { get; set; }
            [DataMember]
            public string Cid { get; set; }
            [DataMember]
            public string Did { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetCities_TimeStampWise()
        {

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;


            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                Query = "SELECT DISTINCT  Description, Id,Createddate,[Milliseconds],stateid,DistrictID FROM (SELECT DISTINCT (VG.cityname) as Description,VG.cityid As Id,vg.stateid,Vg.DistrictID,MA.Createddate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] FROM  ViewGeo VG Left JOIN MastLink ML ON VG.areaId=ML.LinkCode Left Join MastArea Ma On Vg.CityId=Ma.AreaId WHERE vg.cityact=1 and ML.ECode='SA' and vg.areaid=" + minDate + " ) As T  order by Createddate ";
            }
            else
            {
                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                string MQry = "";
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                if (Convert.ToInt64(minDate) > 0)
                {
                    MQry = " where  T.[Milliseconds] > '" + minDate + "'";
                }
                Query = "SELECT DISTINCT  top " + NoOfRec + " Description, Id,stateid,DistrictID,SyncId,Active,Createddate,[Milliseconds] FROM (SELECT DISTINCT (VG.CityName) as Description,VG.CityId As Id,vg.stateid,Vg.DistrictID,Ma.SyncId,Ma.Active,MA.Createddate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] FROM  ViewGeo VG Left JOIN MastLink ML ON VG.areaId=ML.LinkCode Left Join MastArea Ma On Vg.CityId=Ma.AreaId WHERE vg.cityact=1 and ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + ") As T " + MQry + " order by Createddate ";
            }
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xCities> rst = new List<xCities>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xCities
                    {
                        NM = dt.Rows[i]["Description"].ToString(),
                        Cid = dt.Rows[i]["Id"].ToString(),
                        Did = dt.Rows[i]["DistrictID"].ToString(),
                        SId = dt.Rows[i]["stateid"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));

        }

        public class xFaildVisitRemark
        {
            [DataMember]
            public string ID { get; set; }
            [DataMember]
            public string FvName { get; set; }
            [DataMember]
            public string MS { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetFaildVisitRemark_TimeStampWise()
        {

            string MQry = "";

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = objResponse.body[0].minDate;


            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where T.Milliseconds >'" + minDate + "'";
            }

            Query = "Select top " + NoOfRec + " * from ( select FvId As Id,FvName,Active,SyncID,Createddate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds]  from MastFailedVisitRemark where active=1 ) AS T " + MQry + "";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xFaildVisitRemark> rst = new List<xFaildVisitRemark>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xFaildVisitRemark
                    {
                        ID = dt.Rows[i]["ID"].ToString(),
                        FvName = dt.Rows[i]["FvName"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetParties_TimeStampWiseLatLongAdd()
        {
            string path = "";

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;


            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();


            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                Query = "select  *,msr.smname as cb from(SELECT  isnull(android_id,partyid) as androidid,Created_User_Id,PartyId As Id,AreaId As Area_Id,BeatId As Beat_Id,PartyType As PartyType,PartyName As Name,IndId As Industry_Id,p.UnderId as DistId,phone,PartyType As Type_Id,ContactPerson ,isnull(Address1,'') as Add1,isnull(Address2,'') as Add2,Pin,(select UnderId from MastArea where AreaId=p.AreaId) as CtyCodeP1,isnull(Mobile,'') as Mobile1,isnull(Email,'') as Email1,isnull(Potential,0) as Potential,isnull(Active,'') as IsBlocked,isnull(CSTNo,'') as CST_No,isnull(VatTin,'') as VatTin_No,isnull(ServiceTax,'') as ServiceTaxReg_No,Created_Date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS [Milliseconds],isnull(BlockReason,'') as BlockedReason,isnull(Convert(varchar,[BlockDate],103),'') as Block_Date,isnull(BlockBy,'') as BlockedBy,Active,isnull(Remark,'') as Remark,isnull(PANNo,'') as PANNo,isnull(Active,'') as Block,creditLimit,outstanding,replace(convert(NVARCHAR, DOA, 106), ' ', '/') AS DOA,replace(convert(NVARCHAR, DOB, 106), ' ', '/') AS DOB,imgurl,isnull(GSTINNo,'') as GSTINNo,SyncId from [MastParty]p where PartyDist=0 and Active=1 and AreaId in (" + minDate + ")) As T  left join mastsalesrep msr on T.Created_User_Id =msr.userid order by T.Created_date ";
            }
            else
            {
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                string MQry = "";


                if (Convert.ToInt64(minDate) > 0)
                {
                    // MQry = " and Created_date >='" + minDate1 + "'";
                    MQry = " where  T.[Milliseconds] >'" + minDate + "'";
                }

                Query = "select top " + NoOfRec + " *,msr.smname as cb from(SELECT isnull(android_id,partyid) as androidid,Created_User_Id,PartyId As Id,AreaId As Area_Id,BeatId As Beat_Id,PartyType As PartyType,PartyName As Name,IndId As Industry_Id,p.UnderId as DistId,phone,PartyType As Type_Id,ContactPerson ,isnull(Address1,'') as Add1,isnull(Address2,'') as Add2,Pin,(select UnderId from MastArea where AreaId=p.AreaId) as CtyCodeP1,isnull(Mobile,'') as Mobile1,isnull(Email,'') as Email1,isnull(Potential,0) as Potential,isnull(Active,'') as IsBlocked,isnull(CSTNo,'') as CST_No,isnull(VatTin,'') as VatTin_No,isnull(ServiceTax,'') as ServiceTaxReg_No,Created_Date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS [Milliseconds],isnull(BlockReason,'') as BlockedReason,isnull(Convert(varchar,[BlockDate],103),'') as Block_Date,isnull(BlockBy,'') as BlockedBy,Active,isnull(Remark,'') as Remark,isnull(PANNo,'') as PANNo,isnull(Active,'') as Block,creditLimit,outstanding,replace(convert(NVARCHAR, DOA, 106), ' ', '/') AS DOA,replace(convert(NVARCHAR, DOB, 106), ' ', '/') AS DOB,imgurl,isnull(GSTINNo,'') as GSTINNo,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],SyncId from [MastParty]p where PartyDist=0 and Active=1 and AreaId in (select LinkCode from MastLink where PrimCode =" + ConPer_Id + " and Ecode='SA')) As T left join mastsalesrep msr on T.Created_User_Id =msr.userid  " + MQry + "  order by T.Created_date ";
            }

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xPartiesNewLatLong> rst = new List<xPartiesNewLatLong>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                string imgurl = "";
                if (dt.Rows[i]["imgurl"].ToString() != "")
                {
                    imgurl = "http://" + host + (dt.Rows[i]["imgurl"].ToString()).Replace(@"~", string.Empty);
                }
                rst.Add(
                    new xPartiesNewLatLong
                    {
                        ID = dt.Rows[i]["Id"].ToString(),
                        Ad = dt.Rows[i]["Area_Id"].ToString(),
                        Bd = dt.Rows[i]["Beat_Id"].ToString(),
                        PCd = dt.Rows[i]["PartyType"].ToString(),
                        Nm = dt.Rows[i]["Name"].ToString(),
                        Cp = dt.Rows[i]["ContactPerson"].ToString(),
                        Ind = dt.Rows[i]["Industry_Id"].ToString(),
                        DsId = dt.Rows[i]["DistId"].ToString(),
                        Ad1 = dt.Rows[i]["Add1"].ToString(),
                        Ad2 = dt.Rows[i]["Add2"].ToString(),
                        Pi = dt.Rows[i]["Pin"].ToString(),
                        Ct = dt.Rows[i]["CtyCodeP1"].ToString(),
                        M = dt.Rows[i]["Mobile1"].ToString(),
                        E = dt.Rows[i]["Email1"].ToString(),
                        Pl = dt.Rows[i]["Potential"].ToString(),
                        blk = dt.Rows[i]["IsBlocked"].ToString(),
                        CST = dt.Rows[i]["GSTINNo"].ToString(),
                        VTn = dt.Rows[i]["VatTin_No"].ToString(),
                        STNo = dt.Rows[i]["ServiceTaxReg_No"].ToString(),
                        Brzn = dt.Rows[i]["BlockedReason"].ToString(),
                        Bdt = dt.Rows[i]["Block_Date"].ToString(),
                        Bby = dt.Rows[i]["BlockedBy"].ToString(),
                        At = dt.Rows[i]["Active"].ToString(),
                        R = dt.Rows[i]["Remark"].ToString(),
                        PAN = dt.Rows[i]["PANNo"].ToString(),
                        phoneNo = dt.Rows[i]["phone"].ToString(),
                        DA = dt.Rows[i]["DOA"].ToString(),
                        DB = dt.Rows[i]["DOB"].ToString(),
                        CreatedBy = dt.Rows[i]["cb"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString(),
                        androidid = dt.Rows[i]["androidid"].ToString(),
                        Longitude = dt.Rows[i]["longitude"].ToString(),
                        Latitude = dt.Rows[i]["latitude"].ToString(),
                        LatlngTime = dt.Rows[i]["lat_long_datetime"].ToString(),
                        Creditlimit = dt.Rows[i]["Creditlimit"].ToString(),
                        Outstanding = dt.Rows[i]["Outstanding"].ToString(),
                        party_image = imgurl,
                        sync_id = dt.Rows[i]["SyncId"].ToString()
                    }
                );
            }

            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xIndustry
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string Nm { get; set; }
            [DataMember]
            public string MS { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetIndustry_TimeStampWise()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);


            string minDate = objResponse.body[0].minDate;


            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");

            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where T.Milliseconds>'" + minDate + "'";
            }
            Query = "select top " + NoOfRec + " * from (SELECT IndId as [Id],replace(replace(replace([IndName],'&','And'),'>',' '),'<',' ') as [Description],'' as [IndustryType],SyncId,Active,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds]  FROM MastIndustry where Active=1) As T " + MQry + " order by T.Createddate ";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xIndustry> rst = new List<xIndustry>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xIndustry
                    {
                        Id = dt.Rows[i]["Id"].ToString(),
                        Nm = dt.Rows[i]["Description"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xProductsList
        {
            [DataMember]
            public string itemid { get; set; }
            [DataMember]
            public string itemname { get; set; }
            [DataMember]
            public string Unit { get; set; }
            [DataMember]
            public string StdPk { get; set; }
            [DataMember]
            public string weight { get; set; }
            [DataMember]
            public string MRP { get; set; }
            [DataMember]
            public string productgroupid { get; set; }
            [DataMember]
            public string productgroupname { get; set; }
            [DataMember]
            public string SegmentId { get; set; }
            [DataMember]
            public string segmentname { get; set; }
            [DataMember]
            public string milisecond { get; set; }
            [DataMember]
            public string divisionCode { get; set; }
            [DataMember]
            public string DP { get; set; }
            [DataMember]
            public string GST { get; set; }
            [DataMember]
            public string Discount { get; set; }
            [DataMember]
            public string Active { get; set; }
            [DataMember]
            public string DistPrice { get; set; }
            [DataMember]
            public string RP { get; set; }
            [DataMember]
            public string Primaryunit { get; set; }
            [DataMember]
            public string Secondaryunit { get; set; }
            [DataMember]
            public string Primaryunitfactor { get; set; }
            [DataMember]
            public string Seconadyunitfactor { get; set; }
            [DataMember]
            public string MOQ { get; set; }
            [DataMember]
            public string CGSTPer { get; set; }
            [DataMember]
            public string SGSTPer { get; set; }
            [DataMember]
            public string IGSTPer { get; set; }
            [DataMember]
            public string Promoted { get; set; }




        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSAppApp_GetProducts()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = objResponse.body[0].minDate;


            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");

            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            { MQry = " where  T.[Milliseconds] >='" + minDate + "'"; }

            Query = "Select  top " + NoOfRec + "  ItemId,replace(replace(replace([ItemName],'&','And'),'>',' '),'<',' ') as ItemName,Unit,Active,StdPack,MRP,PGroupId,PGroupName,SegmentId,SegmentName,divisioncode,CreatedDate, [Milliseconds],Dp,GST,discount,RP,CentralTaxPer,StateTaxPer,IntegratedTaxPer,PrimaryUnit,SecondaryUnit,PrimaryUnitfactor,SecondaryUnitfactor,MOQ,Promoted From (SELECT mi.ItemId,replace(replace(replace(mi.[ItemName],'&','And'),'>',' '),'<',' ') as ItemName,mi.Unit, mi.Active,mi.StdPack,mi.MRP,mi1.itemid AS PGroupId,mi1.itemname AS PGroupName,ms.id AS SegmentId,ms.name AS SegmentName,mi.divisioncode,mi.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(mi.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(mi.Createddate AS date), mi.Createddate) AS[Milliseconds],mi.DP,mi.gst,mi.discount,mi.RP,mi.CentralTaxPer, mi.StateTaxPer, mi.IntegratedTaxPer, mi.PrimaryUnit, mi.SecondaryUnit, mi.PrimaryUnitfactor, mi.SecondaryUnitfactor, mi.MOQ, mi.Promoted from MastItem mi LEFT JOIN MastItem mi1 on mi.underid=mi1.itemid LEFT JOIN MastItemSegment ms ON ms.id=mi.SegmentId where mi.ItemType='ITEM'  and mi.itemname not like '%*') As T  " + MQry + "  order by T.Createddate ";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xProductsList> rst = new List<xProductsList>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xProductsList
                    {
                        itemid = dt.Rows[i]["ItemId"].ToString(),
                        itemname = dt.Rows[i]["ItemName"].ToString(),
                        Unit = dt.Rows[i]["Unit"].ToString(),
                        StdPk = dt.Rows[i]["StdPack"].ToString(),
                        MRP = dt.Rows[i]["MRP"].ToString(),
                        productgroupid = dt.Rows[i]["PGroupId"].ToString(),
                        productgroupname = dt.Rows[i]["PGroupName"].ToString(),
                        SegmentId = dt.Rows[i]["SegmentId"].ToString(),
                        segmentname = dt.Rows[i]["SegmentName"].ToString(),
                        milisecond = dt.Rows[i]["Milliseconds"].ToString(),
                        divisionCode = dt.Rows[i]["divisioncode"].ToString(),
                        DP = dt.Rows[i]["DP"].ToString(),
                        Discount = dt.Rows[i]["discount"].ToString(),
                        GST = dt.Rows[i]["GST"].ToString(),
                        Active = dt.Rows[i]["Active"].ToString(),
                        RP = dt.Rows[i]["RP"].ToString(),
                        Primaryunit = dt.Rows[i]["PrimaryUnit"].ToString(),
                        Secondaryunit = dt.Rows[i]["SecondaryUnit"].ToString(),
                        Primaryunitfactor = dt.Rows[i]["PrimaryUnitfactor"].ToString(),
                        Seconadyunitfactor = dt.Rows[i]["SecondaryUnitfactor"].ToString(),
                        MOQ = dt.Rows[i]["MOQ"].ToString(),
                        Promoted = dt.Rows[i]["Promoted"].ToString(),
                        CGSTPer = dt.Rows[i]["CentralTaxPer"].ToString(),
                        SGSTPer = dt.Rows[i]["StateTaxPer"].ToString(),
                        IGSTPer = dt.Rows[i]["IntegratedTaxPer"].ToString(),
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class productlist
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string WefDate { get; set; }
            [DataMember]
            public string MRP { get; set; }
            [DataMember]
            public string DP { get; set; }
            [DataMember]
            public string RP { get; set; }
            [DataMember]
            public string SyncId { get; set; }
            [DataMember]
            public string ProdGrpId { get; set; }
            [DataMember]
            public string ProdId { get; set; }
            [DataMember]
            public string Createddate { get; set; }
            [DataMember]
            public string MS { get; set; }
        }

        [DataContract]
        public class Productimages
        {
            [DataMember]
            public string imgurl { get; set; }

            [DataMember]
            public string Thumbnailurl { get; set; }
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string ItemId { get; set; }
            [DataMember]
            public string milisecond { get; set; }

        }
        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void Getproductimages()
        //{
        //    var httpRequest = HttpContext.Current.Request;
        //    var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
        //    DataTable DTadmin = new DataTable();
        //    bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //    var bodyText = bodyStream.ReadToEnd();
        //    //     string items = httpRequest.Params["orderdetail"].ToString();
        //    var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

        //    string minDate = objResponse.body[0].minDate;

        //    string MQry = "";
        //    string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
        //    if (Convert.ToInt64(minDate) > 0)
        //    { MQry = " where  T.[Milliseconds] >'" + minDate + "'"; }
        //    string str = "Select * From(Select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS[Milliseconds] from ItemMastImage) As T " + MQry + "";
        //    DataTable ItemDt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
        //    List<Productimages> rst1 = new List<Productimages>();
        //    if (ItemDt.Rows.Count > 0)
        //    {

        //        for (int j = 0; j < ItemDt.Rows.Count; j++)
        //        {
        //            rst1.Add(new Productimages
        //            {
        //                imgurl = "http://" + host + (ItemDt.Rows[j]["ImgUrl"].ToString()).Replace(@"~", string.Empty),
        //                Thumbnailurl = "http://" + host + (ItemDt.Rows[j]["ThumbnailImgUrl"].ToString()).Replace(@"~", string.Empty),
        //                Id = ItemDt.Rows[j]["Id"].ToString(),
        //                ItemId = ItemDt.Rows[j]["Itemid"].ToString(),
        //                milisecond = ItemDt.Rows[j]["Milliseconds"].ToString()
        //            });
        //        }

        //    }
        //    Context.Response.Write(JsonConvert.SerializeObject(rst1));

        //}

        // Optimization 17/04/2021

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Getproductimages()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = objResponse.body[0].minDate;

            string MQry = "";
            string host = DbConnectionDAL.GetStringScalarVal("select 'http://'+compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            { MQry = " where  T.[Milliseconds] >'" + minDate + "'"; }
            //string str = "Select * From(Select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS[Milliseconds] from ItemMastImage) As T " + MQry + "";

            string str = "Select '" + host + "'+ replace(isnull(ImgUrl,''),'~','') as imgurl,'" + host + "'+ replace(isnull(ThumbnailImgUrl,''),'~','') as Thumbnailurl,Id,ItemId,Milliseconds as milisecond  From(Select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS[Milliseconds] from ItemMastImage) As T " + MQry + "";

            DataTable ItemDt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            Context.Response.Write(JsonConvert.SerializeObject(ItemDt));
            ItemDt.Dispose();
            bodyStream.Dispose();
            DTadmin.Dispose();

            //Commented By AKANKSHA BAIS on 09-04-2021 for Optimization
            //List<Productimages> rst1 = new List<Productimages>();
            //if (ItemDt.Rows.Count > 0)
            //{

            //    for (int j = 0; j < ItemDt.Rows.Count; j++)
            //    {
            //        rst1.Add(new Productimages
            //        {
            //            imgurl = "http://" + host + (ItemDt.Rows[j]["ImgUrl"].ToString()).Replace(@"~", string.Empty),
            //            Thumbnailurl = "http://" + host + (ItemDt.Rows[j]["ThumbnailImgUrl"].ToString()).Replace(@"~", string.Empty),
            //            Id = ItemDt.Rows[j]["Id"].ToString(),
            //            ItemId = ItemDt.Rows[j]["Itemid"].ToString(),
            //            milisecond = ItemDt.Rows[j]["Milliseconds"].ToString()
            //        });
            //    }

            //}
            //Context.Response.Write(JsonConvert.SerializeObject(rst1));


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Getdistributorwisepricelist()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            DataTable Dt = new DataTable();
            string SMID = objResponse.body[0].SMID;
            string minDate = objResponse.body[0].minDate;
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            { MQry = " where  T.[Milliseconds] >'" + minDate + "'"; }
            string str = "Select * from(SELECT Isnull(MP.PartyName,'') AS DistributorName,Isnull(MI.ItemName,'') AS itemname,Isnull(MID.DistPrice,0) AS Distprice,MID.DistId AS distid,MID.ItemId AS ItemId,MID.ApplicableDate AS ApplicableDate,MID.ProdGrpId AS Productgroupid,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(MID.Createdate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(MID.Createdate AS date), MID.Createdate) AS [Milliseconds] FROM MastItemPriceDistWise MID LEFT JOIN MastParty MP ON MP.PartyId=MID.DistId LEFT JOIN MastItem MI ON MI.ItemId=MID.ItemId WHERE DistId in(SELECT partyid FROM MastParty WHERE Smid=" + SMID + " AND Isnull(PartyDist,0)=1)) As T " + MQry + " ";

            Dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            Context.Response.Write(JsonConvert.SerializeObject(Dt));
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetPriceList()
        {

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string minDate = objResponse.body[0].minDate;

            string MQry = ""; Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where T.Milliseconds >'" + minDate + "'";
            }
            Query = "select top " + NoOfRec + " * from  (select p.id, p.WefDate,p.MRP,P.DP,P.RP,isnull(p.SyncId, '') as SyncId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(p.CreatedDate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(p.CreatedDate AS date), p.CreatedDate) AS [Milliseconds],UnderId as ProdGrpId,i.itemId as prodId from Pricelist p left join mastitem i on i.itemId=p.itemId where wefDate <='" + BusinessLayer.Settings.GetUTCTime().ToString("dd/MMM/yyyy") + "' and IsEffected=1  ) as T " + MQry + " order by T.wefdate desc";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<productlist> rst = new List<productlist>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new productlist
                    {
                        Id = dt.Rows[i]["Id"].ToString(),
                        WefDate = dt.Rows[i]["WefDate"].ToString(),
                        ProdGrpId = dt.Rows[i]["ProdGrpId"].ToString(),
                        ProdId = dt.Rows[i]["prodId"].ToString(),
                        SyncId = dt.Rows[i]["SyncId"].ToString(),
                        MRP = dt.Rows[i]["MRP"].ToString(),
                        DP = dt.Rows[i]["DP"].ToString(),
                        RP = dt.Rows[i]["RP"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()

                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xProductClass
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string NM { get; set; }
            [DataMember]
            public string MS { get; set; }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetProductClass()
        {

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string minDate = objResponse.body[0].minDate;


            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where T.Milliseconds >'" + minDate + "'";
            }

            Query = "select top " + NoOfRec + " * from (SELECT  [Id],Name as[Description],SyncCode,Active AS Active,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(CreatedDate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(CreatedDate AS date), CreatedDate) AS [Milliseconds] FROM MastItemClass where Active=1 )  As T " + MQry + "";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xProductClass> rst = new List<xProductClass>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xProductClass
                    {
                        NM = dt.Rows[i]["Description"].ToString(),
                        Id = dt.Rows[i]["Id"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xSegment
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string Nm { get; set; }
            [DataMember]
            public string MS { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetSegment()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string minDate = objResponse.body[0].minDate;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " Where T.Milliseconds >'" + minDate + "'";
            }
            //Query = "SELECT  [Id],Name as[Description],SyncCode,Active,createddate FROM MastItemSegment  " + MQry + "";
            //  Query = "SELECT  [Id],Name as[Description],SyncCode,Active,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds] FROM MastItemSegment where Active=1  " + MQry + "";

            Query = "select top " + NoOfRec + " * from (SELECT  [Id],Name as[Description],SyncCode,Active,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds] FROM MastItemSegment where Active=1 ) As T " + MQry + " order by Milliseconds asc ";
            //1970-01-01 05:30:00
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xSegment> rst = new List<xSegment>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xSegment
                    {
                        Nm = dt.Rows[i]["Description"].ToString(),
                        Id = dt.Rows[i]["Id"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xProductGroupDetails
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string Nm { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string segmentid { get; set; }
            [DataMember]
            public string segmentname { get; set; }
            [DataMember]
            public string divisionCode { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Mast_ProductGroup()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string minDate = objResponse.body[0].minDate;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where T.Milliseconds >'" + minDate + "'";
            }
            //Query = "select top " + NoOfRec + " * from (SELECT ItemId as [Id],Itemname as[Description],SyncId as [SyncId],Active,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(CreatedDate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(CreatedDate AS date), CreatedDate) AS [Milliseconds] FROM MastItem where ItemType='MaterialGroup' AND Active=1 ) As T " + MQry + "";

            Query = "select top " + NoOfRec + " * from (SELECT mi.ItemId AS productgroupid,mi.ItemName AS productgroupname,mi.SyncId as [SyncId],mi.Active, ms.Id AS segmentid, ms.Name AS segmentname ,mi.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(mi.CreatedDate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(mi.CreatedDate AS date), mi.CreatedDate) AS [Milliseconds] FROM dbo.MastItemSegment ms INNER JOIN dbo.MastItem AS MastItem_1 ON ms.Id = MastItem_1.SegmentId INNER JOIN dbo.MastItem mi ON MastItem_1.Underid = mi.ItemId where mi.ItemType='MaterialGroup' AND mi.Active=1 GROUP BY mi.ItemId,mi.ItemName, MastItem_1.SegmentId,mi.SyncId,mi.Active, ms.Id, ms.Name,mi.CreatedDate ) As T " + MQry + "";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xProductGroupDetails> rst = new List<xProductGroupDetails>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xProductGroupDetails
                    {
                        Nm = dt.Rows[i]["productgroupname"].ToString(),
                        Id = dt.Rows[i]["productgroupid"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString(),
                        segmentid = dt.Rows[i]["segmentid"].ToString(),
                        segmentname = dt.Rows[i]["segmentname"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xStates_TimeStamp
        {
            [DataMember]
            public string NM { get; set; }
            [DataMember]
            public string Sid { get; set; }
            [DataMember]
            public string Rid { get; set; }
            [DataMember]
            public string MS { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetStates_TimeStampWise()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                Query = "select * from (SELECT DISTINCT(VG.stateName)as Description,VG.stateid as Id,Vg.RegionId,Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] From ViewGeo VG inner JOIN MastLink ML ON VG.areaId=ML.LinkCode left Join MastArea Ma On Vg.StateId=Ma.AreaId WHERE ML.ECode='SA' AND vg.areaid=" + minDate + ") As T";
            }
            else
            {
                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");            
                // string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
                string MQry = "";
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                if (Convert.ToInt64(minDate) > 0)
                {
                    MQry = " where T.Milliseconds >'" + minDate + "'";
                }
                //Query = "SELECT DISTINCT(VG.stateName)as Description,VG.stateid as Id,Vg.RegionId,Ma.SyncId,Ma.Active,Ma.createddate From ViewGeo VG inner JOIN MastLink ML ON VG.areaId=ML.LinkCode left Join MastArea Ma On Vg.StateId=Ma.AreaId WHERE ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + "";
                //  Query = "SELECT DISTINCT(VG.stateName)as Description,VG.stateid as Id,Vg.RegionId,Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] From ViewGeo VG inner JOIN MastLink ML ON VG.areaId=ML.LinkCode left Join MastArea Ma On Vg.StateId=Ma.AreaId WHERE ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + " " + MQry + "";

                Query = "select DISTINCT top " + NoOfRec + " Description,Id,RegionId,SyncId,Active,CreatedDate,[Milliseconds] from (SELECT DISTINCT(VG.stateName)as Description,VG.stateid as Id,Vg.RegionId,Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] From ViewGeo VG inner JOIN MastLink ML ON VG.areaId=ML.LinkCode left Join MastArea Ma On Vg.StateId=Ma.AreaId WHERE ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + ") As T " + MQry + " order by Createddate ";
            }
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xStates_TimeStamp> rst = new List<xStates_TimeStamp>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xStates_TimeStamp
                    {
                        NM = dt.Rows[i]["Description"].ToString(),
                        Sid = dt.Rows[i]["Id"].ToString(),
                        Rid = dt.Rows[i]["RegionId"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xSrep
        {
            //[DataMember]
            //public string MS { get; set; }
            [DataMember]
            public string Smid { get; set; }
            [DataMember]
            public string Smnm { get; set; }
            [DataMember]
            public string Lvl { get; set; }
            [DataMember]
            public string Uid { get; set; }
            [DataMember]
            public string MS { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetSrep()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string userId = objResponse.body[0].userId;
            string minDate = objResponse.body[0].minDate;

            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0) { MQry = " Where T.Milliseconds >'" + minDate + "'"; }
            // Query = "SELECT  Smid,SmName,DeviceNo,DSRAllowDays,Active,Roleid,UserId,LoginCreated,Lvl,UnderId,GradeId,EmpName,Createddate,(CAST(DATEDIFF(second, '1970-01-01', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds] FROM MastSalesRep WHERE  smname!='.' and SMId IN (SELECT smid FROM MastSalesRepGrp WHERE MainGrp=" + userId + " AND smid <> " + userId + " union SELECT maingrp FROM MastSalesRepGrp WHERE smid=" + userId + " ) " + MQry + "";
            Query = "select top " + NoOfRec + " * from (SELECT Smid,SmName,DeviceNo,DSRAllowDays,Active,Roleid,UserId,LoginCreated,Lvl,UnderId,GradeId,EmpName,Createddate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds] FROM MastSalesRep WHERE  smname!='.' and SMId IN (SELECT smid FROM MastSalesRepGrp WHERE MainGrp=" + userId + " AND smid <> " + userId + " union SELECT maingrp FROM MastSalesRepGrp WHERE smid=" + userId + " )) As T " + MQry + "";
            //1970-01-01 05:30:00
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xSrep> rst = new List<xSrep>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xSrep
                    {
                        Smid = dt.Rows[i]["Smid"].ToString(),
                        Smnm = dt.Rows[i]["SmName"].ToString(),
                        Lvl = dt.Rows[i]["Lvl"].ToString(),
                        Uid = dt.Rows[i]["UnderId"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xTransportVehicleused_TimeStamp
        {
            [DataMember]
            public string Trpt { get; set; }
            [DataMember]
            public string MS { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetTransportVehicle_TimeStampWise()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string type = objResponse.body[0].type;
            string minDate = objResponse.body[0].minDate;

            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " Where  T.[Milliseconds] >'" + minDate + "'";
            }
            // string transport = "select top " + NoOfRec + " * from ModeOfTransport where Mode_Vechile='" + type + "'";
            string transport = "select top " + NoOfRec + " * from (select Transport,Createddate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds] from ModeOfTransport where 1=1 and Mode_Vechile='" + type + "' )T " + MQry + " order by Createddate ";
            DataTable dttransport = DbConnectionDAL.GetDataTable(CommandType.Text, transport);
            List<xTransportVehicleused_TimeStamp> rst = new List<xTransportVehicleused_TimeStamp>();
            if (dttransport.Rows.Count > 0)
            {
                for (int i = 0; i <= (dttransport.Rows.Count - 1); i++)
                {
                    rst.Add(
                        new xTransportVehicleused_TimeStamp
                        {
                            Trpt = dttransport.Rows[i]["Transport"].ToString(),
                            MS = dttransport.Rows[i]["Milliseconds"].ToString()
                        }
                    );
                }
            }
            //else
            //{
            //    rst.Add(
            //       new xTransportVehicleused_TimeStamp
            //       {
            //           Trpt = "0" //null
            //       }
            //   );

            //}
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class GetOrderTemplate
        {
            [DataMember]
            public string Dt { get; set; }
            [DataMember]
            public string PartyId { get; set; }
            [DataMember]
            public string ItemId { get; set; }
            [DataMember]
            public string MS { get; set; }
        }

        public void xJSGetOrderTemplate()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                //MQry = " and MastItemTemplat.Createddate >='" + minDate1 + "'";
                MQry = " where  T.[Milliseconds] >='" + minDate + "'";
            }

            System.IO.StreamWriter TextFileCID = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/OrderTemplateLog-" + ConPer_Id + ".txt"), true);
            TextFileCID.WriteLine("Smid:" + ConPer_Id + " , " + "TimeStamp:" + minDate + "," + "Date OF Timestamp:" + minDate1);
            TextFileCID.Close();

            List<GetOrderTemplate> rst = new List<GetOrderTemplate>();
            {
                string qry = "";

                qry = @"select top " + NoOfRec + " *  from (select  MastItemTemplat.*,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(createddate AS date), createddate)   AS [Milliseconds]  from MastItemTemplat left join [MastParty] on MastItemTemplat.partyid=[MastParty].PartyId   where PartyDist=0 and Active=1 and AreaId in   (select LinkCode from MastLink where Primtable='SALESPERSON' and  PrimCode=" + Convert.ToInt32(ConPer_Id) + "  and LinkTable='AREA' ) ) As T " + MQry + " order by createddate";
                DataTable dtcheck = DbConnectionDAL.GetDataTable(CommandType.Text, qry);
                if (dtcheck.Rows.Count > 0)
                {
                    for (int i = 0; i < dtcheck.Rows.Count; i++)
                    {
                        {
                            rst.Add(
                                new GetOrderTemplate
                                {
                                    PartyId = dtcheck.Rows[i]["partyid"].ToString(),
                                    ItemId = dtcheck.Rows[i]["itemid"].ToString(),
                                    Dt = dtcheck.Rows[i]["Milliseconds"].ToString(),
                                    MS = dtcheck.Rows[i]["Milliseconds"].ToString()
                                }
                            );
                        }
                    }
                }
            }

            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xBeatPlan
        {
            [DataMember]
            public string Bplnd { get; set; }
            [DataMember]
            public string Dcid { get; set; }
            [DataMember]
            public string Uid { get; set; }
            [DataMember]
            public string Aid { get; set; }
            [DataMember]
            public string AppSt { get; set; }
            [DataMember]
            public string AppBy { get; set; }
            [DataMember]
            public string Apprmk { get; set; }
            [DataMember]
            public string StDt { get; set; }
            [DataMember]
            public string Ctid { get; set; }
            [DataMember]
            public string Bid { get; set; }
            [DataMember]
            public string SMId { get; set; }
            [DataMember]
            public string AppBySMId { get; set; }
            [DataMember]
            public string Andid { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string Pdt { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetBeatPlan()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;


            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");

            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where T.Milliseconds>'" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            //  Query = "SELECT BeatPlanId,docid, UserId,replace(convert(NVARCHAR, PlannedDate, 106), ' ', '/') AS PlannedDate, areaId, AppStatus,AppBy,AppRemark,replace(convert(NVARCHAR, StartDate, 106), ' ', '/') AS StartDate,(CAST(DATEDIFF(second, '1970-01-01', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS [Milliseconds],Cityid,beatId,Smid,AppBySMid,isnull(Android_Id, '') as Android_Id FROM transbeatplan Where SMId =" + ConPer_Id + " " + MQry + "";

            Query = "SELECT top " + NoOfRec + " * from (select BeatPlanId,docid, UserId,replace(convert(NVARCHAR, PlannedDate, 106), ' ', '/') AS PlannedDate, areaId, AppStatus,AppBy,AppRemark,replace(convert(NVARCHAR, StartDate, 106), ' ', '/') AS StartDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS [Milliseconds],Cityid,beatId,Smid,AppBySMid,isnull(Android_Id, '') as Android_Id FROM transbeatplan Where SMId =" + ConPer_Id + " ) as T " + MQry + " order by T.Milliseconds ";
            //1970-01-01 05:30:00
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xBeatPlan> rst = new List<xBeatPlan>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xBeatPlan
                    {
                        Bplnd = dt.Rows[i]["BeatPlanId"].ToString(),
                        Dcid = dt.Rows[i]["docid"].ToString(),
                        Uid = dt.Rows[i]["UserId"].ToString(),
                        Aid = dt.Rows[i]["areaId"].ToString(),
                        AppSt = dt.Rows[i]["AppStatus"].ToString(),
                        AppBy = dt.Rows[i]["AppBy"].ToString(),
                        Apprmk = dt.Rows[i]["AppRemark"].ToString(),
                        StDt = dt.Rows[i]["StartDate"].ToString(),
                        Ctid = dt.Rows[i]["CityId"].ToString(),
                        Bid = dt.Rows[i]["BeatId"].ToString(),
                        SMId = dt.Rows[i]["SMId"].ToString(),
                        AppBySMId = dt.Rows[i]["AppBySMId"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString(),
                        Pdt = dt.Rows[i]["PlannedDate"].ToString(),
                        Andid = dt.Rows[i]["Android_Id"].ToString()
                    }
                );
            }
            //return new JavaScriptSerializer().Serialize(rst);
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class GetDistributorStockList
        {
            [DataMember]
            public string STKDocId { get; set; }
            [DataMember]
            public string AreaId { get; set; }
            [DataMember]
            public string Cases { get; set; }
            [DataMember]
            public string Unit { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Partyid { get; set; }
            [DataMember]
            public string Item { get; set; }
            [DataMember]
            public string Rate { get; set; }
            [DataMember]
            public string Remarks { get; set; }
            [DataMember]
            public string amount { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string Millisecond { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string Qty { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
            [DataMember]
            public string ImgUrl { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetDistStock()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            List<GetDistributorStockList> rst = new List<GetDistributorStockList>();
            string MQry = "";

            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where a.Milliseconds >'" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = @"select top " + NoOfRec + " * from (SELECT STKId,	VisId,	STKDocId,	UserId,	VDate,	SMId,	DistId,	DistCode,	AreaId,	    ItemId,	Qty,	Created_date,	unit,	cases,	Address,	Latitude,	Longitude,	(CAST(DATEDIFF(second, '1970-01-01 05:30:00',  CAST(Lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Lat_long_datetime AS date), Lat_long_datetime) AS [Lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00',   CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS [Milliseconds],isnull(Android_Id,STKId) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],ImgUrl,Isnull(mrp,0) As rate  FROM TransDistStock where SMId in (" + ConPer_Id + ")  and vdate='" + vdate + "' union SELECT	STKId,	VisId,	STKDocId,	UserId,	VDate,	SMId,	DistId,	  DistCode,	AreaId,	ItemId,	Qty,	Created_date,	unit,	cases,	Address,	Latitude,	Longitude,		(CAST(DATEDIFF(second, '1970-01-01 05:30:00',     CAST(Lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Lat_long_datetime AS date), Lat_long_datetime) AS [Lat_long_datetime],      (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date),Created_date) AS [Milliseconds],isnull(Android_Id,STKId) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],ImgUrl,Isnull(mrp,0) As rate  FROM temp_TransDistStock where SMId in (" + ConPer_Id + ") and vdate='" + vdate + "' ) a " + MQry + " order by a.Milliseconds";

                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    string path = "";
                    if (dt.Rows[i]["ImgUrl"].ToString() != "")
                    {
                        path = "http://" + host + (dt.Rows[i]["ImgUrl"].ToString()).Replace(@"~", string.Empty);
                    }
                    rst.Add(
                        new GetDistributorStockList
                        {
                            STKDocId = dt.Rows[i]["STKDocId"].ToString(),
                            AreaId = dt.Rows[i]["AreaId"].ToString(),
                            Cases = dt.Rows[i]["cases"].ToString(),
                            Unit = dt.Rows[i]["unit"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            VDate = Convert.ToDateTime(dt.Rows[i]["VDate"].ToString()).ToString("dd/MMM/yyyy"),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Partyid = dt.Rows[i]["DistId"].ToString(),
                            Item = dt.Rows[i]["ItemId"].ToString(),
                            Qty = dt.Rows[i]["Qty"].ToString(),
                            Android_Id = dt.Rows[i]["Android_id"].ToString(),
                            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString(),
                            ImgUrl = path,
                            Rate = dt.Rows[i]["rate"].ToString()
                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class GetDistributorStockList_V1
        {
            [DataMember]
            public string STKDocId { get; set; }
            [DataMember]
            public string AreaId { get; set; }
            [DataMember]
            public string Cases { get; set; }
            [DataMember]
            public string Unit { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Partyid { get; set; }
            [DataMember]
            public string Item { get; set; }
            [DataMember]
            public string Rate { get; set; }
            [DataMember]
            public string Remarks { get; set; }
            [DataMember]
            public string amount { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string Millisecond { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string Qty { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
            [DataMember]
            public string ImgUrl { get; set; }
            [DataMember]
            public string BaseUnit { get; set; }
            [DataMember]
            public string BaseUnitQty { get; set; }
            [DataMember]
            public string PrimaryUnit { get; set; }
            [DataMember]
            public string PrimaryUnitQty { get; set; }
            [DataMember]
            public string SecondaryUnit { get; set; }
            [DataMember]
            public string SecondaryUnitQty { get; set; }
            [DataMember]
            public string PrimaryUnitConversion { get; set; }
            [DataMember]
            public string SecondaryUnitConversion { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetDistStock_V1()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            List<GetDistributorStockList_V1> rst = new List<GetDistributorStockList_V1>();
            string MQry = "";

            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where a.Milliseconds >'" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = @"select top " + NoOfRec + " * from (SELECT STKId,	VisId,	STKDocId,	UserId,	VDate,	SMId,	DistId,	DistCode,	AreaId,	    ItemId,	Qty,	Created_date,	unit,	cases,	Address,	Latitude,	Longitude,	(CAST(DATEDIFF(second, '1970-01-01 05:30:00',  CAST(Lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Lat_long_datetime AS date), Lat_long_datetime) AS [Lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00',   CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS [Milliseconds],isnull(Android_Id,STKId) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],ImgUrl,Isnull(mrp,0) As rate, IsNull(BaseUnit,'') as BaseUnit,IsNull(BaseUnitQty,0) as BaseUnitQty,IsNull(PrimaryUnit,'') as PrimaryUnit,IsNull(PrimaryUnitQty,0) as PrimaryUnitQty,IsNull(SecondaryUnit,'') as SecondaryUnit,IsNull(SecondaryUnitQty,0) as SecondaryUnitQty,IsNull(PrimaryUnitConversion,0) as PrimaryUnitConversion,IsNull(SecondaryUnitConversion,0) as SecondaryUnitConversion  FROM TransDistStock where SMId in (" + ConPer_Id + ")  and vdate='" + vdate + "' union SELECT	STKId,	VisId,	STKDocId,	UserId,	VDate,	SMId,	DistId,	  DistCode,	AreaId,	ItemId,	Qty,	Created_date,	unit,	cases,	Address,	Latitude,	Longitude,		(CAST(DATEDIFF(second, '1970-01-01 05:30:00',     CAST(Lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Lat_long_datetime AS date), Lat_long_datetime) AS [Lat_long_datetime],      (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date),Created_date) AS [Milliseconds],isnull(Android_Id,STKId) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],ImgUrl,Isnull(mrp,0) As rate, IsNull(BaseUnit,'') as BaseUnit,IsNull(BaseUnitQty,0) as BaseUnitQty,IsNull(PrimaryUnit,'') as PrimaryUnit,IsNull(PrimaryUnitQty,0) as PrimaryUnitQty,IsNull(SecondaryUnit,'') as SecondaryUnit,IsNull(SecondaryUnitQty,0) as SecondaryUnitQty,IsNull(PrimaryUnitConversion,0) as PrimaryUnitConversion,IsNull(SecondaryUnitConversion,0) as SecondaryUnitConversion  FROM Temp_TransDistStock where SMId in (" + ConPer_Id + ") and vdate='" + vdate + "' ) a " + MQry + " order by a.Milliseconds";

                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    string path = "";
                    if (dt.Rows[i]["ImgUrl"].ToString() != "")
                    {
                        path = "http://" + host + (dt.Rows[i]["ImgUrl"].ToString()).Replace(@"~", string.Empty);
                    }
                    rst.Add(
                        new GetDistributorStockList_V1
                        {
                            STKDocId = dt.Rows[i]["STKDocId"].ToString(),
                            AreaId = dt.Rows[i]["AreaId"].ToString(),
                            Cases = dt.Rows[i]["cases"].ToString(),
                            Unit = dt.Rows[i]["unit"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            VDate = Convert.ToDateTime(dt.Rows[i]["VDate"].ToString()).ToString("dd/MMM/yyyy"),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Partyid = dt.Rows[i]["DistId"].ToString(),
                            Item = dt.Rows[i]["ItemId"].ToString(),
                            Qty = dt.Rows[i]["Qty"].ToString(),
                            Android_Id = dt.Rows[i]["Android_id"].ToString(),
                            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString(),
                            ImgUrl = path,
                            Rate = dt.Rows[i]["rate"].ToString(),
                            BaseUnit = dt.Rows[i]["BaseUnit"].ToString(),
                            BaseUnitQty = dt.Rows[i]["BaseUnitQty"].ToString(),
                            PrimaryUnit = dt.Rows[i]["PrimaryUnit"].ToString(),
                            PrimaryUnitQty = dt.Rows[i]["PrimaryUnitQty"].ToString(),
                            SecondaryUnit = dt.Rows[i]["SecondaryUnit"].ToString(),
                            SecondaryUnitQty = dt.Rows[i]["SecondaryUnitQty"].ToString(),
                            PrimaryUnitConversion = dt.Rows[i]["PrimaryUnitConversion"].ToString(),
                            SecondaryUnitConversion = dt.Rows[i]["SecondaryUnitConversion"].ToString()
                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class RetailerDiscussion
        {
            [DataMember]
            public string VisDistId { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Cityid { get; set; }
            [DataMember]
            public string RetailerId { get; set; }
            [DataMember]
            public string Remark { get; set; }
            [DataMember]
            public string NextVisitDate { get; set; }
            [DataMember]
            public string NextVisitTime { get; set; }
            [DataMember]
            public string SpendFromTime { get; set; }
            [DataMember]
            public string SpendToDate { get; set; }
            [DataMember]
            public string CreatedDate { get; set; }
            [DataMember]
            public string Stock { get; set; }
            [DataMember]
            public string ImgUrl { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string Docid { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
            [DataMember]
            public string Type { get; set; }
        }

        [WebMethod]
        public void JSGetRetailerDiscussionWithImage()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = ""; string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " where a.Milliseconds >'" + minDate + "'";
            }
            List<RetailerDiscussion> rst = new List<RetailerDiscussion>();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT top " + NoOfRec + " * from (select VisDistId,VisId,ISNULL(Android_Id,VisDistId) AS Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,CityId,DistId,RemarkDist AS Remark,replace(convert(NVARCHAR, NextVisitDate, 106), ' ', '/') as NextVisitDate,nextVisitTime,SpentfrTime as SpendfromTime,SpentToTime as SpendToTime,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],stock,ImgUrl,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],[DiscDocid],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransVisitDist WHERE SMId IN (" + ConPer_Id + ") AND Type IS NULL and distid in (select partyid from mastparty where partydist=0)  and  vdate='" + vdate + "'  union SELECT VisDistId,VisId,ISNULL(Android_Id,VisDistId) AS Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,CityId,DistId,RemarkDist AS Remark,replace(convert(NVARCHAR, NextVisitDate, 106), ' ', '/') as NextVisitDate,nextVisitTime,SpentfrTime as SpendfromTime,SpentToTime as SpendToTime,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],stock,ImgUrl,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],[DiscDocid],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM temp_TransVisitDist WHERE SMId IN (" + ConPer_Id + ") AND Type IS NULL and distid in (select partyid from mastparty where partydist=0)   and vdate='" + vdate + "'  ) a " + MQry + " order by a.Milliseconds";

                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    string path = "";
                    if (dt.Rows[i]["ImgUrl"].ToString() != "")
                    {
                        path = "http://" + host + (dt.Rows[i]["ImgUrl"].ToString()).Replace(@"~", string.Empty);
                    }
                    rst.Add(
                        new RetailerDiscussion
                        {
                            Docid = dt.Rows[i]["DiscDocid"].ToString(),
                            VisDistId = dt.Rows[i]["VisDistId"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                            VDate = dt.Rows[i]["VDate"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Cityid = dt.Rows[i]["CityId"].ToString(),
                            RetailerId = dt.Rows[i]["DistId"].ToString(),
                            Remark = dt.Rows[i]["Remark"].ToString(),
                            NextVisitDate = dt.Rows[i]["NextVisitDate"].ToString(),
                            NextVisitTime = dt.Rows[i]["nextVisitTime"].ToString(),
                            SpendFromTime = dt.Rows[i]["SpendfromTime"].ToString(),
                            SpendToDate = dt.Rows[i]["SpendToTime"].ToString(),
                            CreatedDate = dt.Rows[i]["Milliseconds"].ToString(),
                            Stock = dt.Rows[i]["stock"].ToString(),
                            ImgUrl = path,
                            // ImgUrl = dt.Rows[i]["ImgUrl"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()

                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class xDistricts
        {
            [DataMember]
            public string Did { get; set; }
            [DataMember]
            public string NM { get; set; }
            [DataMember]
            public string Sid { get; set; }
            [DataMember]
            public string MS { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetDistricts_TimeStampWise()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                Query = "SELECT DISTINCT  Description,Id,StateId,SyncId,Active,CreatedDate,[Milliseconds] from (SELECT DISTINCT (VG.DistrictName) as Description,VG.DistrictId As Id,VG.StateId,Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] FROM ViewGeo VG inner JOIN MastLink ML ON VG.areaId=ML.LinkCode left Join MastArea Ma On Vg.DistrictId=Ma.AreaId  WHERE ML.ECode='SA' AND vg.areaid=" + minDate + ") As T  order by Createddate ";
            }
            else
            {

                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                string MQry = "";
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                if (Convert.ToInt64(minDate) > 0)
                {
                    //MQry = " and Ma.Createddate  >='" + minDate1 + "'";
                    MQry = " where  T.[Milliseconds] > '" + minDate + "'";
                }
                //Query = "SELECT DISTINCT(VG.DistrictName) as Description,VG.DistrictId As Id,VG.StateId,Ma.SyncId,Ma.Active,Ma.createddate FROM ViewGeo VG inner JOIN MastLink ML ON VG.areaId=ML.LinkCode left Join MastArea Ma On Vg.DistrictId=Ma.AreaId  WHERE ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + "";
                Query = "SELECT DISTINCT top " + NoOfRec + " Description,Id,StateId,SyncId,Active,CreatedDate,[Milliseconds] from (SELECT DISTINCT (VG.DistrictName) as Description,VG.DistrictId As Id,VG.StateId,Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] FROM ViewGeo VG inner JOIN MastLink ML ON VG.areaId=ML.LinkCode left Join MastArea Ma On Vg.DistrictId=Ma.AreaId  WHERE ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + ") As T " + MQry + " order by Createddate ";
            } DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xDistricts> rst = new List<xDistricts>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                rst.Add(
                    new xDistricts
                    {
                        NM = dt.Rows[i]["Description"].ToString(),
                        Did = dt.Rows[i]["Id"].ToString(),
                        Sid = dt.Rows[i]["stateid"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
            //return DbConnectionDAL.getXML(Query, "District", "DistrictList");
        }

        [DataContract]
        public class DSRList
        {
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string visitDocId { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string Vdate { get; set; }
            [DataMember]
            public string Remark { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string CityId { get; set; }
            [DataMember]
            public string DistId { get; set; }
            [DataMember]
            public string nCityId { get; set; }
            [DataMember]
            public string NextVisitDate { get; set; }
            [DataMember]
            public string FROMTime { get; set; }
            [DataMember]
            public string ToTime { get; set; }
            [DataMember]
            public string WithUserId { get; set; }
            [DataMember]
            public string ModeOfTransport { get; set; }
            [DataMember]
            public string VehicleUsed { get; set; }
            [DataMember]
            public string Industry { get; set; }
            [DataMember]
            public string Lock { get; set; }
            [DataMember]
            public string nWithUserId { get; set; }
            [DataMember]
            public string AppStatus { get; set; }
            [DataMember]
            public string AppBy { get; set; }
            [DataMember]
            public string AppRemark { get; set; }
            [DataMember]
            public string AppBySMID { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string cityIds { get; set; }
            [DataMember]
            public string cityName { get; set; }

            [DataMember]
            public string OrderAmountMail { get; set; }
            [DataMember]
            public string OrderAmountPhone { get; set; }

            [DataMember]
            public string visitcode { get; set; }
            [DataMember]
            public string Attendance { get; set; }
            [DataMember]
            public string Fromareacode { get; set; }
            [DataMember]
            public string OtherExpense { get; set; }
            [DataMember]
            public string AndroidAppRemark1 { get; set; }
            [DataMember]
            public string ToAreacode { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetDSR()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            List<DSRList> rst = new List<DSRList>();
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                //MQry = " and created_date>='" + minDate1 + "'";
                MQry = " where  T.[Milliseconds] > '" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            //Query = "select top " + NoOfRec + " * from (SELECT VisId,visitDocId,UserId,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,replace(Remark,'/n', '') as Remark,SMID,CityId,DistId,nCityId, replace(convert(NVARCHAR, NextVisitDate, 106), ' ', '/') as NextVisitDate,frTime1 AS FROMTime,toTime1 AS ToTime, WithUserId,ModeOfTransport,VehicleUsed,Industry, CASE appstatus WHEN 'Approve' THEN 1 WHEN 'Reject' THEN 1 ELSE lock END as Lock,nWithUserId,AppStatus,AppBy,AppRemark,AppBySMID,isnull(Android_Id,visitDocId) as Android_Id,cityIds,cityName,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS [Milliseconds],isnull(OrderAmountMail,0.00) as OrderAmountMail , visitcode,  Attendance,  Fromareacode,toareacode,OtherExpense, AndroidAppRemark,isnull(OrderAmountPhone,0.00) as OrderAmountPhone,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransVisit Where SMId IN (" + ConPer_Id + ") ) As T " + MQry + " order by  T.[Milliseconds]";
            Query = "select top 1 visid,vdate from TransVisit where smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "select top " + NoOfRec + " * from (SELECT VisId,visitDocId,UserId,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,replace(Remark,'/n', '') as Remark,SMID,CityId,DistId,nCityId, replace(convert(NVARCHAR, NextVisitDate, 106), ' ', '/') as NextVisitDate,frTime1 AS FROMTime,toTime1 AS ToTime, WithUserId,ModeOfTransport,VehicleUsed,Industry, CASE appstatus WHEN 'Approve' THEN 1 WHEN 'Reject' THEN 1 ELSE lock END as Lock,nWithUserId,AppStatus,AppBy,AppRemark,AppBySMID,isnull(Android_Id,visitDocId) as Android_Id,cityIds,cityName,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS [Milliseconds],isnull(OrderAmountMail,0.00) as OrderAmountMail , visitcode,  Attendance,  Fromareacode,toareacode,OtherExpense, AndroidAppRemark,isnull(OrderAmountPhone,0.00) as OrderAmountPhone,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransVisit Where SMId IN (" + ConPer_Id + ") and vdate= '" + vdate + "' ) As T " + MQry + " order by  T.[Milliseconds]";
                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    rst.Add(
                        new DSRList
                        {
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            visitDocId = dt.Rows[i]["visitDocId"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            Vdate = dt.Rows[i]["Vdate"].ToString(),
                            Remark = dt.Rows[i]["Remark"].ToString().Replace("\n", ""),
                            SMID = dt.Rows[i]["SMID"].ToString(),
                            CityId = dt.Rows[i]["CityId"].ToString(),
                            DistId = dt.Rows[i]["DistId"].ToString(),
                            nCityId = dt.Rows[i]["nCityId"].ToString(),
                            NextVisitDate = dt.Rows[i]["NextVisitDate"].ToString(),
                            FROMTime = dt.Rows[i]["FROMTime"].ToString(),
                            ToTime = dt.Rows[i]["ToTime"].ToString(),
                            WithUserId = dt.Rows[i]["WithUserId"].ToString(),
                            ModeOfTransport = dt.Rows[i]["ModeOfTransport"].ToString(),
                            VehicleUsed = dt.Rows[i]["VehicleUsed"].ToString(),
                            Industry = dt.Rows[i]["Industry"].ToString(),
                            Lock = dt.Rows[i]["Lock"].ToString(),
                            nWithUserId = dt.Rows[i]["nWithUserId"].ToString(),
                            AppStatus = dt.Rows[i]["AppStatus"].ToString(),
                            AppBy = dt.Rows[i]["AppBy"].ToString(),
                            AppRemark = dt.Rows[i]["AppRemark"].ToString(),
                            AppBySMID = dt.Rows[i]["AppBySMID"].ToString(),
                            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                            cityIds = dt.Rows[i]["cityIds"].ToString(),
                            cityName = dt.Rows[i]["cityName"].ToString(),
                            MS = dt.Rows[i]["Milliseconds"].ToString(),
                            OrderAmountMail = dt.Rows[i]["OrderAmountMail"].ToString(),
                            OrderAmountPhone = dt.Rows[i]["OrderAmountPhone"].ToString(),
                            visitcode = dt.Rows[i]["visitcode"].ToString(),
                            Attendance = dt.Rows[i]["Attendance"].ToString(),
                            Fromareacode = dt.Rows[i]["Fromareacode"].ToString(),
                            OtherExpense = dt.Rows[i]["OtherExpense"].ToString(),
                            ToAreacode = dt.Rows[i]["toareacode"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            AndroidAppRemark1 = dt.Rows[i]["AndroidAppRemark"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()
                        }
                    );
                }
            }
            //return new JavaScriptSerializer().Serialize(rst);
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class RetailerDemo
        {
            [DataMember]
            public string DemoId { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string DemoDocId { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Partyid { get; set; }
            [DataMember]
            public string AreaId { get; set; }
            [DataMember]
            public string Remarks { get; set; }
            [DataMember]
            public string ProductClassId { get; set; }
            [DataMember]
            public string ProductSegmentId { get; set; }
            [DataMember]
            public string ProductMatgrp { get; set; }
            [DataMember]
            public string Millisecond { get; set; }
            [DataMember]
            public string ImgUrl { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetRetailerDemoWithImage()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = "";
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " where a.Milliseconds >'" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";

            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());

            //Query = "select top " + NoOfRec + " * from ( SELECT  DemoId,VisId,DemoDocId,isnull(Android_Id,demodocid) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,PartyId,AreaId,remarks,productClassid,productSegmentId,ProductMatgrp,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],ImgUrl,longitude,latitude,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransDemo WHERE SMId IN (" + ConPer_Id + ") union SELECT DemoId,VisId,DemoDocId,isnull(Android_Id,demodocid) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,PartyId,AreaId,remarks,productClassid,productSegmentId,ProductMatgrp,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],ImgUrl,longitude,latitude,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM temp_TransDemo WHERE SMId IN (" + ConPer_Id + ") ) a " + MQry + " order by a.Milliseconds";
            List<RetailerDemo> rst = new List<RetailerDemo>();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");


                //else
                //{
                //    vdate = DateTime.Now.ToString("yyyy-MM-dd");
                //}

                Query = "select top " + NoOfRec + " * from ( SELECT  DemoId,VisId,DemoDocId,isnull(Android_Id,demodocid) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,PartyId,AreaId,remarks,productClassid,productSegmentId,ProductMatgrp,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],ImgUrl,longitude,latitude,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransDemo WHERE SMId IN (" + ConPer_Id + ") and vdate='" + vdate + "'  union SELECT DemoId,VisId,DemoDocId,isnull(Android_Id,demodocid) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,PartyId,AreaId,remarks,productClassid,productSegmentId,ProductMatgrp,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],ImgUrl,longitude,latitude,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM temp_TransDemo WHERE SMId IN (" + ConPer_Id + ") and vdate='" + vdate + "' ) a " + MQry + " order by a.Milliseconds";

                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    string path = "";
                    if (dt.Rows[i]["ImgUrl"].ToString() != "")
                    {
                        path = "http://" + host + (dt.Rows[i]["ImgUrl"].ToString()).Replace(@"~", string.Empty);
                    }
                    rst.Add(
                        new RetailerDemo
                        {
                            DemoId = dt.Rows[i]["DemoId"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            DemoDocId = dt.Rows[i]["DemoDocId"].ToString(),
                            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                            VDate = dt.Rows[i]["VDate"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Partyid = dt.Rows[i]["Partyid"].ToString(),
                            AreaId = dt.Rows[i]["AreaId"].ToString(),
                            Remarks = dt.Rows[i]["Remarks"].ToString(),
                            ProductClassId = dt.Rows[i]["productClassid"].ToString(),
                            ProductSegmentId = dt.Rows[i]["productSegmentId"].ToString(),
                            ProductMatgrp = dt.Rows[i]["ProductMatgrp"].ToString(),
                            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                            ImgUrl = path,
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()
                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));

        }

        [DataContract]
        public class GetOrderList
        {
            [DataMember]
            public string OrdId { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string OrdDocId { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Partyid { get; set; }
            [DataMember]
            public string AreaId { get; set; }
            [DataMember]
            public string Remarks { get; set; }
            [DataMember]
            public string OrderAmount { get; set; }
            [DataMember]
            public string Millisecond { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
            [DataMember]
            public string ImgUrl { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetRetailerOrder()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            string MQry = "";
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where a.Milliseconds > '" + minDate + "'";
            }
            List<GetOrderList> rst = new List<GetOrderList>();
            //Query = "select top " + NoOfRec + " * FROM (SELECT  OrdId,VisId,OrdDocid,isnull(android_id,OrdDocid) as Android_Id ,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,Partyid,Areaid, Remarks,orderAmount,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],[ImgUrl] FROM TransOrder where SMId in (" + ConPer_Id + ")  union SELECT OrdId,VisId,OrdDocid,isnull(android_id,OrdDocid) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,Partyid,Areaid, Remarks,orderAmount,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],[ImgUrl] FROM temp_TransOrder where SMId in (" + ConPer_Id + ")) a  " + MQry + " order by a.Milliseconds";
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");



                Query = "select top " + NoOfRec + " * FROM (SELECT  OrdId,VisId,OrdDocid,isnull(android_id,OrdDocid) as Android_Id ,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,Partyid,Areaid, Remarks,orderAmount,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],[ImgUrl] FROM TransOrder where SMId in (" + ConPer_Id + ") and vdate='" + vdate + "' union SELECT OrdId,VisId,OrdDocid,isnull(android_id,OrdDocid) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,Partyid,Areaid, Remarks,orderAmount,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],[ImgUrl] FROM temp_TransOrder where SMId in (" + ConPer_Id + ") and vdate='" + vdate + "') a  " + MQry + " order by a.Milliseconds";
                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    string path = "";
                    if (dt.Rows[i]["ImgUrl"].ToString() != "")
                    {
                        path = "http://" + host + (dt.Rows[i]["ImgUrl"].ToString()).Replace(@"~", string.Empty);
                    }
                    rst.Add(
                        new GetOrderList
                        {
                            OrdId = dt.Rows[i]["OrdId"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            OrdDocId = dt.Rows[i]["OrdDocId"].ToString(),
                            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                            VDate = dt.Rows[i]["VDate"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Partyid = dt.Rows[i]["Partyid"].ToString(),
                            AreaId = dt.Rows[i]["AreaId"].ToString(),
                            Remarks = dt.Rows[i]["Remarks"].ToString(),
                            OrderAmount = dt.Rows[i]["OrderAmount"].ToString(),
                            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString(),
                            ImgUrl = path

                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class RetailerOrder1
        {
            [DataMember]
            public string Android_Id1 { get; set; }
            [DataMember]
            public string Ord1Id { get; set; }
            [DataMember]
            public string OrdId { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string OrdDocId { get; set; }
            [DataMember]
            public string Sno { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Partyid { get; set; }
            [DataMember]
            public string AreaId { get; set; }
            [DataMember]
            public string Item { get; set; }
            [DataMember]
            public string Qty { get; set; }
            [DataMember]
            public string Rate { get; set; }
            [DataMember]
            public string Remarks { get; set; }
            [DataMember]
            public string amount { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string Millisecond { get; set; }
            [DataMember]
            public string Cases { get; set; }
            [DataMember]
            public string Unit { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetRetailerOrder1()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            List<RetailerOrder1> rst = new List<RetailerOrder1>();
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where a.Milliseconds > '" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());

            //Query = "select top " + NoOfRec + " * from (SELECT  Ord1Id,OrdId,VisId,OrdDocid,Sno,UserId,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,SMID,Partyid,Areaid,ItemId,Qty,rate,Remarks,amount,isnull(android_id,OrdDocid) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Vdate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Vdate AS date), Vdate) AS [Milliseconds],isnull(Android_Id1,Ord1Id) as Android_Id1,cases,unit,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransOrder1 where SMId in (" + ConPer_Id + ") union SELECT Ord1Id,OrdId,VisId,OrdDocid,Sno,UserId,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,SMID,Partyid,Areaid,ItemId,Qty,rate,Remarks,amount,isnull(android_id,OrdDocid) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Vdate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Vdate AS date), Vdate) AS [Milliseconds],isnull(Android_Id1,Ord1Id) as Android_Id1,cases,unit,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM temp_TransOrder1 where SMId in (" + ConPer_Id + ")) a  " + MQry + " order by a.Milliseconds ";

            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "select top " + NoOfRec + " * from (SELECT  Ord1Id,OrdId,VisId,OrdDocid,Sno,UserId,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,SMID,Partyid,Areaid,ItemId,Qty,rate,Remarks,amount,isnull(android_id,OrdDocid) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Vdate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Vdate AS date), Vdate) AS [Milliseconds],isnull(Android_Id1,Ord1Id) as Android_Id1,cases,unit,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransOrder1 where SMId in (" + ConPer_Id + ") and vdate='" + vdate + "'  union SELECT Ord1Id,OrdId,VisId,OrdDocid,Sno,UserId,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,SMID,Partyid,Areaid,ItemId,Qty,rate,Remarks,amount,isnull(android_id,OrdDocid) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Vdate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Vdate AS date), Vdate) AS [Milliseconds],isnull(Android_Id1,Ord1Id) as Android_Id1,cases,unit,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM temp_TransOrder1 where SMId in (" + ConPer_Id + ") and vdate='" + vdate + "' ) a  " + MQry + " order by a.Milliseconds ";

                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    rst.Add(
                        new RetailerOrder1
                        {
                            Cases = dt.Rows[i]["cases"].ToString(),
                            Unit = dt.Rows[i]["unit"].ToString(),
                            Ord1Id = dt.Rows[i]["Ord1Id"].ToString(),
                            OrdId = dt.Rows[i]["OrdId"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            OrdDocId = dt.Rows[i]["OrdDocId"].ToString(),
                            Sno = dt.Rows[i]["Sno"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            VDate = dt.Rows[i]["VDate"].ToString(),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Partyid = dt.Rows[i]["Partyid"].ToString(),
                            AreaId = dt.Rows[i]["AreaId"].ToString(),
                            Item = dt.Rows[i]["ItemId"].ToString(),
                            Qty = dt.Rows[i]["Qty"].ToString(),
                            Rate = dt.Rows[i]["rate"].ToString(),
                            Remarks = dt.Rows[i]["Remarks"].ToString(),
                            amount = dt.Rows[i]["amount"].ToString(),
                            Android_Id = dt.Rows[i]["Android_id"].ToString(),
                            Android_Id1 = dt.Rows[i]["Android_id1"].ToString(),
                            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()
                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class GetSampleList
        {
            [DataMember]
            public string SampleId { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string SampleDocId { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Partyid { get; set; }
            [DataMember]
            public string AreaId { get; set; }
            [DataMember]
            public string Remarks { get; set; }
            [DataMember]
            public string Amount { get; set; }
            [DataMember]
            public string Millisecond { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
            [DataMember]
            public string ImgUrl { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetRetailerSample()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            string MQry = "";
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where a.Milliseconds > '" + minDate + "'";
            }
            List<GetSampleList> rst = new List<GetSampleList>();

            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");



                Query = "select top " + NoOfRec + " * FROM (SELECT  SampleId,VisId,SampleDocid,isnull(android_id,SampleDocid) as Android_Id ,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,Partyid,Areaid, Remarks,Amount,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],[ImgUrl] FROM TransSample where SMId in (" + ConPer_Id + ") and vdate='" + vdate + "' union SELECT SampleId,VisId,SampleDocid,isnull(android_id,SampleDocid) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,Partyid,Areaid, Remarks,Amount,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],[ImgUrl] FROM temp_TransSample where SMId in (" + ConPer_Id + ") and vdate='" + vdate + "') a  " + MQry + " order by a.Milliseconds";
                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    string path = "";
                    if (dt.Rows[i]["ImgUrl"].ToString() != "")
                    {
                        path = "http://" + host + (dt.Rows[i]["ImgUrl"].ToString()).Replace(@"~", string.Empty);
                    }
                    rst.Add(
                        new GetSampleList
                        {
                            SampleId = dt.Rows[i]["SampleId"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            SampleDocId = dt.Rows[i]["SampleDocId"].ToString(),
                            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                            VDate = dt.Rows[i]["VDate"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Partyid = dt.Rows[i]["Partyid"].ToString(),
                            AreaId = dt.Rows[i]["AreaId"].ToString(),
                            Remarks = dt.Rows[i]["Remarks"].ToString(),
                            Amount = dt.Rows[i]["Amount"].ToString(),
                            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString(),
                            ImgUrl = path

                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class RetailerSample1
        {
            [DataMember]
            public string Android_Id1 { get; set; }
            [DataMember]
            public string Sample1Id { get; set; }
            [DataMember]
            public string SampleId { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string SampleDocId { get; set; }
            [DataMember]
            public string Sno { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Partyid { get; set; }
            [DataMember]
            public string AreaId { get; set; }
            [DataMember]
            public string Item { get; set; }
            [DataMember]
            public string Qty { get; set; }
            [DataMember]
            public string Rate { get; set; }
            [DataMember]
            public string Remarks { get; set; }
            [DataMember]
            public string amount { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string Millisecond { get; set; }
            [DataMember]
            public string Cases { get; set; }
            [DataMember]
            public string Unit { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetRetailerSample1()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            List<RetailerSample1> rst = new List<RetailerSample1>();
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where a.Milliseconds > '" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "select top " + NoOfRec + " * from (SELECT  Sample1Id,SampleId,VisId,SampleDocid,Sno,UserId,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,SMID,Partyid,Areaid,ItemId,Qty,rate,Remarks,amount,isnull(android_id,SampleDocid) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Vdate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Vdate AS date), Vdate) AS [Milliseconds],isnull(Android_Id1,Sample1Id) as Android_Id1,cases,unit,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransSample1 where SMId in (" + ConPer_Id + ") and vdate='" + vdate + "'  union SELECT Sample1Id,SampleId,VisId,SampleDocid,Sno,UserId,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,SMID,Partyid,Areaid,ItemId,Qty,rate,Remarks,amount,isnull(android_id,SampleDocid) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Vdate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Vdate AS date), Vdate) AS [Milliseconds],isnull(Android_Id1,Sample1Id) as Android_Id1,cases,unit,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM temp_TransSample1 where SMId in (" + ConPer_Id + ") and vdate='" + vdate + "' ) a  " + MQry + " order by a.Milliseconds ";

                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    rst.Add(
                        new RetailerSample1
                        {
                            Cases = dt.Rows[i]["cases"].ToString(),
                            Unit = dt.Rows[i]["unit"].ToString(),
                            Sample1Id = dt.Rows[i]["Sample1Id"].ToString(),
                            SampleId = dt.Rows[i]["SampleId"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            SampleDocId = dt.Rows[i]["SampleDocId"].ToString(),
                            Sno = dt.Rows[i]["Sno"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            VDate = dt.Rows[i]["VDate"].ToString(),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Partyid = dt.Rows[i]["Partyid"].ToString(),
                            AreaId = dt.Rows[i]["AreaId"].ToString(),
                            Item = dt.Rows[i]["ItemId"].ToString(),
                            Qty = dt.Rows[i]["Qty"].ToString(),
                            Rate = dt.Rows[i]["rate"].ToString(),
                            Remarks = dt.Rows[i]["Remarks"].ToString(),
                            amount = dt.Rows[i]["amount"].ToString(),
                            Android_Id = dt.Rows[i]["Android_id"].ToString(),
                            Android_Id1 = dt.Rows[i]["Android_id1"].ToString(),
                            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()
                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class GetFailedVisitList
        {
            [DataMember]
            public string FVId { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string FVDocId { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string DistId { get; set; }
            [DataMember]
            public string AreaId { get; set; }
            [DataMember]
            public string Remark { get; set; }
            [DataMember]
            public string NextVisitDate { get; set; }
            [DataMember]
            public string VisitTime { get; set; }
            [DataMember]
            public string CreatedDate { get; set; }
            [DataMember]
            public string reasonId { get; set; }
            [DataMember]
            public string PartyID { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
            [DataMember]
            public string ImgUrl { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetFailedVisit()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = "";
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where a.Milliseconds>'" + minDate + "'";
            }
            List<GetFailedVisitList> rst = new List<GetFailedVisitList>();
            //Query = "select top " + NoOfRec + " * from (SELECT  FVId,VisId,FVDocId,isnull(tf.Android_Id,FVDocId) as Android_Id,mp.partydist,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,tf.UserId,tf.SMID,Distid = (CASE WHEN mp.partydist = 1 THEN tf.PartyId END),Partyid = (CASE WHEN mp.partydist = 0 THEN tf.PartyId END),tf.AreaId,remarks,replace(convert(NVARCHAR, NextVisit, 106), ' ', '/') as NextVisitDate,VisitTime,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.created_date AS date), tf.created_date) AS [Milliseconds],reasonid,tf.longitude,tf.latitude,tf.address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.lat_long_datetime AS date), tf.lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.Mobile_Created_date AS date), tf.Mobile_Created_date) AS [Mobile_Created_date],tf.ImgUrl as [ImgUrl] FROM TransFailedVisit tf LEFT JOIN mastparty mp ON tf.PartyId=mp.PartyId WHERE tf.SMId IN (" + ConPer_Id + ")  union SELECT FVId,VisId,FVDocId,isnull(tf.Android_Id,FVDocId) as Android_Id,mp.partydist,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,tf.UserId,tf.SMID,Distid = (CASE WHEN mp.partydist = 1 THEN tf.PartyId END),Partyid = (CASE WHEN mp.partydist = 0 THEN tf.PartyId END),tf.AreaId,remarks,replace(convert(NVARCHAR, NextVisit, 106), ' ', '/') as NextVisitDate,VisitTime,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.created_date AS date), tf.created_date) AS [Milliseconds],reasonid,tf.longitude,tf.latitude,tf.address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.lat_long_datetime AS date), tf.lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.Mobile_Created_date AS date), tf.Mobile_Created_date) AS [Mobile_Created_date],tf.ImgUrl as [ImgUrl] FROM temp_TransFailedVisit tf LEFT JOIN mastparty mp ON tf.PartyId=mp.PartyId WHERE tf.SMId IN (" + ConPer_Id + ") ) a " + MQry + " order by a.Milliseconds";
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "select top " + NoOfRec + " * from (SELECT  FVId,VisId,FVDocId,isnull(tf.Android_Id,FVDocId) as Android_Id,mp.partydist,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,tf.UserId,tf.SMID,Distid = (CASE WHEN mp.partydist = 1 THEN tf.PartyId END),Partyid = (CASE WHEN mp.partydist = 0 THEN tf.PartyId END),tf.AreaId,remarks,replace(convert(NVARCHAR, NextVisit, 106), ' ', '/') as NextVisitDate,VisitTime,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.created_date AS date), tf.created_date) AS [Milliseconds],reasonid,tf.longitude,tf.latitude,tf.address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.lat_long_datetime AS date), tf.lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.Mobile_Created_date AS date), tf.Mobile_Created_date) AS [Mobile_Created_date],tf.ImgUrl as [ImgUrl] FROM TransFailedVisit tf LEFT JOIN mastparty mp ON tf.PartyId=mp.PartyId WHERE tf.SMId IN (" + ConPer_Id + ") and vdate='" + vdate + "'  union SELECT FVId,VisId,FVDocId,isnull(tf.Android_Id,FVDocId) as Android_Id,mp.partydist,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,tf.UserId,tf.SMID,Distid = (CASE WHEN mp.partydist = 1 THEN tf.PartyId END),Partyid = (CASE WHEN mp.partydist = 0 THEN tf.PartyId END),tf.AreaId,remarks,replace(convert(NVARCHAR, NextVisit, 106), ' ', '/') as NextVisitDate,VisitTime,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.created_date AS date), tf.created_date) AS [Milliseconds],reasonid,tf.longitude,tf.latitude,tf.address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.lat_long_datetime AS date), tf.lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.Mobile_Created_date AS date), tf.Mobile_Created_date) AS [Mobile_Created_date],tf.ImgUrl as [ImgUrl] FROM temp_TransFailedVisit tf LEFT JOIN mastparty mp ON tf.PartyId=mp.PartyId WHERE tf.SMId IN (" + ConPer_Id + ") and vdate='" + vdate + "' ) a " + MQry + " order by a.Milliseconds";
                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    string path = "";
                    if (dt.Rows[i]["ImgUrl"].ToString() != "")
                    {
                        path = "http://" + host + (dt.Rows[i]["ImgUrl"].ToString()).Replace(@"~", string.Empty);
                    }
                    rst.Add(
                        new GetFailedVisitList
                        {
                            FVId = dt.Rows[i]["FVId"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            FVDocId = dt.Rows[i]["FVDocId"].ToString(),
                            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                            VDate = dt.Rows[i]["Vdate"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            DistId = dt.Rows[i]["DistId"].ToString(),
                            AreaId = dt.Rows[i]["AreaId"].ToString(),
                            Remark = dt.Rows[i]["remarks"].ToString(),
                            NextVisitDate = dt.Rows[i]["NextVisitDate"].ToString(),
                            VisitTime = dt.Rows[i]["VisitTime"].ToString(),
                            CreatedDate = dt.Rows[i]["Milliseconds"].ToString(),
                            reasonId = dt.Rows[i]["reasonid"].ToString(),
                            MS = dt.Rows[i]["Milliseconds"].ToString(),
                            PartyID = dt.Rows[i]["Partyid"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString(),
                            ImgUrl = path
                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class PartyCollection
        {
            [DataMember]
            public string CollId { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string CollDocId { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Partyid { get; set; }
            [DataMember]
            public string AreaId { get; set; }
            [DataMember]
            public string Mode { get; set; }
            [DataMember]
            public string Amount { get; set; }
            [DataMember]
            public string PaymentDate { get; set; }
            [DataMember]
            public string Cheque_DD_No { get; set; }
            [DataMember]
            public string Cheque_DD_Date { get; set; }
            [DataMember]
            public string Bank { get; set; }
            [DataMember]
            public string Branch { get; set; }
            [DataMember]
            public string Remarks { get; set; }
            [DataMember]
            public string CreatedDate { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetPartyCollection()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;

            string minDate = objResponse.body[0].minDate;
            //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = "";
            List<PartyCollection> rst = new List<PartyCollection>();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " where a.Milliseconds > '" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "select top " + NoOfRec + " * from (SELECT CollId,VisId,CollDocId,isnull(Android_Id,CollDocId) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,PartyId,AreaId,Mode,Amount,replace(convert(NVARCHAR, paymentDate, 106), ' ', '/') as [paymentDate],Cheque_DDNo,replace(convert(NVARCHAR, Cheque_DD_Date, 106), ' ', '/') as [Cheque_DD_Date],Bank,Branch,Remarks,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransCollection WHERE smid in (" + ConPer_Id + ") and      vdate='" + vdate + "'  union all SELECT CollId,VisId,CollDocId,isnull(Android_Id,CollDocId) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,PartyId,AreaId,Mode,Amount,replace(convert(NVARCHAR, paymentDate, 106), ' ', '/') as [paymentDate],Cheque_DDNo,replace(convert(NVARCHAR, Cheque_DD_Date, 106), ' ', '/') as [Cheque_DD_Date],Bank,Branch,Remarks,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM temp_TransCollection WHERE smid in (" + ConPer_Id + ") and vdate='" + vdate + "' ) a " + MQry + " order by a.Milliseconds";

                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    rst.Add(
                        new PartyCollection
                        {
                            CollId = dt.Rows[i]["CollId"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            CollDocId = dt.Rows[i]["CollDocId"].ToString(),
                            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                            VDate = dt.Rows[i]["VDate"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Partyid = dt.Rows[i]["Partyid"].ToString(),
                            AreaId = dt.Rows[i]["AreaId"].ToString(),
                            Mode = dt.Rows[i]["Mode"].ToString(),
                            Amount = dt.Rows[i]["Amount"].ToString(),
                            PaymentDate = dt.Rows[i]["PaymentDate"].ToString(),
                            Cheque_DD_No = dt.Rows[i]["Cheque_DDNo"].ToString(),
                            Cheque_DD_Date = dt.Rows[i]["Cheque_DD_Date"].ToString(),
                            Bank = dt.Rows[i]["Bank"].ToString(),
                            Branch = dt.Rows[i]["Branch"].ToString(),
                            Remarks = dt.Rows[i]["Remarks"].ToString(),
                            CreatedDate = dt.Rows[i]["Milliseconds"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()

                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class RetailerCompetitor
        {
            [DataMember]
            public string ComptId { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string DocId { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Partyid { get; set; }
            [DataMember]
            public string Item { get; set; }
            [DataMember]
            public string Qty { get; set; }
            [DataMember]
            public string Rate { get; set; }

            [DataMember]
            public string Remarks { get; set; }
            [DataMember]
            public string CompName { get; set; }
            [DataMember]
            public string Discount { get; set; }
            [DataMember]
            public string BrandActivity { get; set; }
            [DataMember]
            public string MeetCtivity { get; set; }
            [DataMember]
            public string RoadShow { get; set; }
            [DataMember]
            public string Scheme { get; set; }
            [DataMember]
            public string OthergernralInfo { get; set; }
            [DataMember]
            public string OtherActivity { get; set; }
            [DataMember]
            public string ImgUrl { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetRetailerCompetitorWithImage()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = ""; string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " Where T.Milliseconds >='" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            List<RetailerCompetitor> rst = new List<RetailerCompetitor>();
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "select top " + NoOfRec + " * from (SELECT ComptId,VisId,DocId,isnull(Android_Id,docid) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,PartyId,Item,Qty,Rate, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date)  AS [Milliseconds],Remarks,CompName,isnull(discount,0.00) as Discount,BrandActivity,MeetActivity,RoadShow,[Scheme/offers],OtherGeneralInfo,OtherActivity,ImgUrl,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransCompetitor WHERE SMId IN (" + ConPer_Id + ") and vdate='" + vdate + "' ) AS T " + MQry + " union select * from (SELECT ComptId,VisId,DocId,isnull(Android_Id,docid) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,PartyId,Item,Qty,Rate, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date)  AS [Milliseconds],Remarks,CompName,isnull(discount,0.00) as Discount,BrandActivity,MeetActivity,RoadShow,[Scheme/offers],OtherGeneralInfo,OtherActivity,ImgUrl,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM temp_TransCompetitor WHERE SMId IN (" + ConPer_Id + ")  and vdate='" + vdate + "' ) as T " + MQry + " order by Milliseconds";

                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    string path = "";
                    if (dt.Rows[i]["ImgUrl"].ToString() != "")
                    {
                        path = "http://" + host + (dt.Rows[i]["ImgUrl"].ToString()).Replace(@"~", string.Empty);
                    }
                    rst.Add(
                        new RetailerCompetitor
                        {
                            ComptId = dt.Rows[i]["ComptId"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            DocId = dt.Rows[i]["DocId"].ToString(),
                            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                            VDate = dt.Rows[i]["VDate"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Partyid = dt.Rows[i]["Partyid"].ToString(),
                            Item = dt.Rows[i]["Item"].ToString(),
                            Qty = dt.Rows[i]["Qty"].ToString(),
                            Rate = dt.Rows[i]["Rate"].ToString(),
                            MS = dt.Rows[i]["Milliseconds"].ToString(),
                            Remarks = dt.Rows[i]["Remarks"].ToString(),
                            CompName = dt.Rows[i]["CompName"].ToString(),
                            Discount = dt.Rows[i]["Discount"].ToString(),
                            BrandActivity = dt.Rows[i]["BrandActivity"].ToString(),
                            MeetCtivity = dt.Rows[i]["MeetActivity"].ToString(),
                            RoadShow = dt.Rows[i]["RoadShow"].ToString(),
                            Scheme = dt.Rows[i]["Scheme/offers"].ToString(),
                            OthergernralInfo = dt.Rows[i]["OtherGeneralInfo"].ToString(),
                            OtherActivity = dt.Rows[i]["OtherActivity"].ToString(),
                            ImgUrl = path,
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()
                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class DistributorCollection
        {
            [DataMember]
            public string CollId { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string CollDocId { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Partyid { get; set; }
            [DataMember]
            public string AreaId { get; set; }
            [DataMember]
            public string Mode { get; set; }
            [DataMember]
            public string Amount { get; set; }
            [DataMember]
            public string PaymentDate { get; set; }
            [DataMember]
            public string Cheque_DD_No { get; set; }
            [DataMember]
            public string Cheque_DD_Date { get; set; }
            [DataMember]
            public string Bank { get; set; }
            [DataMember]
            public string Branch { get; set; }
            [DataMember]
            public string Remarks { get; set; }
            [DataMember]
            public string CreatedDate { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetDistributorCollection()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = "";
            List<DistributorCollection> rst = new List<DistributorCollection>();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " where a.Milliseconds > '" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            //  Query = "SELECT CollId,VisId,CollDocId,ISNULL(Android_Id,CollDocId) AS Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,DistId,Mode,Amount,replace(convert(NVARCHAR, paymentDate, 106), ' ', '/') as [paymentDate],Cheque_DDNo,replace(convert(NVARCHAR, Cheque_DD_Date, 106), ' ', '/') as [Cheque_DD_Date],Bank,Branch,Remarks,(CAST(DATEDIFF(second, '1970-01-01', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Createddate] FROM DistributerCollection WHERE SMId IN (" + ConPer_Id + ") " + MQry + "";
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT top " + NoOfRec + " * from (select CollId,VisId,CollDocId,ISNULL(Android_Id,CollDocId) AS Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,DistId,Mode,Amount,replace(convert(NVARCHAR, paymentDate, 106), ' ', '/') as [paymentDate],Cheque_DDNo,replace(convert(NVARCHAR, Cheque_DD_Date, 106), ' ', '/') as [Cheque_DD_Date],Bank,Branch,Remarks,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM DistributerCollection WHERE SMId IN (" + ConPer_Id + ") and vdate='" + vdate + "'  ) a " + MQry + " order by a.Milliseconds";

                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    rst.Add(
                        new DistributorCollection
                        {
                            CollId = dt.Rows[i]["CollId"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            CollDocId = dt.Rows[i]["CollDocId"].ToString(),
                            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                            VDate = dt.Rows[i]["VDate"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Partyid = dt.Rows[i]["DistId"].ToString(),
                            Mode = dt.Rows[i]["Mode"].ToString(),
                            Amount = dt.Rows[i]["Amount"].ToString(),
                            PaymentDate = dt.Rows[i]["PaymentDate"].ToString(),
                            Cheque_DD_No = dt.Rows[i]["Cheque_DDNo"].ToString(),
                            Cheque_DD_Date = dt.Rows[i]["Cheque_DD_Date"].ToString(),
                            Bank = dt.Rows[i]["Bank"].ToString(),
                            Branch = dt.Rows[i]["Branch"].ToString(),
                            Remarks = dt.Rows[i]["Remarks"].ToString(),
                            CreatedDate = dt.Rows[i]["Milliseconds"].ToString(),
                            MS = dt.Rows[i]["Milliseconds"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()
                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class DistributorDiscussion
        {
            [DataMember]
            public string VisDistId { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Cityid { get; set; }
            [DataMember]
            public string DistId { get; set; }
            [DataMember]
            public string Remark { get; set; }
            [DataMember]
            public string NextVisitDate { get; set; }
            [DataMember]
            public string NextVisitTime { get; set; }
            [DataMember]
            public string SpendFromTime { get; set; }
            [DataMember]
            public string SpendToDate { get; set; }
            [DataMember]
            public string CreatedDate { get; set; }
            [DataMember]
            public string Stock { get; set; }
            [DataMember]
            public string ImgUrl { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string Docid { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
            [DataMember]
            public string Type { get; set; }
        }

        [WebMethod]
        public void JSGetDistributorDiscussionWithImage()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = ""; string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " where a.Milliseconds >'" + minDate + "'";
            }
            List<DistributorDiscussion> rst = new List<DistributorDiscussion>();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT top " + NoOfRec + " * from (select VisDistId,VisId,ISNULL(Android_Id,VisDistId) AS Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,CityId,DistId,RemarkDist AS Remark,replace(convert(NVARCHAR, NextVisitDate, 106), ' ', '/') as NextVisitDate,nextVisitTime,SpentfrTime as SpendfromTime,SpentToTime as SpendToTime,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],stock,ImgUrl,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],[DiscDocid],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransVisitDist WHERE SMId IN (" + ConPer_Id + ") AND Type IS NULL  and  vdate='" + vdate + "'  union SELECT VisDistId,VisId,ISNULL(Android_Id,VisDistId) AS Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,CityId,DistId,RemarkDist AS Remark,replace(convert(NVARCHAR, NextVisitDate, 106), ' ', '/') as NextVisitDate,nextVisitTime,SpentfrTime as SpendfromTime,SpentToTime as SpendToTime,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],stock,ImgUrl,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],[DiscDocid],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM temp_TransVisitDist WHERE SMId IN (" + ConPer_Id + ") AND Type IS NULL    and vdate='" + vdate + "'  ) a " + MQry + " order by a.Milliseconds";

                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    string path = "";
                    if (dt.Rows[i]["ImgUrl"].ToString() != "")
                    {
                        path = "http://" + host + (dt.Rows[i]["ImgUrl"].ToString()).Replace(@"~", string.Empty);
                    }
                    rst.Add(
                        new DistributorDiscussion
                        {
                            Docid = dt.Rows[i]["DiscDocid"].ToString(),
                            VisDistId = dt.Rows[i]["VisDistId"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                            VDate = dt.Rows[i]["VDate"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Cityid = dt.Rows[i]["CityId"].ToString(),
                            DistId = dt.Rows[i]["DistId"].ToString(),
                            Remark = dt.Rows[i]["Remark"].ToString(),
                            NextVisitDate = dt.Rows[i]["NextVisitDate"].ToString(),
                            NextVisitTime = dt.Rows[i]["nextVisitTime"].ToString(),
                            SpendFromTime = dt.Rows[i]["SpendfromTime"].ToString(),
                            SpendToDate = dt.Rows[i]["SpendToTime"].ToString(),
                            CreatedDate = dt.Rows[i]["Milliseconds"].ToString(),
                            Stock = dt.Rows[i]["stock"].ToString(),
                            ImgUrl = path,
                            // ImgUrl = dt.Rows[i]["ImgUrl"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()

                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }


        [WebMethod]
        public void JSGetOtherDiscussionWithImage()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.body[0].ConPer_Id;
            string minDate = objResponse.body[0].minDate;

            Query = "select dataamt from mastenviro";
            List<DistributorDiscussion> rst = new List<DistributorDiscussion>();
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = ""; string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " where a.Milliseconds >'" + minDate + "'";
            }
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT top " + NoOfRec + " * from (select VisDistId,VisId,ISNULL(Android_Id,VisDistId) AS Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,CityId,DistId,RemarkDist AS Remark,replace(convert(NVARCHAR, NextVisitDate, 106), ' ', '/') as NextVisitDate,nextVisitTime,SpentfrTime as SpendfromTime,SpentToTime as SpendToTime,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],stock,ImgUrl,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],[DiscDocid],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],[Type] FROM TransVisitDist WHERE SMId IN (" + ConPer_Id + ") AND Type IS not NULL and  vdate='" + vdate + "'  union SELECT VisDistId,VisId,ISNULL(Android_Id,VisDistId) AS Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,CityId,DistId,RemarkDist AS Remark,replace(convert(NVARCHAR, NextVisitDate, 106), ' ', '/') as NextVisitDate,nextVisitTime,SpentfrTime as SpendfromTime,SpentToTime as SpendToTime,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],stock,ImgUrl,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],[DiscDocid],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],[Type] FROM temp_TransVisitDist WHERE SMId IN (" + ConPer_Id + ") AND Type IS not NULL   and vdate='" + vdate + "'    ) a " + MQry + " order by a.Milliseconds";

                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    string path = "";
                    if (dt.Rows[i]["ImgUrl"].ToString() != "")
                    {
                        path = "http://" + host + (dt.Rows[i]["ImgUrl"].ToString()).Replace(@"~", string.Empty);
                    }
                    rst.Add(
                        new DistributorDiscussion
                        {
                            Docid = dt.Rows[i]["DiscDocid"].ToString(),
                            VisDistId = dt.Rows[i]["VisDistId"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                            VDate = dt.Rows[i]["VDate"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            SMID = dt.Rows[i]["SMId"].ToString(),
                            Cityid = dt.Rows[i]["CityId"].ToString(),
                            DistId = dt.Rows[i]["DistId"].ToString(),
                            Remark = dt.Rows[i]["Remark"].ToString(),
                            NextVisitDate = dt.Rows[i]["NextVisitDate"].ToString(),
                            NextVisitTime = dt.Rows[i]["nextVisitTime"].ToString(),
                            SpendFromTime = dt.Rows[i]["SpendfromTime"].ToString(),
                            SpendToDate = dt.Rows[i]["SpendToTime"].ToString(),
                            CreatedDate = dt.Rows[i]["Milliseconds"].ToString(),
                            Stock = dt.Rows[i]["stock"].ToString(),
                            ImgUrl = path,
                            // ImgUrl = dt.Rows[i]["ImgUrl"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString(),
                            Type = dt.Rows[i]["Type"].ToString()

                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class VisitCode
        {
            [DataMember]
            public string C { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetVisitcode()
        {
            string str = "SELECT * FROM visitcode";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            List<VisitCode> rst = new List<VisitCode>();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                {
                    rst.Add(
                        new VisitCode
                        {
                            C = dt.Rows[i]["code"].ToString()
                        }
                    );
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class GetDynamicmenu
        {

            [DataMember]
            public string Form_Filter { get; set; }
            [DataMember]
            public string pageid { get; set; }
            [DataMember]
            public string viewp { get; set; }
            [DataMember]
            public string addp { get; set; }
            [DataMember]
            public string editp { get; set; }
            [DataMember]
            public string deletep { get; set; }

            [DataMember]
            public string pagename { get; set; }
            [DataMember]
            public string displayname { get; set; }
            [DataMember]
            public string parentid { get; set; }
            [DataMember]
            public string level_idx { get; set; }
            [DataMember]
            public string idx { get; set; }
            [DataMember]
            public string Icon { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetDynamicMenu()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string Smid = objResponse.body[0].SMID;

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string Query = "select roleid from MastSalesRep where smid=" + Smid + "";
            int role_id = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            // Query = @"select * from MastRolePermission_android mra left join mastpage mp on mp.pageid=mra.PageId  where mp.android='Y' and mra.roleid=" + role_id + "";
            Query = @"select mp.*,mra.* ,case when mra.ViewP is null then 'True' else mra.ViewP end as viewPer from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId where mp.android='Y' and mp.level_idx=1 and mp.PageId in (select distinct mp.Parent_Id
                    from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId where mp.android='Y'  and mra.roleid=" + role_id + " and viewp>0 ) union select mp.*,mra.*,case when mra.ViewP is null then 'True' else mra.ViewP end as viewPer from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId  where mp.android='Y' and mra.roleid=" + role_id + " and viewp>0";
            List<GetDynamicmenu> rst = new List<GetDynamicmenu>();
            {
                DataTable dtcheck = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                if (dtcheck.Rows.Count > 0)
                {
                    for (int i = 0; i < dtcheck.Rows.Count; i++)
                    {
                        string path = "";

                        if (dtcheck.Rows[i]["menuicon"].ToString() != "")
                        {
                            path = "http://" + host + (dtcheck.Rows[i]["menuicon"].ToString()).Replace(@"~", string.Empty);
                        }
                        {
                            rst.Add(
                                new GetDynamicmenu
                                {
                                    pageid = dtcheck.Rows[i]["pageid"].ToString(),
                                    pagename = dtcheck.Rows[i]["pagename"].ToString(),
                                    viewp = dtcheck.Rows[i]["viewPer"].ToString(),
                                    addp = dtcheck.Rows[i]["addp"].ToString(),
                                    editp = dtcheck.Rows[i]["editp"].ToString(),
                                    deletep = dtcheck.Rows[i]["deletep"].ToString(),
                                    parentid = dtcheck.Rows[i]["parent_id"].ToString(),
                                    displayname = dtcheck.Rows[i]["displayname"].ToString(),
                                    level_idx = dtcheck.Rows[i]["level_idx"].ToString(),
                                    idx = dtcheck.Rows[i]["idx"].ToString(),
                                    Form_Filter = dtcheck.Rows[i]["android_form"].ToString(),
                                    Icon = path,
                                }
                            );
                        }
                    }
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetDynamicMenuAppwise()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string Smid = objResponse.body[0].SMID;
            string app = objResponse.body[0].app;

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string Query = "select roleid from MastSalesRep where smid=" + Smid + "";
            int role_id = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            // Query = @"select * from MastRolePermission_android mra left join mastpage mp on mp.pageid=mra.PageId  where mp.android='Y' and mra.roleid=" + role_id + "";
            Query = @"select mp.*,mra.* ,case when mra.ViewP is null then 'True' else mra.ViewP end as viewPer from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId where mp.android='Y' and mp.level_idx=1 and mp.PageId in (select distinct mp.Parent_Id
                    from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId where mp.android='Y'  and mra.roleid=" + role_id + " and viewp>0 and mra.app='" + app + "' )   union select mp.*,mra.*,case when mra.ViewP is null then 'True' else mra.ViewP end as viewPer from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId  where mp.android='Y' and mra.roleid=" + role_id + " and viewp>0 and mra.app='" + app + "'";
            List<GetDynamicmenu> rst = new List<GetDynamicmenu>();
            {
                DataTable dtcheck = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                if (dtcheck.Rows.Count > 0)
                {
                    for (int i = 0; i < dtcheck.Rows.Count; i++)
                    {
                        string path = "";
                        if (dtcheck.Rows[i]["menuicon"].ToString() != "")
                        {
                            path = "http://" + host + (dtcheck.Rows[i]["menuicon"].ToString()).Replace(@"~", string.Empty);
                        }
                        {
                            rst.Add(
                                new GetDynamicmenu
                                {
                                    pageid = dtcheck.Rows[i]["pageid"].ToString(),
                                    pagename = dtcheck.Rows[i]["pagename"].ToString(),
                                    viewp = dtcheck.Rows[i]["viewPer"].ToString(),
                                    addp = dtcheck.Rows[i]["addp"].ToString(),
                                    editp = dtcheck.Rows[i]["editp"].ToString(),
                                    deletep = dtcheck.Rows[i]["deletep"].ToString(),
                                    parentid = dtcheck.Rows[i]["parent_id"].ToString(),
                                    displayname = dtcheck.Rows[i]["displayname"].ToString(),
                                    level_idx = dtcheck.Rows[i]["level_idx"].ToString(),
                                    idx = dtcheck.Rows[i]["idx"].ToString(),
                                    Form_Filter = dtcheck.Rows[i]["android_form"].ToString(),
                                    Icon = path,
                                }
                            );
                        }
                    }
                }


            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class DSRValidate
        {
            [DataMember]
            public string msg { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetDSRValidate()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string Smid = objResponse.body[0].SMID;
            string Visitdate = objResponse.body[0].Visitdate;
            string androidid = objResponse.body[0].androidid;

            //string Send = "";
            List<DSRValidate> rst = new List<DSRValidate>();
            //string str = "select count(*) as vcount from TransVisit  where VDate='" + Visitdate + "' and SMId='" + Smid + "' and (appstatus != 'Reject' or appstatus is null)  and Lock=1";
            //int exists = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, str));
            //if (exists == 0)
            //{
            //    Send = "No";
            //}
            //else
            //{
            //    str = "select count(*) as vcount from TransVisit  where VDate='" + Visitdate + "' and SMId='" + Smid + "' and android_id='" + androidid + "' and (appstatus != 'Reject' or appstatus is null)  and Lock=1";
            //    int exists_and = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, str));
            //    if (exists_and > 0)
            //    {
            //        Send = "Via Android";
            //    }
            //    else
            //    {
            //        Send = "Via Web";
            //    }
            //}

            rst.Add(
                new DSRValidate
                {
                    msg = "No"

                }
            );

            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }



        #endregion

        #region PostService Export



        //public class disList
        //{
        //    public List<Descdetail> bodyLine;
        //}
        //public class Descdetail
        //{


        //    public int Userid { get; set; }
        //    public string VDate { get; set; }       
        //    public string NextVisitDate { get; set; }
        //    public int smid { get; set; }
        //    public string frmtime1 { get; set; }
        //    public string toTime1 { get; set; }
        //    public int withuserid { get; set; }
        //    public string modeoftransport { get; set; }
        //    public string vehicleused { get; set; }
        //    public int Lock { get; set; }
        //    public int nwithuserid { get; set; }
        //    public string android_id { get; set; }
        //    public string cityids { get; set; }
        //    public string cityname { get; set; }
        //    public decimal orderamountmail { get; set; }
        //    public decimal orderamountphone { get; set; }
        //    public string visitcode { get; set; }
        //    public decimal Attendance { get; set; }
        //    public int Fromareacode { get; set; }
        //    public decimal OtherExpense { get; set; }
        //    public string AndroidAppRemark { get; set; }
        //    public int toareacode { get; set; }
        //    public int ncityid { get; set; }
        //    public string longitude { get; set; }
        //    public string latitude { get; set; }
        //    public string lat_long_dt { get; set; }
        //    public string mobile_created_date { get; set; }



        //    public int VisId { get; set; }
        //    public int SMId { get; set; }           
        //    public string Remarks { get; set; }
        //    public int ProductClassId { get; set; }
        //    public int ProductSegmentId { get; set; }
        //    public int ProductMatGrp { get; set; }
        //    public string Android_Id { get; set; }
        //    public string ImgUrl { get; set; }  
        //    public string image1 { get; set; }

        //    public int A_OrderNo { get; set; }
        //    public int A_POrderNo { get; set; }
        //    public int A_DemoNo { get; set; }
        //    public int A_FailedVisitNo { get; set; }
        //    public int A_VisitNo { get; set; }
        //    public int A_CompetitorNo { get; set; }
        //    public int A_PartyNo { get; set; }
        //    public int A_DiscussionNo { get; set; }
        //    public int A_DistributorCollectionNo { get; set; }
        //    public int A_PartyCollectionNo { get; set; }
        //    public int A_POrder1No { get; set; }
        //    public int A_LeaveNo { get; set; }
        //    public int A_Order1No { get; set; }
        //    public int A_BeatPlanNo { get; set; }
        //    public int A_distStock_no { get; set; }
        //    public int A_SalesReturn_no { get; set; }
        //    public int A_SalesReturn1_no { get; set; }

        //    public int DistId { get; set; }
        //    public int ItemId { get; set; }
        //    public decimal Qty { get; set; }
        //    public decimal cases { get; set; }
        //    public decimal unit { get; set; }           
        //    public string seqNo { get; set; }
        //    public decimal mrp { get; set; }

        //    public int Sno { get; set; }
        //    public int cityid { get; set; }
        //    public string remarkdist { get; set; }
        //    public string NextVisitTime { get; set; }
        //    public string SpentfrTime { get; set; }
        //    public string SpentToTime { get; set; }
        //    public decimal stock { get; set; }
        //    public string DSRType { get; set; }
        //    public string Mode { get; set; }
        //    public decimal Amount { get; set; }
        //    public string PaymentDate { get; set; }
        //    public string Cheque_DDNo { get; set; }
        //    public string Cheque_DD_Date { get; set; }
        //    public string Bank { get; set; }
        //    public string Branch { get; set; }
        //    public string status { get; set; }
        //    public string androidid { get; set; }
        //    public int visid { get; set; }
        //    public int UserID { get; set; }
        //    public string Nextvisit { get; set; }
        //    public int ReasonID { get; set; }
        //    public string VisitTime { get; set; }
        //    public string Item { get; set; }
        //    public decimal Rate { get; set; }
        //    public int SMID { get; set; }
        //    public string CompName { get; set; }
        //    public decimal Discount { get; set; }
        //    public string BrandActivity { get; set; }
        //    public string MeetActivity { get; set; }
        //    public string RoadShow { get; set; }
        //    public string Scheme { get; set; }
        //    public string OtherGeneralInfo { get; set; }
        //    public string OtherActivity { get; set; }
        //    public decimal OrderAmount { get; set; }


        //    public int OrdId { get; set; }
        //    public decimal amount { get; set; }
        //    public string Android_Id1 { get; set; }
        //    public int selectedDistId { get; set; }
        //    public decimal discount { get; set; }
        //    public string LastRecord { get; set; }
        //    public string modifiedorder { get; set; }

        //    public Int32 PartyId { get; set; }
        //    public string PartyName { get; set; }
        //    public string Address1 { get; set; }
        //    public string Address2 { get; set; }
        //    public Int32 CityId { get; set; }
        //    public Int32 AreaId { get; set; }
        //    public Int32 BeatId { get; set; }
        //    public Int32 UnderId { get; set; }
        //    public string Pin { get; set; }
        //    public string Mobile { get; set; }
        //    public string Phone { get; set; }
        //    public string Remark { get; set; }
        //    public string SyncId { get; set; }
        //    public string IndId { get; set; }
        //    public decimal Potential { get; set; }
        //    public bool Active { get; set; }
        //    public string BlockReason { get; set; }
        //    public int PartyType { get; set; }
        //    public string ContactPerson { get; set; }
        //    public string CSTNo { get; set; }
        //    public string VatTin { get; set; }
        //    public string ServiceTax { get; set; }
        //    public string PanNo { get; set; }
        //    public int UserId { get; set; }
        //    public string DOA { get; set; }
        //    public string DOB { get; set; }
        //    public string Email { get; set; }
        //    public string Longitude { get; set; }
        //    public string Latitude { get; set; }
        //    public string LatlngTime { get; set; }

        //    public string Smid { get; set; }
        //    public string Visid { get; set; }
        //    public string Vdate { get; set; }
        //    public string GSTINNo { get; set; }

        //    public string BaseUnit { get; set; }
        //    public decimal BaseUnitQty { get; set; }
        //    public string PrimaryUnit { get; set; }
        //    public decimal PrimaryUnitQty { get; set; }
        //    public string SecondaryUnit { get; set; }
        //    public decimal SecondaryUnitQty { get; set; }
        //    public decimal PrimaryUnitConversion { get; set; }
        //    public decimal SecondaryUnitConversion { get; set; }   



        //}

        [DataContract]
        public class Visit
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string DocumentId { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string Modifyord { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransVisit()
        {
            string createText = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            int Userid = objResponse.bodyLine[0].Userid;
            string VDate = objResponse.bodyLine[0].VDate;
            string NextVisitDate = objResponse.bodyLine[0].NextVisitDate;
            string Remarks = objResponse.bodyLine[0].Remarks;
            int smid = objResponse.bodyLine[0].smid;
            string frmtime1 = objResponse.bodyLine[0].frmtime1;
            string toTime1 = objResponse.bodyLine[0].toTime1;
            int withuserid = objResponse.bodyLine[0].withuserid;
            string modeoftransport = objResponse.bodyLine[0].modeoftransport;
            string vehicleused = objResponse.bodyLine[0].vehicleused;
            int Lock = objResponse.bodyLine[0].Lock;
            int nwithuserid = objResponse.bodyLine[0].nwithuserid;
            string android_id = objResponse.bodyLine[0].android_id;
            string cityids = objResponse.bodyLine[0].cityids;
            string cityname = objResponse.bodyLine[0].cityname;
            decimal orderamountmail = objResponse.bodyLine[0].orderamountmail;
            decimal orderamountphone = objResponse.bodyLine[0].orderamountphone;
            string visitcode = objResponse.bodyLine[0].visitcode;
            decimal Attendance = objResponse.bodyLine[0].Attendance;
            int Fromareacode = objResponse.bodyLine[0].Fromareacode;
            decimal OtherExpense = objResponse.bodyLine[0].OtherExpense;
            string AndroidAppRemark = objResponse.bodyLine[0].AndroidAppRemark;
            int toareacode = objResponse.bodyLine[0].toareacode;
            int ncityid = objResponse.bodyLine[0].ncityid;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            createText += "" + Userid + "," + VDate + "," + NextVisitDate + "," + Remarks + "," + smid + "," + frmtime1 + "," + toTime1 + "," + withuserid + "," + modeoftransport + "," + vehicleused + "," + Lock + "," + nwithuserid + "," + android_id + "," + cityids + "," + cityname + ", " + orderamountmail + "," + orderamountphone + "," + visitcode + "," + Attendance + ", " + Fromareacode + ", " + OtherExpense + ", " + AndroidAppRemark + ", " + toareacode + ", " + ncityid + ", " + longitude + ", " + latitude + ", " + lat_long_dt + ", " + mobile_created_date + "" + Environment.NewLine;



            //int Userid = 468;
            //string VDate = "2020-08-20";
            //string NextVisitDate = "2020-08-20";
            //string Remarks = "";
            //int smid = 1245;
            //string frmtime1 = "11:13";
            //string toTime1 = "18:30";
            //int withuserid = 0;
            //string modeoftransport = "2 WHEELER";
            //string vehicleused = "Own";
            //int Lock = 0;
            //int nwithuserid = 0;
            //string android_id = "242  00000054";
            //string cityids = "6515,6581,7344";
            //string cityname = "AGRA,KANPUR,KANPUR DIHAT";
            //decimal orderamountmail = 0.00M;
            //decimal orderamountphone = 0.00M;
            //string visitcode = "";
            //decimal Attendance = 0;
            //int Fromareacode = 0;
            //decimal OtherExpense = 0;
            //string AndroidAppRemark = "";
            //int toareacode = 0;
            //int ncityid = 6515;
            //string longitude = "-122.0840661";
            //string latitude = "37.4220132";
            //string lat_long_dt = "1592458537073";
            //string mobile_created_date = "1592459156569";

            int exists = 0;
            string minDate1 = "", mobiletime = "";
            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(mobile_created_date))
            {
                double ticks1 = double.Parse(mobile_created_date);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }


            string id = "0"; string documentid = "0";
            string Millisecond = "";

            WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
            string Address = "";
            if (latitude != "")
            {
                Address = DMT.InsertAddress(latitude, longitude);
            }

            try
            {
                //Query = "select *  from TransVisit  where VDate='" + VDate + "' and SMId=" + smid + " ";
                Query = "select visid,VisitDocId,cityids,cityname,appstatus from TransVisit  where VDate='" + VDate + "' and SMId=" + smid + " ";
                createText += " @@@@@@  Select to table   @@@@@" + Query + "" + Environment.NewLine;
                DataTable dtdsr = DbConnectionDAL.getFromDataTable(Query);
                if (dtdsr.Rows.Count > 0)
                {
                    exists = Convert.ToInt32(dtdsr.Rows[0]["visid"].ToString());
                    if (exists > 0)
                    {
                        string appstat = ""; string getcityidsfromweb = ""; string getcitynamessfromweb = "";

                        documentid = dtdsr.Rows[0]["VisitDocId"].ToString(); getcityidsfromweb = dtdsr.Rows[0]["cityids"].ToString();
                        getcitynamessfromweb = dtdsr.Rows[0]["cityname"].ToString();
                        string[] cityidchk = cityids.Split(','); string[] cityinamechk = cityname.Split(',');
                        for (int i = 0; i < cityidchk.Length; i++)
                        {
                            if (!getcityidsfromweb.Contains(cityidchk[i]))
                            {
                                getcityidsfromweb = getcityidsfromweb + "," + cityidchk[i];
                                getcitynamessfromweb = getcitynamessfromweb + "," + cityinamechk[i];
                            }

                        }
                        if (dtdsr.Rows[0]["appstatus"].ToString() == "Reject")
                        {
                            appstat = ",appstatus=null,appby=null,appremark=null,appbysmid=null";
                        }


                        //Lock = 0;
                        Query = @"update TransVisit set   VisitDocId='" + documentid + "',UserId=" + Userid + ",Created_date=DateAdd(minute,330,getutcdate()),VDate='" + VDate + "',NextVisitDate='" + NextVisitDate + "', Remark='" + Remarks + "',SMId=" + smid + " , ncityid=" + ncityid + ", WithUserId=" + withuserid + ",ModeOfTransport='" + modeoftransport + "', VehicleUsed='" + vehicleused + "', nWithUserId=" + nwithuserid + ", Android_Id='" + android_id + "', cityIdS='" + getcityidsfromweb + "', cityName='" + getcitynamessfromweb + "', OrderAmountMail= " + orderamountmail + ", OrderAmountPhone=" + orderamountphone + " ,visitcode='" + visitcode + "',Attendance=" + Attendance + ", toareacode=" + toareacode + ",Fromareacode=" + Fromareacode + ",OtherExpense=" + OtherExpense + ",AndroidAppRemark='" + AndroidAppRemark + "',Latitude='" + latitude + "',Longitude='" + longitude + "',Address='" + Address + "' ,Lat_long_datetime='" + minDate1 + "' " + appstat + " where VDate='" + VDate + "' and SMId=" + smid + " ";
                        createText += " @@@@@@  Update to table   @@@@@" + Query + "" + Environment.NewLine;
                        exists = Convert.ToInt32(DbConnectionDAL.ExecuteQuery(Query));
                    }
                }
                else
                {
                    try
                    {
                        documentid = Settings.GetDocID("VISSN", DateTime.Now);
                        Settings.SetDocID("VISSN", documentid);
                        Query = "INSERT INTO dbo.TransVisit (VisitDocId, UserId, VDate, NextVisitDate, Remark, SMId, WithUserId, ModeOfTransport, VehicleUsed, Lock, nWithUserId, Android_Id, cityIdS, cityName, OrderAmountMail, OrderAmountPhone,visitcode,Attendance,Fromareacode,OtherExpense,AndroidAppRemark,toareacode,ncityid,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
                      " VALUES ('" + documentid + "', " + Userid + ", '" + VDate + "', '" + NextVisitDate + "', '" + Remarks + "', " + smid + " , " + withuserid + ", '" + modeoftransport + "', '" + vehicleused + "', " + Lock + ", " + nwithuserid + ", '" + android_id + "', '" + cityids + "', '" + cityname + "', " + orderamountmail + ", " + orderamountphone + ",'" + visitcode + "'," + Attendance + "," + Fromareacode + "," + OtherExpense + ",'" + AndroidAppRemark + "'," + toareacode + "," + ncityid + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";
                        createText += " @@@@@@  Insert to table   @@@@@" + Query + "" + Environment.NewLine;
                        exists = Convert.ToInt32(DbConnectionDAL.ExecuteQuery(Query));
                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@  Exception Generated  @@@@@" + ex.ToString() + "" + Environment.NewLine;
                        using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + smid + "_JInsertTransVisit_" + VDate + ".txt"), true))
                        {
                            file2.WriteLine(createText);
                            file2.Close();
                        }
                    }

                }
                if (exists > 0)
                {
                    Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS Milliseconds  from Transvisit where Visitdocid='" + documentid + "'";
                    DataTable dtvisit = new DataTable();
                    dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                    if (dtvisit.Rows.Count > 0)
                    {
                        id = dtvisit.Rows[0]["VisId"].ToString();
                        documentid = dtvisit.Rows[0]["VisitDocId"].ToString();
                        Millisecond = dtvisit.Rows[0]["Milliseconds"].ToString();
                    }
                }
            }
            catch (Exception ex)
            {
                createText += " @@@@@@  Exception Generated  @@@@@" + ex.ToString() + "" + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + smid + "_JInsertTransVisit_" + VDate + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }

            List<Visit> rst = new List<Visit>();
            {
                rst.Add(
                    new Visit
                    {
                        Id = id,
                        DocumentId = documentid,
                        MS = Millisecond

                    }
                );
            }
            createText += " @@@@@@   Providing Response To Android  @@@@@" + id + ", " + documentid + ", " + Millisecond + "" + Environment.NewLine;
            createText += " @@@@@@   Providing Response To Android  @@@@@" + JsonConvert.SerializeObject(rst) + "" + Environment.NewLine;
            createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + smid + "_JInsertTransVisit_" + VDate + ".txt"), true))
            {
                file2.WriteLine(createText);
                file2.Close();
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransDemoWithImage()
        {
            string Query = ""; string Query1 = ""; string filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);
            int VisId = objResponse.bodyLine[0].VisId;
            int UserId = objResponse.bodyLine[0].UserId;
            string VDate = objResponse.bodyLine[0].VDate;
            int SMId = objResponse.bodyLine[0].SMId;
            int PartyId = objResponse.bodyLine[0].PartyId;
            string Remarks = objResponse.bodyLine[0].Remarks;
            int AreaId = objResponse.bodyLine[0].AreaId;
            int ProductClassId = objResponse.bodyLine[0].ProductClassId;
            int ProductSegmentId = objResponse.bodyLine[0].ProductSegmentId;
            int ProductMatGrp = objResponse.bodyLine[0].ProductMatGrp;
            string Android_Id = objResponse.bodyLine[0].Android_Id;
            string ImgUrl = objResponse.bodyLine[0].ImgUrl;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string image1 = objResponse.bodyLine[0].image1;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;

            if (string.IsNullOrEmpty(mobile_created_date))
            {
                mobile_created_date = "0";
            }

            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(mobile_created_date))
            {
                double ticks1 = double.Parse(mobile_created_date);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string docID = Settings.GetDocID("DEMSN", DateTime.Now);
            Settings.SetDocID("DEMSN", docID);
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;
            if (image1.Contains("http://"))
            {
                ImgUrl = image1.Replace(path, "~");
            }
            else if (image1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(image1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(SMId + '-' + timeStamp);
                {
                    //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                    string filePath = Server.MapPath("~/DSRImages" + "/D_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    ImgUrl = "~/DSRImages" + "/D_" + filename + ".png";
                }

            }
            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }

            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
            if (ChkLock == "True")
            {
                string insertfromtemp = @"INSERT INTO TransDemo ([VisId],[DemoDocId],[UserId],[VDate],[SMId],[PartyId],[Remarks],[AreaId],[CompleteAppDetail],[AvailablityShop],[IsPartyConverted],[NewAppArea],[TechAdvantage],[TechSuggestion],[NewApp],[OrderType],[ProductClassId],[ProductSegmentId],[ProductMatGrp],[ItemId],[ImgURL],created_date,android_id,Mobile_Created_date)
                                         SELECT [VisId] ,[DemoDocId] ,[UserId] ,[VDate] ,[SMId] ,[PartyId] ,[Remarks] ,[AreaId] ,[CompleteAppDetail] ,[AvailablityShop]  ,[IsPartyConverted],[NewAppArea],[TechAdvantage],[TechSuggestion],[NewApp],[OrderType],[ProductClassId],[ProductSegmentId],[ProductMatGrp],[ItemId],[ImgURL],created_date,android_id,Mobile_Created_date FROM Temp_TransDemo where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
                string updatevisid = "update TransDemo set visid=" + VisId + " where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                string deletefromtemp = "delete from  Temp_TransDemo  where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS Milliseconds   from Transdemo where DemoDocId='" + docID + "'";


                Query1 = "select * from Transdemo where Android_Id='" + Android_Id + "'";
                DataTable dt = DbConnectionDAL.getFromDataTable(Query1);
                if (dt.Rows.Count > 0)
                {
                    Query1 = "delete from Transdemo where Android_Id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                // string Address = DMT.InsertAddress(latitude, longitude);
                string str = "INSERT INTO dbo.Transdemo (VisId,DemoDocId, UserId,VDate,SMId, PartyId,Remarks,AreaId,ProductClassId,ProductSegmentId,ProductMatGrp,Android_Id,ImgUrl,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
                " VALUES ('" + VisId + "', '" + docID + "', '" + UserId + "', '" + VDate + "', " + SMId + " , '" + PartyId + "','" + Remarks + "', " + AreaId + ", " + ProductClassId + ", " + ProductSegmentId + ", " + ProductMatGrp + ", '" + Android_Id + "', '" + ImgUrl + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }
            }
            else if (ChkLock == "False")
            {
                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date) AS Milliseconds from Temp_Transdemo where DemoDocId='" + docID + "'";


                Query1 = "select * from Temp_Transdemo where Android_Id='" + Android_Id + "'";
                DataTable dt = DbConnectionDAL.getFromDataTable(Query1);
                if (dt.Rows.Count > 0)
                {
                    Query1 = "delete from Temp_Transdemo where Android_Id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                //  string Address = DMT.InsertAddress(latitude, longitude);
                string str = "INSERT INTO dbo.Temp_Transdemo (VisId,DemoDocId, UserId,VDate,SMId, PartyId,Remarks,AreaId,ProductClassId,ProductSegmentId,ProductMatGrp,Android_Id,ImgUrl,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
                " VALUES ('" + VisId + "', '" + docID + "', '" + UserId + "', '" + VDate + "', " + SMId + " , '" + PartyId + "','" + Remarks + "', " + AreaId + ", " + ProductClassId + ", " + ProductSegmentId + ", " + ProductMatGrp + ", '" + Android_Id + "', '" + ImgUrl + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<Visit> rst = new List<Visit>();
            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            {
                rst.Add(
                    new Visit
                    {
                        Id = dtvisit.Rows[i]["DemoId"].ToString(),
                        DocumentId = dtvisit.Rows[i]["DemoDocId"].ToString(),
                        MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class DuplicateMobile
        {
            [DataMember]
            public string msg { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertAndroidEnviro()
        {

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            int SMID = objResponse.bodyLine[0].SMId;
            int A_OrderNo = objResponse.bodyLine[0].A_OrderNo;
            int A_POrderNo = objResponse.bodyLine[0].A_POrderNo;
            int A_DemoNo = objResponse.bodyLine[0].A_DemoNo;
            int A_FailedVisitNo = objResponse.bodyLine[0].A_FailedVisitNo;
            int A_VisitNo = objResponse.bodyLine[0].A_VisitNo;
            int A_CompetitorNo = objResponse.bodyLine[0].A_CompetitorNo;
            int A_PartyNo = objResponse.bodyLine[0].A_PartyNo;
            int A_DiscussionNo = objResponse.bodyLine[0].A_DiscussionNo;
            int A_DistributorCollectionNo = objResponse.bodyLine[0].A_DistributorCollectionNo;
            int A_PartyCollectionNo = objResponse.bodyLine[0].A_PartyCollectionNo;
            int A_POrder1No = objResponse.bodyLine[0].A_POrder1No;
            int A_LeaveNo = objResponse.bodyLine[0].A_LeaveNo;
            int A_Order1No = objResponse.bodyLine[0].A_Order1No;
            int A_BeatPlanNo = objResponse.bodyLine[0].A_BeatPlanNo;
            int A_distStock_no = objResponse.bodyLine[0].A_distStock_no;
            int A_SalesReturn_no = objResponse.bodyLine[0].A_SalesReturn_no;
            int A_SalesReturn1_no = objResponse.bodyLine[0].A_SalesReturn1_no;

            string msg1 = "";
            string Query = "Delete  from AndroidEnviro where SMID=" + SMID + "";
            if (DbConnectionDAL.GetScalarValue(CommandType.Text, Query) != "0")
            { }
            string str = "INSERT INTO dbo.AndroidEnviro (SMID,A_OrderNo, A_POrderNo, A_DemoNo,A_FailedVisitNo,A_VisitNo, A_CompetitorNo,A_PartyNo,A_DiscussionNo,A_DistributorCollectionNo,A_PartyCollectionNo,A_POrder1No,A_LeaveNo,A_Order1No,A_BeatPlanNo,A_distStock_no,A_SalesReturn_no,A_SalesReturn1_no) " +
            " VALUES (" + SMID + ", " + A_OrderNo + ", " + A_POrderNo + ", " + A_DemoNo + ", " + A_FailedVisitNo + ", " + A_VisitNo + " , " + A_CompetitorNo + ", " + A_PartyNo + ", " + A_DiscussionNo + ", " + A_DistributorCollectionNo + ", " + A_PartyCollectionNo + ", " + A_POrder1No + ", " + A_LeaveNo + ", " + A_Order1No + ", " + A_BeatPlanNo + "," + A_distStock_no + "," + A_SalesReturn_no + "," + A_SalesReturn1_no + ")";

            if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
            { msg1 = "Data Inserted"; }
            else
            { msg1 = "Data Not Inserted"; }
            List<DuplicateMobile> rst = new List<DuplicateMobile>();

            rst.Add(
                   new DuplicateMobile
                   {
                       msg = msg1
                   }
               );

            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class modaldiststk
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string DocumentId { get; set; }
            [DataMember]
            public string MS { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SaveDistStockDeleteInsert1()
        {

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            int VisId = objResponse.bodyLine[0].VisId;
            int UserId = objResponse.bodyLine[0].UserId;
            string VDate = objResponse.bodyLine[0].VDate;
            int SMId = objResponse.bodyLine[0].SMId;
            int DistId = objResponse.bodyLine[0].DistId;
            int AreaId = objResponse.bodyLine[0].AreaId;
            int ItemId = objResponse.bodyLine[0].ItemId;
            decimal Qty = objResponse.bodyLine[0].Qty;
            string Android_Id = objResponse.bodyLine[0].Android_Id;
            decimal cases = objResponse.bodyLine[0].cases;
            decimal unit = objResponse.bodyLine[0].unit;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;
            string ImgUrl = objResponse.bodyLine[0].ImgUrl;
            string image1 = objResponse.bodyLine[0].image1;
            string seqNo = objResponse.bodyLine[0].seqNo;
            decimal mrp = objResponse.bodyLine[0].mrp;


            string str = string.Empty; string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            if (string.IsNullOrEmpty(mobile_created_date))
            {
                mobile_created_date = "0";
            }
            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(mobile_created_date))
            {
                double ticks1 = double.Parse(mobile_created_date);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;
            if (image1.Contains("http://"))
            {
                ImgUrl = image1.Replace(path, "~");
            }
            else if (image1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(image1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(SMId + '-' + timeStamp);
                {
                    //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                    string filePath = Server.MapPath("~/DSRImages" + "/DistStock_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    ImgUrl = "~/DSRImages" + "/DistStock_" + filename + ".png";
                }

            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

            //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            //{
            //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
            //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
            //    if (dtfr.Rows.Count > 0)
            //    {
            //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
            //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
            //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

            //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
            //        {
            //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
            //        }
            //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
            //        {
            //            totime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
            //        }
            //    }
            //}

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }

            string docID = Settings.GetDocID("DIS", DateTime.Now);
            Settings.SetDocID("DIS", docID);
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
            string distsynccode = DbConnectionDAL.GetScalarValue(CommandType.Text, "select SyncId from Mastparty where Partyid=" + Convert.ToInt32(DistId) + "").ToString();
            if (ChkLock == "True")
            {
                if (seqNo == "0")
                {
                    string deleteoldstock = "delete from  TransDistStock  where VDate='" + VDate + "' and smid=" + SMId + " and distid=" + DistId + "";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deleteoldstock);
                }
                string insertfromtemp = @"INSERT INTO TransDistStock (VisId,STKDocId,UserId,VDate,SMId,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,ImgUrl)
                             SELECT VisId,STKDocId,UserId,VDate,SMId,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,ImgUrl
                            FROM temp_TransDistStock where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);

                string updatevisid = "update TransDistStock set visid=" + VisId + " where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);

                string deletefromtemp = "delete from  temp_TransDistStock  where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                //   Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from TransOrder where OrdDocId='" + OrdDocId + "'";

                str = "select * from TransDistStock where  android_id='" + Android_Id + "'";
                DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    str = "delete from TransDistStock where android_id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(str);
                }

                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                // string Address = DMT.InsertAddress(latitude, longitude);
                str = @"INSERT INTO TransDistStock(VisId,STKDocId,	UserId,	VDate,SMId,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,ImgUrl) VALUES  ( " + VisId + ",'" + docID + "'," + UserId + ",'" + VDate + "',	" + SMId + "," + DistId + ",'" + distsynccode + "' , " + AreaId + "," + ItemId + "," + Qty + ",'" + Android_Id + "',DateAdd(minute,330,getutcdate())," + unit + "," + cases + ",'" + Address + "','" + latitude + "','" + longitude + "','" + minDate1 + "','" + mobiletime + "','" + ImgUrl + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }

                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from TransDistStock where VisId=" + VisId + "";
            }
            else if (ChkLock == "False")
            {
                //  Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + OrdDocId + "'";

                if (seqNo == "0")
                {
                    string deleteoldstocktemp = "delete from  temp_TransDistStock  where VDate='" + VDate + "' and smid=" + SMId + " and distid=" + DistId + "";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deleteoldstocktemp);
                }
                str = "select * from temp_TransDistStock where  android_id='" + Android_Id + "'";
                DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    str = "delete from temp_TransDistStock where android_id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(str);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                // string Address = DMT.InsertAddress(latitude, longitude);
                str = @"INSERT INTO temp_TransDistStock(VisId,	STKDocId,	UserId,	VDate,	SMId,DistId,DistCode,AreaId,ItemId,	Qty,Android_Id,	Created_date,unit,	cases,	Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,ImgUrl,MRP) VALUES  ( " + VisId + ",'" + docID + "'," + UserId + ",'" + VDate + "',	" + SMId + "," + DistId + ",'" + distsynccode + "'," + AreaId + " ," + ItemId + "," + Qty + ",'" + Android_Id + "',DateAdd(minute,330,getutcdate())," + unit + "," + cases + ",'" + Address + "','" + latitude + "','" + longitude + "','" + minDate1 + "','" + mobiletime + "','" + ImgUrl + "'," + mrp + ")";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }

                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from temp_TransDistStock where VisId=" + VisId + "";
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<modaldiststk> rst = new List<modaldiststk>();
            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            {
                rst.Add(
                    new modaldiststk
                    {
                        Id = dtvisit.Rows[i]["stkid"].ToString(),
                        DocumentId = dtvisit.Rows[i]["STKDocId"].ToString(),
                        MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }

            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SaveDistStockDeleteInsert1_V1()
        {

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            int VisId = objResponse.bodyLine[0].VisId;
            int UserId = objResponse.bodyLine[0].UserId;
            string VDate = objResponse.bodyLine[0].VDate;
            int SMId = objResponse.bodyLine[0].SMId;
            int DistId = objResponse.bodyLine[0].DistId;
            int AreaId = objResponse.bodyLine[0].AreaId;
            int ItemId = objResponse.bodyLine[0].ItemId;
            decimal Qty = objResponse.bodyLine[0].Qty;
            string Android_Id = objResponse.bodyLine[0].Android_Id;
            decimal cases = objResponse.bodyLine[0].cases;
            decimal unit = objResponse.bodyLine[0].unit;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;
            string ImgUrl = objResponse.bodyLine[0].ImgUrl;
            string image1 = objResponse.bodyLine[0].image1;
            string seqNo = objResponse.bodyLine[0].seqNo;
            decimal mrp = objResponse.bodyLine[0].mrp;
            string BaseUnit = objResponse.bodyLine[0].BaseUnit;
            decimal BaseUnitQty = objResponse.bodyLine[0].BaseUnitQty;
            string PrimaryUnit = objResponse.bodyLine[0].PrimaryUnit;
            decimal PrimaryUnitQty = objResponse.bodyLine[0].PrimaryUnitQty;
            string SecondaryUnit = objResponse.bodyLine[0].SecondaryUnit;
            decimal SecondaryUnitQty = objResponse.bodyLine[0].SecondaryUnitQty;
            decimal PrimaryUnitConversion = objResponse.bodyLine[0].PrimaryUnitConversion;
            decimal SecondaryUnitConversion = objResponse.bodyLine[0].SecondaryUnitConversion;


            string str = string.Empty; string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            if (string.IsNullOrEmpty(mobile_created_date))
            {
                mobile_created_date = "0";
            }
            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(mobile_created_date))
            {
                double ticks1 = double.Parse(mobile_created_date);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;
            if (image1.Contains("http://"))
            {
                ImgUrl = image1.Replace(path, "~");
            }
            else if (image1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(image1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(SMId + '-' + timeStamp);
                {
                    //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                    string filePath = Server.MapPath("~/DSRImages" + "/DistStock_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    ImgUrl = "~/DSRImages" + "/DistStock_" + filename + ".png";
                }

            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

            //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            //{
            //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
            //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
            //    if (dtfr.Rows.Count > 0)
            //    {
            //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
            //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
            //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

            //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
            //        {
            //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
            //        }
            //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
            //        {
            //            totime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
            //        }
            //    }
            //}

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }

            string docID = Settings.GetDocID("DIS", DateTime.Now);
            Settings.SetDocID("DIS", docID);
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
            string distsynccode = DbConnectionDAL.GetScalarValue(CommandType.Text, "select SyncId from Mastparty where Partyid=" + Convert.ToInt32(DistId) + "").ToString();
            if (ChkLock == "True")
            {
                if (seqNo == "0")
                {
                    string deleteoldstock = "delete from  TransDistStock  where VDate='" + VDate + "' and smid=" + SMId + " and distid=" + DistId + "";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deleteoldstock);
                }
                string insertfromtemp = @"INSERT INTO TransDistStock (VisId,STKDocId,UserId,VDate,SMId,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,ImgUrl)
                             SELECT VisId,STKDocId,UserId,VDate,SMId,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,ImgUrl
                            FROM temp_TransDistStock where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);

                string updatevisid = "update TransDistStock set visid=" + VisId + " where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);

                string deletefromtemp = "delete from  temp_TransDistStock  where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                //   Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from TransOrder where OrdDocId='" + OrdDocId + "'";

                str = "select * from TransDistStock where  android_id='" + Android_Id + "'";
                DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    str = "delete from TransDistStock where android_id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(str);
                }

                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                // string Address = DMT.InsertAddress(latitude, longitude);
                str = @"INSERT INTO TransDistStock(VisId,STKDocId,	UserId,	VDate,SMId,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,ImgUrl) VALUES  ( " + VisId + ",'" + docID + "'," + UserId + ",'" + VDate + "',	" + SMId + "," + DistId + ",'" + distsynccode + "' , " + AreaId + "," + ItemId + "," + Qty + ",'" + Android_Id + "',DateAdd(minute,330,getutcdate())," + unit + "," + cases + ",'" + Address + "','" + latitude + "','" + longitude + "','" + minDate1 + "','" + mobiletime + "','" + ImgUrl + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }

                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from TransDistStock where VisId=" + VisId + "";
            }
            else if (ChkLock == "False")
            {
                //  Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + OrdDocId + "'";

                if (seqNo == "0")
                {
                    string deleteoldstocktemp = "delete from  temp_TransDistStock  where VDate='" + VDate + "' and smid=" + SMId + " and distid=" + DistId + "";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deleteoldstocktemp);
                }
                str = "select * from temp_TransDistStock where  android_id='" + Android_Id + "'";
                DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    str = "delete from temp_TransDistStock where android_id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(str);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                // string Address = DMT.InsertAddress(latitude, longitude);
                str = @"INSERT INTO Temp_TransDistStock(VisId,	STKDocId,	UserId,	VDate,	SMId,DistId,DistCode,AreaId,ItemId,	Qty,Android_Id,	Created_date,unit,	cases,	Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,ImgUrl,MRP,BaseUnit,BaseUnitQty,PrimaryUnit,PrimaryUnitQty,SecondaryUnit,SecondaryUnitQty,PrimaryUnitConversion,SecondaryUnitConversion) VALUES  ( " + VisId + ",'" + docID + "'," + UserId + ",'" + VDate + "',	" + SMId + "," + DistId + ",'" + distsynccode + "'," + AreaId + " ," + ItemId + "," + Qty + ",'" + Android_Id + "',DateAdd(minute,330,getutcdate())," + unit + "," + cases + ",'" + Address + "','" + latitude + "','" + longitude + "','" + minDate1 + "','" + mobiletime + "','" + ImgUrl + "'," + mrp + ",'" + BaseUnit + "'," + BaseUnitQty + ",'" + PrimaryUnit + "', " + PrimaryUnitQty + ", '" + SecondaryUnit + "', " + SecondaryUnitQty + ", " + PrimaryUnitConversion + ", " + SecondaryUnitConversion + ")";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }

                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from temp_TransDistStock where VisId=" + VisId + "";
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<modaldiststk> rst = new List<modaldiststk>();
            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            {
                rst.Add(
                    new modaldiststk
                    {
                        Id = dtvisit.Rows[i]["stkid"].ToString(),
                        DocumentId = dtvisit.Rows[i]["STKDocId"].ToString(),
                        MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }

            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class VisitDist
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string DocumentId { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertDSROtherActivity()
        {

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            int Userid = objResponse.bodyLine[0].Userid;
            int VisId = objResponse.bodyLine[0].VisId;
            int Sno = objResponse.bodyLine[0].Sno;
            string VDate = objResponse.bodyLine[0].VDate;
            int cityid = objResponse.bodyLine[0].cityid;
            int SMId = objResponse.bodyLine[0].SMId;
            int DistId = objResponse.bodyLine[0].DistId;
            string remarkdist = objResponse.bodyLine[0].remarkdist;
            string Android_Id = objResponse.bodyLine[0].Android_Id;
            string NextVisitDate = objResponse.bodyLine[0].NextVisitDate;
            string NextVisitTime = objResponse.bodyLine[0].NextVisitTime;
            string SpentfrTime = objResponse.bodyLine[0].SpentfrTime;
            string SpentToTime = objResponse.bodyLine[0].SpentToTime;
            string ImgUrl = objResponse.bodyLine[0].ImgUrl;
            decimal stock = objResponse.bodyLine[0].stock;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string image1 = objResponse.bodyLine[0].image1;
            string DSRType = objResponse.bodyLine[0].DSRType;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;

            string Query = ""; string Query1 = ""; string filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";


            if (string.IsNullOrEmpty(mobile_created_date))
            {
                mobile_created_date = "0";
            }

            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(mobile_created_date))
            {
                double ticks1 = double.Parse(mobile_created_date);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;
            if (image1.Contains("http://"))
            {
                ImgUrl = image1.Replace(path, "~");
            }
            else if (image1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(image1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(SMId + '-' + timeStamp);
                {
                    string filePath = Server.MapPath("~/DSRImages" + "/DistDisc_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    ImgUrl = "~/DSRImages" + "/DistDisc_" + filename + ".png";
                }

            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }

            string docID = Settings.GetDocID("DDISC", DateTime.Now);
            Settings.SetDocID("DDISC", docID);
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
            if (ChkLock == "True")
            {
                string insertfromtemp = @"INSERT INTO [TransVisitDist] ([UserId],[VisId] ,[Sno] ,[VDate] ,[cityId] ,[SMId] ,[DistId] ,[areaId] ,[remarkDist],[remarkArea],[remarkL1] ,[L1UserId],[DissType],[NextVisitDate],[NextVisitTime],[SpentfrTime],[SpentToTime],[ImgUrl],[created_date],[android_id],[DiscDocid],[Type],[Mobile_Created_date])
                                        SELECT [UserId],[VisId] ,[Sno] ,[VDate] ,[cityId] ,[SMId] ,[DistId] ,[areaId] ,[remarkDist] ,[remarkArea]  ,[remarkL1] ,[L1UserId],[DissType],[NextVisitDate],[NextVisitTime],[SpentfrTime],[SpentToTime],[ImgUrl],[created_date],[android_id],[DiscDocid],[Type],[Mobile_Created_date] FROM [Temp_TransVisitDist] where VDate='" + VDate + "' and smid=" + SMId + " and type in ('Head Office','Depo','Meet (Dealer/Counter/Umbrella)')";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
                string updatevisid = "update TransVisitDist set visid=" + VisId + " where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                string deletefromtemp = "delete from  Temp_TransVisitDist  where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                Query1 = "select visdistid from TransVisitDist where Android_Id='" + Android_Id + "'";
                string visdistid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                if (!string.IsNullOrEmpty(visdistid))
                {
                    Query1 = "delete from TransVisitDist where Android_Id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                // string Address = DMT.InsertAddress(latitude, longitude);
                string str = "INSERT INTO dbo.TransVisitDist ([UserId],[VisId],[Sno], [VDate], [cityId],[SMId],[DistId],[remarkdist],[Android_Id],[SpentfrTime], [SpentToTime], [ImgUrl],[stock],[Created_date],[Latitude],[Longitude],[Address],[Lat_long_datetime],[DiscDocid],[Type],[Mobile_Created_date]) " +
                " VALUES ('" + Userid + "', " + VisId + ", '" + Sno + "', '" + VDate + "', '" + cityid + "', " + SMId + " , " + DistId + ", '" + remarkdist + "', '" + Android_Id + "', '" + SpentfrTime + "', '" + SpentToTime + "', '" + ImgUrl + "'," + stock + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + docID + "','" + DSRType + "','" + mobiletime + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }
                Query = "select max(VisDistId) as VisDistId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Max(Created_date) AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Max(Created_date) AS date), Max(Created_date))   AS Milliseconds   from transvisitdist where Visid='" + VisId + "'";
            }
            else if (ChkLock == "False")
            {
                Query1 = "select visdistid from temp_TransVisitDist where Android_Id='" + Android_Id + "'";
                string visdistid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                if (!string.IsNullOrEmpty(visdistid))
                {
                    Query1 = "delete from temp_TransVisitDist where Android_Id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                //  string Address = DMT.InsertAddress(latitude, longitude);
                string str = "INSERT INTO dbo.temp_TransVisitDist ([UserId],[VisId],[Sno],[VDate],[cityId],[SMId],[DistId],[remarkdist],[Android_Id],[SpentfrTime],[SpentToTime],[ImgUrl],[stock],[Created_date],[Latitude],[Longitude],[Address],[Lat_long_datetime],[DiscDocid],[Type],[Mobile_Created_date]) " +
                " VALUES ('" + Userid + "', " + VisId + ", '" + Sno + "', '" + VDate + "', '" + cityid + "', " + SMId + " , " + DistId + ", '" + remarkdist + "', '" + Android_Id + "', '" + SpentfrTime + "', '" + SpentToTime + "', '" + ImgUrl + "'," + stock + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + docID + "','" + DSRType + "','" + mobiletime + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }
                Query = "select max(VisDistId) as VisDistId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Max(Created_date) AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Max(Created_date) AS date), Max(Created_date)) AS Milliseconds from temp_TransVisitDist where Visid='" + VisId + "'";
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<VisitDist> rst = new List<VisitDist>();
            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            {
                rst.Add(
                    new VisitDist
                    {
                        Id = dtvisit.Rows[i]["VisDistId"].ToString(),
                        MS = dtvisit.Rows[i]["Milliseconds"].ToString(),
                        DocumentId = docID
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransCollection()
        {
            string createText = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            int UserId = objResponse.bodyLine[0].UserId;
            int DistId = objResponse.bodyLine[0].DistId;
            int SMId = objResponse.bodyLine[0].SMId;
            string Mode = objResponse.bodyLine[0].Mode;
            decimal Amount = objResponse.bodyLine[0].Amount;
            string PaymentDate = objResponse.bodyLine[0].PaymentDate;
            string Cheque_DDNo = objResponse.bodyLine[0].Cheque_DDNo;
            string Cheque_DD_Date = objResponse.bodyLine[0].Cheque_DD_Date;
            string Bank = objResponse.bodyLine[0].Bank;
            string Branch = objResponse.bodyLine[0].Branch;
            string Remarks = objResponse.bodyLine[0].Remarks;
            string VisId = objResponse.bodyLine[0].VisId.ToString();
            string VDate = objResponse.bodyLine[0].VDate;
            int AreaId = objResponse.bodyLine[0].AreaId;
            string status = objResponse.bodyLine[0].status;
            string androidid = objResponse.bodyLine[0].androidid;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            createText += "" + UserId + "," + DistId + "," + SMId + "," + Mode + "," + Amount + "," + PaymentDate + "," + Cheque_DDNo + "," + Cheque_DD_Date + "," + Bank + "," + Branch + "," + Remarks + "," + VisId + "," + VDate + "," + AreaId + "," + status + ", " + androidid + "," + longitude + "," + latitude + "," + lat_long_dt + ", " + mobile_created_date + "" + Environment.NewLine;

            string Query = ""; string Query1 = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            if (string.IsNullOrEmpty(mobile_created_date))
            {
                mobile_created_date = "0";
            }

            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(mobile_created_date))
            {
                double ticks1 = double.Parse(mobile_created_date);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }

            string CollDocId = Settings.GetDocID("PACOL ", DateTime.Now);
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();

            if (ChkLock == "True")
            {
                string insertfromtemp = @"INSERT INTO TransCollection([VisId] ,[CollDocId] ,[UserId] ,[VDate] ,[PartyId] ,[SMId] ,[AreaId] ,[ItemId] ,[Mode] ,[Amount] , [PaymentDate] ,[Cheque_DDNo],[Cheque_DD_Date] ,[Bank] ,[Branch]  ,[Remarks],created_date,android_id,Mobile_Created_date)
	                                   SELECT [VisId] ,[CollDocId]  ,[UserId]   ,[VDate]  ,[PartyId]   ,[SMId]   ,[AreaId]  ,[ItemId]  ,[Mode]  ,[Amount]
                                      ,[PaymentDate] ,[Cheque_DDNo] ,[Cheque_DD_Date] ,[Bank] ,[Branch] ,[Remarks],created_date,android_id,Mobile_Created_date
	                                   from [Temp_TransCollection] where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
                string updatevisid = "update TransCollection set visid=" + VisId + " where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                string deletefromtemp = "delete from  Temp_TransCollection  where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                Query1 = "select CollDocId from TransCollection where Android_Id='" + androidid + "'";
                string colldocid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                if (!string.IsNullOrEmpty(colldocid))
                {
                    Query1 = "delete from TransCollection where Android_Id='" + androidid + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                // string Address = DMT.InsertAddress(latitude, longitude);
                string str = "INSERT INTO TransCollection([VisId] ,[CollDocId] ,[UserId] ,[VDate] ,[PartyId] ,[SMId] ,[AreaId] ,[Mode] ,[Amount] ,[PaymentDate] ,[Cheque_DDNo] ,[Cheque_DD_Date] ,[Bank] ,[Branch]  ,[Remarks],Android_Id,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
                " values (" + VisId + ",'" + CollDocId + "'," + UserId + ",'" + VDate + "'," + DistId + "," + SMId + "," + AreaId + ",'" + Mode + "'," + Amount + ",'" + PaymentDate + "','" + Cheque_DDNo + "','" + Cheque_DD_Date + "','" + Bank + "','" + Branch + "','" + Remarks + "','" + androidid + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";
                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }

                createText += "" + str + "" + Environment.NewLine;

                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from TransCollection where CollDocId='" + CollDocId + "'";
            }
            else if (ChkLock == "False")
            {
                Query1 = "select CollDocId from Temp_transCollection where Android_Id='" + androidid + "'";
                createText += " @@@@@@   Query To Check Duplicasy On behalf Of Android_id @@@@@" + Query1 + "" + Environment.NewLine;
                string colldocid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                if (!string.IsNullOrEmpty(colldocid))
                {
                    createText += " @@@@@@   Duplicate Exist @@@@@" + colldocid + "" + Environment.NewLine;
                    Query1 = "delete from Temp_transCollection where Android_Id='" + androidid + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                    createText += " @@@@@@   Query To Delete Duplicate Data @@@@@" + Query1 + "" + Environment.NewLine;
                }
                else
                {
                    createText += " @@@@@@  No  Duplicate Exist @@@@@" + "" + Environment.NewLine;
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                //if (latitude != "")
                //{
                //    Address = DMT.InsertAddress(latitude, longitude);
                //}
                // string Address = DMT.InsertAddress(latitude, longitude);
                string str = "INSERT INTO Temp_transCollection ([VisId] ,[CollDocId] ,[UserId] ,[VDate] ,[PartyId] ,[SMId] ,[AreaId] ,[Mode] ,[Amount] ,[PaymentDate] ,[Cheque_DDNo] ,[Cheque_DD_Date] ,[Bank] ,[Branch]  ,[Remarks],Android_Id,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
                " values (" + VisId + ",'" + CollDocId + "'," + UserId + ",'" + VDate + "'," + DistId + "," + SMId + "," + AreaId + ",'" + Mode + "'," + Amount + ",'" + PaymentDate + "','" + Cheque_DDNo + "','" + Cheque_DD_Date + "','" + Bank + "','" + Branch + "','" + Remarks + "','" + androidid + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";
                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }

                createText += " @@@@@@  Insert to table   @@@@@" + str + "" + Environment.NewLine;

                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS Milliseconds from Temp_transCollection where CollDocId='" + CollDocId + "'";

                createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + Query + "" + Environment.NewLine;

            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<Visit> rst = new List<Visit>();
            //Query = @"Select smskey From MastEnviro";
            //string _smsKey = DbConnectionDAL.GetStringScalarVal(Query);
            //Query = @"select Mobile from MastSalesRep where SMId=" + SMId + "";
            //string _Mob = DbConnectionDAL.GetStringScalarVal(Query);
            //sendSmsbyTable(_smsKey, _Mob, "Dear ");

            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            {
                rst.Add(
               new Visit
               {
                   Id = dtvisit.Rows[i]["CollId"].ToString(),
                   DocumentId = dtvisit.Rows[i]["CollDocId"].ToString(),
                   MS = dtvisit.Rows[i]["Milliseconds"].ToString()


               }
           );
                createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[i]["CollId"].ToString() + ", " + dtvisit.Rows[i]["CollDocId"].ToString() + ", " + dtvisit.Rows[i]["Milliseconds"].ToString() + "" + Environment.NewLine;

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

                //createText += " @@@@@@   Providing Response To Android  @@@@@" + rst.ToString() + "" + Environment.NewLine;
            }

            using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMId + "_RetailerCollection_" + VDate + ".txt"), true))
            {
                file2.WriteLine(createText);
                file2.Close();
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertDistributerCollection()
        {

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            int VisId = objResponse.bodyLine[0].VisId;
            int UserId = objResponse.bodyLine[0].UserId;
            string VDate = objResponse.bodyLine[0].VDate;
            int DistId = objResponse.bodyLine[0].DistId;
            int SMId = objResponse.bodyLine[0].SMId;
            string Mode = objResponse.bodyLine[0].Mode;
            decimal Amount = objResponse.bodyLine[0].Amount;
            string PaymentDate = objResponse.bodyLine[0].PaymentDate;
            string Cheque_DDNo = objResponse.bodyLine[0].Cheque_DDNo;
            string Cheque_DD_Date = objResponse.bodyLine[0].Cheque_DD_Date;
            string Bank = objResponse.bodyLine[0].Bank;
            string Branch = objResponse.bodyLine[0].Branch;
            string Remarks = objResponse.bodyLine[0].Remarks;
            string Android_Id = objResponse.bodyLine[0].Android_Id;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;

            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            if (string.IsNullOrEmpty(mobile_created_date))
            {
                mobile_created_date = "0";
            }

            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(mobile_created_date))
            {
                double ticks1 = double.Parse(mobile_created_date);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

            //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            //{
            //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
            //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
            //    if (dtfr.Rows.Count > 0)
            //    {
            //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
            //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
            //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

            //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
            //        {
            //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
            //        }
            //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
            //        {
            //            totime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
            //        }
            //    }
            //}

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }

            string Query = ""; string Query1 = "";
            string CollDocId = Settings.GetDocID("DISTP ", DateTime.Now);
            Settings.SetDocID("DISTP", CollDocId);
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
            //  if (ChkLock == "True")
            {


                Query = "select * , (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS Milliseconds from DistributerCollection where CollDocId='" + CollDocId + "'";
                Query1 = "select colldocid from DistributerCollection where Android_Id='" + Android_Id + "'";
                string colldocid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                if (!string.IsNullOrEmpty(colldocid))
                {
                    Query1 = "delete from DistributerCollection where Android_Id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                //  string Address = DMT.InsertAddress(latitude, longitude);
                string str = "INSERT INTO dbo.DistributerCollection (VisId,CollDocId, UserId, VDate,DistId,SMId, Mode,Amount,PaymentDate,Cheque_DDNo, Cheque_DD_Date, Bank,Branch,Remarks,Android_Id,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
                " VALUES ('" + VisId + "', '" + CollDocId + "', " + UserId + ", '" + VDate + "', " + DistId + ", " + SMId + " , '" + Mode + "', " + Amount + ", '" + PaymentDate + "', '" + Cheque_DDNo + "', '" + Cheque_DD_Date + "', '" + Bank + "', '" + Branch + "','" + Remarks + "','" + Android_Id + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }
            }
            //else if (ChkLock == "False")
            //{
            //    Query = "select * , (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_DistributerCollection where CollDocId='" + CollDocId + "'";
            //    Query1 = "select colldocid from temp_DistributerCollection where Android_Id='" + Android_Id + "'";
            //    string colldocid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
            //    if (!string.IsNullOrEmpty(colldocid))
            //    {
            //        Query1 = "delete from temp_DistributerCollection where Android_Id='" + Android_Id + "'";
            //        DbConnectionDAL.ExecuteQuery(Query1);
            //    }
            //    WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
            //    string Address = DMT.InsertAddress(latitude, longitude);
            //    string str = "INSERT INTO dbo.temp_DistributerCollection (VisId,CollDocId, UserId, VDate,DistId,SMId, Mode,Amount,PaymentDate,Cheque_DDNo, Cheque_DD_Date, Bank,Branch,Remarks,Android_Id,Created_date,Latitude,Longitude,Address,Lat_long_datetime) " +
            //    " VALUES ('" + VisId + "', '" + CollDocId + "', " + UserId + ", '" + VDate + "', " + DistId + ", " + SMId + " , '" + Mode + "', " + Amount + ", '" + PaymentDate + "', '" + Cheque_DDNo + "', '" + Cheque_DD_Date + "', '" + Bank + "', '" + Branch + "','" + Remarks + "','" + Android_Id + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "')";

            //    if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
            //    { }
            //}
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<Visit> rst = new List<Visit>();
            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            {
                rst.Add(
                    new Visit
                    {
                        Id = dtvisit.Rows[i]["CollId"].ToString(),
                        DocumentId = dtvisit.Rows[i]["CollDocId"].ToString(),
                        MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SaveFailedVisit()
        {
            string createText = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            int visid = objResponse.bodyLine[0].visid;
            string Android_Id = objResponse.bodyLine[0].Android_Id;
            string VDate = objResponse.bodyLine[0].VDate;
            int UserID = objResponse.bodyLine[0].UserID;
            int SMId = objResponse.bodyLine[0].SMId;
            int PartyId = objResponse.bodyLine[0].PartyId;
            string Remarks = objResponse.bodyLine[0].Remarks;
            int AreaId = objResponse.bodyLine[0].AreaId;
            string Nextvisit = objResponse.bodyLine[0].Nextvisit;
            int ReasonID = objResponse.bodyLine[0].ReasonID;
            string VisitTime = objResponse.bodyLine[0].VisitTime;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;
            string ImgUrl = objResponse.bodyLine[0].ImgUrl;
            string image1 = objResponse.bodyLine[0].image1;

            //int visid = 120501;
            //string Android_Id = "1258 00000002";
            //string VDate = "20/Nov/2020";
            //int UserID = 3512;
            //int SMId = 1258;
            //int PartyId = 3028;
            //string Remarks = "test";
            //int AreaId = 0;
            //string Nextvisit = "27/Nov/2020";
            //int ReasonID = 3;
            //string VisitTime = "11:00";
            //string longitude = "-122.0840359";
            //string latitude = "37.4219632";
            //string lat_long_dt = "1605853089785";
            //string mobile_created_date = "1605853847365";
            //string ImgUrl = "";
            //string image1 = "N/A";

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            createText += "" + visid + "," + Android_Id + "," + VDate + "," + UserID + "," + SMId + "," + PartyId + "," + Remarks + "," + AreaId + "," + Nextvisit + "," + ReasonID + "," + VisitTime + "," + longitude + "," + latitude + "," + lat_long_dt + "," + mobile_created_date + ", " + ImgUrl + "," + image1 + "" + Environment.NewLine;

            string Query = "", Query1 = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";
            if (string.IsNullOrEmpty(mobile_created_date))
            {
                mobile_created_date = "0";
            }

            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(mobile_created_date))
            {
                double ticks1 = double.Parse(mobile_created_date);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;
            if (image1.Contains("http://"))
            {
                ImgUrl = image1.Replace(path, "~");
            }
            else if (image1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(image1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(SMId + '-' + timeStamp);
                {
                    //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                    string filePath = Server.MapPath("~/DSRImages" + "/F_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    ImgUrl = "~/DSRImages" + "/F_" + filename + ".png";
                }

            }

            var frtime = "00:00";
            var totime = "00:00";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + visid + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + visid + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + visid + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + visid + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + visid + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }

            string FVDocId = Settings.GetDocID("FAILV ", DateTime.Now);
            Settings.SetDocID("VISSN", FVDocId);
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + visid + "").ToString();
            if (ChkLock == "True")
            {

                string insertfromtemp = @"INSERT INTO [TransFailedVisit] ([VisId] ,[FVDocId] ,[VDate]  ,[UserID]  ,[SMId] ,[PartyId]  ,[Remarks]
                                        ,[AreaId]   ,[Nextvisit]   ,[ReasonID],[VisitTime],[created_date],[android_id],[Mobile_Created_date],[ImgUrl] )
                                        SELECT [VisId]  ,[FVDocId]   ,[VDate]   ,[UserID]   ,[SMId]   ,[PartyId]   ,[Remarks]   ,[AreaId]   ,[Nextvisit]   ,[ReasonID],[VisitTime],[created_date],[android_id],[Mobile_Created_date],[ImgUrl] FROM [Temp_TransFailedVisit] where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
                string updatevisid = "update TransFailedVisit set visid=" + visid + " where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                string deletefromtemp = "delete from  Temp_TransFailedVisit  where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS Milliseconds   from TransFailedVisit where FVDocId='" + FVDocId + "'";

                Query1 = "select * from TransFailedVisit where Android_Id='" + Android_Id + "'";
                DataTable dt = DbConnectionDAL.getFromDataTable(Query1);
                if (dt.Rows.Count > 0)
                {
                    Query1 = "delete from TransFailedVisit where Android_Id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                //  string Address = DMT.InsertAddress(latitude, longitude);
                string str = "INSERT INTO dbo.TransFailedVisit (VisId,FVDocId, Android_Id, VDate,UserID,SMId, PartyId,Remarks,AreaId,Nextvisit, ReasonID, VisitTime,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,ImgUrl) " +
                " VALUES ('" + visid + "', '" + FVDocId + "', '" + Android_Id + "', '" + VDate + "', '" + UserID + "', " + SMId + " , '" + PartyId + "', '" + Remarks + "', " + AreaId + ", '" + Nextvisit + "', " + ReasonID + ", '" + VisitTime + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + ImgUrl + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }
            }
            else if (ChkLock == "False")
            {
                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS Milliseconds   from temp_TransFailedVisit where FVDocId='" + FVDocId + "'";

                Query1 = "select * from temp_TransFailedVisit where Android_Id='" + Android_Id + "'";
                DataTable dt = DbConnectionDAL.getFromDataTable(Query1);
                if (dt.Rows.Count > 0)
                {
                    Query1 = "delete from temp_TransFailedVisit where Android_Id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                // string Address = DMT.InsertAddress(latitude, longitude);
                string str = "INSERT INTO dbo.temp_TransFailedVisit (VisId,FVDocId, Android_Id, VDate,UserID,SMId, PartyId,Remarks,AreaId,Nextvisit, ReasonID, VisitTime,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,ImgUrl) " +
                " VALUES ('" + visid + "', '" + FVDocId + "', '" + Android_Id + "', '" + VDate + "', '" + UserID + "', " + SMId + " , '" + PartyId + "', '" + Remarks + "', " + AreaId + ", '" + Nextvisit + "', " + ReasonID + ", '" + VisitTime + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + ImgUrl + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }

                createText += "" + str + "" + Environment.NewLine;
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<Visit> rst = new List<Visit>();
            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            {
                rst.Add(
                    new Visit
                    {
                        Id = dtvisit.Rows[i]["FVId"].ToString(),
                        DocumentId = dtvisit.Rows[i]["FVDocId"].ToString(),
                        MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                    }
                );

                createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[i]["FVId"].ToString() + ", " + dtvisit.Rows[i]["FVDocId"].ToString() + ", " + dtvisit.Rows[i]["Milliseconds"].ToString() + "" + Environment.NewLine;

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            }

            using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMId + "_FailedVisit_" + dtSuppliedDate + ".txt"), true))
            {
                file2.WriteLine(createText);
                file2.Close();
            }

            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransCompetitorWithimage()
        {
            string createText = "";
            decimal Qty = 0;
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            int VisId = objResponse.bodyLine[0].VisId;
            string VDate = objResponse.bodyLine[0].VDate;
            int UserId = objResponse.bodyLine[0].UserId;
            int PartyId = objResponse.bodyLine[0].PartyId;
            string Item = objResponse.bodyLine[0].Item;
            if (string.IsNullOrEmpty(objResponse.bodyLine[0].Qty.ToString()))
            {
                Qty = 0.00M;
            }
            else
            {
                Qty = objResponse.bodyLine[0].Qty;
            }
            decimal Rate = objResponse.bodyLine[0].Rate;
            int SMID = objResponse.bodyLine[0].SMID;
            string Android_Id = objResponse.bodyLine[0].Android_Id;
            string ImgUrl = objResponse.bodyLine[0].ImgUrl;
            string Remarks = objResponse.bodyLine[0].Remarks;
            string CompName = objResponse.bodyLine[0].CompName;
            decimal Discount = objResponse.bodyLine[0].Discount;
            string BrandActivity = objResponse.bodyLine[0].BrandActivity;
            string MeetActivity = objResponse.bodyLine[0].MeetActivity;
            string RoadShow = objResponse.bodyLine[0].RoadShow;
            string Scheme = objResponse.bodyLine[0].Scheme;
            string OtherGeneralInfo = objResponse.bodyLine[0].OtherGeneralInfo;
            string OtherActivity = objResponse.bodyLine[0].OtherActivity;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string image1 = objResponse.bodyLine[0].image1;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;

            ////            int VisId = 12;
            ////            string VDate = "2020-11-06";
            ////            int UserId = 2278;
            ////            int PartyId = 1771;
            ////            string Item = "heeng 100gm";
            ////            decimal Qty = 1;
            ////            decimal Rate = 39.40m;
            ////            int SMID = 308;
            ////            string Android_Id = "308  00000003";
            ////            string ImgUrl = "";
            ////            string Remarks = "Test generator and IPS challengers Bangalore India who may not available for a great day and I feel like I feel like a e the two of them to you";
            ////            string CompName = "Ram Shukla";
            ////            decimal Discount = 1;
            ////            string BrandActivity = "bramd of secondary to aap ki khatir apni with w er ekta to aap w email w email with ease the wo bhi and tertiary institutions";
            ////            string MeetActivity = "meet activity this time with you with your friends  forever home know what you have any questions or need any further";
            ////            string RoadShow = "road safety week ending education experience w email address to ensure our emails with each scan We w w w Mumbai";
            ////            string Scheme = "scheme offer education education website and forth on retailer discussion on each end with";
            ////            string OtherGeneralInfo = "other features description for next day we would work with with with with a e e with with the end w Mumbai";
            ////            string OtherActivity = "1";
            ////            string longitude = "80.3443838";
            ////            string latitude = "26.48261";
            ////            string lat_long_dt = "1604646408390";
            ////            string image1 = @"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
            ////sLK6ziNGwaNYaGEI4soLqNMB3j3amOmvMj366toewWJLNC6nREdw9+plvIrHNvBhC+TV3J1eDHFf
            ////J072BXydO9h87x9phLoMcYUF1OiI7h79bEs4MISXqSgyjpr7wGGjRV6byYUF1OiI7h79bAzzQ6f7
            ////rCEOu/ytjEsd83Mxv8KtO2DemYQk7GfN8faYxgy6EoYss7xjsiAbBD1sY3rzWSEL6hHv1swhHT07
            ////bVdD2bK2N5FQ59wMUWP5m6rYMNEIMbyKhz7gZdCXcisc28GNK+Tp3sVyKxzbwYzkedHNuBmEJaXb
            ////o3sYxZZ3jHZEA2CHrZR83x9phCHzfH2mMK+Tp3sVyKxzbwY35rj7LCEoYMX83x9pjGEIMnZQyc35
            ////WjcwhFcusM28WIMs07mUfOcfZZOZZp3MIRU8N+oGE8N+oGNM/EjdENgWZvUyM35WjcwhBh81x9li
            /////nOPssWzCEo81xGMdWS6rWCvk6d7Azra7YXxrzZaIaGDLoRxZQfjqNkdo5MoVsqZJyKhz7gZWwmF
            ////75FY5t4Mab8rRuYv5zj7LfORWObeDCXSrkVDn3A3z5zj7LFssLt0b2YQh83x9ptKvP4w+ywNwmPL
            ////Bg5nwe6pNyXTO/GkztVYjjkoHuPTGWreFLbrm5i+co/hlbh8wtPgo7GCfh5KB1pY1dHul6dD0/2S
            ////GS9ru5IcW8TNm8hTDeRyVbHW/h5SHU+Hl7VuZKh8G+dfD1r+kqhvpjHWHqFiS150DuuP0Ks+aGrL
            ////lZG43C/pRvxzybkk4XrKOUcoXo73W4XI5E2PPB8PB7/FDrdLppjxozecfubHugT569BzRcLfaK8a
            ////ka9EP/bQwDJk1tq2hIczZtdG5ggDypjU2Bioj64Tq4bm4xWFpao42eJ21a8+emyFpxc8MCLLNndT
            ////S2x9z+4/+6SvmamuaxKhCef+EpeT1kshhRGnpp+0URGmwIxEGtpye4de6VvMsZ3Aa4nVTU8sI2C8
            ////RviHw60U0VQaSyirp2Z7W3sgAO52tmX7udKYkY0crt4e9LcADdQ0lnp8YrUkWUd54dUNtOgY17GO
            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
            ////hx4NYTjQ4+8HO5yvPPFU70tdgeFNrQ9PMlLFmKkkEE1paLqhohxY1hSLN6PWPJ8G9eDndTwxX9oP
            ////fyO543+Vms3k+FUlEV4j/auib3AGRBMsud/L3CRigAjkPIR/qnVGpH0uLmke5wyfvnGL2CsK6KYN
            ////2OlnLekjScWmkBacOWCgfehylSvl8vk++AAAKA5JdAiMY8oKRCgG5t/8HQwbct34NsOGFI8ql8yh
            ////k3I5Goyi50D0fD2iH+k+HPG/MLdIaB8ux7gr6MVkLcQU8pKqEgQEOSs5IckeVyeVYAgMKYiFdIgE
            ////W8yvi28ReJarbQcl5ADPecmOOW9uSyIhQWMwHM2EhOfCT1T4wYBSADlYNWK2QYMGDCEGDBi/f8r8
            ////XytjCF+Vm33zuSEL6gHv1MWHmic+8W+FfgBo7gb4PX6AI4s3q4d+uIjtHQGVjiwmi47L+NtsKkc3
            ////fs8WUfN8faZdCVFfhHae4GRmRKGOj23W1Mr5FQ59wMkM62eop40XU627w9BvHqUIGG9XDjLEB2hp
            ////DIySeG/UDfDDerz7dHfrBiZ2aMDTDLWOjJkuaVCOMNC6jTAd492tvlHmaK67832fY30yZu3W5bWJ
            ////YQj54b9QMrTm8VewaM1FFbNnI86ObcDLS7dG9hCeOX8xxlbK7mt/xkfP+r//AHo52xLL80Gj+82X
            ////XNb+O37+weV/2mLa3sS/8pruqz++x9fNYr9IH9D7x3f7thZvJzeK/aFOemipji1fHeFO+6AMjLNJ
            ////oo4op9mtj5rrLNufxz0VN9Vr4sTtyKhz7gZWzexxZoXU6IjuHv1MISpkqw2aSPI4o6OLpXhd4X06
            ////7GWTsfNZe/VGrWyN6hirjfBxoz5Kd1vBVbTReOfNFordvDuf4T6j2dN3eHi9kZnZHosXXebOwon7
            ////eBz2dzWE41RJRpJ5pM/+jCOWsNo2NWLr6osma8zmhx3ZWsFzzNNdXEf8nNRXc2I8QxyL+f8AlXuV
            ////rYvB7Jp+yPZ6vpJuKudHKNwlOtGQlcJ5D4T9IY08ulPTHeHxR5J4ptiNMVWKiV5iydO65P6KEfbH
            ////LDwZ+k2lcJTvJWPA5CuOeHSHk1M9MQXo/G+1oSp9IWTRPUp1Vt2vvGOdnu+2en+FWWFhn+b8iX6l
            ////VnWGmxOmjvR9tdWanxY5zqf4FyqON9M6U1eSq6smakBrZtWKiSjDjpnGMmSHHEWJdZoqpHyjJK+k
            ////Khhop7t4UVsQNu2ldPnjhwRetg8NLItzBGuuPOSrdOq6zJrp7hhr1QawpFqjksoHacV9700UcW62
            ////r1OVNGeY25N9zTaThRxT0RnfpV0PVaGdtHA14D0CwF62HTY54S1poFnUWAml1WcbL6o0so+b4+0y
            ////BH6MTmD/AKosra7WEQYN75dYZt4t4YQvfIrHNvBjSvk6d7Iy/wA1dGOyrbG5jGEJQYb66dNI+rPT
            ////U32eC7ULFfOcfZZOYd4b4AO0R9TCEDDvDfAB2iPqZGwUG+qHHfDLCxiuXWGbeLLiZAzTC56PdbJb
            ////9PYbJEyDKOn/AIHyNxpUl/WErnpkydBul01NSmDvB08n8/JOSJKOmVrwSu9IKlTTifkvRZQ1bYaJ
            ////UE4X+eJLyUi82fdjwwjPBKl/1fkj5HdGQPiN0um3M2S0mn8MkpedPIHkh6TT9IQ6SdePIFnS8PyJ
            ////+1tMYt7X2Huz7r4saFxkJ4DLnPUKmjY02GBMw8svQDOglJRt3yNIklKiUhLzfBEy5wlA4VcPptPQ
            ////+b1XteUuUDnllIPBjLyS5JCF/O9U73W/lP7JddP/AGTbYzOWV+6MsnyiXV2hLjT0dqb08bqK++ut
            ////rOWKpKuuT7yweutGuIRvjpBV0kpB1rsT+uPJNNIhmoDI019jxEWIgFyNZvLhWulc07BRoqTp+0OG
            ////XHmVQOEiST9GWDncKV2oTwlQ63fKh14smdQL1ka3Xxoak3gglIlUPJzyjJeqFY71WKqna8o4+jye
            ////xskHo/pKyil7IlZji51Sbkul6L6SUpXohxPoj9i5X5FofhUXnGyolJKQ12n9AvlVjTreWK9gWO/4
            ////ndD0zhTXbSz0BbhhDRNJEHzw4Y56pG3t8t/W4dZUm/EBKUtGSlJpUJd8QGyy3ZQxycol1zJMzPvJ
            ////R9K+56t0NzE4+cqUELZmfD0V1ptsK67qmlTvcJJpcyqJXHnflJN6AAXVZaa77W0cDAkgECTVbOm4
            ////Tp7JG3t2xyAbrkOeAUcMxOcJ6nHjVHpSmELbOKrWfXWlINRvIk0n6IIZ6qIXcWNPPgujKLHqc+2A
            ////6LfYzOsSzRh01/Naw8Quy5woa9sLq3aeVM8xnMyZI28c5bPACc/ypqFG3W7+0zBuevV7B2WzZGUP
            ////46ncOygY+AM2o0uKvA+a68jOMeNlTSqaJKLjwPFUO5noeHbSmHVBvIlUsyNtb4+nI4bqfJV2YA5L
            ////nSolA8nakJn1hCVAqSpuLbqqsjbGlGCqWz+LJJ6NJI74eympsReYeajKw+OxGr+sXDKBKlG+PTEM
            ////n1Tsbec9FbtdZZM6JE8or0eu4W+dP0l3J39+CJoGbJv3ZkcGnni63FyRrQoDzGeIYZ4091g248EG
            ////EKThc+gPmB+7Vd+mjRlBnhY65bOswmdO7Yo+jZgjn4hYDZvJ1SPFyRVVcU0hG1qTwoSXlIasRykk
            ////515KdKPZhz05RvhkbDWFxn6TwIqN/wBE9bxwO45DMfSlG0VSmOaWD66NJXkkHkp1QqlUeAy1NW+E
            ////DA28pbvE6UhpJ5ByfsqVNXsrsvaVSXw04rKBZJuUZOIv9Qq9G16LtedpVKTCg5ylnQKV5EAcn9LT
            ////JlULd8Br1wa9h7qiZM+AedJccZPMUOlHbx0JKWXv9PJUCZ0xIhGS7VRM+Titm8PGkR1Yl4ZJLozZ
            ////Nv6VRqyY6PS43/WFboDvDiDTbC5zh3aa+D3agWT5ydVi2MhwFVsc+bF3DLLclS40bnSvKf6QVY0q
            /////TI0CIjYI5am0kDdMVDnxJ+00qg6AyPk+W9VX4jQNuYejsdOBVBO7zYZ/wC61go4pZNoyfnpQv4Y
            ////fs90f/7bRe1bo4HJ6+BppHLR7K2shzpTl8sHC5yvo6V3pYVfrijxbUn8IXynvb5VeP3gMXEuOS77
            ////fcWZCcmRHMJwanzPJIUS1f0rpYqvf1dc9+higq/C5TrchMKhAeTGqltraVCjRFzKJKnSFfYTJ+Ql
            ////5NFNPJ5HJ5N9IhTlagOadIDkYK+bPgJkCcnBItk7gxkcieiaAR5MoOW6SXq/AuDpo558uqkBHIEM
            ////kKojSMYUBdQ3kcQXidsiv2tob2IA8unXosEDYwuwHLMMqgDTU7iWdgvoUAAZGDBg0CaQYMGDCEGD
            ////BgwhflV/N8faYFneMdkQDYIetigrJzbxbx85x9lvgdfoAljF+9/PcamRmDOmQ22w42WRrUMISqdv
            ////5OvxYkyzTuYqeG/UDfDDerz7dHfrBhCHncsY3VgHdqZJy6wzbxY0r5OnexM8T134mnboiDM2OG4+
            ////qEJ2/k6/FgYb1mbZo79YMOp/ydrEzl23wadR+J16/wAqMZbyKhz7gZuLOnTNV9NAjTcF+0GWfO8f
            ////aYUieE8931w28fZbMXmrldslId93dbvSjHjv3UYdEW6dzZpc1v0OWB3z38H6P7YhlqCmqnPVq+xD
            ////23aa7yMGPns6B6HKuU1g/wBJlt4fsheDYk8aYb2PU8weRWObeDGlm+ujRSHqzU1s3TvWWbc3hnpq
            ////b4WaF1OiI7h79TfUokAMl8Zp5nhv1Ayss0b6NMA3h3amZyzRvo0wDeHdqZXyKhz7gYS6fy7dG9m2
            ////WH8U5SAHUeQXgPaY/kuIePsY4szzNGW3wZhwkGzWD+WB0fR5LvAf91Zrc9DJ28oUn+yPVXF0Dv70
            ////u15TAzEjsiY0WMbnN0cd9FtFF7TVzmnmzPUgOUQpGyPF7UmjehJqfqjt+XXwDStzvo4osnFVh5AJ
            ////7/GNlvdV54bZiQ1CcPqvpi2ur7nsnMAyOmHWLYrIRzoOzkrFR55EO09pSxqHRfnGqsGipi8SlB3X
            ////R7VVGvjJkzgyNHLeUhrndrnNfy492u/sqV2qVXk9Hno00jbrh/Tx02cSabGHGvbRdTLb2+W/qoZj
            ////1glYXU/lvx+eTZp+WLySi1k6doC6GeFY5rwixMlFR3weeRP3hUFQ5O6NI29zQMx6EmpzhNrz17uM
            ////jTDB31riPO/Wg91Nu7U08BbTAzYS4DH40d1BfkCIeFpPdulrypgJI7EBOMCd4pgGWNfFLTB1pRJL
            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
            ////Bmpgy0wlm9Zm1BDPWPfqZYWb1nEadgUag0MzllHTg8WX76owoCs4s2aMmPu9cL7NXFLfPNvd8XEb
            ////RbY2gHw2S4DyL54/kV9X7N4wkONnxO0PtSf9rZrLfz3EqVO/zg6f+qLZ+c2sqakm/jh88of0R/sv
            ////SFt1ja90Somcy3+yOi3U2w7mxzxsk36caAzPT1/5Lsy0NqewMBFw3aTZ2trZIGoIDMKEyGfObLDf
            ////pKvCDiezV4DZOyXDBpnCTA13BZB8ioc+4GPLt0b2BhU0ZuzDTxrpY5Pb/pA30QvkJHMcZPXbrclr
            ////HTd+zxYrrjckyPr1V5/WJhO6MrXtp9cdGtorhUK/837+Ggj4vuEfKrnjk4oEGkhFunc0VwwGzWDd
            ////8Hfs/a9HONWTLnZOP/CD+7tey0HZp/17d394N/m2acVh+70pxScIndSnoy6tEcsWshzoHmanhMz5
            ////NKriy3iLVK7npNJyCTSep41UV+IRshxvmdRnklbNURHKNG5vLDbPtENUnDXevqWNsIrwg3BjjQTA
            ////rTHA0yU8UOF8JUhKxUjPQEvBLjSXGUgds/ZPEclTRVQlWTZtUzfVVwNHfS0q+Eby6PJRmvI89E7/
            ////AEVMpUwQI/bAGiqhecakmfPk+Nl++sGntpjZObe6Tu8RTiWI5OPY9FVusVElO88k0m/J3Rvt00i1
            ////wSE+InZo7hapXgvRmuskmCeeq03WZmuCRcOgnbVMx0wj3cVNPdX4k7/92yuO04PhZg1Fd+yrCRmx
            ////UHDtGrjTXQz6V+AdnDe0bR+kDmDczy2xsMePsvHI6vA+hVzYOvwg0dwtbfL80GfeLVVg3J7PPU+F
            ////eaOlrUN+Vo3No4eg3j1K88j/AMQOPoEjN/AHT3CyMw3106aR9WempjeXUGfcLNxlmnc0qpUo+c4+
            ////yyecu2+DEcuoM+4W9Tw36gYQvig3ir2BRnoprZGYaN9OiIbg79bAw0b6dEQ3B362JnLtvgwhVvhk
            ////l4VgvwV4QsIRv+J8jJQP5Kmqxx4Oh1+SHX/bjctfNPQIn9hg+EkpziD0bvHGnpjP1w8Hu9KtvfS2
            ////7b3UTCCMjea2+XCUfMvLCRKiT8jUqbI7/jh72Q+I3TT+2Yto9wBmvhwu/p5ASeQa8HpiqVTivpga
            ////Muva2z7IWAiIg7tqtKUff1ObVvY/dsHr7vv9as4D7OH5JeRKDBu8sJylGuxxRLKT7hdeLK4fteyy
            ////wNLB8SRcMgpUI385Vkx8IHC8FWLKVePfG9QOmy6HA4xvCUayUbjJJeCNcQ7pLqhVPTFleSzLwLWE
            ////5sIxL+lQ4Xw+SSH47ZLut3utK5XkPQeOXeuFUQsb0awuXxENIzE9ZMBvz4UWajq8PYq8nO+X8aZh
            ////mk2vcJ71eTnhKhU8nIlBcg6P6L+tv1JdVSDYQ4TJR/CN4IyJ6fJd6XFfbf7WzjLwquFzYK8M6xAj
            ////PTy2wgJXg4XViyXsCN3Pd6dDvfytQPxG9qIi2BRjqxV6Ymv8870oY3VxrzALT3HdTRc5U1DmQrQu
            ////d2ihhz92E8R6n6I6S5QoO2V+u++1rgd5U6nPOOJ9IH1WWBcPqasXf5ZWEoyiYo0+3V41UV05CYN5
            ////GvPCDKBHJtASfiilViqpT9zd9Nsagsb0Uxwu+EIJAEgx3AaFxjqeKqxDxUfFSEg3szvTBnagGSiv
            ////QLyNwfku1SsmHlKB6dKYspS/V/1Q9I9wtFXhJImSUn0aw2YXYyqxV6KU0OxvAbQ4p0NkJzhHo7HN
            ////LzoJKSQQjc7hd7rdaZN+T6K9XqsakjHo7XonOIVQmVHEaxo1NVwVhDREMYokPMkYuWnJ/wAsZp6M
            ////jYqHidmFYkSlgC45S46qFO91nPQs5YaSfM412VTrzR1Wsc40BJT8PO+7pc13AU35AsKUD0RoHGjJ
            ////SzHovFnAxgDVjJuexdYs+8gPjTG/1shcdh4i9HAkDXcz/O6qevS27i7A7vWmJbrlPOX+dM4hHfVc
            ////EQyMeZ51Po3MjMiUWccVogF9W/KNFbIzVU6nE4rz1e6uvLo1N6B+H3cMuQYcG1WOh7DxBDVBfdnw
            ////5fDO8Sjl6g/FST5lPDGlI2Xd9tjRUzrbQozhDNEByC1kI3oc4UawFSMiDwS9l3WDTojpi0DRlTpn
            ////W2ZoR47gzhnLCOB2rwLPOVc8PZqaLRAfcwNwnvaaONmZzTxC2GSFtbSqT6RHi7yWPTrycVjRVV7a
            ////htYI0jhSp540J9YGSvvp3MS9F86YOKkzCL1XhoyQ0tVxdsY+K2R9n7P7oMmFROQGR6kgWLgF66/R
            ////M6MqdUE/MBt0iENMbWeC1XZziR36eLRZtLSnFJ+q89ntttDjLUweHktGccb9144FtPKAg5h5Yzk3
            ////lLdPcq9Q94KsaeB34mvxrovr3CsTmzRk993pr8OItG05s711FY8ao5o5WWKDZp3h+OUdlvt4GhvJ
            ////4i38RFeJLyOFMBwmKNwzbt28OM2HP7Wz7eWilUj0py9+IyfnlCp31VU6m/TN9y+kCZgz5i3N6ch5
            ////MwsfMjQliqD/ACZXvE1+OkcwuJ4usIU/g3wb83Tm9ycWytwkSVc6UmeOeD0d6X/ekBs2Q01t+qhg
            ////6kujkPg+kJIxATMI5JyQk5JhGQFiNzOl1uvk0W+8Ajk0URHJEYYTtXbAxAekjPGkp51o+Oiu+ztj
            ////9kPSrihNGao9t01YDBgFQRyMGyC1SDBgwYQgwYMGEIMGDBhC/JRTStc82J2OkTOnTnh6gaSTp2Or
            ////EaWYX4uH0ZVj140au6lsSyHosSpyZ2Y4syV3dzORbwdqrzsSDv0YYbttQd/zLBXHdkOQIkO+Wbjz
            ////Mq6L9Eb27E3nb/zbeJFdNefmWksnDDXkWWfjTtmK/pVXt110MwqH8cUWE0j41V27INWLvlHKRAXM
            ////lPjpUmvFn327JR6qqsjOSfCDNCSS/pKkHk/Snk5FVP8AZI15gGOdtTA3J2Zt5fq8GYrTBxWWtGcz
            ////Xj1+dl/0lXe5hib0AcuJMMMa6YDNPzwlksSmzIIyL1OK5YaNVsAtor1XLeUhpnVLCCB/Rk1ENEe5
            ////ps7JZYN389OgSnke6nkooSppSJcRxwf2rmozNKnhg+dqrrivPW0wsoiNObLa2+gLjuCxlD3fsnB5
            ////GR+znUAuB60XjMfffaiFJhouO2tggsRtAhjKU8mae98TVbvlbKSHnp/9HUpclGSiylpIZK1alLJx
            ////84iePS40lTJkuPQujVuAbWWGSIeRRcSgyfRbR76r67WeJN4M5YStenRsnJNvx+PJOlgqTO1148EI
            ////B7OItPb9nbr/AP5wB4VcDOe76NT23aq/Q3/caAY1ZvrTOU1mZgzfLtQSDlU4X0SR0k8HDJ+VDhh/
            ////vjokP62gMGh78ehyqR8sJqe7O4QVZddmrY1tOfA3KRVIfB6sKR48+HMkxV6Jvp/R/wCS7dnfSyyV
            ////mC9/JZFvh2ySk2uXPKWD0xVK7VHRePo3fbcDVtj2ehpAUBBAwz9B5TmVwO115eHBkSSHIYF5TfPl
            ////huWs1Q/5VfVaxceSFeM08eNbHFvSUhpYdjIPO7642g2VBnNQw2Kk5wm4PXqhyfFfHARrbDmWEt5K
            ////4OJTviR8qCZcOp/Ofsr0TKpHPRCvRPG7prTW2hsIWCsD+7skhv6o00l510VXb3nGW7PtnAk/a0Gv
            ////HipgjlQ+EpnWoyJ4PpPFHGkbOknhpl44aHM/j3UT92TwjVTm1WRvbFD91+SpvoEm8Iq7+bSX/wDv
            ////sYw762krnl45zeWScqk3L8iP0ZTJeHFMMupnxswgLjZ2QcwNkHySNvERkT+yTtESqXBDM5d/rktq
            ////Ei+dU+DU5BMrcRXHJ6MZTACFf427rWux185HBuaYSKpYehOAfuuPDx6m08uvCC7jTDiPgfLg8U49
            ////lUi4f/vvGlraccsniCfsuD2WJ530VN0WOmOrJsaH7t0yQ7jXz+i3POOVDhfxZK11vhCuIUZVURh4
            ////w03QAWmE11fVZOKagqzDS2lVOvwtKi55Lg3lihrpxp1UR4v0Us/Fyo53SDkEkyNdvQkfSlL7VPR9
            ////x/qkfbktaNFhYg64zPWkxwxK3MJyurz6h3hfsat+cAUP7lb+mrVUn/8AtSmji5sS5N4c8MzldhJM
            ////qHMQ9VidKIqlKZLiOXisaczWQnwvnYZMBbyfxrnPdRwyo6BVO1T+qNmWn1tSx9sbeF4GspsK+eHw
            ////tL2UsR+v7t3iW4gs3KWmjmh5DusleWdjRx89jSCnGx0UdwU7Gv5zuvFUZxKVZSo+8pce1aNMNDQO
            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
            ////HrK1UkpRqug19EPy04ugM9oBqak7468gvZofs7CR0LsxEMRQOftDBsKg15GbOtkzvkvzUXXJ9zrH
            ////WskqfKSWCXyCKp6dOdMfsmAW7aQraao3NJVAX1TtdSGv6K6swcR2i2rCWGCV5OGS7hOcODGX6F5O
            ////d6Y0qeUkpZOuVTg6O+t/gmDl+JeLWuCRciHnK1YjWYOMLT8lGCiqSWGPBfKjH0f/ACscvkANOelo
            ////LCNO7Pn60bU70lenZCFEN4mGvEPJw83k4O6eeL6ZsSjlHIlzJzjlT4caElOAfSsvHrvpmUGEuQZR
            ////Z3l5D/s3btlNVWuDTZxyIwkOaZJlTzaZASqRqOyA+5JSodaEIfsmWmTuorqyocEg3Oa7p5VIhDJx
            ////Z+TsVda7/sWnToZ3vzpzHxqOax1vB+AxeU5jKra7iZLTDhIw+4PZLz2PrHqRCn4rekKuKaMzG82+
            ////WSOUeBuUiNAsnyfhR0pXCrgaqa4turemCV2vR3zKpwup6u1QHakylLj/ABSG6tsV8MGCDB7g5kGs
            ////fEl5HuqTix4P53pfIiTEbHz9U0U7WRvW2/7YA054HToy3mqvuxp7/tPdxJoRN5T+y1W897zKoGR6
            ////WaT1fSogGnbZVpi1kFmnFW6fHO1eudK+UqbrTiD+1AqGHdVovvZ5MXrZzrd9dGzKOe5sBYY8fZfS
            ////N9CJEQJNsswkGoJZ+1NFNXoUclLOJNNIA5Ql+jqse3wDI1VyoKmk5M6cQfxV6slVzLDFSzrp0k8c
            ////YqhZblj4BYzO8E2NFjO/R0njdwN7Fvhw91zdNhORD5BnnSWL8H0xpl8TM55kSIaM8Rs9jZOOc2ad
            ////btJK8yndbvS3d11A7a2xpfhpJSjqp+7GagjYOQNVrYc84Dncy2kHLg6R8l3wgk47XOlQJVSnFRXL
            ////1jw6L2xpp7oNbdnYLxBeGLtOfAk+mUhKSQ/SJbm74S7xEZCZcD+qwl1hgtwBarrM2vZRRdrAWmyR
            ////VOl+e76r82S+htWuBfBosw3YO3PhIemH7DghfD4VPDsztlk60KBJ0O9KeifIWbQ1nfuc86KRBmOY
            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
            ////N2gpXd+zJ93q+q1ame5k82N6GEvI3BuRjqgfSUz+eiHHKvyLdqztJHX7n3zdXMWTiuCuTi7J0l0q
            ////urGzpq5tjRZU0KMRmB7LDjjLkZhehRypGSSV1GMaPV3VVtobC6YUGQAAoGyb4896z1v2s7QRBaIv
            ////PaODDa2nL/Z+tKPosP0fNawVuEskl14NpDof5s63X3jdoGNINJHfgrdyWZ6Lk2hIJp7SmSuuObu9
            ////kGyQUOoleW7fmMXHxo9kBhYxzrdeKlkzp0O1PAcvHFLMCHagHIfKqYi8IyJ/FbW0XkHJOA1Jn8Kj
            ////VmCCTa8sk5fJtxrjrFSl11W+y3JChjkeCVwuEzphAjdTqOTJcaS4s6xhRlrrtD1teQpZotHaCdVi
            ////vGS3P3E4rG7F1WK5/VVxBp/Dadf5lUdxoeW18rHt+YNJVPVYecleSHE/KCoP63roo07aBaErObxL
            ////BVK2Qb+KwkLnU55HKng9H9JJ2pewSw/JHS3+rneNbZXF+S1hKP6Go7KliNOfJHLnZy80Fk+nG/4v
            ////2QANQCNgNPYWHh9XzxwM81B4bTr/ADKBlyNJKL600/TxmrtyMwyowaOeUbnWOdfPzKj7sqjZRxtq
            ////a2iycl+K0647I6L2GK1QvxbcI94e0WlU9hY+H1fi/HPmsUS+bTIh3lTyUl+LsX+8vTSGQBjpzsje
            ////nNfwSvkx2vJVIOTkqjk3pSZ9uF1rl9wD01XxBsrpqnqvM/8A7OinOOimFkGJRuUkpQcsKJPIO4y8
            ////VUNF4cZHkflP2F7RUOB4YkDFzSje3IKt5PyccMnHfMyXk243GjTfRna6nUhBHEKKoUwGqppJO4qW
            ////sOXm4iReqHPflupFpga61k5PJUc/96TZ42DGmjLtYGSNJfJeJvRwgu7J919MpG3boC1mBDQshLy+
            ////ClzeMVjtb32tz1OMvJMLrNJxfsvaCbw7BHTb42s/AgJxgk6ZmFn6T6B3WWZhGphJPB9KSTb0OdpT
            ////nXdAvDsyVSqVemVfG0Prvvqqa1E+C98GqOtOnyfouMwhANHeNeSyTuBp1/h0HJQGPev2jvO18qsV
            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
            ////e7YE4GHmRglw2rX5KLAfyVQppKP1UpF+yukCg5XxQ7KBAX24xhEeSPKAOVAPghUElm6IXd7qVzDH
            ////kjJW/wDCCkskng99MPJySpIV8nKJhYuOgBGqFA01DFquIuuKsNoA2e1tbJmDsgkzIZwJgsd2tWds
            ////o+GtwSCBSpE6YuMxL6LSbgjcKNK61iyZgcoVekqabg9Wq1rOLK7Oso+tIX7dg5IxsameaOqfz05u
            ////+D18SoWrlz4fCWUD0VKXml7eLve8qHx0QFMfqPoniLXwnmcTJGMcYVQDvjo2d/S3sPDxPhgQ2BFR
            ////v9BL0nnIG38RDeJk+AJm24zx9DNfR9IO/mnqZAX5pHo3M9B6Qr/mu5m7keju3MO9qhWIbADlu+By
            ////UaT/ABhKpHkVO56Rh+q9/RNsAvGMWfjCgNWUE/RdVFfdTCNsGbSypuUjyp+MHVEKPyRpj9bVb2kh
            ////hvaEZ1uK+HFFlbMW+HD3XKjZZXVu2BNCfstA5aqL47a7WBkALWEzPo6oVWwIU6K6B0izlTi536Oq
            ////hujdtDSx012wR+8JbddVmyuxl0wmcwo40z80oS0276sjIyyjhLRnR9HiloEdN3AM5fRyTvu6rFRt
            ////0X59rG4rOmLEdPaO1ZaMoZKLmEJoMS0rCf8AakvAQiIa6WE12kk4fMqEtWvTxkZy+5m1Yx2VSPdk
            ////psHuqYnFTgniSoTyftaW6+mLCEwvQo/FyHkUTPPKT6rSsd8fK9fhTQF/1YgJxglYVPnkwBUlxaii
            ////nioGkZZQmmEG/MvBLp44pZtRuvo93AjKOUB0P6LZ5P4G0M9DCEFBRJuJvJAd1yf6NlCx1032w3s5
            ////TRK939V1/wBKS6bAz1ZtbHFoCcZjGBLwp135By5mWFzxRc9M9c7+yqxsAKOLLQDKwhI3ebOmHO1U
            ////d10Maxmjtn60HJVpAGcpr58R/RVVOukNAwAGZ3wVisysKpxftWd3/W8dkoKdFFT9jSw4vHBJITgn
            ////7K9Eua+2qwGEJneBRyVQS8ih65PDGrccd9cNu3UsxVGaYSsK8yor/Q6B7oV0BkZXNHdSjnhrxpKp
            ////oH2+NsWKTlEoE/VX40ms8KKY1DAbGO/08vqhBYgxos5Eb56+EVl2yMaWZ3eqeSUvo0o8izFFPp2J
            /////wD2T1xrFn6dKEJme9H9FU1atF+1md+OsX8n6o1Q6llWMplUaPXp3Md/p5fVCBko1iAtGc9MRQHQ
            ////8qJsaqhXxbtY5YlkrhGk++JNv52uqUbhfCTot/OR5JceQLHf+S3sNNAcQGsKEEmwd5RMozkL1OTp
            ////e1YzRjkKPVGqOcGh8oMLThcJcygxEjPxfGFgwiLLrv3/AIfnXz+uS50fdCPcl1mCpHKTDZzbu3YN
            ////3eleD+lRg3Uqu3yOd9AdKSTez6+OnINv+NP+tDaJXGgdr+UHTr4krJY53pcaVfCR6PRDjn6r9lNs
            ////G7bMMj5eWEuScpJNL+lVztlA4Xg61WLBiKDyu66dvqFuOHCpgWltg5fCxG/nPMHO9VivSWK9gWR0
            ////iFTWEDYPPzH0PCmj0KnsL2mxrKvDmMNQMGVSlzPmEDyPP+9Jktt4ZBoHPtBy6LJfPIJxVGuPOI+k
            ////vJU6+/jKwSKnk9CyiTTkJBzv7L6LxRktDUxKhAsSmTxROPE/SkwwHVb3swnQQQ4MlMHG+eizTna9
            ////DiHVjH0lM68eFZGDLFrgnTDlknCX4uK9KVYylxHJTdT3szusomUbvJIKRycQ/rJSqivjHPqpjpYk
            ////xescCjE17yPert+9O16ZxiFPFMGEgljvNJeiM1GU53UQsxrtTyeT0emPo8sKt7BQveTmUEkr38ee
            ////jxXFfIirHvaNtQh3scocJL+65wOcEJscaFSpekaf66ruqzMS738tQGnO16dBuM5R9JxXsCyO3IEc
            ////l7CXTOYlxovHHCS/PKAj5SxrsCyEB8rewdrE9KTqgl2vkl1OMlOlDykpVPTtm/XbZYwfLrRoBxxz
            ////P49ccoVdrciXpVAhWaNN9sWRl4mvLeTs6BIIVp/Skzyenb+KLrKGEwm1RMmmHHIDp8nj1ZguZnMV
            ////feiepr4rjazxOvJCndqNUsPOc6dVjSrF/T0fF3sRmYm9FCzECT8TT/SVKWisdYXMwhzn10AmZQgJ
            ////U8jqvGukMltwaGhTwcPnpq8ACOePAXXNO1CBYgo+Ztph30ZMjEzpJpXaqNcM+izWy6YVKKEByXl9
            ////V1A3w9vgwLVdZ2oOu9mWmGSxrgWOslUXGZImb7Byjfk4jA3g4TyvNUE5oa6t1tDT98deQQm0s7xj
            ////siAbBD1scWb1mfbo7tYs2mpTkpnVBnTKAHdcMN4ixyc2dMtIP4sotsGxuUd/p5fVPBZs0YTNHUBk
            ////4001NNnHLx7oE+JnHH4kfQqTY0AU5vU1eTvWW7M/jnoqY8s310aKQ9WamtprC38PSZLNr9PohyKF
            ////ltQwB85GTSp+HLJWvIjpJQ4XfJdLjKXEfJ7odYi6A3XwhQ1zSf50MvcF6NHLaRuFRC9emJUPB1vT
            ////BK++3IETvh5IekaI2h/ByumltJ5ao4qo3XALM+RrCdcvHilElGvOx8lPqR74ey0Y2cDG9zE/eiGL
            ////ZHEOGPWFFzbn7sIeGMxU+rl3wW4bCpz9cKmFBRJYmThx+DImT6p3vT+Db+ivWSg+qHoD2rFyV1Zm
            ////35YJ8N2FqW+CeSBOEFY4xlIodfl55SSVUykr8qf/APOAFeluNuT8skZpk9Vt127x2Nlpgf5w+EjB
            ////UtRrJByqXIUdSpyKYrnCsAP1TxpGDXttEQ0RDgwuLyEiXI3azdIWFi8SPFESEsTmM2OP5OuqxxoC
            ////QMn+O+ijO2tn3TSRCw2Q8j5bIPQ5Pv7FXp2X8rx8qV0h5J76YMTgP90ikc9EZLtwtuE+Rz4TUfCR
            ////yJenJIrLgD4/cuqVEKmyhw2GyVw+83+XiNwvJ1SjdsoZLvBU63k5FWPIBlA6PLDo/wB+OkNNOYum
            ////Ii4G8wNon7O19mrsHbynwE99rb2At4UuwFKgUA4uJeWTLnMeCpGqMR4gTMYvQqUxpp4jpGtkZiU4
            ////0vHZnqca05aeLr2bSzJqiiNteWIUwZ4fD0JNRku1B6HphRfTwFLeqW+1E2I2YeH2neZes2xek5zw
            ////ksAzRmTPukJ6JYp6NXo3k8jTiCDk6XsqaGr2hXW2N+EBfOrEbtKrT9qvsHi+LW1OHTkyUPFA08C2
            ////N8qF+PygeR1PZlWLQ4tGv1Vtle0UR3EMIc1q++dSTpg6fsGt6DHLEMKnHXckZho306IhuDv1tdkn
            ////kuKupGMQDGEtlMKOPW1Go5lU8CSNGSsBszbKrr+I81yeMjefpi2lzHogoku4VVBqMjJ2avflqpro
            ////yNFXpJZGleiN2oDj+35o7OK2nhavjvCnfdAGYSutloTO0Yulso9sb78oN2sIjf56a4Sz44QJtMka
            /////koQSnY8TuiO2PgwM6SSl9qdp5EA7ViujLxma2k5vVwr4tr2ZrWWFmjfRpgG8O7U01hHYbj6nojU
            ////jFL29h8y64AnccCqNMVTpk9MzEeKNkLaBtZyRGzvneOLKRuGprgNQO1Un7UjIp7q6wCoambTJGud
            ////VCaE8j21d7WlhHdcq9ZPNkj3Oz0/yoeWb66NFIerNTWz6jNtNOGehm4HjIx5kjVhXmlpB8IZb7Mu
            ////yxiTHM8khgTpJ4ZLqt19dTMeJ16/yo7nZ6f5T8nNJm6vDPwDPBZ3mfV374aLWh5ZvzMzmhpjDaG+
            ////pngs3rM2oIZ6x79THidev8qg7jQ8tr5U2TqjijOqOr22U8X1tazmwxyjczvId48jkLOSnAeTyFB4
            ////CaZy+RRCPLgMQCmAWRFqFTqjpzuq8drH41yfkgENO5pJaddBFi42cRzzP08l2g83tBivN/wPkm+e
            ////T4OJHw/suzgaLMlnIyoI3bUHarIjdd411sTI91kScwfyVc5UZiT8l5Puqwfih1WceLkWVNJ3aT88
            ////GTJSG6kM7eeR33iK8VTTRgJq1gbAw8sKtTnyAdpyRM1BQsuS+GcdOfIzaPozt4s5TSQsrrHlXku9
            ////cL97NphXZ3aHtpvqiNWbU1UrBRswqdlRX9VvCP8AucY8UM8G+bdn+iH/AFgYlP1srHx+juF3pY/t
            ////eynZ6hpBhpJTvdvXUp1bvh4XcUsW+HD3TCJM848iabh9dNdjEmG9Y7VlqnsoxrsqqrtZyNmSngdb
            ////jCXJutr4izOYaSU75me+L1VHFOgY7WXQhMxLeRIfzpLV7NFlzHzsDHasKgBKjstd/GeLIlD5Rpnh
            ////PGnekJd9Vo0bdDRZ4StdCB3nEmrCCcXVY0kxlVs4vpiwp3GY59ZjmpqCU40tajpqxpLGjgK+6MGJ
            ////6mcdqz7x2VVxXDNuor0jChJt4GnLEDyImU8EqoaeOK8pJcvHCb1Jr46kVeNBiyWOJ8W3MJXxx08l
            ////Z2KkzSxHPQxftSWi2jVRHvyMDFSMrE1k8RMqIJVIccVRFqGlBLI414eRnwQuIogpU16g2eLRwx/L
            ////PpT4qiHZkuy+3uvZdci3hPy/I+qyQMejtKKORz1KftSXga9o0xixJkqHaUYSdYKXtXAjk4sbF1ZK
            ////h5TkygcL1e2V5KXo60KDisKd1DOofMqjTOqJkq6if1kqej877qrYUZhieuswoPHQ2vM/KycUSyR4
            ////ucSEweTjUEtNW6/gGJTytJSlk4qSeJKdLiohkpq27NWNLnfKwo04lW8z5RnKPozkcFKPv77GsN3u
            ////uVS/zbhXIbEvTaoUOOUjVRDRouZoWMUWYy61ly4Lr446eSscyWXV/MUcVVBXZG5ijJZHG20D+i+H
            ////FUKAZEnkHKo0uZxx1ITv5rjwcBfcyMyQZyUs7pmWChDGHoyV1uNBoF9Dxnbt4DfyOnyOag8brs9c
            ////EsUSjeRvmtlfEKrdLRt4SkOKMnlL+IIuxviHADAGr2XGEXmr4OS8cwhYZpKkdH+lu15S8x5fD9ku
            ////Xuy6mw5lx7r5zD8F88jcKxdKrF6vg24cRQB/Wz70X00M2LqiZD9rAV3YcemK7d/p5fVZsLJZO00y
            ////ZKJlU+1iinFna4Xou0cRYFoMIT5MO6BwbkOo77zK16OtDV+xfhLRp2A2jHCx/hCTuK7HggwSkEEj
            ////EUrylaqx7N5JctXFra6sLHu1PPGwjFrETqlV8DnaoH0aTaXoPL+Rab+7Kz2zcjMYkjBvI+TcKKX7
            ////1b7pcmlnhuloZ9ZbwkbLBAZ0lhGwzSHkc4cV7U5HI63Xj4Zns+n6McuSi+jHXDBhG5irhks8nNK5
            ////2urCMSnS4r2nP9Uvb1jBuOeUHPI5xUqPjnCE/D8Y9KU4129ZbHpazTry1Wol7LB8qJ58v5+PX9pP
            ////PHq/Bnoewu2wIALFx7CTmWPDEpIQN5xBamHprjM081sC5yYYAVUqHk+MCxy5xrVD0xr4NplWPuFG
            ////7v2tDgBbHtzvTH+pN6g6AjbENXA5YNWKNecaEMkI8Rz92QWfi+tmTiuznJ9tNt9Y78qEdbi3iWAw
            ////aW5/Qc1o4GDioGG8PFF3nUkiQm+B4virIUSXOKL6Sd5JB51qYfpm66rPWxzrfzyejrOc53wccZGN
            ////dqTKUvlDNQ0ad+EY5AXia9GeedbiyUYLL+M1cWJeCpY+Zl5fBtcQTjXxkpSxQZ7N+QWTUqeXgldj
            ////mWdU+CJSI6sVTdh8aa6IZYWMcUvdr+dcy65Nukj9JUqgx/X6rc7HSfla8nee8nagdrjIOUJcVVYy
            ////l9M7g4jS0bfDlO9MnkBB33ZMqxHiGeIaWYQnIp6P+ThhJJryIIR/eU3bhR+F/sYl6FSbeiM45U+F
            ////y58foyWij1W59Qdap2lGHE/A/H3koSfSfoVPxoG2jNmY4xA/nWXjiZGQQCjtWLKVTrXUw4u3LoUb
            ////RqljrUIyTXM6iDlHZUryeTrrjuyUwCmxm16JTUuOzqxDPfeXaq7AtEabON826l8FzL5lIQhJ+lJk
            ////zs9m/RW0CeiVE63os6GxF+I1P3lLX46dORhCWopR9jc7s6MI/SlKlUPbOI00AA5mWPB1ozVBxKU7
            ////rk8caheA3cQyADQ5OacajngFDiadUCXFlKr/ALpuCyLSV3r3agBYcldpC45QlxXFlOQI+u/1cdyd
            ////eYQm0yfSmDxxRRDTG1hAk2JJtQBHXT3ZbsrPCc0k1zkrHocn7QqxX+Zwy66a4MzqEBxQdV15Pffl
            ////ycRFuV277Z6f4TO8HMSb674ZuKWiqxy/mfRs1HfmyZq2sJOqOKM/Hk9/dFgYlJVFz1HAwppqvDbS
            ////y6mVSmFHFfn6uNF1lbHFmzpe/OFHGqhpgtdfAaeOToaKqEAUdT1127iN+SfvjryCEcx88N+oGbOu
            ////Sxxm+kOBgFGRlhZpJubiGQNdlLcoTiWaeVkI325RytN3HLdY5eX1Rw/zagaLNeeGloSnVHFQINJx
            ////gndfRko8RY5RM+eSX9mU64Z6I7rWmsLfw7NMky3yw6wyS6zAkvhunpNq5KmnEIUb4ejvej07J6Zm
            ////e2fI2YGCuUeIO92v7AthOesnMJzwlR0UpwbqfiFZJ/ovpjpTpb4gfQ/G38H5R/qC2htPJarimjf3
            ////BW02c8rXk5jCZpYeRqt4opa7h728OxidCPLjP88ELPYyREtlb0JnZNrscfDrGVCUEyX0yT9j0dNf
            ////TXrvZnfCEl1mYnPddWqzD7bBvoaK4J8ObnKertCXj+lwg6HdYuuS0pJNvTt8m/8A7JaNNQtmk65O
            ////I+cthcwY4MXphgwc9GygdcsXo68LSaS7rQv34sfD4dDrla6a+m+nHSH8HrOmqa228D2j8QxckMJy
            ////0DUlQj4Wet7Ck+uXxTBp4WvB6dFu9YsGjF0oDxoqyamxXLN6w6dOo0WZeIgLZCYeHUskG9JVSDVL
            ////CFyyT8qHhJdUpTdKYgs6IenQ/Sl4a6BbGkw3q4cZYgO0NIZGz3aOOMREifwaY4vJs5blPYD7rSfm
            ////8/gKXybmelBOHbspvu1NbadUE31uTLAaNtG3upmTRs1Px06LaQ4oabFvWaN1Wjkz56eAzC7KyCFX
            /////sR9VFdfrryA2p1QlSs/nCWMbgsAIcZGYUb06rrclwDDuhXfWwUGzL0RrCqOy30BHRvDJXSzY4bj
            ////6pdW0nVaN3dpspHSrnest2Z/HPRU0VTr+q4pGIa7Wcy1U7EKstlHFdNTcIUqLV8d4U77oAzkWdNU
            ////+GjXwDRUtVAuZnqtIw9mZnItV1nEA4rp02CzHf6eX1QpJjUJmzPDwDfoZynLtvg0ULNE0uyeyV0c
            ////aaMzOZZp1Pfu9o6K2O/08vqhPxhRKovrSd0MtIMjMcztNN6rqDhy0WDk9fqYktVNZ+N9W+w7G/Pf
            ////jqeMjHf6eX1S/ca+f0SNS4esOmlvFNVOeliei1v6P/0kPWzwWq6zNr2UUXawFjOSpTQ/fV5o90Gs
            ////O/08vqjuNfP6LuAehp3wfWEJevOxXFUtcA3BDimloJJt6SwXvCefztFCjTei+ocujRlbDKTeHN/L
            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
            ////KabtYgxJislL6WdMRu8L7ar2DEeIaks26lj5TR4d+v8AkpenNxWJKUmYs7NZn4qyAzn0oSlLnjT6
            ////fCqO1qrUP440uZS1fedeSyi2OVm2d+9LP9mos7oiOdlVB3ByHIfKtozCCSlniUpM/ReFoRvizOow
            ////gykV9SUsmAyJsoB7BqutavS1SIqkomqntN3ER77WWFrzh/MW9m76o10UVZIUMzY4bj6o8OchyHyn
            ////gw15GwONOPP/AJwqroGngaaqGWFlBOEwOIu21URHJ6xZhT44q6krr9wXQotrrpsaSJHWsNMJGZHx
            ////Cqim+vLGitp7HHj7KJZaYM5Gu18yLRnKySDzvKHaU3s133Cz8swXkkmHYgsPIrpUpO66yrRkYZH4
            ////Sz5OuNzuf4NkHo3el+9dvWBG+ixryceEaQb5T9qeR7jWfd3klhnoco5gGFrVcRIvk3+1Cx7eEjXw
            ////grJn7ezV0e3JvgzmJViUzrSDyOKLPHvbMZQ63OvTnHIHw6XqT95TVZeKt7QlZJJYV9DIXIhz3BZx
            ////SwI9gBlp9Ewsby1QBOzsQ9UdfhUywtVxRTu7xra5lEjXOvj2Mgg/9Gzh7dNzRVZg+JKnsVWTBNmM
            ////7vZXGtprC33NLHl576ioIYUPx8j38Z72Rry3VxhYzSc+EwmD73kByw+1wIcamjD8Vzaw5GUdP4ur
            ////xXGU0aYx8LIxzstKdq7k8gAUpVHIN+VyQjuCGVnu418/oq9awfe/n+NTOTnlG+HConnWsPIh9Gp7
            ////XxxQDSRNg+lUqMmSnauheluhZAbrGeDMF74dafHHwSehSVdp4jq05WxIv6G/CjaNAZEiZloBVein
            ////s1E2DxRu3NztAGYabtNsJYI56P74UJ3bjRMxXjQ29w21W5mOxAlLMzVEN45Ib8+RiegDl7w6NNin
            ////Joo4zxprqrZ+MdZyAuZ8/i8IRz+oNNrI294w9h92JLyLkl5tjxFNU7AXTE2/3lmFJBm0AHATL8E5
            ////OMoAWEkqqsa9Jy6sng25jAOqkSgcbsc+JoCDk6UVfSSZJ29ZkryQ4t0wutVNKCZ371Zxxa2YEm5U
            ////HoMTOd6w8eyxHinJVwGG7SWMVEThqYzajbxu91bWMDDGW1PCYqQ1ccCSPotyUm1T+k49DpVSIfz1
            ////kdKT8tybVCGO10PZ0/ED6h/nH3tsUwX89wlAWS5+cE7UMnDvosv5NpXoukks/wBbHT/iX/8AU8lv
            ////9Vm0D4P8PD4QFkozVnXBXjVOe628M7ZdOPCW4X87u39QcoSj2b75Xt9jY+Cvy9LoqTJiJuwcfUkz
            ////f0Xjeyl2R84gATDZFmYSE9MpNUrpMk+9HDKhzu2Ukl3w6n44Xwl6Udb7dirHkCx3iHxo6XtGnXHQ
            ////MGd8VDKG31toIwX4QZYYLzDnlgbf3wOxdV2qRL77dIOUn7WdP1L/AKwScz59k2Bvnw4PZbqEcj8J
            ////aP8Ackwkei4s+1X8Enw8P805WAN/+MYU1Xtvrq7Yw0cAHYyrLLGRyO9YK9ex0TDuYWkjR5BsufB2
            ////xWaOKhlDb62Pxb8x/wDF4ssLMINoKjbovoo0etlDakRAIBBJfU/CzXgDsyOzsjCjOaZprxa7j/nM
            ////cWlJ/E18erIOdngsob6dEQ3B36mOLK9VGigPXmorbnxAzPM/C7dxr5/RNpaDqx0+F3ERb5iI3bGe
            ////pkb9YN9bohMpiCdo8d9VmVmd4Oud1QpDuyZYZLAabGE+G+AjtAfUxKgrq418WV7c9rCFjHKuTk6W
            ////d1NFPFlQ5IRi2lv3Rnm8HStkX+6pJx249KrBuleCpU7UyX+MmD/63ddcP4Ofxg1t0CSkdc6X5m0O
            /////wBlsGxdl5JbGk5xJxInkqLNcfbc3cW4kATkJn4TALEHIuuHt+IMQUdUM+jUJcadan747/WHFEGj
            /////wA5x9ls5ueJzfDsCOFR8SPSo5iSsqOkJZYOVP3N3w8ryXyQk5RnzNgqZPFGHE9+fiq4WtbDHj7L
            ////Qw9v4gOMAA+GHX1RXLrDNvFvDBizLNO5mFOjG+jUdn3AxRYiUXXZxsuqjQxU8N+oGEJSxZlmncxU
            ////R/HBtb5O9V1vF/r76QYS6BvnQ/ot6ZOb8rRuZOwhKGUMnb7PBdqFmEJV13vLZqPGjZBvSPo1K8CV
            ////i92487Q9JTW05rKr4ZWILOmqfDRr4BgWdNU+GjXwDLoU25Eo8HqVWrxBznno/qtMpVYi8Efhp2Qa
            ////Nlqjl6zHEpJ5GLJfpP0we7NmY+T706BfJL4KdqF+I06rtTkeSWCBYNN1NWvQwWSoxpYsOQOdQhJU
            ////QxVMNSOMaoVDvoYS6ITqpVGvw4lzO3yk8FXouKutfjlOSq6hg60r3VPBYSa7V087wxVVi0OkEbwv
            ////yQq3sjTqXkaon5lQhOT+ivJMq3Qoy2ZmRvx8yweizHF6xPPYriqpSmoxygPjYLOBg09jUbz6IRKx
            ////JNLDppZX92S7Bv4GmIMscaATVCwlU8kKHF0v1kq9NuCNNm9mdGlWFF9qWkH2+OWoAG9h0X1nWrD6
            ////QjVXbnt4AG5QnIspzmrCTlRJ56PG+04sq2hmyssUfBVzLFhKR5LlyNQl8limgh/qt7DUPFzMJaUk
            ////rl9ScfmGF4e2/ODAUrtnPnzzv51o9deYW47468ghLE6pGqMOneoOvpjbfroDQxxao5UaSSlJ9H+k
            ////5b9OcNrBO60dBxqMj/afXxUAs8FzJRfVEzHhXnr10CDcoTijKxCemeoB4elVdsu4jTnBlk7NdTZb
            ////4btQ2RRMXOzpgDTQAw44uZdCcizSeLd3eMWVM0zs1EkqO28NNjCdv5OvxZhLpyLO8Y7IgGwQ9bfV
            ////CokrzsdvGv1swGPQSqCs9dOT1+FraYacby566gByar4UUZbWEIPV6HHKJmZy8e0RAbqmJLNmi582
            ////+IBp9V+tmdYqJSmTxp0OKg0V8RZ1K85UHWnYuTVTqsycZWYQpIofPWTKDz0I68vq2swqFXzxp0+c
            ////OnNphGxljnfxLmWY4a7UK8n7sp0AFd4W115QaYLHzIOUZZPY/g4tp7T3WDxkiwhV7jRxow8wTCju
            ////tAIj393kv5nS0mfElzkBZJyVYiXEqKUoW6t+Zkbucpxhl9GXUEK2YQkidKcd5ogbLrqKOAadutwn
            ////GmE6stNWj1aYO7rcM0WTHaPtsou0tdsl5OTsyJpPU35dvdXWLd+/GZ5n4S6RyLwe4+aT1OyndRfD
            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
            ////mT9was+WAd+YDr5tL4VedJP/AOi+rIHGSwnfzWjohOozz9Mbqrfbnbjvt/IJDxx08lgHNHm/M6t1
            ////l2u1jinM8TYCUSou9gQiF25tojn5qoANLnPPOsU4rTxkyZWtRx80t8KjIlOE+v7rbZCvL36IO/08
            ////vquLeO6506zabrTymkQ/lRcCkZ9XFVuyq5pIjwVP1UHoceLacg1A28iT/MjlUv8ANSbX3BioRDII
            ////U0Bdmsa5pP8AufctlUANc4kE/pNvqrrY78adf4tRzUHjjp5Ln7R4FnwaXHqP+iwzjbxYxKzA2/ii
            ////6STz9tWniIjQ3Tg6Pc53kEycvOQkcZfbXmjYSP3PuSs329YQfZ6LbqjQNu9l/Ga/6V2744PyC5EV
            ////GCqUmMeZP9equ3JCLPCPAtKpV8yu4rtyZdwt1xLOY9gHkijOf0rViFC7XelxpU8nkqxFAj7432th
            ////zhM5w/ueOBZ6HOd1oz8Jr4TpcaVfAlL04gR1BS9n1FwUcUNyIsnH/Tu+RzT3iD0N39nUc1z3O+S5
            ////zhccqil7hQnnO96O9L0kpVAC9G8OKRqyha1ZO8rGpQTM8QRCkeNIbBtonmEiUZ0rZcSqlUlDEUko
            ////H88Hp0ampxN3300DTxQ1Vu8o4tQsON+jpXipxmrgdDPptZsc3Pmlyww+o388pLucVyOT70d7rVKe
            ////N1kBi0k5znNGePN9kk53k/jkJDyfD+d7rSu3Ghx+h19MdKDto8GHNY5/WEjmv4I8J2D6SUm5OL1k
            ////sHo7384ZWvL0+TbwDyO9/JP119U+EGxdlxLKW2FB8PjCFhGlI9ZRv54elPJ5Kseqp1XwsqhEGXUf
            ////3np0wu9/Al6lUTPo+/RkpyRzVtajnVO1eiE5AsI7P9G2Z7OAFqTWOZYUXOldcSo7VjKbaPGy1Inx
            ////xKYSclOPIO115dNo0VZGYYZDr8hyUiyb5CDGk4kmkif7bws9t0bUSSxpQSjdivtqgMVxbTliDRWT
            ////+FB5IOpfJOPk2Kvp92nVpbLTmuScc+F/Dhg3kqUdP/CCWUn0qqH0PypsorhpvXUX4es/V24hm6zx
            ////pwgSDltgvfHwblu4TnG+E6V3vTFlMR7A93X0w6P9xvbLEYtVZhpxpk8bTq0Rq0hnbYR7oZKN2yy5
            ////zGGB8OYkOh/h5KB1uFNajcDoHod0Wx+I3TXoza8Xgbitfngp9dY59tLWCLG2MRg28NrROWNEpSut
            ////jmhT3Vi0bWLz19fUE2d+S7ihm0w05T1xtcA4p26MzIp2d6krgKBvq8cjClR871fVZOKKhrzBSyxO
            ////VOlk0dcAVjq4tYJ0BxvXG6dNdtXqbKLm7823CRh9lh8D8HzudS9+9FvB6Ys8no60Pk7jRlpgwl1j
            ////qnSjR1OMBl0cVQDS08USSfzrd7tlIbJt69AvD4reWK9gWf1sFF+XKAtamFTA3hU5ueET4KytdvQc
            ////sHP0e9ejVPRb8Qf+APrNEIZKIswykwyS8la7+jZWyqlGejT9qSuQFWIuFHGAx6JcvkDJbkYXfvxm
            ////eZ+FMFmFXB6vwbu2R6DA/I5xyw+v5fqVT1XL1jvCnyS6H0PkV9tTJfRq9RMldQcIekpoZ9A72+Iy
            ////jnyE8aj6nLHt6zuoy6wCtrDlBgWwkSXk27ZbKpHyjccnHh6K8nk63ohQLduiIa4Cwuih6NwrDTcc
            ////KJXPXF/SsWH0PVlr3Nf2Ct9YH3WW8nlLxZKN6vJP8VySTOvEUD4/rYX6PQr7vustisg+cZLzBo53
            ////k4XMjdSHph1vB1qn3ir0Qr8Qe9P1K/ZNeW5Of4pyglH8KPgrtaHqZZOhe73k7Xo5yH4+HgqxrpvF
            ////cRXufVqpophezCXVkfDySpz4eR2JrnG58aeHRbtxrHl6N3R8kOviDW04zEaowl2lTC7GPo33zJnp
            ////z0QBsY3HIgl8+gHT7y+iplWrJsoDOAtZDnVHYNJUEo8K0iZVEIwShiqZMq6DX9ID8UPV0+QvLPsA
            ////KYMIWTjrcOLGHHOZ5LnGco+jQx5BGzyT37rJsnf0pHCnnn84SHqjT/WUm9VLqsvC4Wir850siZZS
            ////kRnFSPdTjke73C70naewv5W8KOl3p5F1hVTcyySeEFzytLWPJzErSHanVYqlTKVWQfAK80WXS6ua
            ////T8rXC/4koHkRPJvoykcRXjX9U+uMR22EmX8a/Dbe1GvBwuF/CR0o7SD/ANJoQr8lkONoToJVOv8A
            ////i4/ulSU/1JK2K7PF7WU+1hCyKRqiSRgb4wr4pCMWeEa8Sizp2+nTxRe2PafCDipmJyodi6TZ1WMq
            ////e3uH+1qM0aYd1nOt6Er05JyU4hcT95TK4U79NbLpdWcnVE7h9VGiHtZyLOJnJ80c2W2vf7Qat1j5
            ////ROZOasVLJhGnS0KVNEauL7Gxjwg4c3k+U5znk4dMO0eyqnl9PWWQDLpDS0tjYeI03y88kwshMImH
            ////NzyXLOdrhmHq/oU/cEdtFnrg2F75lc+368Dnk8nudjR4gPL8q2BGFd4i1dqF6w0yZS9ed95DMNlD
            ////QxWkUnn8oxQao5Row98MAphVaztlDQtiGM6OwNZGmXnxQsKv3IMJHnjZKvUgkfvPYQy3VBbYzOsk
            ////wscxcy9DiJ5QFOLKu/fZe2V0oZZLJRqCUa95LnqcoDFO0quwd/q3tWOEiTiJ2Iyeu7ZamD8n0jXV
            ////3th7pN5/+5O982wbpqYLe3pG3ZKGu2YzAw/ZNTWWWVCqrkugfD0ejtKdbtx7F+1Ysp9A1QD110Qb
            ////ISUip/KkZIvl8ISDnf6K7Xalq78945amjeCcpZ8GjjinaeuOTqnglHFkvqDPTqYl8PRYa9EiNVME
            ////X99uSHez9vAwsQ0qEEOxechPUdFVYvWKh/u0MWo5Dg0o74AV3VojsHb5nX4/kc99aW98YaRhZqbb
            ////p7n+acVhMl4T8y+JGu+uoOiHp/8AduKW0q4P180+D1lid6QCn8r0aIw1wpbclzDzTycKDyOK6klR
            ////Jd3pf96DToq15Wy1tYCHvIMZEDDAMQesVZx58RcbkzL1M67IxbXR1uScfVT0acm2vX7GmBZvV8Qo
            ////2jTrHQ0bTldZm1hTqG/YzwXbo3tcLytGMWYVOj1leavX6t7HGedHT/db4X+djG2HGq69hCriVmD5
            ////zyjTnkqkZB+MaO4b9I1NrZw2czwkow57yI7CsD6N9AWZow8KqG23fysKtFdFW9kax1I15Z06Mc1k
            ////NlmajSylvDwtvpu+nWCt4G9om7yPDkkAjPAjo8AuYmUEl3xJd6YlKN2rnUsTquy9m7AshsGN0Gck
            ////b5WElkzvX0eGXRHc29TChgCk3LdGcSqdpB+Xi6jTCkIU6o8MHNflhg+WnLHCSe/HP92xXt6Knu4z
            ////ZWPuOT1/OXTt6L0y4u1UNEN4qoYDf5Vf5UPk3LfFZkk0kg8mrtOSvgWyXkvLJHi5IdQeSoD0aviO
            ////bLlBsAsaxUzrZ+eT/Roa6OLItNnHKc5AYScUceQdqtou40th466ooGWefnOpyP1XosPHiIpMMGfd
            ////SR3P5rZlJt8o0phByUkjEwU8X9+TPnJgHw8S2wfKHajkRKQg+TeNdqkBKRUC5w2/FNYuW/4ORztp
            ////zkvhLdppWJqluInfevG+NYNeUn5WnFdcUsvSvNMq4hEOINV2EResBEBiZTqZ0bzds3eSgjrqhLwq
            ////0quOfzoumTBHzm5BYS5lzqp+R0sPRfg3KRWPbHh+qXt9dZBvsbJDzpefbDjTdGjmPc2FXH3eSjlQ
            ////jIfqOH0nXRqsCjPERzewL87mXkjZlGqfH7o0j8U7M5JSKsRlaj/ZMrPrr/lHfTU29uPtgLciGvLE
            ////hi7PR6uD7jFyvM727H+HnC1Lzab/AFwaQW4ZQlnS7auPD2NEHo5p2okLIw41R7hZgwX4bsHuFVGQ
            ////MnHxMPjFcaVSafXYH857KHTTlj3tahhRJpYHFWQr442N6BYRELEj7rgwBcHLEa+bUWAt4eLhjiN+
            ////A45HkqHekjcf+Z41cU5Wxdwsc0t24QSzjpkgTlHpWM1Q42DS2wcxBRpzez23slMQU6M/t9t7SJEW
            ////BwJ4HXdm3FaSDfc2DjVAzRxBBP6TmoHLxY0wc/ucSMozt7yI1babo9+bcAYl9od1O8csGKmif/XV
            ////768lzNd+NeZ+NByQtbDn5guD1AWTjRx549/thl10NZzr5nmCVB9TiogNfFOfXFsxlEyV89ly+FNe
            ////zQjMXk0dTlAeNbHfbPT/AAjuNfP6KjXfgCwYuv0aSrqD/ZONmTI0qLkHJV1+iud1ERj9F40Qy0Xy
            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
            ////lsKEm5RqCUbmeR4nYrjWLD4cZQy49p5WueWXSRBSPHisVxXGX3Sv/tYaojm7hZykHIg5MtWnJewo
            ////1FAPJMl9MjY6aKYd1UWELKIx/LFSg52OYkhesD0pSHoCO6inv1ssMlG58HLnAk06fWKO1KsWSwxx
            ////4W3adjVW+Jeu2SSPE3NMY592qzC9tWRqBeD+eT5WHK15x55wwyVU5B399HTuDkOQ+UurClrhGfEs
            ////lHWnHkI04dlduujiGSloqknlRfW9QTZSO4M1+9nRnTRh5x19Hqosq1sFi+aq03U7L/VBm0KSY0SV
            ////5mqN9/HsZux4n8xsaHKHp1nq3swGvLkcrliPKEI3xv2ZG79wMjyPyl1TTrdZxqg7pBZb6MmDR7L4
            ////xYStQHGonksKRnnlJ0qBKlFTRfk3aQZGWqVlPQkmeIIxjuq27asjXA8XX0W8JNo1R3UvB6O9Uqxk
            ////LMtEMtINlLDHj7LQ20tCw31/LySPAeacbI98IyvmH88P+ywiNt0WquWCDo96nrDZ+exV4JRstCq/
            ////1tcHN/fMlXCXLxFKMk9cKB6O9UlTgqxFBW+O8adeZq9wuS3RyolA7sRJdSFzu+AwciT2DxZBmElD
            ////+K8UKs2OYozfnngofJ9wvJwvBYjXkzByj6NTb4WVttp5hbznZYLDjfPdAu+v9qVU7x01tqETvnGn
            ////oCzrz+1UKa80NWWDbOOYWvJSy0lgjOOoTut3qksKaOlBjbZGva1Hbfif8XsFoown9SFzP3/Y+q6B
            ////J7qyTt8L47gpyM5FneMdkQDYIetoq6zQNTozijuLIjtyaWeJ2/k6/FpF5zYY8fZORhtpPf3j36Bu
            ////YF26N7El/wAtXmjHuC29hOxma46h2Wb8zCEu+b4+0yosoLqNMB3j3ambk89OW16arrc9FTOXmssY
            ////3ViHdrYRVGzRJvdn00ZLslLRWUkjUb5RzJpJGbwHNHTW0wLKG+nRENwd+pls1OwhdvhfuYTAPh6d
            ////PTJ6avqtXOHDmjO1/GHPJzI8RedWMpsm2FVgd4NrOlxg+lVg+WHo387TwK+iPJN6B46o06umR4IC
            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
            ////9GKpT98yxjbquhS0Pej+x8wlYln3UsT/AHZXCOmIRjXoaVOfCASaWUjlQTMB+XHalro+tnTxnoZh
            ////CWGFdZxGnYFGoNLFcusM28Wlyh1kqkfSTrOIeqP7ymv3D6qWYjEnHcNG6+IsKPxPTf8AFQ9QgJNA
            ////JrqDsmUYXVWs24qcV53zHiNuriLTaa6y/Nxq+1axJhRM35mfDju4HIKfvxmeZ+FBDPzUIWR4133M
            ////Q0qUOsn3nVeevzDk23xZnMSHFedJA8nRVohkoYXRIyiZqNIzMfYOpm0x19ZjiVYehWU0UQts4HvZ
            ////4LNnc/Ad/syiZ6zxu11bL2YQpUowyYVPgv8AAl/SqlIfI/8AJvSnYPD22tD3M9HwqLOdhR0w4cax
            ////pUm/WEfZ4VsdNRniQjM05qs9viz86yiSup8wTtz03168jMITxJ9zTpnZSZ+gVXZs11scsQCFQRBp
            ////V8F3w9CyVbhfEw8k/ZejU0cfoG107/WxKiREqnWX8KpGvgh6o/1b25B/WzoDXVaORmd4YRiV5Z/T
            ////0lTyH/Tiql2qvrCvimU+Wxl0upJ8PH86+xy8k0QuJT/WSZLiMNHs0RFngqVB0o3GdOk+TVCrsvSS
            ////UF69J/W1FFNFmdoq+X88nojRo3gsPXVKkqZV6eNY27fEGfXOUSlTkrF53o9uamvxjRVawmFJJHyX
            ////JKLA5V2dH92++R4AK6NND/KSXhJRZztcwZO0ZRt4BqxfEsjlUUaXqEe1ZdUNtTRtHPG+d8yO3fnB
            ////pIfDr+JV6fizTjVJ08d/0nvGsPXRWyws2aL44s054MjpKLAm4I0BxCupkag0DR4qhxlvYtrf4lyy
            ////3THDEoSwx6dXH56iFmfLxUzCoX9XM6Q4HcFGRgoO6zjaGurQzaZGb62N8Ywj6stzTw9BvHqUwiTF
            ////XWcQHisYXwtFm856DODANQ+Dey3WsXqJkok+uigNVsM10WtB3YLHsoRlGiSQI8oBiNOW5mPEQumG
            ////Xz1oo+4/u8tn51HNUNjThSGTxswRD0VMPFNfAMzyglkSvMJOQT55zn7V2niugOAasTJ756qA9wZL
            ////tLElm9Zm1BDPWPfqbKWFh7mfXAkbhiVe2/3gNhLlwk1J+iJLeiyce5yU6YOeCoMaFNn4ogyNQAYu
            ////TO0nKA4GyjiwWRp/jE4nbxddkyQZYoNnTOq+j00jVT7bqNbC4sMePsljrOmzOBjsv4qbZBzQ3yU6
            ////5cHPMJ+LwkuCSyFL0pz8Zm1po+pUeZruqu2w9TbDuZ+USveD/JAQnnfJd4KsvxQ9HPTGviFjZqN/
            ////FbO8+gVpE/zaesNldFEi14r5Pu077wlxqO3bRnhpCbFnTVPho18A1A4D3z0pItzgFGL9l27YQr9j
            ////XlO38nX4tKvLNr947yngs0b6NMA3h3amO+X+Y2+qrZeyMr8ANHcDGMKdOhf44L4DtG3P62eHf1te
            ////m6FeSNfquipiokqPXdRluhmui1VvjDT8HJUI3QldpC4lOHalSnVl9jcOMx1+Y5phZLTUzTXC6EbK
            ////7o1Q72J67/K2M8STf8lcIMnyX9Jw6fIxnFlSb7m8PyXXwFDLDEE1R4b67MjcoTDM9X436q9tzCbv
            ////2eLORhM1R4adfAMSwlxUNXBQ98SXRvQuYNJp8MutsLMMHNkk3K1GsnXaQKz6KpxXiG26EYNn6Yb1
            ////mbZo79YM3LCiVRfjG2G2nUylvYdZ/L8HbAidtYR0TDbg0wTm9eWPsub7CRgCltg0WrDgRnvxw/eU
            ////w5M1F/cDUOW8DijPPdTCPhdwLdLEuJBu16Jz50kjNtiPFFEG1g4cOaiSvULHxJzsLzUfdg7As2xg
            ////2cjrrdpe5meEvZbm4u1VNmJkzAPIaebTxqsG3PKh5OszqjtlVtVPqytbTnwikqjCe2Yis+86tUY0
            ////10NQMpJNv6Rrw6NfLtPQnfeYVVDHb7WjRhoFF+e4qhlhVvg2VtricgZsKb6ek/qvS4e9gQC4Ysaz
            ////45ij5huOyaS+FB8OEs5YLymCU6XGsZTKuwU12DQHryi2LHOA55vTz4dsiXDKRdJWR75Sh8KJWybi
            ////uu6LHS2K8pJUS2fMi370CSuPc7vVu/pR5fQLPJY13V2wpamX5Ld2yyUEkvl2oZOIkyXFujUyXv3Z
            ////hBtX2V7EQ8PE+KiZ4hxLAh39uSyvaPtEIhoaFZ2+Jlxy0YVTPKRK8jViyVblWLrMaeQqvTK/VmCy
            ////yEbUPRG+XeSRMzCwPS6ocaroUwZ8aWUu1Acec7Mahi2bPGPdRFrIkXg+WyjWIySie2KB7Km9demv
            ////VFvRLeNhbvFNKGgYVfCnmVj4eBion6ej89PVLJB4KpYYRp4lA7V5+V5KR7BVnzWUNm9g75jz4fJa
            ////Pp6fPOD6Mm7rtMaKmvLm14PsJ2DQ8k41zoX458a7VJt90f2S9owcvsboc5vCDm34TCySXMsPIlUn
            ////DtUkpSdhX0/kmx9f8nKgaqsO0kHbtDAhwSxBHH23kskb0gb0gcCRoKiT8PlafsGfMydqAtHizhII
            ////OTZUvb6aagHN4i2wnBfzN8aTknFOGYR/eVPYe7ePrDZY+JGyakujOWOFzoUJyfIlzZQ0s4yHlGS/
            ////nOccg6g5OqxVUm+502BujZHNbCx+00UJvQeTt5EeayxtziDxH1VZSI5r8lXDMnL+3YvDsybjwtbJ
            ////Bzycc7mKJJdbsIQkj92ScDppyNCZQP58IFDtfDrOIxN39IA/napj2x39FZKPrzJtabyTlm4ZZSbc
            ////0qnEsn3a+EuNJY1gOfMyNvYmwm+r72dx9MAp7DHj7KRYqGUNvrYow0krNxHKGqylm1QqON49Wuqg
            ////bWKngu1CyqYTuWq9g99G4MkWJMVcU07+8Kmh8oJWuGRrjeUpJUPh1ONwudLjT0eTyVAhQI3fbXDN
            ////RrbTDzpPdqcDGDlznO3m+owwxSwxrFeklPSjjki5xH606W+utXdFpLGwMRUYNj00/MKXw5yHIfK3
            ////YPhejSlzyo4gggI9pUqt7Rt4S8kfJyT7ylU/5SON1Sbc6XGno+3k9HWhQI3fH62e1VlAUhv4jedB
            ////z8MPHPDlJJVFLeVTqkdJt3qsVSuSSXSjjkkj6XekOlXtY+tzY6YUP3QsHz4whYJTZbPw9wO9/PBw
            ////v5M7X89F0kpSPCSL0oen/F99axqjQzthA6Nzyw0ozYE6qfw3T/8AJdKfunHujGB9Vza1kicAWFSS
            ////suJVYUFTwku9FMkn8613wbkf9cdLfkQJR/xfyV2Md7iHzfSZG4C5VYcny7ZiUmFd/dFuFUpSj/E+
            ////SOwPhG/Olhqg3LXJ91kvRO7QOGfxhViqrXfwMRb9BrBVI1z4OcF+D2QbgR4i55LyNk+4UiYAH6od
            ////cKrgEWLf7vOlG/IeiLf/AKH0xyq/VdH54JQNLOJhcNuTuat5QSSRvQg4lUSQf964ryZ66msJ+Plz
            ////uFNPPRYQR+j+uHAaWqVY/pYSoiTJJznoUcPjJ5aO8c14NXJNa5udBzMsFcsne8nivRoXGsBL2V5J
            ////gFDAN+1ucrCzgbf0kpYLHOgJXPxzp1XZXkmSU+IcC3Zt+4P0zywOlk+T3qeoszZO++uAs2vDmyYN
            ////5s6ak2hnR+lKkwRyZLcjd7C36enx5yaoZuthb+HnMuefXGvPiBMk4clpKz4tDt6OnQN8R02RbTEv
            ////5nfRkvDu1t0vc5D3N2SsrQWP6SRB8nH/AOlYymoQLKc1EI0xytpDwuc3PCFgleCwmVDhP6Nh2V9u
            ////1L2DTfrg1rYR2G7zwrwfeRinrG37/d5fnlWqxjd6p8OZQCtzLD0J36NTTCmnV3tYTvlk7Xp1Mo0X
            ////RSyx5JhDEMod9tNMLWh6h1nJeR+PJjEFMYWU5gz15GbTEnHcNG6+ItYOD11mFIrmUOU6b6SKmFyN
            ////QEEqlN25AsshxVTXWzOoS9Z5nPT3jxkCxq9da98OEyedbyPI+9JvoCwIWOm7SNDWQ65WuF8zKN8k
            ////fBx5RgCn05wrKf8AcvFkWEJtUFcV+0Kc9NNTEzRM5D2V15Y7bIxaYPiS6xB1ppPY1EQSvJPQgWWB
            ////0Q9stlG9mGamjM9G6u7TnZhR+J16/wAqYVDmJomuoOv4hVuzswqEByXzvX2adcctEfU0++c4+yyD
            ////l1Bn3CwpFEC5k357irvuiywso7i3f3hBnJYlJNrCYO9tl4BvZGJSxLSd15Oqq/ilhCeHGvWOsw5Y
            ////63kvdSxPDtKZTbVmz9zI34+Vso3pjioEILKcaUpkuIWQ6U0xh4swGGnHFzPmMmWnTpY8s0lLDiqi
            ////qoY6q2EKSFmo3f1xvns92/VHa2rH0sXmdad1MKE3FtVVTM5honUz3XeziraxxZVQTOWMd+4c2ZmE
            ////uls8F2oWVlrzhMp8zRGjKObgQC9gWlsNDJEPANexlmIdX1Xsy6ac0c1AhAhUebXsqr49THdcaZMw
            ////qs26OI1scWlJtDP6/ALoizk73Wseigl2uZGeecpjDuDMy6EzzQFKOqATzq777A8cjTuSeC+UkrTJ
            ////4pGeQi+lKVNI8W2hsbJHBfzaTlZiN5SjJnzqfJ30CFt1uqmLZgJ5Go3WnJdrrREEYvGgaRoyX2sq
            ////bfw7Nu699GwS3fHXkFh9I/A2SlNJnSZ/vbIxFIQSExZZBQcksAoAAjDbcDXW75JTRdBOmvNaOi2h
            ////pIVJ4OTyAASiY5x8Gh7/AE8vqoXOZ59ZDkuWUyZv325LGRmdVE4nRthwFbHGWadzEmeaHT/dZdad
            ////NqgoOkDpomzGuAC+nYDASvxusNVugIR3N8nernvnqoQs76/bFiizaOtp226YUW62YQJkDNOTv84O
            ////n/qi2ZnNPlu55ES4eSx8/E7wku8HWqtX+WN3ARBsJ0/VGRtqp2euNW+eSbXzagkkqnGIpcZrtsjv
            ////0tRR2G/3V6LDxEKIemXkBuMq7l0gc0+WSN8ud5O1KsnkaftSXNtpg6NUGzeTm8V+0Kc9NFTc0PNj
            ////w5ykwXS0OeTreREz9aORT6A+Mmau6gYtv+wT4X5K4UHP0k4TphYn7K9HIp9Pc9frhltaDxDdf8Vg
            ////b0umKsIkMJZgVplKW+p1Kuws0b6NMA3h3amBho306IhuDv1sjnYD1WTu1wrYkw3rOI0bBo1hpaRQ
            ////WOIOst32fRNz0XzSeeNj2eFNVAd1VDa9sHeEFHhLejyfyTzLwejwtqi9LNGRs6pWFHL3G/kaXqDn
            ////g63glSqRp8odF1R42A2p3mzoJrAuTKRwz574c7+6Bl5jKr4nEIdDvTom362jroZXuD0B86DknIGw
            ////8Q9HpVsvLqbLPzm14biZOYUJeYN153kd8PR3q3X+hvDou+FvsFtihb0JNL0DVqHaOfU3PrLQp5Sc
            ////lojlggWT6J4Ksa6STegdIRhxEK9LbbcD+FUmW8l0aw04jHMV7VZlyeEApZpVkbD+Hdgc6MxeW7J2
            ////msl1Bvqhx3wywsYkw0b6dEQ3B362Z0y/qx41j66WcizZ3PwHf7MolkPPcRjHVCENF0GRqPwA09zO
            ////MA/EjsYpST+N4t4gGQAtZdMKNmJfx1+4Kg72jb4k4jepfWk+kQ0U38Dki08gTOeZ9fEdrHTZM5Mm
            ////j4XVbIbGExSiwnwk831zytRnEmu0j/ovGWHrbSTzmMHxOBuXjskSgeRB50oEovTFlP1O7+le+uyv
            ////bva56GFp8YB+b3LCW0nEc/KTsDhdakUuP9DvB7/Wj28Q8eabDBhfeWF+T8g0cqJSPWUcvHB0hjUr
            ////Xl0Xj/R73ekei+lrXINt9dAQaSwurvy7OxedMC8sWfHmry646KsYYByQSJvmZjOuFTiqslQa/pOL
            ////H9JtwykPlHJRO9BVdlHEQ/skBiOzUDV6sVHP5QSSgdvXKOzU7co7r4M8FpZSGvgmSrr8qvJ8Kne6
            ////0vRv0x4U20VCA6LQi2URnNzltglR45K12zDyeFHZu3IEYd3iI1Ndx0YLvhWABMhIB6MeerBWcFY+
            ////JigSWdpk/X3pxWK/RYOZZiZpPXfSreNmmLZgc3NKj+FCN5ekdDqsazUj3esAiFWN8s0BqV8Txtef
            ////16KR7mm2C9/LHW9AxU6ZOpjn00U7s7Yi9jFRN2FqlzrPD03+myupoeJZ5OHyLkVzll9VvOceEtzy
            ////oLJJXnEIVnouMpcvqjRkrtg1nOtAcg8pKjreyvt2quwXU6rgy5NWrrlucajKO8wsT/8AzndfkpbJ
            ////yQeF98OtPPKuvRqEv0mK4KrOBgDePW1lGQ+0CNradxjTHfVbC3h4SJAdiWbjKXVVtuwf87SWMl07
            ////tcMvIS4cKaCVK+0yry8jd/8A31v78kMD+FCR6qUjyWycfGPOeVAY0KZTHH0bw/Jb2rDiINqFk++n
            ////DKh3+S1hDqWU9mUqgxC7XmjGFzEllHOpYcc5pSPuSr+TqsaSvLGuwZ+lo0Bxc3onZ3ttEwIELeUw
            ////0icAWYCbaB6FYG/Ox0NbtEwwAlkZMzlpfQaroElQ5kcqHesJKOh0g6+jFQqQpWO/QI6xr0MswdyS
            ////+CTrWIyvMqFWNZPKFWfwbWDgL57i11lo3NhaJIXO30VLLaSSXHkP9bOn6lqvy00NlRzgOfDgT5vu
            ////Bt8YVHzKp1SjJd6XyDJtyPR1rn9KR4Pf4oF0hVnH2N6BYR8NeUN92LvPN+VcqnmsDb3TFXeQCCz0
            ////xmRzL0WZjweiN1ozlj0WJ0KNOlxpUpUqsRxOmniEatGqnnOe6283XAsjOc+D58EYaZeY08HX0JJJ
            ////6eQUbxH8rSs0xD4ORjCEcnPfzoPdGOc5zlpJvJG+ZbOqTmDGVD1EPgTJLsOJu90fVb3ew+X31wAN
            ////rlRrznysRu0SSCFn0ZTH0zvs9eZ6wgeHPLDTJsH1UosJBwaDA/Kzk50vPww8c6B9vj4byqerjkSo
            ////+K8G7kVChkkjQfravpqP+cbYQzp02SScb1ORT313XCx+NIyiziTp89ZTitkQjUGbVDSzs45LviUa
            ////xG50qM9ccooSpk1myGfXU1oGh6M+mUuIaWtMF1TcWUSUYcTMz/3VTHNCmjwqhXE5P0kqnnaaced2
            ////oOzDFdsp0XhlbMzBvzRpSP8ARmnSxWHycJ+ipk3bl9tftupqbKiQ/NakS5nw53wldy495OeKpI8g
            ////VemPC2m7bU0Hjtdnrgo+/wC4xfB+D+QOdJ7sP+YNg0Jwg84jB67X8UeRI9wP53yylR2X6vki9emO
            ////i80o64WXt2SJ8Jb3labiclyeikdfSSnXCun2trZwP4JXa4U5L4cLhdSBY8PjTFnW60K9Y8LcwWNn
            ////vI9edi5KNU55j+baPZqBqSNtzEGVathhrp7mqg7/AMRWWuLv1qsg5NyNcKUwhY9DenXnT2lTwGcW
            ////tpOUSaX1WfbfxW1DyadcsFSwklKjPTow+kqRqor40xsyEd7rxVPNG9edtGFN41t0ook2mJeKKd3e
            ////NTNqhL7NdFO8MtzTYxL+Z3U5Lh79bNphXWcRp2BRqDSwhVu8HMSqL62yzIN0OO5se8JGBGTcskRy
            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
            ////8vqszUbwJVfPawCmrV410M7mOud9EifGN+evLRSNcWw/Ty3wGoExOIc6KSz1Jo7SCoUNsA/4ywoG
            ////EAZ4T84zBK4fRcNjqepN8qMetydBboRoz8dzEgUIDZiiPDnrh/Z1HMLIoxLitmbZxX3sV851Ua6M
            ////l/8ARztApJ4VZN4S3Oc8pOPJ1Lxd6oHW9AdqoFyAXjVTpyamgeH3Cr+5BgXwkYTie0LJHSXeD0da
            ////Yfpjwh5IgH7cttZOHBcZlhxYoFg5Aeuv0Wj7n2c6rCE6+c5LCTbwOlGhweSXdfwNSyJUqno43DKT
            ////yX5Xej2dP11F+cUtqieCVzmoznwgWYicoVdldqaIagvq1QCLZOYZedLKrnDyfRo8KvRMo5SJ39jT
            ////rffRbrQ9Du/8lungB0NQKPB8c/sJDnweyNn348ng9He60vRvb8ceHHg2psPu8KMZS1lP2r6q6sP+
            ////gACHBpIM3WjtgJLcB7lnzRnDKh1nc4SXiM49W73o8EshHap9Ar/jRTdvbbFhEwQOGUaM4lUjIPKU
            ////Q0VV7aGs7B/Jhz4PpFybke5kaFC7ZPuF3uvFnalxFBsr8bWkixUSaXGYvr41DXTe2cjj374vnLKn
            ////l9casR+0DKR0IB9Vz385DmZLEphz4kaTQn+rVI1Ubs1Q1Nr3RuF5SSlB0a+Xae6ViaONJlMONUKI
            ////N1cSwk4jfKM6dJo3xGELNMG1p85jAM7Xy41jyKdpHSTv7UlUj6fdGnuCytqq3sDR5HWsusqCjB9X
            ////dF6zHip0byaYG955ha33evWJSxj5mq6ym7M02RytOS9clOjR2pNtvsoruraBrECx1z075mgKNNu2
            ////6hmEtfNGTxV48UaaGytvdTnPfTDHOfAvmvSoePDBiKScjIM+s57xiyyck/hLOKMJ6POmDvuyn4v0
            ////7xDU2Tki8N06Wc7ZRopglR9GUxohro4hk1plvklAYQcb1AqKA9cdzTb91V2yXd5PSiM9djHoqZNV
            ////fRWA7wrartrj8SQIacw54jfrrqmLaOAH3kUcjDn1ksxsNGGiQeDR3nnOF/T8sHg63gqSybTJce8o
            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
            ////A5LA8Gx7wbqppQcT8ypDJk4u1QbJCSZs25ziRD0d6eGRvF78tzDRX3V93q+RZq8svoS44eEvKFEN
            ////FCRGNXYCpHCdTmqTlJJx5ScWHu16EhMjEEqn75fX47mdGUsdagl5OZZiKxOqxpKpTboUZmzSeDrd
            ////so3fia8mfIUBGsRzZYZrWxpljIJ5SNUY4V25z/edcNNurOztx9qoa2+6xLAy9vkDVmYrLdo+xETA
            ////vEw4+1dsywDyIBOuPNZ+c1/nuEpi3ZIPCNMEHeipX3D0zLYMeBpi22JG+Xa+UaNY6zp8lRVXru0d
            ////zctalAjXlzxVJ36NpiNd7ZOc3/nXy2wQPhG7ZRrVz8krF3pVSZV9Dd/FG20W3EDH573HlMdZYFeH
            ////352cY+JheW4Yg55rfxyPn+MjY04aMBmDfCMXjko5HuJ6vLFfjLFfL39raIZqKINcGD/CNJXCXJ9G
            ////+ZLvJCuJUJe1YsrGi2uoaKtTPytLOlzJ3EK9fhU1r4jUcx8LA2wioYh3AebuMp8Oeq08yl5vKOTi
            ////jE5OSklG40YfRlKrpxBGP66yeNww8zmyI5Rlica/pOHq/wBJkviIf7lbZlLuS5KqeOmMg28cDbQ1
            ////BLHCcgM6o6jR3U06WPEHMcx8KzsLbvwHw+J8dZ1WCb85m6xL2xA+HGRcmVPTdpGq6LUC9MEr4czw
            ////BGDyPPFPGr1X8UwbZy/DVmLnE9eGQb8ndltptahy5JLHy/DuppqzBTTDJlCq1phHRcqtKb4J6xAy
            ////wPqPgclmZ7mvI18SSknhCOXrDz3a+HrJ/otMp/VDry78tTZi86AqR6rm94WiZbu096ybTyClA9VS
            ////ZMGIr4Oh1i+HRRQHx5XRXlaI83dwjJyRZKMomY392qi21prhgkk7ZeYIsJEj38tPQueVEjJQOt6P
            ////J2+no3f0X8aVhTRHW0qo7c/eRPEf/HZ934rkqdaWR70dZLtKdoHyqeD+ilU/q+ObR3NfnNDQOeQf
            ////O8wPjK15Opxo08qPSelcfQdIPd1vhzOh19LOX9eZ9zVxg/XybGS8qpKoJN9OSwlA9Herdb7xTt6O
            ////T7o6YB8fsS7Pc1Yo1QOuXDhOVHYiS75UO/GnlViflSNtOqgAFtB/7LrNWa7Wsa6uu+NEOLcnezas
            ////VHG8W6Y90c9IM2uNeS+XO53kgOx5G8HY71aZSm+mO/JDNR7WcjLNO5spb1O4+gVOmcwRNLrs42XV
            ////QoascIknCV7jWdTUl0gAhVxnz3Biv42sN2y3QzPKBKJrmWTVdtNOWjiNwN3U0Pb+HIYu5DF68sOd
            ////eejeXmD451SgeSOZ6nGoa8mbfW0blJzfSX9J8H/JfqHkn9KS/QFmWiyrwbNLCo4SemJ6sFHpW8as
            ////lrM7wVSPwVSHeUvH8+D3UjT+lJqPLP6rdPhQOeLV1vD+IZqlutAtVDx8TIzwIc1AauGDHlktMz0e
            ////iMpMsxo4ied4YqrTfrDjvsBos+EEpPg27ZeFLEIEud6YqlduNdvqHypl6ErG+5mExU538+H8cvPP
            ////IRKFbwV19v4rtrjpgahe8ik+KY4eekTei+OXZsbRXVdQhwCRlUYyz6pJ6uxt6xUQ02p1XTTDIKYS
            ////kwgrJeLDlsoySDzlH0nFfQ7IwsGrTkaBFlTqyZK8zCAQ111aQ9v0tIc9FBJKRH119/HstlS119Fz
            ////JPz2XxAe+FLWEbHdwwEmYYym35nHPKGBgcTOepEjycfCnci3YSUZ5kDyVEMasGNNW3xt2380+Rsl
            ////XU8EbyXrMRxhLFLjIdgCiqOjI2ouSb1mlhJKrLppjxXCjQ2yCQcrSSnG7cVNAjF+y6I+zXS3lXag
            ////xWH7vvI76MVuLqsIaIliOThsxxYnILbQscyN1KDulMXernUfELy9Od6O3v8AVEKWyEwP85vCFg9W
            ////HOcpX+6M4U4/Ej7egY+jp+qXtrtoALW1pyLwyLHCWSjNOIPRKPoyr0BZEQq35AubKKSa+RMo089J
            ////d5J5KvhR2ro36At4vjY2Ah4m84A+JhySJOH1ykeHmpo64oWI/Eti29sGD/MlvOwV4aZB4VUZPQzy
            ////xF/YrjL1kk++wv8Ac/8AVHFVNgtePIqHPuBufAyVD4cz0dpy/qFiftSV5plQIV6N4fql7Qs7rWzM
            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
            ////OnOa/9k=
            ////&dataman&/9j/4AAQSkZJRgABAQAAAQABAAD/4gIoSUNDX1BST0ZJTEUAAQEAAAIYAAAAAAIQAABtbnRyUkdC
            ////IFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAA
            ////AADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlk
            ////ZXNjAAAA8AAAAHRyWFlaAAABZAAAABRnWFlaAAABeAAAABRiWFlaAAABjAAAABRyVFJDAAABoAAA
            ////AChnVFJDAAABoAAAAChiVFJDAAABoAAAACh3dHB0AAAByAAAABRjcHJ0AAAB3AAAADxtbHVjAAAA
            ////AAAAAAEAAAAMZW5VUwAAAFgAAAAcAHMAUgBHAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
            ////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAA
            ////AAAAAABvogAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z3Bh
            ////cmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABYWVogAAAAAAAA9tYAAQAAAADT
            ////LW1sdWMAAAAAAAAAAQAAAAxlblVTAAAAIAAAABwARwBvAG8AZwBsAGUAIABJAG4AYwAuACAAMgAw
            ////ADEANv/bAEMAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
            ////AQEBAQEBAQEBAQEBAQEBAf/bAEMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
            ////AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/AABEIAhwCHAMBIgACEQEDEQH/xAAfAAACAgMA
            ////AwEBAAAAAAAAAAADBAUGAAcIAQIJCgv/xAB2EAAAAgQJBwcFCggICwMHCQkBAwAEBREGEyExQVFh
            ////cfAHFIGRobHBAhUjJDPR4Qg0Q0TxCRYlNUJSU1RkdBIyRVVjcoSUChdiZXN1gpIiJkaFlaKkpcLS
            ////4ja1xRhWZnaGlrIaJzeDk6OmxtUZV2d3s7TW5fX/xAAcAQEBAAIDAQEAAAAAAAAAAAAABAMFAQIG
            ////Bwj/xABGEQACAAEHCgQDBQYEBgMAAAAAAREDBCExQVFhAgUTFHGBkaHh8AaxwdEVUpISFiI08Qck
            ////RIKi0jJCVXIjJUVissIXJuL/2gAMAwEAAhEDEQA/APgZyJhv4Ahyvxw0bwQHImG/gCHLH9Nf4BxH
            ////vBBrxws2KLxijTe5GEXL9X/scUkEA8lzSOiX6bNNTtCe3InG7iCeP6V02ieSbijhbigfo9ltMyCc
            ////9k8RI26wT15Ew38AT3QD05cwX8BTJOxknntu+b7EOZRp4IEx4dDfqvsw+igCnLnC7iKeiMdlh736
            ////qrJteJOBdFOXMF/AUOZRp4INKAJcucLuIoAyjTwRw35Wjgi6AKcuYL+Ap57Wt77JwDdqQxlGngg0
            ////nBiLcjtRu4Ah+yLO02vfPusmkQ0V2w7tc20faKABiujo23eF0s6GLp0cUIg+2w979TnO0WOQA/In
            ////G7iCFK+Tp4p5iQs1ih0AIX+lsc/bPtdYh+RON3EEzkTjdxBDRIWaxQDI4LNQoX+lfPpmkm4p4LK+
            ////ieGqm9zpkbQAZf6Kx79k219iYZRp4IWJJs1gnmKjS5KZcXcXWoKAPo8fORMw3vl0yj3XyzI56PHz
            ////kCY4oHafbbROgEbGWbfBArARsrrMS6NqOG9kH9lAmB+hu8R4B3CgEdy5wu4iiPLmC/gKSZvytHBI
            ////0yOs4U1UoAFEzOioCW8X3PEKxQxnRGCSO2lwBNJLidPb0ePnIANF0J6PHzkGgDCYgyvxw0bwQiAe
            /////InG7iCGiQs1iiyMGFd0umQe++SZAHC6dHFDFx0Z2Lg3VDY+dEyyukfv1OENg6BrR3kTjdxBADRI
            ////WaxQpbw6a7VdZh9ASvk6eKOF9LQEl4OvcI1AgB+RON3EEKg/SY+ahEnACK6OnZf43STp7cucLuIo
            ////WK7EAvcA30juTEE4IzpS++V1VFujYiRhQWS6HjwHfrRww0bZdDw4Bv1oly5gv4ClAEkVMcUDtPtt
            ////onQ0pvLvC6QNfstQJk8j4l2izRW7QgCZvZB/ZRLlzBfwFHuXOF3EUUQUC5vytHBEzCo0eknun193
            ////FHPS4+cgTO07GQfb7H3VIB6ouhDOioCW8X3PEKxQMb0lG27wvlmQDDI6zhTVSnsmIP0ePnIJx/kT
            ////jdxBJEuO/A7p6JsTOsSLRmOCzUKANl+h0oRE/R4+cnryinj3vAbpEAnC4mzhRVSjhfaho/4kTL6I
            ////txWuv2y0USPR3kTjdxBACxfSdlt/ko4XTo4oEsYqODS9/hgEMXTo4oAbof5O1DFfJ08UxC8iYb+A
            ////IB7RI26wTxFPHoqt+p8yeIqWiOfovdgaEbSgA+xw5ztb3v02vQRn6JzqH4122IUsP0N/gPAe8Uz/
            ////APoYx4IAmb8rRwTDImLp4PlmdI+fSmG/K0cExAEzCfDi4R2gPcgjP0TnUPxrtsRzlzhdxFPEVZyd
            ////XggEdy+yC/iKC9Hj5yOIvy3SfQ8MTaaEAXQYlfS6w1U6Ac/gmGUaeCEQAcXbs8UwunRxTP6XHzpu
            ////KA5Ew38AQA5dOjihoqzk6vBM6X8Cnx3vdhyGScBiygsk0uHiO7UjSKciYb+AIf0mPmoA4V8nTxQ3
            ////pYl1njPp2vQJXydPFHPSY+agAok63WKFio0sAkkEXYxYhYqNe+3g+zih4ro7Lsavm0oACSLpiXWO
            ////9r9KeEZiQs1inj0uPnIAuifpMfNR4SomNdofLjE6eqARJhQ2yaXBxDdrRLlzBfwFJM35WjggTCht
            ////k0uDiG7WgEaZ9M/RrB8gadjqUTMjhefRTtnukkSURFYeV2ovxVXtfcgoEuXMF/AUSR5YKxP7Qlvl
            ////lmRFBODiiYvpaJsUDLc+wEImJiAYg/wv0ONaETEFAwX0U1D7HTX1Sv0oYueV8S7RboqfpQHI7Ubu
            ////AJIoAP8AosfNn4IZXp/WBAl06OKOFfJ08UE5hXydPFHFajHzkGjSvT+sCCgMV8nTxTDflaOCZ/Sa
            ////OH42lGEnAv8ApcY+TPYi6MJhZcbLI+metwSPQAJhQ/TS7XbQrrFI1Z/+4l4T0TTaKUkjHD0N+u+3
            ////DqUzB/8Ar6xfsfP4yCgEaYT4cXCO0B7kGjCLoAly5wu4iiHpMfNR/lzhdxFEeXMF/AUoAJAmPKF+
            ////j22UzIYwP01s+2XS96JmG9HdrB104b9aAYYVG34Hf7a0yvk6eKHjht1AgDDe+XTKPdfLMgGG/K0c
            ////EN2Vb32TiG7WgUNGh2MSD9mqeypADcv0GK0PyJxu4giiELjt3H8bDtCCccT2Hk8vlC/lHC+/xDcg
            ////fSY+ag0A41V8v2UIrtVxRPe7zllzPnxQk8r+UjDYqQ1SYZ9fVb6cBqTQ0UT84dYf8yDiRt1gm81b
            ////Dv6ic6bV/KbbxRfSwbZR9PVloKr9Q6rbIX5UpJvnUDz5n9WaslP8xW+EqcilldHdrB184b9SGirO
            ////Tq8Eath39Rk1nHv6TthX8qCCpo9aYDcIk/mtekmvSYV/KRyeG9rz4R95Zc4STTUzWpwTFHRk2HXJ
            ////kVGmCEsgA/GLUfD8eZjPoor5fcmJpvxweou+sstp6cbUsivlkyYrRckKlEgPtPOijIA6pJ8OT5j9
            ////NG+x2P8AhTOR6fFSPh+PM6ad3rivY+qyvlBgSteaQwg4fL+dGXgAnwKSRbeY60HRNhlH/dlrjXPW
            ////6uhPk5FdHTsv8bpJ089L+BT473uw5Hw/HmVn1u5BpJ3ZHEH7KNdLp7kLy5gv4CnyYLaDZKL6JcXi
            ////KutYndYNiSavCyFSr5rCRuK7v50ak1Ukls8tSPh+PMH1JMeaLtPtsonTIqzk6vBPmmr5UMoSr2UM
            ////G5csrWfVUXVVVpPK+W7KcSWHw9H/AHlVZcks0mqakUwai8OROfQxI8wrul0yD33yTJwqX5QWUInt
            ////T2UeP9V42PfQkur+UjDErzpmsM932VqTvtmql70ai8ORk1nHv6Ts0x5r+m0STTbqXVIEyjTwTldX
            ////8pZcEzrUFVE/7stPCjeL55a0mFfylmNJnUG14l7/ADZade6ya3amHQvHijIdKIOU3l3hdIGv2Wpo
            ////dX8oyB5pnSs1uEXquLHTzAkwr5fcnppnbLxH3lVl0b9qNC8eKBuYr8U7TvBG+RMN/AE1Yp5YMm61
            ////E/4ykD95VWpoxLRUKWRTh5AlaDooVQc/0ozJBw5MOgePf8uK4guxbpPppZ6sT6aEPyJxu4gkArt5
            ////grRfQthlH/dmoy8U7ACVJgs1TNL6I8jElNMzwlCmxONBjz6AcK+Tp4o4XHRndNRNid1qBLeHTXar
            ////rMPoMXTo4pOA/InG7iCFQXInG7iCOoB6/wBK+fTNJNxQJvytHBDRTh6WrdrdOmGRIdDaNYSBw3aU
            ////ATN7IP7KBMo08EcQJhROzVjQG1AETPTaEVMKG2TS4OIbtaOxI26wQBvytHBAI03tQ/soE35Wjgjk
            ////Xbs8UTM6Keh1jp76pHaEFAmZRp4IEwoLJdDx4Dv1o7y5wu4igDCo2/A7/bWAmgYqzk6vBDGdFPQ6
            ////x099UjtCYgGdN2PdfPiu1MTEwr5OnigGI4XTo4oDkTDfwBPJXaj/AGkAaRnkdkN/EEAHadF0GivE
            ////wunoQvI7UbuAIAf5HSaKrcBRPSjvInG7iCI8iYb+AI2k4GCvk6eKMIuhjO0eBNnCaml7tCUACmIw
            ////i/o46jbPXPPLtnkQAJhvRuxW8B2hpCpI0wuKlkfRPW4ZHpJGPKF+j22UzJGm/K0cEnAEwpxcTeAa
            ////Ja7sSImY8Ohv1X2YfQ0inLmC/gKARxg+hKvl4dwa5kTN+Vo4JJG9l0VnF7tjn2WIly5gv4CgChhv
            ////SXbNG/WCBMo08EcRMwqNvwO/21gBMNDpptuB40IH0WPmoXlzBfwFEkoJxgw3o8Ol2hLqHSmFelx8
            ////5F0YK/S2zbJkFAYvsg0f8SGjuk8LNc2y1E/6PTx/F0IaKii75OE9mm9BOPejx85PXof5O1PVB/hf
            ////g/4LnupmnltrQD9TRnuJnubMLeQdzXkxhGyqfg2HkPFIf99N3Fb01Wue4F+QHCnPDoON7LSygV1r
            ////mta5kh4y17M2g74re2oCwmkr0Pt/QgpMZgxQ5qudD9lGm/G5DGQXZpPZLhBF+HV3bE3nxDDkady9
            ////DgqbKOp+Vloe4DeSi3m4dBuBnlCZd2G2HNDNVaEkGGW3FD4IanM7X+FuYoNMAapbU1s2P4Ns0jem
            ////gv5XTKPJWADNVZpZJdfxLDqumaq39TbP8niAbLhgdDxlkxEJFhVhAq5znTUzD4XanPDYHmmcfhya
            ////WWhLIsZJGCaZHCpkR3mucqy01H1PutnGSxMEhL999HFWNUzzGXnNOs27XBVKvuCStPx2Nj+DleUI
            ////qmfAOX7JW1Zs15yZcKGHe8Q98su2ydNWNj+D5eWwoP5rhJkWbn/tQ1FL/wACmfTtT9rX8VRJSvma
            ////rnyvm61naqsqze6+p98lL70D/Fy0lWJzVpNyJc0M6Vs6z7PNu0Xpdryx5l+mePBH4Sm57hx7ooxv
            ////NcmMDoRyzMTKhAOj+um7BrW4E0pCD3KH3Q6DhXX/ACXYcHv/ADItQXhVr5lbr69Mqf0Gi4EQkVVg
            ////mKbzcPJV5M2WVVl4CqpArsG4VZwccoLhBBKw96sssufu70a8seY0zx4I/nFtjyGfLGYMdzz5MeXB
            ////RzegcnMKJ/8AQUgBTpTVbUyGZbGD8dZH8prKCnnKAcKFGn+og1ulmu/phMtlt4oo7n7MT5eqZsq3
            ////acVSompqDRAs7n4llHnc6NHNebVX8nzsjeFUqUa8seY0zx4I/mANBjNJlmRLUY66onSdWaSq1FHD
            ////5qNyRxkT7X2fjcE/pkKbGbzZbENlOF2T2DnvbZ//AGXWXMte98qarhj5NOQGFBg++jyXckkMc486
            ////WWlk5gGvf99MKQN1MycSM9m0v/ioq8tnL1gTyE+07tuXbR/OMiQs1ingr5Onin7/ABueQB5B7e6Z
            ////qeRxABlSfk2AbLYf/csk0rnbUpKx7kH7nxChX5yVcg5DKJWBmZsKIeKLxd/Xs1ac6xNcOXuUaZ48
            ////Efg6iQs1imRIWaxT9u7Y9wp8g9qx2awUh+wx/m3KM1LKG175bppZAkTTLc/g8/korUccwcpGXdhn
            ////eqfD0A15QsCWAvdvTn927gNM8eCPx2mFd0umQe++SZPMSFmsU/U/CT+DqQP6Y6C/lLQjZRKv/wCc
            ////kA2W3KX/ABsxW7BqvDhTW/8A8nFykNTPDoOeUtA5eJV5llpQEaijQH8+0YemPYNM8eCPzQllDbLo
            ////eHAN+pAxduzxT9ELQ/g5/lRGq+eQSyzZCIRqYearWdQoUc8/3FCXFiaahJ7gD7oExg+C2PkjhV/U
            ////mUbMf++mFBq++5yIq9d/quJzsPiHF27PFMMJ8OLhHaA9yfUpue41e6QQcHrXk0tVrE/WWLDzJe3H
            ////z/mWHdngmmW57nF5dTB+NPJRy0jm/wCbYBtVuPq+Jaq75auIK5dw9lwRnir13+q4nDbjvpdgdyGL
            ////WlwowYpdPImnWxv26E6Eankq+U4wfjnye8tLKJ+05MIeT2/AVgvnfTOmpGxAiGDBMAlvQVhIw/67
            ////YLUURc8X/HVyd9DkXrn74riYBRThvDBQ+L4SN0j7s1WpweNPG1J5Xyv5SGf2UMGr1dwdZWs+ooF2
            ////9KFEk2awTyYV0l+3Tv1AnOrzXDl7FBuAvygsqhU0JM4AaVllsucZ6kmC/KcykFFhGnMpe+8st841
            ////A7x0poeKs5OrwQJlGngk+orHmDpxT8q+GBUTnTBYZ5Nb2pp2TypalPyuSYvr8CavNmp//oru+lOM
            ////zCgsl0PHgO/WgokLNYo1FY8zprDvXFex3SV5V8FTvOoNtwij8lr08wjJR3pPK/lN5Nze1JbhFmaS
            ////W4suT57mFd0umQe++SZBcucLuIpg+H48xp3euK9j6Vq+X3JWtP8A8ZIj7yy2pboqqekwXlaybr/Z
            ////QwYYfeVrMd9ou12p8uUxHw/HmVRV6493rifV4uHEFVvzWEjDWJfzoy9+JEcLajNWn5quqJ7q1pz6
            ////ppduyf5FmR1nCmqlPJa0cUHbnWveF9HdImDUXhyOms49/SfXFBmdp2087qx2T6gtenydV4SN1Q81
            ////bDVUfuy1fi+96TyvlQyhKpnRQwbgf509s8j9qT6i8ORkPp56PHzkGnzZV8t2U4r/ACkPO+8qrL0+
            ////GHyRXlD5SCg6VpKJ9iyy2XVutAAmRqDw4I76dXvi/Y+ihXydPFMK+Tp4pwGr+U3D0p0aSwzwr5rx
            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
            ////x1anu0uDTLIBhXydPFDxI26wTymIAwnsWUNsuh4cA36kCXTo4o4V8nTxQBhCF06OKRpqqcasEnlH
            ////dD9WnHEtz5JKJIunRxQBwr5OnijhdOjiiZXydPFJPkTjdxBAPBZQ2y6HhwDfqR5Fyvk6eKYsdEXH
            ////E3hjulFyAF5Ew38AR0sobZdDw4Bv1IkpmxpZJxxPTb5ZsbklIkLNYoB4Q8SNusERXFolQLjjNezE
            ////7kky6dHFABRI26wTwYUFkuh48B360aRUw0koyINP6ZYt0Y3IAKJCzWKAMKG2TS4OIbtaSRdOjigo
            ////kbdYIBGRduzxTIu3Z4pKIugEenqYV0j8VOANgaRqRpMSgnEIkLNYpkSFmsUfTEAQiQs1ijZZPi/Y
            ////8Q2AHehEQaDP50UzlPPD1HOPWVbz++mubxQCXLK7pNEgd90k6ZGkk+mInF44fVTLrSklwMXCizif
            ////fhCM9/N+a5yteZ80Sex1SXYsqKL6XpxpWapx8B1TpOAxcR9NQ7TJt1o4WUNsuh4cA36kT6H0pP8A
            ////suAkfPJIKNfBv2fYk5QMRXR2XY1fNpRNYKru9vfc5DF5nFujiJX+tVhVTxTFgkkqJAsX4t8AmSgG
            ////q26tKbLZ64uLR0QSRLPJjZom/nU+74QjJhH7pJlUOVTo8ljwNyPstVCr/ENjtgNjWGdP6GWVTooH
            ////tidwqvDc4a36U/mt+7ANkGz7op5SB0dHkM9qZP2C6j4IyN5N2PNP+SZdKbuY1b15o5kPzK2LyfQ+
            ////aamTGrimSNK1pe5Oui+ipCW8X3uAKwTlJj9K2GaH86M6d1FFVOJ06xTBnCzd6G7m1nfzDBZvfJol
            ////DuulnQ8cNuoERjXdrXu1un1oIxfJKkkA7bvqdakZYT/InG7iCWNTNJeONs7g4UUa3KanS9FY7ZP3
            ////3uBJ5TXzjdDwxjimvl7N3qUG1CFogqfZPNjuSeV1rRw3aaJR063V1rpOPtfsHglkV1r9Non9s2HJ
            ////ODYSutdHXqk3g/VrckkWtYkl4bxnSkq5vc7G91T6UmCze+TRKHddLOgFkzm3H91BpFlmzDHVvfx4
            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
            ////ak8xI26wQpdOjijhZXdJokDvuknScoI1XNJNMPJK7ZXC6t29DLBRObndDLRVpd7Kkki1Un0RI7qL
            ////X0atKAXPNTvug7wSiQt3+gOdssBUVAtpDVzeOqh/tmud/L690cbPPPl0eVauFHeb5ecoDL/90YUc
            ////z3fkkdUif1BctC0JUEzv60Z+uzD9E38rPyxGnzz5WHlONiOdzh5QWWBqf6Xh42HWDx1p6KY/ll/t
            ////9GJC3f6GgYN/9oGPG/W5HPf7JtrpHJ0UsNl3ZODfh+q5OdYOfHino3Am5EhzhZu9D0c3qW1ebJQx
            ////fONDpaLQHbJwRPOrdv8A1IunvyJxu4gkUtW9q8jNI2bH5kirm9JfrGXUFuxLUpm69snc7TrSnciY
            ////b+AJZFObSO4UwS9m71Ly+s3shxUlqU6P7SUlTN6O2waqNz9yWRXNOdjwD23P14Lgrm9G6fFM+y6l
            ////JItair8cZuNFbVzar/Z3XvRzkGz9NVjcgE8YaFkmlw8R3a08xw26gSHjjrdQoWMs2+CCcMYaNsuh
            ////4cA360jVg0TS+jopxUhlij9UUh1g3E3sCS+SWdBQJrBrvTUYonlklptk4DhplBJajYaR2Zn+dYrx
            ////TKnbDcX4pTXFx3m6turv7504VbCqzM4PepkOxfbiQKJC3f6AqpreUzfQnu0bHY0pcIHwyg2y2wzV
            ////xpx+Zq60z86zZVvnr4STpWzFVmmmk/BpAeAOfs2aU3NkfyZwJhbDFms2FCmvHsf1pWVlvMZpL7Jw
            ////GyZJ5ezd6lEhbv8AQ6W8oTyoMkuUGBbHYMElxuRyutdaVmkyxURCh8mL5E4JXG8zTexOfXZdXTfe
            ////nXXlA5G8icEjGP7xGDCNlZwq50tc5Qo58xMFVU6cftCDjHKMeVH0+tDbt16Eomdn8xOGZ7UZvpVy
            ////+SekQ7k7dgnlGyesbye28wffiwyISNBq/FuduX+b/geTEtycOM+CTNWzOlPXnTS4B81KdONTyboB
            ////qGRsrKF78IRi3mgtZsqsTNWXmGnAhNYlBBLVPYvM57LWlM2EEfnhB5NPWsS23zp1Ez4Rk3E4pG72
            ////Jx+psEkpoRIrp4da0bcPoTcxa+cVJHYmnusdek8vZu9TOdCFrRRpfRYmF+vXRYYta6TEr9stL7Zw
            ////TT7DhGKr0JvYBimqTYmwlZaJWi44p8TRLqpnmmFJxoMefQn44LNQp4zv9Ds8Eh436LEz3v0SBegT
            ////TTvwx6YNIYkQTn9QMIJQbN7VhMqebNeAYc7R5WIEQbWjI5aZsf8AtTU65L+VqG1LXsSH95CmPZN6
            ////EZFistZj3zyzI4sQSXDfNYVNwjqua5rnUk2ue56bA8uWRlsZTYynmagSeQQrz9az91k/iibcg4pt
            ////5XJJWjl4jN+cB6tNRNi+gUTU2C2FVYj/AH1Ly8OdM/qyyqang/XXdKMk2FVsLRZPMrYIUTplsbba
            ////LR7kACw2CpsFTOU1XPjyc6zrrK0C/I+qqvZWkkuKomq5xMeerx6qHWVaSrhgUCxCmwqqcS2WkrtV
            ////czvzlWVcxdtntCXckktx0Udmr471WqemnF6AJqZQqquSSacefm6r5ysuxNikHEraubDD1olhz04d
            ////NRO5HVdahIUYdnTBUfNfVmp547bJc/emfQ7eKJyfRhK6rtRvdNnUGz5fNc2W2Xia/WL0MW2Vw3/J
            ////tqyLf814pntffyCyFfJ08UjWgvt9VM+C2aQvk5qPrQXS750TZ7dz9YIJ5maqhnEmcrKrRVZWI2Ov
            ////cXG8pstYzNaU16bzlWVH7A220uQAJbebwl9LBs8TfWs2WhdNJJgEMrwjbEV1qCrVInqvxOiZcOGC
            ////SsRJpK8QbXms+MC8BSeLhGwXE9c849WzR2JrkAT9+RJUosduRM/xXNxrAASSZ8LlNaXFNSzNqkHN
            ////AfWlUXqfwXh+pMV4WwbN7FpESBM8NND93BJgtvsGLJO54URJeHrVdWN6ATxdOjijscFmoUSV+l7I
            ////599Dhn8ds6ORR1WwO5JygCuNpTUInP1whSJWPNc53hPpRws0LJdDx4Dv1JGrjLU1+Jz9SUV7N+tK
            ////ucqoL2Z0Y2ijhZXdJokDvuknQAxhRJvaqZB7neq2vmlHD7nCzYroSogHy4vc+zWikSdbrFEjGWTz
            ////hzl08dNc/ngf/FuFqATxZvfJolDuulnSHhCwGPCMghTbLNIXifhCvE1XBDLC1mqucuGkngSrqudS
            ////Bs8ZN4pimvkr6vHFdi6T7GEvdJgUoBAwXgbBWBCucpwYY4MpTWOb86VlZaakozUOCze5JJqKpLZZ
            ////7SZi1H5m0FVoMtazbGkJr0kVwo41XOJKOiD1hU85eGqyvTQCKKhRyqpkErR2fHK6rmq0s/W98+3U
            ////ICc0+XkgYKqsM1cZ8KofqIM/1ZWhQ1VFQXPhRsNj8i0fC08HLbk2oYaTJv4ewdEyQMIFWEi0aTzC
            ////0lFR6r6yqzNB2JZ0TZarCrO1zn5cZR6mEqrzbT8Tz/72vegECZA2FRLYbDSZeU5uKKm2GoDU5tWW
            ////WzG4oKb+Z/gtk89SsWV82uVw3ZjKrSUGWSptlsc+NL1ppc1gw88uZNltcsiOxUU99vB9vBEmgauE
            ////lk83qZB52dM/O85cHwf+V5ZcTIBAwkVYYLawzToJN5lMokjnHnRWaTLz7nj4UY4f5lcxOdhwCVVX
            ////Ky2G54Svjk5XiVhV6rmyq1Hc4SbphkBNnFfJ08UcLp0cUAgYH+/AotcIhQzYOKJP5L97a01OuOm5
            ////29o3g5LI2FpsKrPOOYLNIarSBaZ/Vs6zH8qfC/8AuOfSFaYabFFnHOlV5Z8Xy0bTM9azpXJOlIzh
            ////VzruqdJcEyTgpJcN4eFLKmprWSVudY5w6yzIUQXXsynxRYEyTEG4eQkai6pqbZybwjYZywtSrOdM
            ////teUFP4L/ACs1qBsrYwjQlx5E43cQRrkTDfwBBQWNNKqcPGDlCMU2aawYZMNcZ7UzpVVm2wWow/ij
            ////GJg2QptQlfMXCFQ+POZ63mq19jaDwm/0sKOLhvVzhxqreOt9AIkLd/oDmPL50UFyf60rnHmuQZtE
            ////zp0/lE5bF/nTK7lUaX5wyjQwWRkn/wAaGxXan9WTyjFokqC5I/1gtaOa6JMaJf5NcMF/PoSQkaUn
            ////wg3mgtDIP50ndJRTgfRTH8sv9voxIW7/AEAwT+OidHBNvJqaB/xyH3Tgm0UhnNvfyno5vUtq82EL
            ////p0cUPyJxu4gnomJGWjCua8ygXY0hipLSpzaR3ClWK+Tp4pZFMI0u4a9vB16a8oLgrm9HdqDiNuxJ
            ////5T+hGXfqnF0tXdW1TstSWRXp/WBJwTyv+IOjckkWb0bt+t4jtHQFaQKvE75n7MfOSR5Ew38AScDs
            ////bbydfihkXTEAGsmnSyjh1tmHgkOsnfS4ow4ahClHD6NHFIdYjoumm/2Oe90qUApMOFqJg+0jn+q2
            ////awl3DOKcWtE2NMOkc7dLidOrspK1FQePJCTOFqW/uHfeKciroxqw6l/e6nEj6UokLd/oABHnHKvB
            ////Or/J3UM7hgpx3Y369cicoqZUasWBJPVh+xO3vJjUI1uHHG+rqvHTsk2gkEtU9i8yz+G7uDeU4tRU
            ////IFNTePV1XX38ZU4taBrjKtQ4HY61OovKHXyVqGq4SV05Ku9Vnmnmm4cE5XXDukn1BLtkvclUx9V5
            ////ojJhmFdISJVmK7aa7+wIcL4KuROCrNld51ONd3HinJbDKesKdONu9Oostj2fBaB7NKkzdmPnm29/
            ////BMpDK1r+X/yOOWecJrYjgfJukntxal3jgs1ClIY/StA451Hho9tE1qjLNvggtyalsXkSSubif2hL
            ////fLJMlvYzZOVahIxXe7vc5KIWaNsmlwcQ3akmFM3Vsl736NaDk3ArrUaXHFHTSu2z6taG/C/Dl0XJ
            ////r1nr5xUlcnCaiiy6VLUUskncgDPwvwH/ACXzOu5QbknJ9Bjz6H9QoxQyhPACm8w5pllVu232Plck
            ////kYVDaMJilxlRLpM54cOM6BMhHCMqOfAleP8Auy1gHP8AZSkwrtlpGtRTU/e2vEErCrnSy0ndQU3W
            ////PlTYHhyNMWoeErhJOZsM9T+D86618IfzvKMlXfIkw2FpvKpZJzGZpDVOe0M661mIvdW/D0tXQ/yt
            ////qQLYbKmxlck1bJXj84+rKsnAAtqlQALDX2ktKcc2WOQylwVoerZ1n20NGitJjpfw6fHc9+HpW2XC
            ////hjtRcJU1UleIOP5w85VcxGy7helkMiSy4406IJd1qUdVFqCgMh44bdQJAFwkg2H5YUZB+ta8SX1O
            ////FtljfnJR/eny1WjL3IBMF06OKESPLX2ZGE/CSj1ijOr5Bl43o4WaScZ0S4QedPLizg8EAcQPOimU
            ////sASauEZ59XxJiSYUNFHRbvbNPU7ZQ9yBWGMzV80k5aUyDzpXrKyqUyz4smFADFtlj/XFG0M6lvof
            ////s72y1pjmx0Ucyz9mNiQRkDYNmlxJrHUf3VzpglpsEAoc5DFwNYMX0anEE/ZlrMdbrqkoJyeEpjrZ
            ////RJxqmyTyR+yyv9l0tIJnMLBNd8Dsr91vdKDg2TpAmQIYJphMapnxyv6znVGiwEMrwDYJRhxyrzqQ
            ////csOzpZVWpu09zkAvilEqpRJKqTEkq/mtNWO5JLOrdv8A1JAs9VJUVcpTK7FXVQVaKL9EjwSWScoF
            ////Woxma2czzqPcrredKubLMj6aRmdRbQkwWaFkuh48B36krbUVWktmKRyg0sxJV/OlbNc+zx7wxSNa
            ////TxZvfJolDuulnQBuNJ+aOoP+VFFh5pimdHHkZs6T67bKmImZHRinFHdCHnUt2xyASRsStK5xJvTk
            ////rCrmq1fQLnattaAZbLZjGU+bWWTmKmrrXmz+FFnFPKF5Ew38ASgHlcNXMzOzDzwVVyrJL4e1Arhr
            ////S5vXM1iFhpZr1XOfMBaHf3yyPQLQNOVVNcXCiY85XVfNnj1y+ympI1uNQ5jKeeFM1eaptCszfP7p
            ////Q2PC+lBOVsxqZQilcf8AFRlHrnrObNSj+aZ9NW1J5nrLZWjFzP2DzUSryqvwoy17PNQSbX6Era5D
            ////w5VMiSoKwjWPrWbKvmdG2QbRbMgpPM9sktQw4kpTapGb/WVXMRXPhVsMf/wl0k9iAWQsomSXEkns
            ////1ImsGklGEvJfnC1mtOu2XY+WvIyzb4IFYWiVUxTJWjojOVrNVV/rjQ9sl4IAYsomL0an1P8ADQCG
            ////indlXu1un1pkbbydfihize+TRKHddLOgAVk0lVVzlww7NyVdVzpa3y0b+5xXCNLvkDa+q2qxA8sw
            ////kos442III9aq8R4VoXkTDfwBJwSZXydPFMRMs7xfseAbBDvQ0bbydfik4DK8T04KpxA/Ws2vGnFU
            ////6Bai1FKckknsfvvBAq5RKrHZqTEZwsisrX9YVTBp0zPSHbi0Ob13YEKdc8j0okLd/oDi3ywIUEsH
            ////J3CRpGnfE8DYYtSR/wCSGVzxWMoBdfX/ACrVg2Njo2YZpQ1YrmBP6anulDZ5m8mvyhGvHD8DeTnl
            ////walTuaMl8MHvc96fzJVjteTo4J6Ob/ld3pklEzs/mJ6B3xid91HcCbM9Hj5ya+gX5wt/dgTYqQTm
            ////3v5T0c3qW1ebGEXTExIy0kCKdPBLIpf8vBKqr0/rAllU59A7xTXlBaVc0Ch76nYqsSyK1GPnJVVe
            ////n9YEsivT+qCTgnlc2q/2d170cLN6PDpNoy6x0JGciYb+AJJlfJ08UnBIJiKciYb+AJnLmC/gKAKL
            ////FH6wpDrBsbOd41yPl1vmEbJJZpx81IFYo/VFANP5VFqKZamS7zhak0aNvinK5/a8rFadFZXFrzMr
            ////XJtxbcnN3L7ULuApsJC3f6AdZfba9wJ9CPJvUIpntJpRNtj9OKppfn6yO1DSn0myJlCy8nZy5NnC
            ////q0Fqax+KUjnta/3L/wAij+D7vOP8rC0StQoaUU6Jzp2wRqxtTSZv446d4psKGi1nTUaR32q4KZr7
            ////koUV0lOy7wvlmSub1bvTJJy+wPVc6bjHJ+sLTPxWFabs8oA04pdU1M0/zdlhQ7jJVcmscl6hnUKG
            ////OTL51o3BJQOhJ7ygF8DYSNKnN+q6sBNNOnJH/E93nP7C7U/TwS3JVWF2R+ngliLN75NEod10s6Cy
            ////Qt3+g4rHfRYow8axGhJHkTDfwBIhXp/VBJhXp/VBAJhXp/VBJKO+z7UjORMN/AEdjbeTr8UnB/VM
            ////KyjQVK7VcPV83+yyz4eLqEmDIbwbKMJJOacRnHmqstKrU65pdfSIAlkzWNniH0umDEj6EwxjKZsd
            ////GqaifnCpmvWVV0/tqkTYHz8jWXCNjtkw4lltIheOV/Os2nnxTqBDLrUU2XIvrZCiT9p3yS3U60cV
            ////2WpqhhxyqpqKudMGbKteNjq0xcYyk0AiV9TIPzb6zV43SUoAFTXyV8uOVTiDyala2u+2d9MiHWXx
            ////XSxETJv31UVIBnsZmstXzNlqZCiS/Os2VxdpxLKjiwq50QBJpMeQsdV7tIuQUEaWy2PGHLhSmoxy
            ////x6zmtT9+iutM5mY8a7mdS/ddFeBsSNIgawVUyOKU4idalWvZPuBM96TNEs/p14jOVUPWt+HVPSgn
            ////JgtgMeLiRZqjE5rmo6AlDXp3oZnsFgqCwSuKrMIIOV/WZw0ybJ0h1eCRCrHEqrSbhGcfatkvCVwo
            ////YuDhxRbufm550C151i4eCAXXOgqDb3I6WaNsmlwcQ3akobPYDSVVwk42Ei8vEetKqz64+vVidHFx
            ////QaZqxHKLYzEnNfNs1n2uxoScoL5GkxdOMPnmlnlTCzQsl0PHgO/UmvjGXCqMDNYSCQT/AFWK9XTa
            ////6meS1C8gqGBRhw88KJ/VfWVV2Z1YrpoRobnz6E+nw5dTYUZZt8EcLNJkkxJL7NaaxLOh4VHdPBU+
            ////qRqa/Ch9KGMX4a+qs1hftK3Zj2zZ9Dt4oafDl1NnFm9I7freI7R0BWjkbbydfilVUzTjSyTjSAIO
            ////+rVe3TJYklG28nX4pgKBxcNaWbk815jHAtM7Os5/N/5Yl9oOSSLN75NEod10s6VtYWjiiiYonOOt
            ////P36NgaZUMWaNsmlwcQ3akAsfImG/gCRCwtHFNBTJKU49TWFVoZ0sz5nTW6quaxBRwWahRIxpklNA
            ////lmhHxywq51P4DTJoSgFqLiYrFs3DS5PZIYs2Xtpw1jh6FLO8X7HgGwQ70nJwzQaBLLUzlw0g9YJV
            ////3ebef+CHiQs1iiSwvkqpccad0KtpHdRbZpwxaEouONO6B9WHBLelADNBaU2WqHLi+dEKav6wFcta
            ////RrPajHbWec1rhK9zetZqtUZm591daJ++RgmxKma2GGecseaqyy1GX1zA3gCOKZrHCO5r5q6stda5
            ////tq4zaKUAkjChtk0uDiG7WiawaSUJJJpxEcsea5zQFN9elDGHeHFwDtEe5AmKpK0YpnGkkHnK/mqz
            ////RXTWI4pFAYunRxRwsruk0SB33SToEvtQ0f8AEjscNuoEE4BYVc6LOJN7FY6tO7XXRvpQxZR0XPVe
            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
            ////AO3kD5caLP59/LmC/gKfvT/hFjVzXyM8pBIflDKNkvZekWpzxrEWTJI4LZU/BOb8rRwTeTf8ru9M
            ////k2sxr3LyRsiB/RM84XTrWO6itLglWgp8VB95HcKWlNTOK3sfkjfTepbV5sxMRdGEwy1b2ryMo4rU
            ////Y+clkIp08Eqql+MOncljU5tI7hTBLWQw9SgtavTFbNs6TyvT+sCVtXNxP7QlvlkmSeUv+XgmvKCy
            ////EU6eCOF06OKRqubib2DJdJJOjfImG/gCAO/0TptE8s/BAmHeHFwDtEe5MjLNvggOXMF/AUnAosUf
            ////rCkCsfTbHXvftcD0mFmnHzUrbQNilc476uqudNNU69yAcfw0NjWouHP9alfPJNpsShmUaeCWSEJs
            ////auHeEjxdR30JW4qOlmfY91E9rpnbk2ANpwDVY1os0mbrU/tGmS2ulO38ti1msA2aplB5xzfOFL/G
            ////ZORclahncIGP96Hvm9s6dOeUItRLHY6nXZrkktoGgE1f8T3eUS9m71OHGr2oXjuBIxU7XUjq9+Pp
            ////HigGf2g6f/hFNoJezd6nVGR/qEH4VLgv+K6/bLXQ6WZOUYarQmrkS6zQOKK06ugf1DJm3ltwjnHV
            ////e/aFY6U4/hKdGtQB24xeCDUyP5vvEl1fzVXv4oyi5fZk6f8A4kYQXDSvT+sCTxFOngkCrjFSPtxJ
            ////p2JPK5vc7G91T6UAk+RON3EEf5P4Tv8ABmfZPpSPLKG2XQ8OAb9SOxw26gQD+pzyMtzBd0rHbn+6
            ////pZdU3sRwvLVBaY1TapFuahdh0oVpPFqCkbMSR+6gOBemc1qn1FX/AHRL9C8eKPnOmye4+xGl5ZIH
            ////m9rzqE3qu9+rueh/44IEfXF390RvmFmzms1RB32XQ589SBMguwTn/Ayj+6h3zUT1XJg0GPPoZtPh
            ////y6mF5VYEz85HzfVWpJi1wyTI4XlLgTNz8QA/dWpIE2HP0SpDmQSg36VjqID91GiS2urYgjIBwbN/
            ////JBH7qI475UaDHn0KNPhy6lpLygwJN7JvKLhG1ztmuxHC4bwPl/xkZX71uGiit6a9NycwVMd8GXda
            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
            ////ebPPiXD015GrhpgdD0OKdN6VSEv3d5whHtVYdC8eKPLHNaRTQJ6nHkrD86DUGiUdsoV3CHC0JsSS
            ////52JnSPHXteibDjs4I6F2cWOpsl2pGwwNOOaMVExBOl+A3CEj5EzE8vIOKhu7h7VWQprQTqdwbkOY
            ////b3y6ZR7r5Zkwsruk0SB33STpma2bP+lGnw5dTOplOIKCyoQorq4geh/k7Up7QK6w6TRbJrldUGhL
            ////hmp0XNa/Q+bbU+S1E1hmHHU18XPTjTrDv+bFcRqM5uyufuVFCRduzxSyEQXaRvTKpJB83my1xGyi
            ////YEd96Tf/ADaGsO5KdPGpR3dSF0V0baCnRduzxTIu3Z4pcfea3fzYOpM96Tf/ADafrDuSgnL376Gb
            ////6JTPxZTJiRIdYbIrTx9Dj2exBZqd9COsULmtmz/pRoMefQnIcw040Pq9ex1s+ie9Iddjo3on03P0
            ////SvmS4Zr0c+H3un22IfNg+iDUCUAoWanFFzTS99esdQPTIo4qaaeWu7dpdKl2MK7pdMg998kyRhhX
            ////0rxvdRc986AVpH1PoldcO+y6MaKL08LFH6ooEzzeJL3u3zYlCkBdMTExAMTExMQDEvGT6AbYygwg
            ////JYTG+9NRpLEigxmf+dK7O8Eh4MQcbELW4pwbYKnnzSaC1mqqrS2YvvFOhMoEI2Pkqg3/ABSwDXI9
            ////sLEkPIWq3rjQH8l201VzJNLS8WlRZdRzxjvVcVCgh8qEN2Oy2Op5K8n3QQVY8rfaX/nI0KQ3jRdV
            ////zmnvy5wu4inomeQkdBB0q2LpajUoU3qwnMTEHGWbfBMjLNvglQCJiDMo08EIgGIwi6HVzek6V+rF
            ////WygUnAbkTDfwBPdFzAijH7KXY2UvmxKAOF06OKERdCxR3zg1j/zIB7oOMs2+CZF27PFHFdVONMiS
            ////iY87SG+bEyAYplRxkgT1jVNufJrTrTJuy1xaZimRE+cY2TT6kpOTvItCSEawSuLSmeoqbvWZ5Zq5
            ////565U7wgnAhmwcUySSunOD1nGinuTXS8v3Rdt967Y0RzjDD/1E1dlhFkkmk+yfEnFJItjKcWMaSF1
            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
            ////EaLGY6gWccUzVEgmhZm1V2UUhUiZa+x40nNTiDyVh60qrLN69+Zx/wDFtoySI4uGri0rnFGkqMSs
            ////CHVvPh0X99TkTU2XFRMUSQokq/1ZVZajTI6cBn3PSgBi2gSaWBwZ+fOPmtOl0njI5HC1tciyepqB
            ////HxfnWcLYSygHCh3fhbLJnNOPp9adjbOjhagRF9HEW9VppfwvQBwtqKfountVh30UJW2wxlxqNxgt
            ////hVIPI5n862yXvn0PnSdLNAot0dQ9449lL0OuKhJqnHLS5EEq9b3zz2yBxklSiQt3+hOBLVVw2JET
            ////v3laxTPRZM8xiiSUr9aaQOV3Kulr8XVTOclVM97ZXQqq4QQc0Oqqqz58oC0Oa9IyPr1pZGWqqa2p
            ////s0k0lXPO+D+sqrLzFQXHflQZ8SoBZCGX1cmKOXiCa5d2HbEcLZhAFenP/amoGHvvtQzPWjo04k1T
            ////iM3WuqrWavzx9zqJ0n4k63WKTxd/faQKcYyyTS+xP/3pgHzv3yJDrjAJNL7aR0jwnfgJKdCbIiuj
            ////n/2rAWT2WpGmKp1AXd/gNrhSgnIFllZqacpm+sea4dTJZNegVxVJKMjiiXnBid2q65HFwk6Lojlc
            ////M6dJNVVprSSjc6VyTiaaHbBn4WJPL2bvUsm1nfzGt2WqwkWmgSuLS5mLNV/yar//AKtX46bIWy2a
            ////SsHLkURHLD86We/TueM8mLBOYLGedYPXFjqqr311cJ3jDq+eLRi5msq45n51PmCnulmv2o0+HLqJ
            ////z3/STCwvs1VAY2rOurKufPqlkdVcifQLRccUPQ/an2a9k6QLVbxzGXFNTNXCM9fnS2s5q5QXGfbh
            ////0rpUmOfiTRiVUlqrEv5r6hfK8Xad7kGCXrex+SIdYVSeId8ul/sSnrCqp5wcQJPTe3xm8EvhjUE4
            ////sk/m1qzj310OSHaiqTFxxvVzpt9NFs1KUGI16rqC4oK4klLkeSrz5yq59cEslUsu1DGFdGectKUQ
            ////MvWVbGh9DxC+SjTjS+iJIPzfzqvSIcXTzonzgSUZEmjEO+syvpC98ls7pEFBGltQkYmNXYjOHdWa
            ////Ut0jsTSypJFmndjEkHO0XWYnnQ0USb03QBPoc727RrRLNSI2OdTWE2vwonQB0w3+nIvFw3P0JArD
            ////UaSqZElRC84fuO4Bs1pJRR0Z0S5NJp37aHoUsppFGE+Ynku61vw6WawU41dYd/ynVTnKsyuGUvYU
            ////LbPSdfZpBH2kVpyg6zFM6SSuapxgk5mr/W1WXzzF70DGuA6NZv7tQF0kuJxlxXWlOKjoleIzf7K1
            ////NeOKYNWmdqjfQ/7cEZ1nCfKH4stwh/mdMIY4Ih1eGTNNV1M42DZ5GcLWaras9l9TaH5sa1tFNsyW
            ////Rhr7NbKw0lPmfMVxjtTNVrOVVl9c+C2O2HUfnbeia4xlNtGFLhsR9a6ywWWvauemFLiRHC2McUYc
            ////cUuRB6w/OllWZbLrp+AsPBMWrzXDl/aZ1nCe0fiyrKYuO2sxqZPoHtiOOWmaQQuLKr50q9R3SPpT
            ////WMKMjSmoMBcXGCuLy83mf1pVVlkB67dRjQG8lQ05VLiV84886hZzWUabMbZiKJNLiXeI8b3hY5J1
            ////mqZ2/ZhbRk1UY4cjayHiTPk3S1bOEYJNxbrUHBRg7Iel/wA31c0k2TU4XT4qfxMZRp4J0VlMySnL
            ////6wc3oOEkENLzpaZqt647VfiTldnQjU2osHs00k9RaTPfnSssquYL7gqr9oC5PK588O6u9Yzav+XQ
            ////pUbaG1DuyB9T8EeN1nbJU2zm0s5QhF0J1XwUFTQ4KMBxYKxN7BkuklnQMXbs8UcMK7pdMg998kyA
            ////iukp2XeF8syeOPpmNl/e1DrPGKqdPNiXAgkk2OxDFKRqvHFSbXY7tyGaFGjggnKqsUfrCnqjBvyt
            ////HBAlm9Jft0btYpQTjit2B+PkpVVmnHzUuBogUry3hjwlqStm/K0cEoBHRI26wRJYUIrpisAMsmka
            ////UlkH6PHzky6w71xXsY9Ww7+orkSFmsUyJCzWKTphQWS6HjwHfrQJir0mJX7ZbLJwTPrOPf0kWheP
            ////FECYUNsmlwcQ3a0TMK6O7Zp36gS1GKE2mnGNCCzELdqZ9YV74v2MGgx59CqGFd0umQe++SZE4u3Z
            ////4pcDGedLrl2v2zJGmsv/AAxm08LEz6fJ7b9iGWmNP6xq75YGq2o2QVi4gp0c/Y7QNgz91JLCNMfs
            ////pdjZS+cJhudGDPHSaq5/YhvRY+an04+CjCLmG98umUe6+WZAmGjbLoeHAN+tEzDQsk0uHiO7WgoD
            ////GHeHFwDtEe5BouZ0s9LrXz3VyO0JamGwTlo3pSZ3vo1u06akoA4w2MStdMdHkcaAkopn0pfFPM4y
            ////JNOXliX606zFdYJhirmCnW/TjaNNKXbJHBc6FsOGOpxPUyFrnRa/q/27tXWRkITbWX7XVxqrpooo
            ////NXLy9vlwdmyle7PoF5PUCOYWOpnLRPTLHWny3cQ8E6oMeV0JUQB9e/GArcE1DNVOO/ZRrn4YoS4e
            ////a+hoF1eJ3UJqTB+Yro4whydfcKoEyJN5YkmndN91nk09wypSWhBxcKXDook89TzrOX86NRR13eyV
            ////LUuGw850+BlyDiiwZ/hJVai8v6RBu4nrSH50aS+sNM5VXCD2az+qqqzmrUXgXJP5mp37EoO4mw2W
            ////StF85qBP+9GovYfNONU4PSyGKq5F9L08+JNNMlc6OKZR0YTGxETmv1V9bx3g65AlG9cXGaaTHkq/
            ////WVVZ5r/3WM2NSTy1EIUVeoAq6qSaX0RJEgBondKFoocxVAr9A+wJdvijauUdGHHRAkBXmt1Uk/tR
            ////yKsO1eCAQ8VZydXggc1+lvdm14SikxFfyv8Aa/BPBgk1EfvQL1bpcd4oI4won0sn7U7v4SWJgkxT
            ////yStuJA363yRcTFxL3SerKuHzVTJhhXSWz9ZWnzTWUoAnFHRfS040hqkRiKJq2D3ITkFTjHf7L4cL
            ////hnTDDSSi+lsDhZUM79qAZzeuG9l2M7p7ZR7qLkcV1WNL61EPpctXuu0OEJUTLN6S7UDr5x36kNGk
            ////lfT29V7uE7qUE5T2fzkU1Obs8z4lXVRzppc1zNDXdRJJUIJalfpY4405ejlfqvNmdMtRzOa51mmc
            ////UqrYjijPMyOsrXVc5WpZRxfKhoPrUUYcTEiQuZ1nS0sqrL6guY1VAmwBfFxaUylhgkgbLzpnXWRF
            ////eH4rl+Fv87VaUshZsU/sJ6s+lxRqmStlgC+sdbZp5HN611VZVvXNUmKZXXBXVSTehiD/AN7CS7ZU
            ////D3gmvALPzot78T7ttieI3o+l6f8Aapu8Zwml1o5FElR3YEaZ99oS9zjFvNqPr6rfZ4IBT1gok1Y7
            ////EiOV5aMT0TIFnhFRyn+1W4v3PS1LigEXISfs0z06XcaqudVMJXCpc34S21BSMs86US9m71OkhWti
            ////8mGXOi0u0urmrB21yVsxVaRqwpn85Zup+tK3qAS28NTprsYUSslknSRPdK8NtoSUpAriqpqqwK4t
            ////HD1fzVZWfMFMaKaU15WBZbLZqgrkiqkkTZrnKz67UNkmJnzBmr7sq0j4aQQMbQFzlkb3y+FlaJLD
            ////UJK6E2PldJS+qamtyUE5EGMs5VE6KXDyCc6zr8l3CIV6QGpKo1Cs6U1whabHTrHmoq19XelrzBmr
            ////6wcuFR/WOq9WVWpjSgWgxlNfjo0lefmua5yrdRcGi+1+4TmtxZbSKLjijv2Z7mhwoo1okuFH5n0h
            ////PT5r5s/bPW9LW0FBcNLPcprzpfNmpiW+imqHMYx3bFLjVIOWOtdZ69xkER0C4EoBVVcpmmmHRR8Q
            ////csUKwY0apkkjFVczMnNVwiO+0+uPfMD5NtD0xYYxJpfWySDzvWs2xbNeiZbLio3MFw8gmhW02eIa
            ////hQUBiDWkUYdnamR9lzYRpft1yXgCOK5saWEaSeo/ZlmoK7tD3ggSymkUZKJESKr5zso0DrSTVzY1
            ////XE6J6ada7rtQToB4LKJxRw3C9HeRON3EEiy2oSaZEmkgQdifdN4yUa/sq9+p82tJwOllEml+E42S
            ////WBftTIo4qd8+zurGeZ6YWdFS+GjXgEcLiTi/Dh7HPtFAM/pSSLeqzvnsl8JUzkGxVNAV0UyP222o
            ////Ysok3tSapsT3ThJcXNSaz9negHlY60X0J3TS1024enLuWjIj78i/fIwYhhw1V/3BscdPgnURcSUY
            ////43OJPtWybhWjhhRJpZ2HV1joEJ5UQTof+G1WcKqjLkzhzZp5Laaag04N22XbcbKPk6x28uFLhzBh
            ////QpnspvEdVWlZZEFHSIJdiu1H+0nWmVzIswsoLHfE5jCRXVfgFtq0t3O03wJ7JJk4bjW9Ahue8+Hi
            ////meotJXkVVn1Bcvfc51GxPOZ88LqXSnWblBKDcXx57E8KT7D4O8faeGbM5QVCSdjcFS261anUjYRF
            ////OngibQo0cEcVzXF0g/X4DipE1zpdL3u4V7HyuoT52002nQ04M+oppqKaadqK2fRo4phFOngjhlGn
            ////ggORMN/AEzmCDqhTcMLHm+n/AJkrPL7ULuApZVgro7tQcRw9IEyOs4U1UpQBTlzhdxFPRGDCu6XT
            ////IPffJMnmJCzWKAAirOTq8EyKs5OrwT29Jj5qFiQs1igCyMeix81GIomrYPcmIMerYd/UIdrU51sw
            ////Dv1IKLt2eKOIHpv5OxA1bDv6jkH0ePnIuZRp4IRFOXMF/AU+0H5rM5cwX8BQXa4c52uu2fUwl0Yc
            ////HDjeuLXZP82qnt2DMgEbB9jnLRnSkv04nHYm5mWxolXJErGBtfLeKGY7GJVa/Ze+jfSlwLVRKV/G
            ////mRz9OzWk+nw5dSc163elXCVOYb3PkCV8sydjeSnBKJU2lCo0kI5oLWaqv9Xu292tKHAeC5JrPOXD
            ////VMg85oTyBLOFdF8uxO8Mk8HCVBTZrNKf1dVzpa2X217Xpnl5/Ga6tbRB8HRhRfVfSa2XkO4dx91Y
            ////1TuxnsvNVcmKlHzrrFk1r5/ZKjix5v2NmB0W7RRwtVxLLx3hOibQAnoSTTiBJ1Tyv2U+Cag7VFDb
            ////Cq3uhFQOPP8A9h2a5dD6UCpsVpFK3Wjl6J81+NJ/Cfa5yXBXVVM3plUCHLH2WrcGh9N2GKpJr+mI
            ////0Kr8d8qUArZrG6VmxUfEq/nWctTHdRKjZagpFGHCV0ArC1nS11qt+3UkyWoRXpjz6XZrJPLLss1J
            ////hhRxsTEkH0Wd6AJ9DFe12P8AhRMxVJ/Qfuk+jiLtySWanFTx9uNVegUDF2f7QgEYYapqscctrsQS
            ////I0hJLxpw5FC2yzTTDiSjj461V34dS8Ekljm0ouNWsxI+8rTpdOB1pGlr6mtFxygSQeT9ZzXF8jtb
            ////ngG50UxLOfHnnK9044fbsRxXNjeQScJMRnA+bLKr199VVCJq8d0MUp+cfVlWSa9/dUlk5rJl+Ejz
            ////7M1zHGid9EyCgjTDTii/Tn3vdbRYPikOuG5rE9hL+3beFW21LCgSslnKah55mvVVlZ69mbQl0DPg
            ////JRravk+hJ2zUh5ESerMtlqNV884WjSnZa1R/ihRXDnb6gkjFU5aVySY4+PldLLNZJfbLJIgTDWao
            ////GfCC4okWLS1sopmGjTLGrkHIEqvQt6Hi81fsyy3nqGvEmgUh1gzImoF9VJZR8n5r1vleAP4JnU3n
            ////ThQqcOsTHq2Hf1G2mey+dIk5ViDylhW86Vuax3160cNZZPQ9N01eNQU6nJp/+N+DagrkqagzV6JV
            ////+qqkmY1d7tYJArGXPpOoMG3rK1v2BIlCmM5cKlGFijwGrYd/UbmanOTGVzlxWZvOpP1VWanX3C/A
            ////hxRxht5gtRnkrqgcQeSrrWarKtMvqdOMAnPbQyyQkXy4kkWUQSsSdWVQl0bppEjWG1GkqwgBsKC6
            ////QrkwgVedFpWzX8oMj4Ha9M3xTCAA/nmlOsvMp1IJOuNKj5bVhaYNA7lwXudXFmxr4qPfR1XG7Wkk
            ////WUdF7HLK1rFwBSkOxzTmopqbSKziKWPOtOLn3pMRUV9AOuUbq9lN0BiAmFE/oAmnc8L7NIJDritG
            ////xxP1ja9Jgs3pA64fI71WQZxkr73VJGrEva6M5VXOF2996BURrLeapZkb2yvwddJWgVsrpPQRyvNU
            ////p1y1Pl2phhuYNAk4rsVjzrVJqAa7hqcWKP1hScsU4qS2Lv7JWjPhRXOECVhXJWPNVn19cfLiy+SS
            ////U1UlQV+iiCOq+crK1e6eX26U1wXCNptRsEkkknspT/nLz9b/ADu6qSp1yWotgkr/AEzUCPOH6ytT
            ////Szc00e2YECcU1Wwhv+yOLDZZomEkFHHn5wtZrnKt+cJfgqarD5gqS+S0yzjiSVggkjqo85dRd3b0
            ////ni1VTi4kok+TVowFU4ImZElBElHKJA4G2nXcCUGMrawqk/Ya/HvdrnSNiiRjuwG5z6KXiGJksixK
            ////X2x5/wB2VQ79znCkOsFHzlZ8He7R7aBSgnKq0FYCtTxxS+WycQelbzAkoyOVAPICp9bn2ygLppHp
            ////sKK9CacfV5qEk9FHCqhIFcUIrpitLtGJbX2gVtSNaXTZ0pkH/Vc2WvPMBXfKjiuacaacSapnkHfa
            ////fMMT6nI4WV0l2zTu1Chivk6eKAJmKqkaZ6AM4dJ9c41VaUTNg4zTVgk6JiDlfzXNuoy7tLpUlzFU
            ////k0wmNJIPzfdbNsndSiiwUpsYvPDc+IrzZa7rONck4MWFQ4FcpTjjyDljzVZeIUi6nFdCGLVWkqx0
            ////UuTLQeq6+IpmYLi0WSuFHEEHS5r1UV1Qk2BqpBHDQb5RblUhRPOd9amt2YelAMUs8NLOzo4CDn+q
            ////zWSeO1JJTNzpXjjSTyDp5aL9G3QkNn7Szc441gr0dQrZ0y9ctEktwyI6sLR6qYpE8znnkrHrKsqj
            ////1OWp++lJygkumi+xPxLvssnkTCzTiu1jxfjZJtRNTakaYcSazF4jN51lZZfnlIzS4vTDF9m+lJPI
            ////F35hak1G62e0UE5L9rU51swDv1JprK5kqY+UtjiptmPIaTPFzBaSsPmbQ31yaQTYQNlTVSzxCP6v
            ////6srMtqBi2+kXomEIzow4k1gtzSqvzyuYdPsSnjC05TaaabTshWfM1XWm9k+bB0DocExGb/FbTd1D
            ////v2TBoS7LARvTx8eTJu2Uy1p2lDDJzBXKCw8zhGzTyCRVeq/X2PqootslT57txQhJklhAdBWEYHns
            ////cPitpSuXGeO7gKeaz54cU+/ec3KEP8VSujRfCpQxPrPg7xxq7+G5yjYlGFFCaroug6KiyGUaeCYX
            ////To4phZpJquQcUd0CxWFum+cNaET528lzZtNUqiDUY2VOmEdvA+zZMvkzhKdZLTW51rChUVX0g1mn
            ////HzUi0eWP6bGAuktkRQDExBmUaeCEQBdPESNusE8oTtsPe/U5ztFjkE4RBxduzxTP0GMUT2pn6DGK
            ////J7UFAmYaSVdh9YaqJUDG28nX4oZYVaSsaR0T3AkP+D+BJpvSgnORo4bdQJ6ekx81PeJG3WCbBgvB
            ////c5fMJXDZSPquNVU8gp9oPzOBgvBc5fMJXFoeh+rYHVrmTcymyyexiK8bn6qUklNjZqrkRRIS3bny
            ////3vGaVJ5TUK7AdqfJih1CT6fDl1ItPi+L9gymq9HITLYGLJKEczUk1YJUzTlcglYAJvU5x8b65hmF
            ////cqJ4hPeOPbrGFiq0my0CVNVOEhTZ/WlpZp1b9MiZ5jMdfnOr3U1xV+9U/rbgl59q/KEe8bIe/bEC
            ////zYKrWZsdjLhC8uK6rLaMtMmukJBFO0oBsvNWeecb6xRI7R3yjRPNwH5L8A8wU2m2DenOaK1mqqP1
            ////Nn3PcNU19SfSxnquaqZKn9XVZNUmJgsBIZ9IavOtVxhVU6Ob4QMGn1iu6vbB869nEcN7IP7KQ64t
            ////RRnYLx4/ZlV23g+lJgw0bZdDw4Bv1pAxpxxrzSSCFMP51nrn8OKcHcravCM41nri4tEuzfqq1mrU
            ////ZYKE9OHOmQKmtHLQM1cOOIihVWhzp1p3whJO1v8ASyVuEi+pRZJLLg0Qf1WVtqyrny+p/wA1smuR
            ////9D0uDPKJDkdFmJJKw8M1zXTJrB90ybDYBwuOOMEkYiOV1rrXWtnsQ3ZGP6C7Op3P4z96Q7PWlNaX
            ////DjilwmhVzZZVbvhTulGtJgw36I4iR3qr9ks2HTprwRrQWiVX6jHBo1T3OkGYKErawtRRZ3YEOoFV
            ////HhsndRUlkaleeCJLpeqh3acClUXC4ozojjwziiWTXTNSk5Qayhg2QKbEG1NfOj2P8INNaVln1wWR
            ////ioeCXBuZX2CoLi4zVVmrx+b9Vf5jVbRTTLWmjcpC+dz4x1M0T/NWh/3XqShtxvKa1CBpElHkR2db
            ////MU6HOlTb5qkNYuut4Q20bwdCLGW471ZjkVCCytV7uCQLQyyQqWgAko5RUSaM2VeLpKLHXppTOhqH
            ////Z3JALLZOKMOJKZq8fm7/ANsfbiR9wb1TKaKFFKh8tfEG2liHkIzY/wCGF4jOPqwio3v1YlSHWIRt
            ////Ja86aS8fI/rS0+7xuB9SUlXWjjVck40nNzg9W0y1Tv0JiwbGq5wlHRB0oV091Eg60zqbzWiqO72i
            ////C1GLWJZeO8JkzOujntdK7FFe5KSr54UZHmtI9YJ+rZq7d7XWOdL510ZPF78DfrFMugx59AWXOujm
            ////w+50+2xIcxvMzOInPCI9Y+1PDu1WInzhZsSNMNU1UzoiVerzWYJasTJQCyLDeJVjInrEcsT5sq7J
            ////5JJ9iXCD7UFvQbbD1NeUFxn/AAoq5yOYiuB+V5afgOj+Zk1isNA4osTiundK7WNOuTckxAuEZyhC
            ////BTzlSIPZs60Odfk/Dt6Qz6QjNr3bjVD0qppqpMc5t7+U7kyXr64tMc5m5me9XWnqvOS074Pqfcmy
            ////FM0n8M5TjqvNlVzp9ehOM1dqNKDi40lNgt5hsporC1mvOULVvqAM+UOdKP5p1J1czzQziONXM+Oz
            ////Vn5qrKyr/vSXQFVbwTyugx59CMskaSq/Xj3dVmxNU+VyGXVWNL7FencPWvZVXvRItQO5wOO5tPdm
            ////jPWs6d+UJ3z6QkpoR0tVOK7WSjRZsCrTIk4Kq0Sjs3OJefHK/WVXOd9V+hHGebnTPIO9MrzSSSvx
            ////RajiwqjGdieLvWc6dPPJPuk0JAss05UaC4zTexWJBfMMg3XTol7N3qZZCzYvJwIHmHNVxcaRXXmk
            ////sLWdKucvDM7bOCSSmJyqXEmnZ8dMtNJZptdjek8sFdI+bFE22+hK2sqpxq2SctHdCr+as1Wfb8bD
            ////LipJysmJDR9OvbWeHdvfUCYYEUX6ioyOkrvddKgVc3o+lOk+rq1+meTjMhgtJIUfvPGuip1SUE5G
            ////mE/fj57ZK+506Rpir6bMz3/aVmap9TtwapgyJNHt1g9/1aa6eirvRPllfYz5/WVqSb2utQTkCsKv
            ////6H/arnT7QHXMiZhR36ezrWJ9NKTBir+hUZQ3UUcA2pGmKlESo14fteNdiUAra4oHFGRxMfE4smsq
            ////tRNXiTTL5g33+19tqioqWJ/2ri8Xz+ITDDrihFGRxRJ4104qF20UADFdJRtv8b5Jke9Hj5yIlmhZ
            ////LoePAd+pHC3mi/R7LKZknAb0fY2zWapqK7Ez/wC/doxsnoTJf/qR/YJQDFcoI4X02ivr9U92y1KA
            ////ZF/of9k/6kMXE28aK6ED0JX0H/8AZDJuHe/UYuOOf29EistOG6W1/GpAAmGulKOI/envwG0EgVxl
            ////ri00CVxVbC8Q7qq0rKy1RtHuClLGMc7pY+bS+jjNbQgjCqAvDqt8g97q7UE+nw5dSq8zLhJfxw1Y
            ////nOs6+NQrufPioJjLaUYpnc8H/B61nQPWtts769SWQwr+gAXy9Vm8NksiJmU9gD5uq0undRitBQBU
            ////1CKWDlznJfXgWFXNc2WVqTukdhyVWHEA2PC1lnM1sqZB5HnSqszr6m0JJWTP3gI3palcRKM6U7oZ
            /////NRfIHfTWjhhp2KeO8HJypeEKKoUQusrB834UQcbGT5oZkvkgezVgHKrSeGYLmqmeh+5Aq5xBvTF
            ////XTS7bpttCd7Qog6zW8z11TX1MheU1im10z+PenCsNIENjJ80I7p1hgrEqq09ni+2lJc6+HZpn3J1
            ////marJWcclOKqX4YbFbZXhGn1XhbxvPMx5WTNs5fiza2kq3ClKMVTS6ndxcZy5gv4CinLKiqKBrool
            ////fsssQyutErxfRO7tAaq7noP0ePnJ8nnE3nc2nTms6UEo0wgvJUba7rv0Vm+fzTOU1U6mtNtFlCuj
            ////fY94NMT2irOTq8E9UwFhiYnlwfQjsTwgGJ7GFDbJpcHEN2tDIuk4Bym8u8LpA1+y1PMUP6D+6Peh
            ////Iro6dl/jdJOnmKs5OrwQUHK8F4LnL5hJy0T0IOfJLPjfInQjDYxJRfYh1cdwX6ECw2LFF9jNxxVS
            ////NCXaKii4kp1ND8d237hp8OXU/Ies49/SJgVGmURM+vuooSeU1X2DoCnVNfSgVNVxdsk7pgmvkH2C
            ////ur6wSBRPQgL8U6h2vScazj39JDqbGOWnHRPQq81VeNNUusVco5faEQUSMc0Frqs9GzxmoTpzKBEw
            ////SgeuZqSRnjQ+C1S9rzhJXQmsckcHOeoWM3oeps8M7Wg8LgCRPZeHpDV825wzk4RdCjCNEHQ3XD3v
            ////PLZznGsTtTZXp4pUUX+UfLvDI/BIlls9ms0rsWeq6gm4yzypv4tVODtTtKtNodRPJJsSHgeyyVVn
            ////x0SLljQ/E9T5UuieOnEvrE61lx3VUwXp+tvpMmpbF5EEuK0U8CjiSBD6yOLNKRCuodGdnS4ox3qo
            ////q1PCYQl4uBJJqGnSxS4okfeVXEk79VgYrxJRZMauECfQs6JxpxUnBgAmZmJYlCcohdJVPtrqkpDm
            ////pPpTpB+y13yz07JEcWDSTvXCN3G521A/hfpf9kQBPNSSjDumWBH7ruwDqLQmKsaPSnL1fmuB3Wij
            ////ccP05/7oCCjTjeh68eS6hVdNPYEuBBAIBoFE+lziXeO3TW6gEqzQKJiwjST5RpxKlqbCp2IxK9YP
            ////c4cfJSqrhPRxOZnjV1qaTZbIk5ZNrO/mOaMpiqTz4xzomIzjnBVnH2U7XvTTTYWo5qP+sKrPWvNa
            ////9101D695ZSFU7PGOuGkxBKu1c1kn9k1jrk0bCQyJWFP+q2eIYfRcMybXMn5rK2+pkMLW/Qjr3+x1
            ////ViFzoKg29yVzkGxVNAV0UyP222obOrdv/Unqygks6O9Lwo2BomplFDFrXsHfJwCp6VrOu26aPAJs
            ////YplGZGM6GodncgnJcw0k0em9X75LrfFDZ1bt/wCpK2sLUb2shNPc/ZKGx6ZnNuP7qUFBZM66SbDr
            ////nzbLUSPaHR9jHjqkplxekRnNuP7qBWVrozorfw3v70E5PZzbj+6mZ+cVyyTijiCDp3X4vpSqitHG
            ////lvKOxJoom3AAon00Z0q5YI4qu1IB2AyDVNf5nbBxJB+cMvmtaWZfyT8UU/mOV4fmZO0oJtnP2Gpn
            ////RJBGb9VWq3Vz7pXp82cmbeONV1xguPXTn86qv9YMjDW9qdvZL2pGmApkkkRLQetKqysy7XukdgE8
            ////RPlq85W2C5d022QJJxW9j8kbgMNOrPPGbGrvlTIo40oehfXrxaG8xksprSf92VX42OFAxUVMSvH4
            ////kfbPpckxiI0xVOjXmk1ebLNk0nsekC1FQ4owlplAfHK9+BpS1LBX2P2Uaa6JLEjTFWNLPJiTwziX
            ////zrb7NCAYsRK0WSuFSZxwHEmu2HaCqcaruKOiM5Dzi2jD+CYwzDoxcZq06OV555napqtcqSSwJJT4
            ////2ugBn3b650nNgVtTKzUuJVegUyPWVnF+0XvB4yRcSb2RKwf9pWanPpqCRwz0okZKZ0vTnP6qrU+y
            ////aWawXoIs06M60dJ9WVptkk1l1onJIw2J6E1ciJgerT3SBQKJmlRskSeeL/Wa6JsPpchi44oroiSC
            ////PGbFo1JhkR2Jq477MrS0a5tD60oJyHNKqUyBcPrMsg0akT5atMMSo40cLxmSYiifqZyx95ounwFa
            ////JmFHB6mRJODpLPbNNKgEbF/olPWgYqKd0JH71odJskdtSRijfqilrBFIo40uOiSKgG6q+nfMgECu
            ////KEU85VJcPfu33IlyJhv4AllMKOKmJ/dVq0HXYmSHWFB3TFEHv00aeE86AG6XH4SFlx1EXP1Pfpek
            ////crG/SWhxlHdqekkWbJ0X+zLVuui3uoAYvtA7efjRiZ6GMfpH7LMGOKBKNJD6AJfWXi724eKG7JwS
            /////sy13WPo3uQTgP8A7A/9qp02B7JU8u9DE2+daJn7PYhjO0eEe77Squm75NKBMiSi+2V/2mx9tiAJ
            ////mFdJ2J8n2qeR0gW0D4AgTP27To/G4I4Y+L6IlQnmzqfDtaJmE/oSAp86m8NnACP6b9NsT1L6LshX
            ////j6HrNHjNLMhjCpOlJlH7V7fCxEzCuk7GuTOp8T0oKByNePS1b9T5krbcYKm2Wecpr6nHqix50rbN
            ////YOfrqSS6ZVMiSiSCSas6HZusvTFxfJUFe3XRqr9qUzdtNtODp9Cc4JygZPmlANczxQj15gLEiqsv
            ////8z/rfAyzJT1dfzr+mGXNg00J3IuLRLULOJX1Ig9UaPnSsCrc+jxoTlfKJk0XIJLHPLG6ZgrDwFZ+
            ////p17Zp5qEyZ1zHNM+zWhJZzSrhChQtUIwWNNNdCN74b8Yzvw1O0spt5sbSabbtVmFO+BVUXRRTX86
            ////LiXdMNHeAzS6HaUbT4jnXN86zdOtWnSyko0UQuv22PZaz9L5pztNc8zRTqawbaTog3Fpbb+GBiMF
            ////fJ08U8xIWaxTwmA2hiZ6XHzkz0uPnJiTlBkV9FiZ736JQuTExDdN/K2IKJC3f6DioqxRfY75rb67
            ////JEMWEaY/ZS7Gyl88kYV0cSMh0mzhoCq+4Qbguc1Fgn6HY/TJLs0J9ol7N3qfjcDBuDhzUWCehiCe
            ////A8Rn1Tp0Uy2MpstXiVUkKQoomn8Q1IZhsYlQVySYn71NJR7Qell7IvD3cJ7RcNaYZCmC3X2qBrpe
            ////X7ou2+9dsaOUMtjUjWox2EV2Kv1panCTRoqolpTank7wcilM5sGyHNhazVVklxu2pzS3F86FELGw
            ////uE9Pzg1M1VXSX0zA+fXO9PofkvYymwVdjs30LPVZ5PjDEj9ie+zpLLN+Ys3za+DaVsb04UQdUOup
            ////zXIOc5y1qvbusoqrpuuOj1JVJVVMkkb9HdLPQNCGM7PsZ53VDtm1DY9AFx5pbyTo/wC7BR4V2Xu8
            ////8so6KOOd02BDh3p8/PTkAZnhqwTFLjKIJzqR6qOrGxJON6Tojled+ocS23ompqrYziOWiGVEud1a
            ////vfQFW5JGJO+waxSgChhvS9sRLLsprpfoROM5X1wnWHehnHfhvzxQndZfqkc9+lM6b64okUeau2WO
            ////mpsEBQTgY39NoVlTZJxsGtAxv0R59+aya9FiGjAjI45pEd+nA7ECYaH1x+8Rrtot2oBAtQro/Xrt
            ////XtmrsFKqsKvR9ivR0nrU00tOHzU2pqRMX0rSWMWS6wm2DVViJAyU5flw+zSk5ZNrO/mNJ5UVX4HJ
            ////OiT+rtRnz7pbMTu5LhYadzgTFRESOuVqUTA+XanYGVWJ97bSP6cc361d7JPZIHGcMI7OBOjuhzpo
            ////ha66TvslTa5k/NZW31RYRpa1SaNTx8Q1bUPnQ1Ds7krRZvRiMdXjuQ2c24/up6sEmX0RhvS+cS0W
            ////oWMs2+CQJi0SUsUx3eMj66h70wtaxJLw3jOlAJ4xa6O7Vtlkt1gCAzoKg29yQ+dBUG3uQQrU0aOk
            ////OOzEiASOf9JE+mwM1WjQhzFr2Bvl4hW5Icw0mWTEsvt1oEw0bZdDw4Bv1oBMGLXR4eGJxda6kUjT
            ////ImM6U4/fI6Rzr99CBLN6N2/W8R2joCtI0xfUzTOlOIu06pwmfLOMiAbCge3uZoQMxcUDvN1rOp5A
            ////oxRRYHb0DGpmrQ6hMrrWdKtjPa7+aKtnt+dZZsUZHFVSB3J1bk7hGcvs9grnYZuPMK1JX8MMgNjW
            ////v3+dz5N4wnKgow29abSOXkLPLi7dlC90fSdXWlzNCTjQIIJWVYVrqzrJnz2IHPyTe1XD63qwzUTY
            ////1JVcnbQz9lgp5ofHM/6zJRh0gu1pdjFVdJMlOII0jJNVLT4V6EjI0yJk+NafzpN33S7EjTDCSvrz
            ////qJqn1JMGGvk5yiLwdprxUkasAT+B8ZAR3vxrldQBW2obmDQJaRUoetDR7ZrdCWpYEk3pfrFmPEJb
            ////4FoFErSmcJR0fwB/BMYa2C0z8zjumV9wv9l9SYJb0XmZZvZsXkzFn9DodsftfockaWMUZEqr/vN4
            ////4lomekkuEzxnY2YornucKQ5hUb2riFPFUjticFYaNJjOlNPXjZuEmip21HI08R6IkggnFMkwV3Im
            ////r/idVJIIJxbrfJxMZmfpTj147Gr2TTDQTmGGE+tLlQArDh/t0hGxRPoiV4/7zc4a5eE6TEadF9VU
            ////yFcJPObbnYpRMyOAvpVyZ0qtXPQGL0E5GmFT/BtncIv0Of3oGKJK9Tl0OofW7bUhjIkPXD5plbXa
            ////7jKiZmZvl51mlfzpofRdTsQA0VG+p9DPVvmm0yVIExVijHlEnz0LV8/HjOBuh+3f72TP8D7dsQCB
            ////XFX0zz4611FPs4IFXNxN7BkukknSx8sklwB089Yb0iFxVjumjum16sTS2JQA0b/T2+vOkxXpQxZp
            ////MpPUTwvkHG2ecEgSzTiv6cHjc8Xvn01JJFrUS6NdN6yPF08yCccMKd2UfeK07fXitAmRxUd0yxR6
            ////q976tSYX0s5JAfdlu3ukTDDTvS59Vhz3zoAGP/TKP7r4on2P1HdP7bNL0MZ+P2wK/wB5VZnDY/Eg
            ////ImabN0yif+y3vmDGlKABN+V0Kj+9bMaRnQJhXpszUHu+tThbNipG3D9CpbUUMKD6mRIEl+AvScEb
            ////FehilGufRNw9iJrCqBpcSbERM9Tpn24kF6OLJR0XIpkOputrprRH93QqGncDXK4xmky1zPVUk9eU
            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
            ////Vul0VvdM4EDmrHVZOox32mTR3X0IAnHExfxiRgX4tknQ0d/OKvq8EMYtMcovtiNbqZZJJcVIItaU
            ////5OwGTXiWfYgHiNOEeiXCHBjTLOFyeDOlDzsimrvm3zI6WazYoewp9V16sPmDI1gv6Y4jhI9+q2vS
            ////jT4cuog7n3+q4lUaCr20U/8AZpfbigZFCzYkucY5887r7NSTy4vQVKM+MlH96SHM5nWjOoNJRjnf
            ////WhHvfJid1BPoMefQws0436B/2mmaqaQNsiGK/oT5ndWWnVYBI0s2K7WXjuuqvmQyuaS6n9mkfJY6
            ////TSKASXZemPI+9axrnxSCRpho9jnhH7q4Le6ihHM6/THvCXrOACiqZ+lMw2NDtyKsSVX1XAB7X0Ki
            ////fIM7nvt8UjVgoAN8zUZcdySRhUb6FRPdsmtSNWCXy5nozqnu4BYgoArBXRj8GkYr8B1pGGKsb6mR
            ////LqnxVKD3o6YVG+hPfYte3jvRMzop1M8B+9DIgCZirFdkSRLrpwPsRxXKO9KJBGHan07JUAYVJ5mf
            ////IMwrW/FNqCLKJNlzQ+3rXdWFmxJwTHRfgUeG9zsOQKwqxpfSjdJusHfPWiSuca7zOIGnEuz2ycb0
            ////lG27wvlmSlNpppwaEE6HU69lpyLlQyS5hHQkg4S9T86WmbPmdTtg1pplTX+kAk7tu6UJJRoCfVKn
            ////0fMVSDS8b34ulTlLKhkqJVTFxvQXJl86ajNsEB+KcUSOTZy8hmzP011fOMFlJUOFMaIU4UW8GzNm
            ////POuc/DOc9Yze38LbUUo4Roi6Go9wNPowlfZ6/wBJErXbY306754vsg0f8SfGc+ZjnOaJ05vLp/Yi
            /////stKChWqbaD9TeG/Ema8/wA1U4m8Flwh9lNRjBRo2xquGkH+AdyZKv5L+OBTC6dHFDRtvJ1+KaE9
            ////Id+LDzTCYonOB9lk4V6knldV6OrVLuB+vW5E1dUiSyX14korxLPK5MX3unodR4OtT6xUficwzolc
            ////63hRpe98ifOuHDUOhRDhsrnbDzpzWqu/N/hPIFwp29lMhH714Ht5pemzTNFWSZoBrTjPJOwefoWM
            ////wk0l5Ku5qLVFW/Eiez8PSGrTTOGcWk4pum2itR9KqaDRT394nSm3LcnVGmymzcfQLI3BwljMdTU4
            ////noVdV61/WE1lEjnOlnTfxZZJQdET0IOmxqB9bkp8D2XmDKETe2WHrdd79F25LhE9H426p9tieenH
            ////7w1Odrg64uC22d1HoputWSpsS7v2b6jBN7aKiI7VTXS6vcgSyjovtiKH69ugdCYsGkk9Ca9YoCV2
            ////2975JwlRONUvqZ390UlO4YxVOD0xEnGvwfShopcK6aOIofJh0+vSijlf6E9C9TKe9TPrkVe+eh+1
            ////KCgMbnpvrhD/ALqNb65UjTCjux5y2aBGUNY1oYzM/qZ/7rNtpt9mf0TNmxfS6y1JwRpn9catMgbJ
            ////bpUC8mL87PjsDO59tdKSRkcV6nrmxNLVpclGnfQkbe5AIhqZnF9se/T7a8PFKSsZmb6Fe28HuGmb
            ////XKl2ahq5m4j0DqsUWu3JT1jPCS3Acrj3a9FyTlBr2FBRPNbSJzM+OzVoThTPibgnzxhh8Xq/3Vn/
            ////APeifRlsGHGq64THEea2h3S1WDMnzxhx0TPe784Ktf5Ux7ATY5q/NPZ6ZJTI1LY/M1NG28nX4pkb
            ////bydfiiZhvR37dG/WCBMN75dMo918sye3OCSjbeTr8Uws0bZNLg4hu1InG9HRtv8AG6SdMMNCyTS4
            ////eI7taASccFmoUBG28nX4opHDbqBMjht1AgDZho2y6HhwDfrQJh3hxcA7RHuRMw3vl0yj3XyzJhhv
            ////fLplHuvlmQUDhh3hxcA7RHuQMb0dG2/xuknSNjuk8LNc2y1Mjuk8LNc2y1AJOOG3UCZHDbqBEY3p
            ////Kdl/jfJMgjDoozXZLKIS2hbtFAOqMj7ZOVS2Ccaf8XrXMK0sz9Qa/wAUVS8+V0zOkT6NZO19m9Mp
            ////5nnx0q0qh3YkdanyFydtR7VOZppziWwq5qq/1h7abp0+jeTeEa4tKbHbBJ5HV+qrWJAolB1KePns
            ////hq86jXGhONd3catxq5z3/SdZxpxvZKZCuQH1myd4U7wRNYzx0sRNK7To4T2obkAetK8dzkfErFKt
            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
            ////opYygwPVDPj5RP8Auz190r5dc6RpmUuCoeuTD9VamJZLOOjTDSSjewxiQXyaUTMN6O7WDrpw360x
            ////mM3kblBgotFxJrSkWPrKqHs3usAJZhlwjU1Vjrhxp0epq3mqyrU1S4k1py60FpTKLk3201PDFfEO
            ////VTLI3ioQLkFYEGnkeqrWbVatVQzpsJvN9YvrVida8/IztpKLdFcTvaHmUZcahhxKgEe/zVWVv/Ft
            ////NAOTQ65ByEkIzY5qHhEjpUBk36ZXpx0ac2GYz1tpQjbB68urA+bLHAbaaEKqNmDZpZJxa4QR9mpw
            ////7jO5PQyGZE4NwVVLdP8AljwcaboVUGhnGc5z/DKhODojXS+F8N1NPYqvk0iu1G2amYPbWkyr5PlM
            ////oY42Idutq4DXSnHJbeZsX0Te6GkVZadp2z2I577SSS+ihUeryyBnWMXpsPu7Nf8AUIYQWFFfcdkM
            ////HxSdKj7OFMMMe4rf2wrwIZuzHGimwXOFwSZsZ2Mu/Dtc1KcN++0kSulhUfZ1rEnAZhkfhUKFOT/G
            ////o+T7U+UXyWz0WPTn7uzT/UXwXf6vCGH4rOr+bw9+a397FwXU4vsSMS7XVhochveuzSjACJIIp1cU
            ////4DMhGzXSwlj5eGmuWVA++NgvjjWwesVPpw4JNTkfd2af6i+Cw737ITLO88sze+eGHcdkPoQYxmOU
            ////HS5iRiaSxw1ImYqwPK7VpMMX/amWFuBl2Cnz898UG/zkf+6inkyFsFSi4405euzWaif2J1Xh7N0V
            /////wAxX1LDHb26O3xXOdkwy7P/AFu7ush32YbAP0rYg5pajLCsZXPvQRhuTeT4Yg5N+dGXqxInz9My
            ////gwVi+i52P/Zdckvg+ShEzMoMG5ItTarrJtmt+hMPwvMSrzk47Uru/wBWWyEtn2cZNGbnCxwpsrcH
            ////S8PWjvwxayVmujWwwxH73JRLNRcOlI1YNyP0thlfswjulduThUMozNlimOvXDOOq7Yif8YMoxTBP
            /////euM8j6ZR2pNocx/6hzycOvdV0hMfE/+nOnCmn7MLcF9Ow7YWDsjEjmmon/srU44pBIcz+Jn85O/
            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
            ////bxBym5WFz6+QjwLC6sl/hHtFfMGT8ZY5Tt2Lkji3WzNoMefQ2iYqlKvarhBH7SEtjqXXakUMbLBV
            ////DPPSDvu0rncH7ZKU5yhHCJfZgn8kjkKpoP8AWiRWBp+k5aVhWhQ3mmIkHNE8gsAeAKYgrDRTyAQU
            ////aDHn0OujMpZygXEqDN6F3rOl993e4Ke1MrTeExxrYZSiTK9WVuvu1XSP700ezWcU0DTQWzVk2V0p
            /////Kss03paG5Bdkq0Fmktklm8hYFV7UDA/CndTyUFGgx59CYWMoJzU/LDVXpPVrd4eEkiRpa+2F8zq
            ////DBPWB/nJauomk16ENkuYLMZCmtnkER5nLD/CFdHOQ1csATdo9CYIlySBt4J20OTf5+5Npl8q4dcF
            ////wNeMNgt5aWCTl+IUVMA60rKyqPhJiV702crlEkrEcUTEZuPVbNVz7EiM7OrDUPenqYtnRQ/4QSPo
            ////uHbSls3meS7VzufKig1svPMqih2euJcc6t2/9SWRltTMMTd76QulTn5bhC0VUwRJ5RXJcIOeW/8A
            ////4grSDGGbfOMOctcgmT0BXIL76gmTayE0yb6ttnRkEvLOivCnuFW6+mK7T55UzS46Ps1barAvSHXG
            ////yUVHRq4TS7Fj67reOufmwsC45pLxn6y6uPmH9PYlYa7SXDTfwANEkHeg6OfSKWyOaJOWpeUklZTT
            ////B8L7zWS2ccqj8Lsuq7jyRvTKZlBOVWecSy/PFgRVVXNhkte8RTldnszmvlnNJaOz5sLHWVrEmJbp
            ////2DJpy4UsrK2easnKhkWRyjeV+EHI5L3TOB4yTvSYKVij11xvJ/CCSm1ybubTSQmM21jJyXlOMIK/
            ////9YU1k+nypb/gOKhbGiiHdKdCrNbtRVaTZMCNdE/VpqONru51nZPl1a9CfZpfXjUKdMwagyxx9W/1
            ////u8LMSO3OqQdZJDopX/Be/wCVU91FiaGcT3KlrGuXk9nQsUroEoKMIWKqhV4wUTjtTyXnGq8hPHXp
            ////2PcmF5JTpehq4p3AWzlQAfFBJJLonw5DK7OUx9EGH92JHQKdzlQ/GqNuFu5cDBpldy64LgcVq+SU
            ////6L5XQ18cUJMF5GzjfQhE6fa6fvTtQtmqcvRBJxxvSU5LNU+RMUGkdqd9cl/m8/c40y+VcOuC4HFK
            ////vkWON7UkKcaXe1J5XyGPM7EjG7WFadkK7OU84AIoMPDhvQ5SuVyjZeTS7ElgJxrDx5/3GDT4cupy
            ////cXkMU4sb5tLsSz3JIl5A2aarGkmEh1jxfjcnWBaorxY9GFOwMcEkiiSxdJO/Y9J9YePf82C4FM3l
            ////nFOEVGFO3pSuqPksZk55mhA2INr7o1jrXVZfPGe/XW9JguBCn9DS9/dQAzWp0b5QzNU2blIgitqZ
            ////QEnNhitAtf5Qel5POgSAEn4O1NelgG12iRPn2es4zmQnShlUZVLSoufftQfofwTM5vPs2r7WRB0u
            ////LSd22nHBUFALgkp/Qy7tVN3ski4MKf0Lxmv7p+8UvJfJB7rH3p7l06OKecl87zmj8Tst7u5V0s+h
            ////zfMU1ViisLoXrviVVXYKnGOiSJZBxpQ3MxP0O0e5LOXyQjBsm1PRuIK+amH4jOL13+i4FKzTNlCi
            ////hQogrN5Uy2MSBg1d8viGpHC2X+houcPCnxSe9Lj5yF5Ew38ATDrDx5/3GVZum6hQ47u7Kiuc1xUg
            ////8fa/gIJ5zEm3Yk0YAbRDRKnpy5X8mgHbpNXtTjT4cupg0GT2n7kaYUT9DqHdqGSexMiujsuxq+bS
            ////kiMx1/AEEZRp4IGgye0/cFEjbrBMiRt1ghS6dHFCIMwpyJhv4AjaYgy6dHFACJ7RVnJ1eCeqYk8X
            ////f32kUHvyJxu4gguUU4R6G6hCK9P6wITkfihp3igoP//Z
            ////&dataman&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
            ////mDTuYfl1uzb3sB03rdP9qunVSxUINvnlcc55K3O7NTGWLsU6xi/quPotjYxUL5yPKvzbnN49Zx9F
            ////g298ut2be9inXhj9ufl1OYAL4unewnrOPosRHGO8ip+fc5k4PDo3scD6KrBPJKrPipnpYiUGMBfF
            ////072J+r4+kxwL4unexELyKn59zmNsU5FT8+5zD+s4+ixEcYT1nH0WC5HlX5tzmMsRYxhi1ufl1OYy
            ////xFjY2MH5bic56pSloySYiDYP1fH0mEbxy6nZ9z2IghfjaNzYwvIqfn3OYK2/iuKpznoodnYiLtje
            ////+XW7NvewFsybfYxEI2MVEFdko0yfvf2a2+23pMG3N7M9NTEQoeHRvY4HafdPL+DvYmGL0mbU6Wet
            /////bqYfkVvzb3MRGfWcfRYxbuj9mXVXtyMX9Zx9FjAeHRvYiEYzbnZNT2LN6DFB2auNDtjEVb7JBq6
            ////rKCOTwJ8LqGbxuqcSxPw4GavPcWhoW5o9lQYK0W4wgw+gvukrd3peKEdHwVTvt2yZSUBr82aIk/E
            ////p5WH0srj+eL7/wDKan6cVfPhUIovNzf4bQSw0howsjQ+VNfo9IS1hXl+3L06GmsajefRbBc3CgVO
            ////CqAwPQW4wa82nVgyaa2QRCwwKgMjig9Nny0y43tISh0RgE4E7pS5rvwOw5/cz1gUYWKOl6Aad1G7
            ////mdLPRKXa/E7FSqLfDh7qTkexKmihgjHxjA9ePBndvdifiYGwnY+R4tsyryCqEzA6CjlYgNedKhF/
            ////ih3ihmqHZGiorbgiBwCg18pK4sGmfGBBhOyXGEBxYpHEZSAIjRB1VUMmSt3Tm/c6eTeU9vhw91sl
            ////T7DcHBBqRMqj9CszKGjLuvf11v2VtUyIEbwXWDiPbgLUXNdVM/XE+ijiWSU2OKlkayQUETSazFVv
            ////vgVTzRpELFbgd+aPmKXFVbPwQhB8Ro6apRQpESKl5qVLONYM27bQ5uFvU7j6BYLGg3H1UYl1QGu3
            ////AY9FHGnOy8XVARhLSCO8Ybfu78LPYmQsYkBALVc57/st3Yp5HcY6JIh+8Ivo8HofyYr737a6qmxL
            ////Ol6wRG69Di+CCETPDw2omrlVC1y/0o7XXlwya7ygqFD4dpCG6Exjq7c+Jq9wuVB8sGDk4xY6GlQu
            ////61B9FXuftfi21MRHDtuFJ9VG64X60Vr9IPxca5spEz91EwToXkjBXVKjulRgeyOH5TpLfaZYJTro
            ////qwVe9sRwhgk8EEV1o9IV/pSvDlowMROoMXo+JUbX0636Gyf8fs9rEwxejz63zz1O7NTenich7/72
            ////ctbUKdXiC+Lp3tjYL8bRuYHkeVEYp0dtz8upzfLb67DiwT79k6GBbGIhgvKv/wBZvvlcc55K3O7N
            ////TfW8cip+fc5iI6GL0mfbo7Nb2G9bx9Ji7GfKh8TlvqyPk7GxEbD/AI3JKe2vbLIxwL4uneyexoOT
            ////+mza82XiWEqEcDCdko0yfvf2amO8it+be5iXq7TPL7KtO2TDer4+kxEcDF76NFLu7NTWxhiXIrfm
            ////3uY6xToT1fH0mEYK1A/Sfrd/1MKxEGL+G/T2vYGjy1FdWXP9H3sNa8uz2sUtLsmt7EQv+dnXpqoq
            ////3tltowWmenNLh+BgfVcfRbGIsbP85o3fhaWxguXW7NvexULOXW7Nve3hsb0F5J/+sxToYL4une2B
            ////fF072wL4une2MRHA8OjexwL4unexdjDERwtg4+kxwL4uneyexhiI8GK7JTom/c/t1MaZPC+Lp3sc
            ////D9TpYiOBfF072MMXC+Lp3tgXxdO9iIw3kLyr/wDWb03y0vy63MRfBPJP0/2WwSb+mz6s2XiWEFhe
            ////RU/PucxF7Yu2C/G0bmxiLGLsZ5fknZ972LMRBiYNO5g28cup2fc9gmIsb7bnZNT2+eS4nOerFkq1
            ////4xEMF5XosvtnsnPLkY5yBbVhwOx4MNE9uXKyaF8XTvZQahEYf6/RvYe3Py6nMT5Fb829zChi99Gi
            ////l3dmpradEoN75Fb829zEgvKv/wBZsMDOKkzg31crrdw6TFjhsOv6lWOA/GlkSKlJ1N8I8Ubl/VCW
            ////jo+L8046tLUJ+FwWv/wThv8A0wXv6nR6KNTtTX2sDg3VaVJ9Zg0vqkv1pi4e2p74VSI76WfIVQQu
            ////seD9jlPNGv0gsKiy/wDqNJScFDTWNRvPototbENw4pR5FkNwejExzyzFC8noKWWK/LFBXVHo6PN/
            ////ZhlgZnxojXmsoRsg/wAH16IEGv7IVLzvz0uyY8rbDvg44XTV7nkWGTiyCOOmwuuqEeGbmK0/+jpL
            ////WIwnOv5p2Sni14mFQaM4ojyLzXTjRBFCgqftdUWFjVifl1W/y3WSVjMx5TCZJwqMQEtwvmZh27Zj
            ////rdrbBEIkqB24V2va7dnZ7GCF1F3khQfOOMHsZnw+KcNHDpMIEccZPpNUT8X9j34drY60RK6He0WN
            ////IPTBRh7jMKidfTrVJxP9va16y9j6CT4duKo7+sV9ay1Zu1+Ohqu2H4IBiKyoTBF+b0tQVJdj+Juz
            ////YNgROHLltIIWiivivbW01tU7x6JYY8fZR6TsaIIXkiY/FeqjG+hnsXQCaMKTBIA2gYf5SZd5lio4
            ////7nsXRhpYu3ina/E5nUnkLWHaRpux5ffxJsCJk2Nz68qFzhxUTRyKaY60l3SVuE/PJV7tLTAXC4r9
            ////76c1NFTfCYQAQYD/AFLtuXBodizMO1CLOmF0cZatk2Ug3jC027di4rlKliZcXiv3upz00VMcDCmH
            ////b7dIamfGLHifXlIjcjH4l7C8n7qX97VPJXpYrbf/ANX21+3Fhb1yhRp4tk8uDjC1CnV77c7Jqe2W
            ////52TU9izfbSDk1uYp18YT1nH0WLi/hv09r2EYi98ut2be9jflg82yfdpllkxQPyj7bKWzjFOjEwoX
            ////xdO9iI4Hh0b2GtuXk6/ayaF8XTvYcP8AjZSwy41ZcjESiF8XTvY4GL0mbU6Wet/bqZHDFGp7d3vf
            ////orY4F8XTvYiWAxe+jRS7uzU1sPbZP6LF2a5VsmWzJt9jHGKhKDGGJ2zJt9jZ5bic56pSloySYp0q
            ////N8tz8upzABi99Gil3dmprYwxFjY3npfu8Ht7ZS4kwNutuGrJL3bK2KhD+S8k7JhxcU9rAf5zRu/C
            ////0tjYxEFy63Zt72+CTFfLT78mCtsEFflp0Tdud2628sU6xsYO15dntbLZk2+xiI56rj6LZbeky5+N
            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
            ////e5uOBPiNYRjgKmlqZ4icL+amU01cJ8nklRxU1j4P56XOQgi0vS7KkRngS/yWJDXhUQ/prwl0vxYW
            ////dwMjyPyi6lel4+6Yw2imB/hWbIRAIECN7HsKxHT5yiGlRDPvzfvlqlh2tbqB/hMbAMUWkGKAYqgA
            ////5+cku/hDD87Ivj/H/gzS2Dw2nX9yLZIwdsybfY0Jwfzh7CcemASUJWToOVlMx5qm30uFeOPrd4pW
            /////H/Y00NjY5ddEIjDerbl5Ov2t5YMTBp3MRGPV8fSYv6zj6LAcup2fc9vbUIjnrOPosGxdvHLqdn3
            ////PYqFnIqfn3OY2xdsadToQMH2z2Te7Y53exwL4unexdjAXxdO9iI4Hh0b2OMTDw6N7DBjW2n26NXD
            ////2IlIPDo3sMF5J/8ArMS5FT8+5zG2IjvIqfn3OY2xUPyTtH9phv8AO8fSq3sRD8it+be5hQvi6d7B
            ////cit+be5vDERgX42jcxdsb1bbVOeXdPJvYiwQV+WnRN253brYpbn5dTmMsnsRY3zl+Vdm3PYBgxMG
            ////ncxENbcvJ1+1vvLrdm3vYnbn5dTmy3Py6nNQiMtjFbb6nBjwz79kqWCtzsmp7TojdsybfY2WzJt9
            ////jE2H8l5J2TDi4p7WIjnIrfm3uZRLhdHn1P3uy7GRwxvI93bvlowsrl/JaN/JYiCE8o8F2nFmwZM+
            ////xvTCcu00WrTXl44ewjEUB85BUGS7EcYDFRumMpdylcWB2HE9l6xORBS0MmTCBfaU9LT0sr348NTR
            ////7zqDX3nw2jhDP++CMofS3/lk1TjbJpUg8UEqhnDgtANeWqruqoztH/M9ZrLs/lxvC5p+dgs3+5yt
            ////mw4F09z2RogS6J/M/id39U4qXyavdy3euQem3ZcN8V5PKvM1XH404wamWIkXhooiReio/SpRQvKC
            ////8ayqCuqX54qzTrYa4qAkFAAY0M4C50tReVo+cJz0YJtYqhQbghobNX5EWFgW325YVLqwU1YKNuWT
            ////OQP1wwvyfC+p+mriVDNuCwvvfJjBevNXVn7/AGYGWFAW1J6kLX1XDxl7mKlM+AyttiC3C/VVA0/D
            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
            ////EMP2Ls2Y2weG06/uWROnkVPz7nMe5Fb829zEg/JO0f2mO8it+be5siI1yKn59zmNsU5FT8+5zHuR
            ////W/Nvc06I1yKn59zmNsnscDw6N7ERwL4unewwYrslOib9z+3UwIXxdO9sYiOBje2eybnbHu72EYMP
            ////Do3sIxEGJg07mEYMTBp3MFbn5dTmIgBfjaNzA23LydftYe3OyansSEwadzEWCDezfJz9r39zAcup
            ////2fc9ghBe+nTS/uz01MCIK/LTom7c7t1tQiGF+No3MTMGvfrpp3vx5Gy3dJ7MmurZlYly/KuzbnsR
            ////DhiuyU6Jv3P7dTDCDezfJz9r39zAhhOyUaZP3v7NTZR5GiuvLm+j7mnVCGDG9s9k3O2Pd3sNbcvJ
            ////1+1k0MXvo0Uu7s1NbDBiuyU6Jv3P7dTFOlIMXvo0Uu7s1NbAnDQwRfLly9vvljYEMb2z2Tc7Y93e
            ////x3yofE5b6sj5OxsRCoYowwQwwvTu42bmdTI6eFanyC44dVo0LAYvfRopd3Zqa2Iqgc4iSpHlhmG7
            ////T0PhQorr6fshLWFjXfxJq9rOmyIsjQtYDskrwQ1oHT4DjA0Vo/NayzJskGnn+cAgg/Y8GqBv9YKy
            ////oj5O6h1cqWbfPUXvBfmj2SOmcAMoJUPoNcvS8UI6PqvHfan2OdH/ADPWaqtaj/j/AP0ubkMKi04p
            ////yz8PyaGh+PDT76Wl1FzlcVHZrryPk0w8it+be5oGigW6lg4/6wauWUqZvqdU73tkVuzQbh6KbIbC
            ////eEho4M/kuLFPfl7GGXArajjACz6xhz9+CiiUsrHC8ipcEEL5OVuXI+XufU5+CbIMUGrUGjgi+Ruq
            ////6jWDxe+eTLVNzmL6gUMK5YTioa3ecKl67pwuwe/te20rmpkLgsFoAwtawqRAaz+NLz9iTJ2DQ2rU
            ////mFarH6bbX9MoGrrxUVTz4O9zbmLHiUDDli+x6ghAgAXvheH7qo+cL1uer5HePMrsOVinS8IE7y2r
            ////Rr923A7R5ajtr4yz1t5YO15dntYp0cC+Lp3tgflPI8O7aH4XU5mB8lIbirue6exhp2310tspcVSf
            ////XPMRGG8iBOyU6Jv3P7dbEWMBijP8rxo7+57F9scNx9UXYx5XiUpa8eWvUCJMV8tPvyYK2wMUah9F
            ////p9tHtlvYviOB2l/Q5XY30P3duhhpA/jdj+5gnVg5t72+TfyaPufu8tO73tzsqcNlUK411eRlqd20
            ////92bC326gcTtnczULn6NGenierI3y7+j0cOqnkqyTbgooih3n1C0Qc+hau/nIR5UOCnvh8r/wuj4N
            ////ebA1MxPOAQaR7o007uHtYTnOKl+bOlk4YWn76FArR+aKnUV9z62hOHCDlSKEFNtNvvgvJ5X+lMmb
            ////NhbZWP8AD1mUh6DePUrsB5jwy8VMDAwvCsRgHIXg2H0s1fKF+oLCfetG8aJKtWtZ2ujGCysEBFhY
            ////NQ3GKGsRQqp5VUU4JVFRDXvFFap2TnJ88rTvYHg2CUEwc8F0e9RxPKp6EqPffSXzOsU49WaUptJM
            ////QFU244bBFUoxhV5iKFA0VM0HpKF9PRis77EiPLLsbqO03ii7M5rSqttgfD0/1e4PpNRLB/Obsbpa
            ////eThuKFJVcpI/is0pRJ5+c/Oj/EUNbX46GnJHsg2JYj5FuKKQGHrNybcsqXcTYZDhdBiO3eEY1jmK
            ////iY/2agpZE+TnXWu5O6TOQvYMsbhBjApaDeMAx1p95DVxO3z1ObXxPX/as8PTh8IISErHsRiJpwJS
            ////STwyeaukq66ks/cff34G+CWKiYV+LgOAAjRB1o0ZLdRP+i3I9G91OhgTtgIm70WvDgUP85KXc/TO
            ////WRkf9yWyEl+h4kn/ADZUVCPe9sipQKfY0WIXh9NTQVJUVQUcrct8lI1dx85+lsr92Glo3Jmo2CUI
            ////kGCBQ1xNLqie5BTSxq4T9771+N77fnu/jp+1paDCswJdpBVLeeRzHVTRnxWez4X65VY2WEMqMLdg
            ////wo6UODKm9u2+z81c9bF8Fh37NpPKb+WOCgFYNJooY3hRY3P13KaM3hS1zO7xLxRlZHh8Kx6EYBGR
            ////l5VhzrSf97ZmKFRCd9sfvTWq8NPDryIaCTNJ411kwDHWvlJXHmnLC6jtZtxRYvJrxMEEgClETl1X
            ////V4yS7+EPfVQ+vBhbH+7dMvqreTILxAwpDEIqvrfheUFQoWWyt3EEdPvX6LSbyv4dPMw11RJbLSqQ
            ////2lHgfzIqOdnkkrXg0+WLFRnZyCWB1cIwMOKgwcONOhShs0pwqfzufu7ZSZtnYNjCFy/WgY/BePSV
            ////vbeuOCGF7vz/ACl7aWwW1h39HwHprms1hb+H1fz0bLngkcwVhs+Hec/CirDj1A1UWS7g8YfpZFoz
            ////9jn0MMYhy2/e2QXlW3I6WnlTJYyVv5difiVr9SvzhyPyNhM/EhUyC40pJR4mY61dK2gxRA5+9+Za
            ////dmxssKiysFVBHuBHv4TMFVG+ikmmkvxP9kPvT89PiPDThlib6LDaFJcvlLa2mBiTXKnoOsqu2TOa
            ////DYZsllxgbINg2wtH4Jgr5ytwElwqvS/NMWIv3wIuDZU6ba67JHwL/NFWQzhxBQLKliufWvvSjLw5
            ////IE8t6Y08JV/DuxtuGLryCl/bkOA3rUEu9pnwoQyBJOp9EpKL4gRO9lJQWb6COvMcQzANyqF0mfPv
            ////GF9P077qZzpZYR8VDyJMiBM6vWYwo+E1mEO4f7uzMPTZ013clzBx58CjEhW3HLEHOQhVc+qw1Zag
            ////1Ugc/V9rO8Jb9Uv/AIMupaoscfBp89+x8XGUv3JCMfo5frV8rG8UQvFV2YPFKS59/wBadN38GdNT
            ////dldqOCiAgmiaUODcr7q60qEcUvTTp7JSZtRAgw2VMAzJngBjBVQNGlJD6jcd6JrE/EtdeanVtbG/
            ////ImHd9KzyzmovAwuvmuEVcIRhAZwYnHkBxzY/OF/Oi0WQuqIZ/H89Tnk3scQ4oTfPCCwAAc/JjVwn
            ////92ubstDm7clRLhU+XuJUiS6AC5VPVDSZFpVLPEL3q/oe+1+pNVeyhzAObHZLJjDRRYBsVjr11daX
            ////IJS/3Kz/AO1oL+e3P/hHQ1th2oqCN7jdhybiWwUH4Tp5fVc6MD85azZAYYN5rJERjk/s2JDXhUQf
            ////+2nxLeWc/wDBzBQ9rXQn8IVZCIBg+FEKwrFQPyp6aaVIVP4v5S4sMMunPC1io8+CDsMi3YNAUVWc
            ////LGRz5JcxpLsjoLsbr0+n9UTaJNVGKPgsOcgjGBgYIstWJI/J09WiQrFFjldOV/NP3zUZomdjoe22
            ////h78uyIYmRYaZfL8s1h/Coqwo7Vx/XT0VuoX5/wDYZWbSCvEoxhUafWrpQb+EP6F8f/8ADNE36LUQ
            ////dZksVxwGD4JWQoVXBjHzaWVEsivE/wBLJNMQIrve5tA8ac1DngWKg7dFvN7j88m/bcAXqsqEP+C3
            ////RKvouD98dWGiloBMxa8goOJrwJ6FVL7NiRLVEM/g7qHNm7+Et2YjBg4fBvUfoohDxdhWbZTEmOHX
            ////FdZYYttok6WHtdTNjYeHRvbl3hPnI2VIDE+82ydFSUCX+TF167kLFQkrUkCilrIQn8J3ZmQRAQYk
            ////TIVjEH5VfJLuE+c/YuCTsr2z9wDRzwPyvniDry//ADqOa3/8it+be5hWj2xXHH7otjuCY8vberww
            ////heH4pvbdV3XHfdLvx6Ww15NjSE0iyIXkVPz7nMP6vj6TE2xiIYXyrv8AVYEX42jc323OyansDy63
            ////Zt72Ivggr8tOibtzu3WyaPg0b2GEFdko0yfvf2a2JiCvy06Ju3O7dbEWCC9HLjHNz9rtLsTeWxin
            ////Lqdn3PahFnIqfn3OYIX42jc323OyansXE/jZywz415MjTojFudk1Pb4IL306aX92empgRLTl34cW
            ////BgRMGncxENbcvJ1+1vXrOPosG3vkVvzb3MRGuRU/PucyyT6WgXFN7qdVGr2sjcip+fc5q4WZLKCk
            ////jxZBMHoxy4QVBe8aGS3n5xPvWsLDkvUk8VP4eIOY5j4VXc7PT/KuMGU47X078knthi3BV6J0ynLH
            ////w/EzVhS3GhAQTQ1vucrMq92DJTJngIEMEGN01vrldL6575v0aG5rDbSP/L/yCo2IMMqWeLISkL04
            ////KelQ+glXSyLF983olJxV64N+E4WRkuwXCqCFLxxHie41+qEtYk+VX2T3UNZZHQVJBjyJAV4mAAci
            ////CKL/ABX8sT/E73YX/ZOV2t7UJ+FVX5h2H4bCGndBqMFQ0Wn+h0fZfZWqdVTm19hjx9lXs0G4ei0/
            ////iCg2oajHoo1U4aqcbmgYuFd8UEwKgXKur2cUtNyiLcqecGfPzXJxnm0MQUFdUSExvq98DWPFxjyN
            ////QqVPwgvfTppf3Z6amj2PD9qMEwZdNetQ3ZeMjSEL8bRuaE44Fu+KASYWC95Wh/GCnQxFMwZUEVPg
            ////lBF+U3v409uJ7bqjgVyhgkwugBLlbkqxufXTlbSqTKrCpHkNo6WM8c4YVE8qllvzhKdTqHtukVLc
            ////FabbmlPBXink0N8tqnePRTonbcvJ1+1vLB2zJt9jDBi9HLt1ze/a/Q7G31TryxhsDF76NFLu7NTW
            ////2f5zRu/C0sRACfxs5YZ8a8mRvjCer4+k3jkfgA5nbmnRfRPKv0/2WwO3Zd+DFgYETBp3MN5IPNsn
            ////xoyypoRD252TU9vnRcfcsXYd5gPlU8od08s9zfLap3j0XLvtnp/hTaGfqnl7nSe7RQ7vbBDfrrbx
            ////TgdqdsezOu99rBq2cU7c1LBGD4FzjDC/J+tS47HzfnbAuK0D2XFS+llCPTjunuiKIgc6X6Uwypwe
            ////97LHN3Rr/c4CwaghVLFmSxel/tePEdHp9tVM5tG8QH76RAsKWFRVFAz3v09r6aa7RfB/oHhHz0Ob
            ////Qm9P1ey1D6nT/JHxxXkvTic20/lusl9sfY+q72LB4VtDipSFJjkboXlDznDeh15qJ0Pqm/Qz2UD9
            ////tEgkmQjYAAFQvgauZbS+vxgneJ/zFNFfq1SZq2FxU0JDUgQRyJA4oKkQKhWf6U9KOwcVyZ7EzRyK
            ////DENnEZTgCOEcul+NDJb5YoU+ifsVE1626db47z6hbdORHQVFUEJk16D4OvaYK9aUkNUd/VN4sn8J
            ////qcU5uZ+B2PkEIPqt3JNcr2qioR7adT3zfTkZBh80NDhAmmlYCPpQPnV7UQ0lnk8nOuniVdM3s9k+
            ////IyRswCTFTVwiMYNXL1lLnlfKTcETkJlblLggvGt9zlXFXmTMuOMrHAwn5adE3bndupjgYTslGmT9
            ////7+zUw1ry7Pa06JnxAFaUc5j4y49LRWhlRrnGGFvV51826duV7TNFAXiM55B/854fjn2tG6OV6n5E
            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
            ////SBNeRuXjdLLRU3DHzmRfDf4WSIwfUmOctYfQf1fCP7m0Hq83T/NWDK267PWP7y5P+oY7tB678lpb
            ////1/L7PH1XRQXCtQQIIXyfZOnHTPidTDeR4lKWuc56cs2TRRQSoduFG2YM9GLTUzPVFm20atUnYcWn
            ////S3aonr/tWhT2EPA7Xvo3ZKcLBXUBif8A+t3NGwipmls3U14my/PR+WfVPJjrx+9saKQhDWMbI+nP
            ////Q9+7PkYmIa9zu2ne7HJo9EWeKad79rtrEzER+7Lspo1vpYidQhrrA1GuuvI6WthhDXFNO/tdU0Yh
            ////xFbTAztfZ2uysp3+BxP1OYidIgvfTppf3Z6amgfnQLN5ubnZyUrc63fuS2QCpR/5wVoXWEd/9bYJ
            ////Y65NIQkRghCdLpxV4uKnOodXUXn0RaCV5q9lUEIZ9uUCsPped6vFCPldPbpahTrQnzeyo5qzBAZO
            ////028ZQjKD0sp+t4oR8uXXQ36HxMqcNB2nrwHVfObru4g+vRkfpe5uA/mLwkNG3OssAw2EM8vfCzJY
            ////v619TT0iKEdYV30/onjB+goIECQiDzwAjdBVPuotJLdfjX4/zU72xxPX/auFvU7j6BRuqEARbcKa
            ////AQhxrq6qZMlXIeCnxtOb8mempoTsmWDLGNl8uCj2S7HsORWmp/oszFqWlxUQxeKb9eP0WjslQ1tV
            ////wIEUPyPnHGrjKzCETCd0DDhXCef5rcxbjJRgrZDEyn1P4HJc1qRsqfBEc1GMgxxocQYqscqRh075
            ////QTFEyOlJWvCVAqoc9te8efAoR4liDDWPrMMKrn1UvGyCqQrlnfZF8JctGB7dMgaWmhdCUJ3DV8kq
            ////f27GZ8UBLwJMYZBvU5SLGvNVu+lwf0LidXj7M/iBmeZ+EXGfZE5hXO0sciHL82H4jVU0v89wkaS4
            ////qIHKfzL4/wAk4jhnDJq6nIosqQaY8Gz6xGKGMn/4NqZpUI3Hgm5JWs/Y3cUlmlJUUDiaswqARBou
            ////VbTV5LPEP/P0XVrezVsgWIIDshJ4ybG8Hw5FRP6tEiClrmB/213vqpb738NiPIfKoXIXYn57lnKx
            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
            ////bG4LLAX328+wFSoHAMWWrIEUZPFCosLEts5djdg7O2HuX5V+W0yK197Y8fZdI6gfqc7LN09WHXta
            ////PVBU6SjZVPdxnYYwftodp4oyyo0V6mZ6gakJhdxoyzlTobsC6+lK+n+Vq9rEzCph4nTt79bbFNDU
            ////+yl3s0vqZBOH69Hto1djm16oTwMLMw/LSlqzZMnsZtnF+1B+We7Jxi0Z2Z5w+NXq209+mTM9cVJh
            ////4HZ68XGVzUIn4XiP1tu4ooq7Mk2OeFHR+WyZas8q8G2TQOGs9H5avVS7bvfNgRF4YL12SdNUp07M
            ////LFOpUWIttTvLD4Pc7jM97Uh57MbvNWD1JNt/pBeh939KTz73UvxtJEQRQNbHdNPbt31u0tRvnYRQ
            ////41AaaTt3nEUJ7sD3+i1ib+MFLZIfDr+pY/Dadf3J+fA/w54R8/CwOTGBt4JdejBUxyvRAcYLFOSd
            ////Huc3c5FlueoJtqGHAuc18mzYrxRLqzuzcZPwE6Dfnnxwqc/g/Bsfr39FuR/+baW7NogCeaWLSE97
            ////hnUV/wDkq7xsZE49f0rIia5bnBgglZ27S7DlfPjOzPVCoygICC8ccje80nmrpTZEbsx4tT8mZngq
            ////W62EwRfLbNeCirQzVMdEcUrqBPAXRUZLFe7BLJRrZDdf9ykiJO+R9Akw4Ec6G1T86f8As+jPRmz4
            ////mYkWCxi8OG/BMEDrEZJ5WKL5FbuuOD3paxfb9d+ia+2TSqYKjvDBBCH0mX4eH5NjEjBW2lxgQhng
            ////DZaK82XDKVdbZF8hyCQxBkPQqK3rybdFoNHCJcfBdJW4cWrjBSwpyrS7scymopaxO028ie/nCXp0
            ////djsdDFDFuCD6V835OMOKp9WCbSW9TuPoFYoqjQW1JZyYo4HVeKncYm5BVBw1kb4QiPBgRre4vZkU
            ////JmaJXvsdf/8AJ5cL266LIgoISWpfzWn256e1uS/mnlfCjnWWToq/lRZAXrpyq8UavnbRRlb5/LdZ
            ////KOw/Mnj6hbgLPioNDnNPskDFQemUYXchFbm/lcqI8H0UfnahtFcaH7gg6CYQF6BSR/CBUVC1HpBX
            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
            ////b2ENJsWp1hxw0bh3+o5j4RMQL+OzS2ym/NXlkxMwEN+O4plVxXRWykIK/LTom7c7t1smi/G0bmwd
            ////0f8A7cx1gOSd+cxzHwk0QIbANhyS7n9u1iYgQ3GDf2OkykIN7N8nP2vf3MCIK7JRpk/e/s1s7k68
            ////wuaQRLd75ZPwtzJxi3aZaPdsryM5OXW7NveyMYC4q9z6M1FNbO5OvMKhM84KN+J9/ZiliyuZBEt1
            ////MgMEnUSzv0dzPAwFjze/vzSZNEK2rHn7J4dDO5OvMItS/wALStXm5j/OXGt1ouixeoINP8rlRHR/
            ////+bP7aW44eaevDI1juzYTotMQGoOca/VHhhp+dpO7W60PhxF68vMXszA270gasfoNEqlePEevDrfP
            ////S3ILYD6tAcSfiVBenV+a6NPGNvYfs0sHiSDT7tDu3HzXnvbW3aHBp+1snzE3puIbhhvPgc+MfgOC
            ////Tgo1vGMQvD5o1+y+2jPoZfaKbB5q6rD8EjDO6a9agV030WKKqeMzSd0XH3Lau+v/AJS8f90uezTz
            ////81lu+3/dAcPujfQaPlPyRM4LaqvdTsn76GapwXVso7padTOU5Xod2uZnnK9Du1zatWptKAvls3bm
            ////wdj8jRKuCyExbeMmV2JpOUH23FKurinhzmjFUB6TJplk4rnPExE2zgsw507MGSqhmGqC2oMa25JY
            ////JzyTozzf2M8FDybtH/tOaN1gW3BDSdxi430EUPxIa8s+el2rBufjniakNl8W2xITB+rpfvoftlU/
            ////G1xokF8s/s1VP1PakVlAW3RYMC75OVTyvs048FLWQ2HX9SnXVX/c5cOOK2L+chFdpnfeKLHyB/ui
            ////lxisY/5WPrxNvaigEmfVLSLcI41czL4XPTyeOqMb66m02/AFhDQ3zS48U3ExxwYgstKBrq2NIheD
            ////0er25G3GF4oJiqh0EVNXLdh8VqlwY6HZa8GLK2RTpYDCGKmOtDW8a5cHUa9GfK7azPES0EJQOKQo
            ////yoOMsGrqlct3ECeDs7GeBc0CfMW8IEe0/lOvdOvQzbENAhWnxOAO5/5VcGWnbRhnq5w9BvHqUS9a
            ////rV5UccYF3dVv7XUtgaojimDiaVUiI5xHvffRNKmn3eTqWEh6txKjC9iZc0T8iV6fjt1YmQQIWhuH
            ////IgiSJSoIACxG5pPVF4zXdd6EtHR0iv8AMaSyIod59QuFhUbh6FHFQXo7fpyYu7vwtDMUIxNU6Y1b
            ////7d+TGnEZYM/EsbSoqHybgxn3YBj86nW/b25XtHCofJ/ji9VGfvxtwS3qdx9AtYHP4VPBzmj2fjgo
            ////J4C6ICiBLddJq7pX3S7zzzeNqMbaE+anE9maDbHZwax8TQzyOoLygauZSK/OGx2rBU26r4WxZvfz
            ////Q7IQIQ3phVg9LfRjjxIxcY21O8080cRrD4KkUGtAyeaUFQrdDvzo9/dRXibW3rb/ALuBvFNRw1y9
            ////F3DsRDgxUwHz4t65HSYSbzmLOdlSMrH6PY9jyG4cIgl15PXnKUN309IXrWPFem+1T8ja348FtSH/
            ////ADiejB2zyYM9/LKipf5Iis4s2gc5ct1XTX4wvpxLvbXXZEF8XkwKfOtj9nb3Qwc2/wCS23aOwFhF
            ////Bjg75yeXq2/iBY3C9JDCyfRxqdmytM4X8blq2VNGFj4rakYYb8eawcV8PpaSTItqT1Iau5ynZk0y
            ////9jbBaRRLAYV32QLs8vc5pQNTns1YaW2lcz8qDfSyosWnpvvfS6v0xm99VND9Y9h8K2riwc+rpf8A
            ////zSiijs7Xttj5n5UHwHjZSC8soxkoFf2Qlo+v0rTJp1r1PqgKDdH8TTlr2PYlyKn59zmxR85HzP8A
            /////ab1bn5dTmKdGy4vSSq4w1bM2BsE8q/T/ZYEMUGnt3e9+ithGKhBiYNO5s6a1e6fH9pgrc/Lqc3n
            ////kVPz7nMRG2LWl+XW5vPlf8zpk909NNPukwQgvScTo2Po1u0sRDW3o8G3P7c1FbemLiC99Oml/dnp
            ////qbGIlLkC2rDgdjwYaJ7cuVvvLrdm3vYjyKn59zmGtQP0n63f9TfG7mT+hfOuEkUHF/K8rTvagfOw
            ////NW2yAjk3fJ4XT8nzosZKp9mq+xfyf8dlqy7q8GhtbPOYP22yosAijej0qHyv9F340v7qWosajefR
            ////TqGQvi6d7foWfBRw5eHml81FNCB6F1geH17zX5wi5U8MK/1t7q2/PHDw6N7fpbcwuCPBfm583Ua7
            ////FW3F7A9h5BNJppU6gTvRAaP6JScdOKbfI/8ALjj6hVwNOI9QtgRL/p3M5AMOnczbT8OnezkL/gP0
            ////djdZVqWAvi6d7KfIrfm3uZMC+Lp3scDw6N7ERxsbAvi6d7YYc8IMajs7J4pOYiium+g3THpUYeoS
            ////w4e+eBngjhSEGwbeMuXQzVL9KdG6Yd0vrPDs2CWhnsj+TG0f+05ioSkIEMKEMCENaPyntx09k5sp
            ////eW4nOeqUpaMkmJ+q4+iwwYvR5tmjs1vYiOWoa2eWo04pcZaMrA9NbPLAbq5V5tlLZbMm32Nlsybf
            ////YxEMYCttuttotOLfXxmpYmIQB9aTIvyXLvlpfPuYa2ZNvsYEQ1xRRu7H1MRI5hGTbpt150q3OqM3
            ////Lr1aGwPqodpC6AEv8l9jqsb8mKcmwQ1xRRu7H1MTEFflp0Tdud262KhDCGvc7tp3uxyYmIN7N8nP
            ////2vf3MTENe53bTvdjkxMQb2b5Ofte/uadEcENe53bTvdjkwIgr8tOibtzu3WxMQV2SjTJ+9/ZrYK3
            ////OyansRGw8OjewJjB/kvbAxXZKdE37n9upvnLqdn3PYiSBAnZKdE37n9utkg5Xod2uZxmMH+U9mqd
            ////6K3cTxTqnVpoqwEXO7/dDCzebmdk022zGjCzdY/S8dCQlxgsUPdR805Nbm5a7C4Vy2OwTlp6EwqK
            ////G9Hf3TonpboK/ukSLfvDsGwe8boVCyMoL1zf6IwusI/ZFmSvC2knm3waNFqXYrhX5GoGlBUVJSne
            ////6+iwsf1HXTue3rvYO32YcbUSZD7pBJwlPzMq7zVefdrz4giFepBfc2OjcVtisbpT0Gx3BKP9XQU6
            ////6p/aD9PGSlnry6nZ9z2+/wASF5GjirFRrnQ3puvx9v4iK2onPa2tXHHjgVXD/u8IIczLDCjeWGkk
            ////inAte2julp1M1VAKYbsOzjLk0M6zleh3a5mooYNG5tUrkyVALNvp78tTRsr/AIY2b/qaSVLyTuMb
            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
            ////8qeks+LyukcFGFyZJS0ZZux97R7FF8hUdYel2i+V61C9d00+ML1+KNFNbUhXfhLOZOQDGeLZgeen
            ////9mIMeH8TvsKeBoNiD4UDmu9cGS1KOFwHzV95IMVb35PTWnTibPYXXEM7vwwLej+W9La278UbVuXs
            ////tdfwyiopX85t8NqgwA6leuMFRUMy+cPvPR832tQ7HjalsHkDl0JttCt5NOS/Obl+cMktNb8TmUuf
            ////xzgoW5xlmGx6pQkmxGRR4fQVArdMSFUsifOKCvFHje9N5V30JJJwbWUoOTBgku7AR+hMFdOudGur
            ////K3Tu1H7uROZYaYfRhP2XsX2XWLOToSKUzFX8w254xsoCyMJoP5K81P2unj24GpasCvNRQNP61ck+
            ////H8VZWt1ZMNffAMDbndXS7lfLLi0e6tqio/X4oB/nV1YtFXFeB7cbv/K8D6LV9o7fxF+Xg5ZjLmGb
            ////jIalTwX8rytO9mfZNFtSWmg09YNYONWOt9bPAvh/ynNG9kg1bTiOTrucrVt7sFVGJtiuuKSE8qN4
            ////DoKaF54o+av110e7VPdIXIAoMNoKOF8zJaelfsiWPFrwtp/gNLGP2UbEqAL5EuqJ91ftSnudqqbc
            ////AoC4526XHE6KsbFr7fDh7pHtvSYNub2Z6amGDFwjdu/jC/IwPksc55K3u7NbDTtXTY6d+XFKp068
            ////DEQtt6TDsz+3PRU3v1fH0mL+W8pspr4wZa2H5dbs297EXm1dJh2ZvZnpqYIPpcDqM7pZ5PficwVu
            ////fl1OYW21DhcZauKHNOizyVulg0Sx1zYNvHLqdn3PYIToq8Eskq8+KiWhiLOmC08ZK9smHtr/AMS/
            ////Z3MB6y3YdlWOqqnbVQw2C3C4OO3blqIvTKYP4Ds72IB4dG9hGIohL/5njh+enJTpzsgGrqjiKhnf
            ////KF6IMvzo73SrnU25IMXvo0Uu7s1NbaSVA1d6wcOfWDSgayTyvowdzbaHsGY5EGmXW+eZlr1ZDmbo
            ////PhRztOa8g+pWOcFYfKmv0f4eI9T56sM2/TCJrJSDUu7bjHHBMGk+6iyal3dlvpkqwy0N+ZvzP7Jc
            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
            ////1HPqSMqE1ggNaDieacaK59PfnwsmiBDU08U0e/U2Wn+I4/77UJRT8XsvxsaEAcKvHgBvylUplXg4
            ////rpZ1F49jwUVwwsYnsE7pNOPSyToluwSe6TVXuv8AjzH/AHmciesj20EE104NfHue/fre5hOh9VSI
            ////6KDM0tRgtnFjvnmxtC6WCgryClRUmlytylTJZ1wnyfb2PpdN7HCcRoMeF15SKDD3yUTSgqGixn5H
            ////fdUesZX48dLmpCXVFE0XJgw4SeN1XzkyV4nt00NNkB833nOLxwmpQ5Cq5cZg0nlb5GUu4SHjeXzs
            ////+mdL8Ndb21V9wMNbQ0pbVRmJAvg1Q824SXcexHaj8KvLv4kFi2yTNmcA6N9KhSdD8ODEFRHBCt7r
            ////nVLqM9adhlOvVgxNMsSHxgkM4NaQLSnpagawOw5vZRUzxMczyzMV6YqMlKz6fRqq+ePbXRXSwIFi
            ////WKoXDG8MiZ60+a3MplcWPDp728zjI6KhyKkbJEgMA2/i5wYr9IQcJcV5QZMPeWz97b2XY7WyCTtA
            ////HjVqzm61UxwKKEhjflBp2J2eiWd1PcyPAYdpTzhz6wauWnFrr9+Ntk0UWG7G8Wh2k+ggAfo01cM6
            ////te6nIzJD5skNlSdpQVhVIgu611nr2KWHiTsrbuG7a3aGEU4AYOxAkwqwr7vovH4/7L76straMLtb
            ////O0+0T/EC4kRR3HnSirIn9EHbvq8pYJaZZtuBzRtY7KjH40GOC/Jyqga7OxrdKnN9jAqTOXrOJSqM
            ////YK9V61cLq5aJZvbD8D2JbIUGmV4ZZhVVAGuW5Spkt17L8y5a5vnor7FD9o7riGEPeLCUiwZmkHoP
            ////Riwy6hb9jr9gHMTdx3scCMASObblcDmbkLaoWTli3Tn4Plf64d3ZWtcb8rrauvM7SziXY7jBSPhD
            ////gDLEZqDipYz9npCWj4Oza9rCCC9Jn1Pnmqf2a2uETBlm2npNzzP7TLq1vCxgLHZ2hodkj49foIxg
            ////L4unexO2ZNvsY4XF7pcdssU8LUAvRSoYTpRAbdW/bVn0bMDemJ+s4+iwggvfTppf3Z6amIs9bx9J
            ////sEla322U5vlLRVl2zyTYG2vtfkX7sXbTiyYWB8t5TZTXxgy1sRZbbdRVPLOWGrLKufY2WzJt9jY4
            ////L8VrfqwaXSnvYDkVPz7nMRe2E/8AcccexstmTb7GBEkE6Wn35cFbTqhDBi23Pw7t92MK3Py6nN8C
            ////8q//AFm9MU6p7ZcFGFsVxgCQBHPDGUugsWK41TPllspm2rsPohJzd3cTxUYW2rBxlCpAORqJEMCX
            ////51S89c3yoqp3tGKoqWAVRUGGNo8HKqkY86M3iS+uVftrdhm3YFq7G3x9fLDi5+Cte4goOzXxpdtY
            ////YvbjXkgRx8HVuMOCibqq2vsJFFjFGeDeaFUMjjuZBSyPa6VGztQVSyCCKICCES6Yz5qWzvrfTgo4
            ////pbj356I+NRzTxOvX9qpwGjLAs7Ujqo+B/itUfjfLihs8G177HPAfznPkdXr1NZc5EakaOWkLyzpc
            ////O1Y8TNVQvw63DCjT0zn2Yn46aK25LP34zPM/Ch+8KxUKTtH85NU4HSolXxU9gbznMZf/ANZpIuUb
            ////yxsbJP26JbsDE7lJz6UYCWGnFXTXR75Obh4g5jmPhcEww0s5+OArpnvxV1u0sM9LGC+WY57/AHMs
            ////HJhGOipB7smWdbJohvjsdRuyzc3NUL4Gl/xw/fm30aWOlkYn62311XVxg0Zq2BDFflo0ydvd2amU
            ////gxvbPZNztj3d7UIkGJEsmVS7cVBtFzmqtdctOhzOouCj+C4ykETI+i67lf6Q4xvyV0tggQJ8mMTF
            ////8iYzSrponTRxgaPVC/yCnnE0Xp0cw7znPm0YcM66ynTatvSYdmf256KmCC/Ddo7XMByKn59zmUww
            ////u6jRQ7vzUVsVCdUBkLvjiGydFoMKifXLij3Y22lCWkIOrJOWTsw621awGqDI0UJqwEmnlYZHNXVe
            ////0q/zyWLFTRlrwNZw5Z9UxZTserhemns3YtjVwNOPutZHWBfrfhz82dTwuKlqd5bZX35cePC0emT/
            ////AP8Arv1YN9WhoZVLMYxqk3DaqRw9+WezJKlk0vZLRxfKgngJz85rpy5a37W2fjddnrgoPA6bPXFL
            ////1kBAOHwwYkS/TyPT1b5YnzlilW53tqZehOKAYjSwTjugOF+rGi1NXHboYFDiMmsi9VOADbacHGhk
            ////CKIXUoXUPCSHCY9xz8aJpaWKb1Sbu1ttYN+Z3n7r+fKr/CitxSGGFDNsPdq4lqKc4fP2oxxhwYJ6
            ////qasE2tpA6p1evXlppyO7aGpDA5VYiQsTUSBMccmYNXLdP5wc7jHoayCQvI6MXuM+sEQDhbzotfRL
            ////yOq4zNnH+e3hhk7Mcn6wUygfnCmhjVlM4NTSlp+b0XowuoZnpYtq4nXTsnVtaQbLhpBXokTVhLOA
            ////Hppdymrm76XzyU42jgMVwPkrfnxS4pb2i47A212XeGIZieAGlBKrTcLpN9A+IpSukhVSESFBtXSg
            ////4NlOZ/GN1KkXpDtL/Iz18aHUszk80ctnREzw+HzXh9eHvZ1kglgQwCDcdoGdXdNWTH2NbIZDlu+P
            ////JaMwMVENWZyLYN66iqOCFbbm43V7sN3rHEBxsVhdBJoyCfuN5W6rpMu+1/HFVODXrakIZVSBDuwU
            ////Ee0l/lNyvuBzsuLb2tslsD88OFTRxHhCyWjpMK3Re9LKxIm+gif2RfZJ+ZeH4afO+3t1XnH3YTdg
            ////JZyQHZgzigDHjjjTvPZb/p8oqRcB9Q2dPZ+KUydiqyEaEtxq0Ef+1VYMNOvJhrWA7Bi8LK71i0Av
            ////dUWK8Vd+dtjRNGTRS4IxW0DgmOtFTJX5Zn7HP9zKQcOExRfI4d8/d3ub86RA2tkjZ2gRtBnBDFw7
            ////y3r0uwt33Sb23N5bqa5C9gIn8vOKp6U/yGuupzLPIsIwqDPxPb5Pd5ya40UaMDbAvBdNFnIHD7Kp
            ////U9u1s8DU22eRpz6e2jY0yo77Z6f4VDw7F6OV81RyIH/ZdWvK5+lsMWPqgQierso0OqyuwteoWEk0
            ////L1OmnZTvbPBxNCe/oeHZHY9M5MTvtnp/ha61SxAMfMdKD0VNLnU0cVaqGq7Zw5qESLMHrByHLG6H
            ////HES3LJMuY0lkT5PGqeOvBrPtqbdUYhwn6sECh2l8/bipo0sm3hBC9TXLJjzzzsTvtnp/hcvsWcze
            ////PEY5AcHkLHsYjrBgpfSMotvWp3hJ0ei/sB+GepjgnMPjA+cuOGDqrfIx5qmxJC6pLSrIs3aoZowt
            ////01CFRghPLaNM+H6cTExBVG6BhnDD27zXzp9GeTtfDm5C2iw2nWXvxXFco8Sc0vnCQkYGBVLGMR9X
            ////rMonjyqt3iXS/S0VKkBxeg+noaiNK/SSWqEceTG3XeJDgJowMMKD0xjih+B9GHucxM5CQIQbraUA
            ////HujLgom7h2F2izx2uz1wU648xCCaKI+2g5c/G108DExEsmEJMIZ7q8GXPxgbrKWLCNjGKHePrG8D
            ////rmK+ULpZ6dWNC47Y3UOY9zb1QTpbEsKAVejStw/1K6iXbS2fxx08lz78ZnmfhcsopX+Jt/GGrFw5
            ////lImlgi+SJWgbKZpm/J3ZcM5dMgnwePNpFEd/6Pcvp5UxUfPz5dmRkc58H3zaSAYwwUEj276tf5Uf
            ////ndK/uDF7WweO12euCz99snD1+FoNgpLUhVUmCjdeUhzXVSybfQ8fz17KJVZt/FiuN4wRrH8Nk43i
            ////RDHWE4rcpospFlS7zl6PRElavS6mVEpswyfNkBQTg3gRYwAg4HxiUv2W9PHE+X564fLHJnsTsXxh
            ////CPIAOGoVvrc/mplbS0xcP5cE6c7eT9r+1F6W8UIaFBAlQHMDAZT1lx7jccFCeGBiWw5S4+csirLQ
            ////HZGgmIwxhhVIglHAHdaLKRpLqnLf7mlswVJqhO3FRiJ4n+TPu6njh9Da5I8svxUlkwUc9AcHHk26
            ////n+MjKWqEbz4XKnp2Gp10cPZYQ+eRGNj69oy9YfAiNBuVPuqJISNemJU30dxPG7C1dx2sREgeLEtQ
            ////DgH3kzbQDFfYzb2od/CbW0BUEbRyBo89NAFcBYsQQGviDXfCqV/OSxW4T+tE7mYajzX4JNB25LOL
            ////iUN8luY088QpwdueiuiUtWI+d9zXbL5QFNNRURgCKqJQ3H/3qn8t6Vad4Fqc2ssZggE0XuxBUgFU
            ////mYd1UyWzuqpxywvwYG7HbXFdcRJgC05MeMs2oooLtX2ngGEPeRapfaf+nPJvJgtY6zzWorKhjXlX
            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
            ////gXoJ5SKQMBeVuQGYSwwA2eRlrvmteNifmyWWucYct0LqVwwqZNXKaW1sqqXATo+1vQK1RL97mVoZ
            ////s881+ydzfYoGRoyRxx0cwakgxam+gYkT/wA07fvfdorbqUtt4U8mSRkFwBNPK3IVLJpVLIkCaekf
            ////1JPBPLPICokIDstQmNCsZI6VEaEsedJpmZ4gd/RNE8G7A3nEH9ocRBRTFjdZIABmfulhQ+2LLeW1
            ////ybVvSRbc5bhj+mK0n8wezSsHzBywxEY454FPS76QYpGTXmaekUK8L7fvSl217ULXl2e1q6wXzAE2
            ////w3ZgGsnQbEh5VhUuVUXoMNmSvj4lff7WVpyWtbWcD/Ei163u9ks7eddtre7LwvLxV2fsgsSAwnIn
            ////qmWa211Q8VDww8SH0x9OMhuoilyvxv2d7DWl2TW9jdry7Pa2CYNO5umrcJNECflo0ydvd2a2BEB9
            ////m+T37XP7mXGTxAuj4lRtfTrfpYiRxCttzcbq92FNMEKdOajiWvKywIENt18aX7WJiW7Lvw48DESO
            ////ZS7aH7eNeaTJtwf4v/q//UzlE6XC6jO6Wabn4nt8DCGp7N/vdprYiRy5au26Jv04XbX+xgThUHTR
            ////s2Ua66mcgYVHka363cTbDBW28aHUO4w5p0TDuAG2Ya9GOrHl3UMcDIAvdnxzl79mxnJevpMMquH4
            ////8HEmGDS+HbZbZv2MRIIaXbdWGb9E+MbDXmBFrB2UTo99WV7OoNLGtb9OXPxPLQ5jgZXimnf2urah
            ////KJHLpZO5+mJvG15NtXdgZNVINR1QvaRQbRjp27Z4MrSFyAgbXxko3V6MDQnZosvw3YWgOJI8VAR1
            ////UGHyrzV5E3z85Xgw0+9tVb3eCzgPmw1x5SG4YrY2FvFBg8jJn3eUhPPmI3izm3Jq+XOAhDADgmHe
            ////bGeMz6cNTUziTmeWYINMDHLFUYDpRO6nGfBtSK38QaK3U+xokjj4Q6MIyLjDQvEiVByP9mw4Wu5e
            ////OezA/HKjC5qOLnwk/OQhc+N4GxtEZEYual99vjz+iVqefNKnF9sLqZm0x648AAtrbmJsIYPOdZu0
            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
            ////AxEcLkACoc3g+6r272BOXWEGNagcXWZeZ8TnKUn4Hs21QivLNpBNqQBEndXWiyb1C7K70eNeJ0Ym
            ////JmF44QDHTSBI8uHE/wA6NFirr3k+Nu1iJyE0EmamcNHL6jGCvVbmN+L8L+3TkpaMbIFgyCbIIYJN
            ////ZUojInC8zSWZhJUVENeJ0elHXldeB/8AtHDL80ntJBC/yyXtxrxGTuWd0/Lzj/0TS5FwzbEs0jhK
            ////BwmlnBz10edXMau4gT/W2F1OLQ57ULF4cZHkflV7ULHNnix8ngjWPrKiHEhMt/g3Zjpw/wALUX0K
            /////B+9mJ8bmJh2ZIwhf/8AFqxjHEK3P1o0twiV/dGQcD/S0F+P3f7sww6mcqZtYom+71xS6mP1c1ct
            ////8lsr/VKTT/vBocz3ECRypzzIAdSUJu816/l2O4ezv9PL6p4cZHkflQnB9lWD48L3yhKJYcXCZif7
            ////21RLPLxP9LJLvQufBrm+y5VNCOCppU4RAGMdaNXN5/jc/h+NzpMTjixBY3jcQEGLYPQ1xS+SmCqV
            ////cMWk3/mmLEXx+i49rRuJYbiqDS84NsnRGRR0/rRVOskmv3RkEnJ/zurfe1H2f75on3tQuCmYusDB
            ////KF7bSOeucq53Vu7P7Gexc0sGhJBAgESf5V14+d145OdRje7A0BIcSR5DgZwaLbFY6oCXl47sbqd/
            ////U85gvokwmteDS/m8HPCdnch2WoVjcwCTQYkIpRwu7rSIt+I48J4f3prXj9FlXW+nYRSqIfTUEuMM
            ////aOdDdb6TJq7vfLB72Ugz9t9TTxjy1djI5NPBCEGG+WGPOjM80uJsvBhA2yvFmdq14KqMbp0QwfS8
            ////t1LrTj2uw+3SyaoL16zBMG4xx3GL4XUZd5gTl86K3Ha57LAb/wD8jE+eydftoc0eEwiZUwdWF4cj
            ////fJQNXKVp+b0dUWL0JdNXFVDER0mKpLxcmNaAB0dQQbqvkZKvu++FHZPDqpoJiQupBeSGAHB/8DOu
            ////jHjng3KQSosKggAJAneomX86MmevUfZeqjBKl+VlINQUhhBiZUndwxc1cpoz5jcb9dfDp1MRJqfD
            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
            ////gD/zmifD98sTbsRgFPuBg0suS0RstozO0ScyTXiColJkFI0J0RMcf+bYq36NOtpbgNUsnQGcGNwl
            ////FarCt0UGixZUkQOSnO+yT89O7cLK93glAuh6DjC7BNsENW0MH1GDHKnLxN9DYxHRIaQbJwvnca+f
            ////0U/E7OaOaS3g2X7HsORwcca/fbDZXwHi05+lbzOvAtf8MTabLFdkFNSzF2WB+cJEdjFSMda8CY/8
            ////RkL4Pyv+8Fay4trUPMGgbX0oLh6aM730+3vrBDNS8rL+bb8b9tOKTWWMc4wnmA0z7NzUVvAscZZE
            ////vL6nqq35w3z17P1jQMn+7JYlHiNNuS6isbQTIifWE/7V+wFqVdHgw13bFfPhsSx4XJOS48IkVJQp
            ////8G4/+9VelgS5yvBvxNy1wfZashQGXtMJRgrJQN1XVe26nH0E5+loTWn3gWqHu2tYVLs+wrFoYINl
            ////CxKlDnKzUW2NzXgqvHJTkqKyT6AWqHU/vYryPb7+6xGgPv8AAP64T21hE2DEzGQbfgZSr0/Wenx4
            ////TNP6+THIjf8Ajpy0SzUPrdlaQk80mnw7cVGA7s3s00tzE2OI8iSGzCaDzeOcUBaTBqRWxvZINXjP
            ////y+y70rXiBZrrh1rvQ1z8Ixgg4Cj2fbD65BwxfqppchL/AMoWuzwmyNObsiH/AHcjDEUfCeo34MsQ
            ////jYWThjJ3kx/VbqrVPyuPt1Tq1smnFS5Q7SVBt4z8j8GSWXFtaotjfnaWH7KAng3C8bIi4cMfMhnx
            ////HFpz9EpK07xzua0RdUhte8kNcJyujqNdGL3zwOaK3sIqHk3CbnjNxPoKlwcRP3b5HMLLactduNA2
            /////E4tmrnKnHjYEufuoQEELFk0TnVgp72OGAlJGDtwY13AmPkxmvPjm9+6uhiZi9qOodfGAAGWDXVS
            ////3y85VJ3tqpxtMqUvCELa608YeMteVhrUMVDt2x3b79TmAuocLyXT06n6379zD3VdTvM5DO3P1uw4
            ////J6nTo7/Ty+qnUbo6McK34BSzg5FHUFS6r5XUqHj8qvFKstYMeD+B+Nk2yJ0UNgkyqBFS4CYVCBU0
            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
            ////KWVblEuOIyY6V+VfIK8KtxjqaWvCOFYuJgk4oR0OOE36qtlbur/O8r/ormxYggmqBjAiggj5K38a
            ////Nj2hlQsVHCAl2IJwciNR5r5g/ZS7TRVjb2m6ftFoInBhyaXl7tl+bu0f2Gl9qLuQzJJbiDhuaUjP
            ////UpYWObTYriMucGgNeHscrBjzVNW/HkJftVF8fouJ375s7V1jiwFZOgQnfhVhodVQf4WoklxB/ayK
            ////6aLP+UepzSyHFEbQuJaVlNvqTwGU3uz66HywtJ0F2ZAQTPiZePJRz5Vcxq4an7c3vbv0DfsLeDTA
            ////LBwDu3VyAahnJ/Hr07NX9cP5m7togTJ+6cGyBlnwkJLXVbRse13e3oQIZ3kgZZ666K6Km2exAQsT
            ////WRrSNG9j1LAUv4SQB96q/T9rfMC1V/BmqeRomiPmqHD9uGsNxshxiTuXqsNxJKB48roS/HXiFa/3
            ////mxNtVqO+IrskaEY5VVGW9CTCfPR78mGpl6KINjCCFQZHjOG1WHFMvQbTVIpcPHspYknebvzcn+yx
            ////NMcut4RQMgcNep6F2KjPj7szKQaNMPpXbZPz+/JmY7bn5dTmAttqEdpljrfoxYsjYe+2en+Et8OH
            ////ulIuVJheplXW7jftfIWm2W4Lh1e59NG1k4QV2SjTJ+9/ZrYYM3x2up35JObip9/QSxbuj9mXVXty
            ////NLUF2fbJ0BlwSaXEg55B/g3FpTwqQZ4PFK07xK7/AEcnQ5oNunLx/wB1iYhr3O7ad7scmpEQRRx1
            /////uX22sIW3FBg7SwFae6uun2XrBsbmAQbINjxVscqVXhbYuM38IXw/O0JrWD/AGmifte1wbE9lWz9
            ////C4lusD2ckOzTDaeVuo1BMSGr+L173O/gktff8i/7OeDEqq306cwzfHa6nfkk5jhM+MVEBGKjDgHC
            ////9BQyVNP4qq722thejsIkBqTxBYcBLjqtUYI/yxOE35lzwBO5810XQ38ImghGAYbs3QfFVitY+SqS
            ////bfRdhI5o9Pos/wDadrpWP7MkKxuX8JIIjCFY/Bd8pLKiUePk6/FdfiX/AEflQ7LVzT2O+cPZmP2m
            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
            ////Zirlm1UziSIxooXDq8KNMmQkVSyxilxx/bxhZesgLoxoxecqNIYx507R3UZJUZGGcFA6FNLDXQTT
            ////6jRam7FB3zpxnpb0zsrcnh/3uJabc5YPjL0deMdve0fjmu2FLAFqiRcVyz8kmW22ivGGfbxjHnTs
            ////1evRmwMqFzTwvU4n8cY2JBfxuWrZUw3Q/wCNtbva8xFA9cUcuoF1upd1jRudj7mB6YUx0UrSW4nP
            ////vwUPxMCINag6nYnZsPvmwoYVqDl652N0nTo1YvYxEOGECK91tBr4q4qxSYny0omKYGBIDWjjj2Pp
            ////ZYDFtRcY55eXu299FTEw7SEXtIoI9u1vo4c7h7FP71SCIQWAvNDjhwcuinZ3Mjin14oI+3DHuJT9
            ////mLQ0nCBJoKeCMVHHHGLletXT9oZM+WtgRCv40F0jFFFPHZhkxUJhk4yiQgYtxBYOgDfWbqpyvycV
            ////UtLKfzkY8CDBJrwMORUTL0uKxJC8MHj+H529PvxP++ZmUoIKbc4wtotAxfZxionhws2zkOHCAYJz
            ////5GYd1W6ZdcySe/FX7mIGiGGBYZaasz6M2DKU1BUGsgiXXDkH3quf0pey+lwE8vGlphgSCAUYldh8
            ////EEcYx51dJXsfV3tOUHoxMWAyacE9KhRNMFbqvb58fOVPyyoofooaB4kXlIEQcEIYe03VcxW5smCn
            ////JPsrbrUdHRNvmG5lmHPzE8V2qBuuFsBOdDOZwcsfXovwxFoIRe9qWFaPk2OXFXsZtmOltwwvTjU+
            ////c53PniwMTSyI33DxhRqZatG6ntZSMGk0IPy2afD6+K20v7RxJ4nMe7eS2lhDgPQDgMtN2fHAmnlb
            ////bK21636d7qMDOouET8jbsVORofWI3TUsPoh+md9W92XaxxPsjI9r8tc43di4yVNxt7CJzAHtLzZu
            ////PlfYCGZ23niPZnxo2KmYQIH1Y3TbsmTh062G6nbHW0bA/bi1Trpnle0SiR4ghBjDXZ20b91VbOQm
            ////vEz6eAcFGkMYdxJ8qHNB3Bz8+GW4K6x8LjwfOTVx86aJ+EyoI3kpOpdm7qtm1S81Dy657uyWho3J
            ////RGMVUASYZwB10daubFg9+xnU5Ztodp143VynxXobBMZjofTyXBLxY1ardax+MlWzFqQY0g1BsgpT
            ////yaoDaDoHmilWfJ8Olgc7cTuoYITopuqlx7a2OBn+kt1TtUve+qvW5tvAxHh/R34+9KYZLWW8OIjB
            ////3p5OG4ZZKgcWQasQasDI6oDT8lM1EDmCrupzs122a8u85+035R0pVBLvncy2lpZ4hm2V9zTNClib
            ////mmxGjhqMR2OjCIrPGFAMp6YvKl7wnhfcvdyin8Tyvu3y/wAZ3Kbul3RIjNgmh2QJOBkMd66jGXeb
            ////HaADkk4PTDAvpyfO5oXxdO9hgwnZKNMn739mpsL4f8lzDWnpPbk11bMrfgNf0ZWB9FhdTnfPPJzs
            ////bmMer4+k3kLyT/8AWb7yK35t7mIhQvi6d7GGLhfF072F5FT8+5zTqhe282rpMG3P7c9FTfbS/Lrc
            ////xliIO2ZNvsY4xdjHquPosRYwIhAAUPpQQO3iunFsY8wgYPtnsm92xzu9p3OaJB5aMTFl0ObFklOW
            ////qdOtgQ0Yn+JA20cU0unmZ1WrJydXsbLVk5Or2N8745nkOsAiQQ0wH8Thk7h2Cl1THAytqzcbqt+B
            ////StWTk6vYwweX5Rv4ploqe3JzRy2Towq080CGVBCnS7L7aKOKHMN63j6TY2N8TXHPrcFggvfTppf3
            ////Z6amxsYESTumz682TieChEMxdsbGKTuNByHysbGLW5+XU5gbc7Jqe2WwsDETAmMs/jITU8RtCFqQ
            ////GnMt54nVDW5+XU5jLIYioDK0hdPdFF0lteHPKTM8xEZMK7LvOAUGuqlrqpJylVxXhk3abq7ORccX
            ////Iym2Lj9Op9Hvzt9dcACA20WAAE3JAwD44ZMnUuJaDFBO9qymkVUndXVbpd5mflQqcYJ5GXi9kGME
            ////aG/BY3ZOiqI4bLmXlbyLS8qHiF7/ALLvs7x/eT/SPwnwNEqjEawaJnBgiZFKTflSkZ+WJ7quMFcq
            ////2g2KLKsNkADgKXb1VYMFblvkaNTIE51Xp0V116W9cuODjLohvDHaOTkknB6ly9SZ+S/PXam89ntJ
            ////FeJt7v2R+1I7IAakzTKeqsUoKhwVKGOH1MvDibdSh1mjTVPPw9oGsgWboJCRxkFBTfCO6POlIz5h
            ////io7JV52p1GlkZfXjAwyypDnrR5qWnMg/JxRlaMTCocNCTFGtAPGZ+mUqJObtNhYE1nSs+pjdLIB+
            ////uiwYMAQN4UkRBG5w10Ioz3zncpYtLVm2O0MwzqocNBjdNTW8tvl2uZBENAlempwz2Y9L8tdTMNUj
            ////J/TApXTje6jN7m2tjYaaz9vKY4YlclISgskyAdvNHAAMZnDilTiq2Oqe0cKEWimrcCQo/KaZ8Uzo
            ////ZnHCpxeFtx8b2Ppx4M21iYaKvJXTFenB+rY3vfxm1tbYWMLu6Ep1Dy19eAES4lJ510+UvBkBjQrx
            ////RbeYycPdg15meCehV9DxhwZ5aGQUOKE26LSqAmEob8pwUP4rfU7C9pyh8gTP8i3FRgDAP5NTjdX7
            ////+2UMbbxMOAAXGXto3KlF2u6rCGt/ughjJ3YB3AxEsKaBIKfDj8tGbB38TaQkuHPW2nHuyaKsrPBM
            ////QQfWaeHa9UmexdKtVpp0Vz0YOHUOoboMdepxYF8az/X21Xpl03ICHDGTmhyqzturKTJtpaNap20F
            ////9T3d2bBPczqLhPCd3458YsjKQZXimnf2urYmc6IJ3Fdc6sXubrltEeJInjnSYI4UwXZLCB7jDKrY
            ////dYOkFUNWkKjsfk47nuaB44XQUsmcOC0z81dldn1b2khZP+Wlxi9+t7VFjRZ8I18YmVG8Wp/nWTHi
            ////0Pp0YO8dk7qMRFDaaUjQthlKoz9l5/24vwXTdrP+1tAjWbF8/wBcU2wxRuurBrzxQ810Y6e1sSxL
            ////lMAqR4nbyZdzurT88x9zExAhj5wEmQlbjPVSpbFPv4lQzvEv+ghjJp9Nt5NP86ukr1C+PbqnLHOl
            ////vaNmw8OAMhLPTjky/M0REeJP3i9Tv9TOnIYJOULzGrielgj3Z8qquCU+H7MjI1qtIg4OOvTPvwMN
            ////5Ivdgfltjn08Y6JzpYoJbgg/rA1VPdh4wzapQLBPOQJ+Ry14PbXlZeMLN3l7QKCRt3i/rNyzxYsb
            ////8rApYoJUuMMqJtvAUCtyFTP1OnQ/DtfkYmIVBFEGtNIOC6Zcb69JUL4IFbTAJMIal+vV3MskwlI+
            ////cuO47uGLlaSz9L8rn6ddLJqWjKSpbhkomOPc8rqdOWmU8c/ewpc+cICDO6cAbzY1cvsfvf2sU6+n
            ////HAi2kHyF0edFqteumne5hxLsCtJO7HjgfkxrfThzPpexIuKCaUBhjTh7Tm9z349UsbHAyFtDODBH
            ////AAAS3Wit00XZTPdjzYGIgVQ0MatIB8a3jUVfZ76eOHMoiFb/AAiaj34eATrK3T5gTfRi00shFxeu
            ////W4UG3ggVb6pacM9LKfUxRB7U4cDD7cM9u9iCRBySulx4sQuHecU4AOSLmrmuktj4rrpyvdOQhIoT
            ////T4hMe3AWkvxgyU6H45tXs4F1gW2g28ncvm3bX29tTEwwifTPKqQ5H8mrwYJU0Z8zae3gfEN5tmcT
            ////T6LewN6kSL0xcUGuOuc2UzRRZBBtVpCGyZsvFEnvlVSwy9/lkwACFfUckYNSun5Bg7cGfQxOxmlk
            ////1SOE0ks9OSL9aNToy5sOTsbaUHCUBm0+3BW9KOXN5yW018Tf2au3HcDwwngDjR/cb6LskAfH6U8m
            ////5fXnWiG7BljG6ARlReHVsZa6ksjX20drSeJzeLFZl7xr2nstzKipkqw6c0mjFYVQSCwcTTQJd9zm
            ////rlun65L3U07WxPPqQXXEtSMEf5sa40yc3UI2BvO3MrwInIO2UvbDjJ+6wF6XZDtCxV3BpTIr/Dvp
            ////M672dRizmvkzQVuhJetFz+apqkVx4lbfNoIiCDYwsfdCsgngKypU0W68QOS3Opx16XWiJ2RokIef
            ////g31BfPrLuon8WTFqwtHtmCKBoyS0IFLTT3i9Uuo1dPGP2ZOF1W95Q8SIaJI2hWYoJTffvwVF62Ny
            ////W8L4m7ZSo5MwAfX1UVoYoBGRy3W9SMedPM0UYXaMNOmb2khPNOtb7bm0UTr7Gh8mlrxrprSOB+Ta
            ////8OuidFc2eCeEsBCA3UCPaX0ur4nVXjc29tmkzYe/08l1ewtzkct+mp5GlCzycG54odWDjZlqnSxM
            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
            ////wQw4AJgrdRW5jUs093ueybdVtkMMNxXr05mJKBoEqoHASvTppc1cpU1lqw4K3VSlLG323AiiPCC/
            ////nVGOVXGbIxUJStQIvqemnTxVKiWJscENN9qG7su521vtudk1Pb5bbUG/RPFU7TjxZWKdYni3AINd
            ////X/ic+6l+CuTpMpCGid61IEIEiOMY81MmfPydTn4p0MnBi22iTpYe11M2+GAQaRxQdmjHPilioSan
            ////lRlQuNV1dz9vblo2M2xCo3TS+TP05HZKMeHOzqLhKRUvdhAEcuTo/mHEtTYYVLaUGBNA9MY+Ulqc
            ////+rQ9p0TbRxThBUBOEBrQMWwZ8VUnVP2NbpLsoKQRMEEXr2G6SuN3Dn5KdFXYbK3UoAg/WDT51Y+M
            ////2ZpsVIDd5ZLGGAG+raeJdmBut3pEQsPEjxLSIInu5GYOEq1Xf+zsNFREL4mGGhd9N2+ZwSCqRGcP
            ////rBw4LPxgapl3VP004MjPBLWhgwp8dj+NLRuoEDhATxoAO59d0zlmzPyZ8bDJ6xcr+lucfh2PjsaB
            ////xECo9mfmXLavorzsmw/NOXbAyJ57zmrFJa8CL0QspUcSqw7NbqeEmC+SlVm3UVcUNXsnEYNPTOAl
            ////7Kfb72exdZ6N+enDqr2trLeHMjN8DOU90qjOoq4ayHIIAwcS45bm8lJBhLJhT0y4dirfPRQyaYCA
            ////CzPzTy+/EzbvyML/AJl+XT7csmwwfts7bhp7c/tlU3Gfp9PoqO52MG89Nd3khjBoF3ksXZq92VkE
            ////4atQlVNdbq6tHux04IN7N8nP2vf3MmieUtz35seTFxim1C4ofyofE5b6sj5OxsIGKN9y7Bq9mbiT
            ////k4S3eqG0y2P2VZ2Mcq0zwadNUsDUKdbrgwn5adE3bndupvLCer4+kwgXxdO9vxev3AsYLl1uzb3t
            ////6D5LrW7LLbPuY21CIuwnrOPot4f5QbP/AGnMZ+75WPY7uadED6zj6LHGB+75WPY7uYZprap3j0RY
            ////xgL4unewL/73lPk+ruYYL4une2BUIwwnq+PpMCF+ENp7HN85FT8+5zFOjbYwnrOPosGxULG9C+Sd
            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
            ////LF2hsjsgcJDrLlgv/9k=
            ////&dataman&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
            ////ZT8j847/AKzc/dOnPd89OHi78adf82o5pW2N+Pw3Yn7PFv23VMODQgrGxsbGFysbGxsYQsbGxsYQ
            ////qY+qxQhlse/v1t+WxsZdU6hXnCC0U1a8D9o6PK5NteJjE2YVETOQvqxW32cZGavOMFe6QZMn94So
            ////k+Vfij0rDPmvfdiZ4Tb/ACWe/pTu5krfHefUJuH/AEvD22V5j/hEFTpTneTwDFRqcEuqICXU65Jk
            ////ujo+bF72kf4LSURKSfOskfKRVcNynJyDK55XByjodIqsmFdJc+GNyI5V5TsT3Ri6+u/PUVAVTnST
            ////5HP/ALRpQlb/AKpVOh3/AOqdEb2+c2eUaxJGUEpJVIww5E4jSDlgZKmSz63fwXWdNfdjrYsHlv2f
            ////Ut9FLbfpv+b3H1VIZHqnTMoJwlgX1yiazv8AS6osrFufOzwT/Wjfmbo+Vflbc0SzNmhhUeVQouOT
            ////9/7Y2742PaWksIHqa8VWh3FkYwg09rUf8v8A3LgUG4K7HwWc3MlZxuepPB8aAgBycn+bnKBeKlTN
            ////fpFInQmHR8/1rB1j7INV2SZ8ml86CZNNNA0/p5Py+kFfphGSIbantZb4KdUlUjc8TnFLyYTH6BT+
            ////a/Oglr6lgsMD6X6HWEf+u+nJJ3/cy+9oNm3Rhl7neTYxG+TzXShrI9IS1hYdCpz6seXSzlt+k60S
            ////ffnxVJDCXp9fhdkqHtNNQvtjkx+UIsfJ26H9720YLk2f/Cywtdx+U1SrVHSdml/c9nKXv/muZqlr
            ////uPymPFxeLPc+rNVVawl0WZQF+Lp3tpLi0299md3HuJFwsWb3eOeLCFgd+jexHkWPz7nMl5Fr829z
            ////FwvVP/ymELAPVcnjExgMV+WrTB293dqZJQvy63NtC/ju0d7mEIoxAMXxq0Vu8M1drBwxfGrRW7wz
            ////V2sSL3/znMIRnkWvzb3Mq5Fj8+5zDg79G9lgX4unewhGAvxdO9iRe/8AnOYRyLX5t7mIlruPymEI
            ////kGK7JXoi/c/v1MSC/F072Dhfi6d7Ei9/85zCEeC/F072MAX6dzAS/reVp3sYL3/znMJdOQvf/Ncx
            ////IC/TuYCXF4s9z6s1VVrHi4vhDjvhijezCEfJ26H972dJO7/KZnlxfCHHfDFG9nIXFxZ/d4Z4suhP
            ////Al/4dzOoMV2SvRF+5/fqZkkxfU67NPnB+Vz7mcgY3nHZFztj3eLMITkDF8atFbvDNXa2lQNdXxth
            ////Xl1Z2EYU/E/Z4NoOGurx54+em+29hLpzSD9Ytf0oj/3eU0nNFM2nWl1ca96nC7LHRB2NpWawVhYY
            ////8fZY2NjYwmFr+c4/JZqyxFoZKSkFr6lEVHurucQG5ULbK9TOr5zj8lmJOKLRSFlgLe5CVOVDHEhy
            ////9z+5pYcPE2YNCdgH/wD02UrGloa0m0pb+sFzgUF46UTzgxQagGMdl7vDXblapeVqlcNxifrflryV
            ////aTh/q3fmstmi/NkyssRyDzUDgXqcKwXPa6D431dzeyQ1vC2MLsvpg5BPtSWmS8MjzFREUQCZPTGc
            ////qNlk7MiReXikFcDkzZ7K8fkxIOW5yj9jAzY/O9+yL4syVQKlWFH1AHavsuV8a91VduXKPLs82eHg
            ////yBuGaqfzQzHPT4HIKQi84IwQfsYGnVZxntY8HOXQh+xgW7o8P8GiWiycnV5NmC9ZZkhXHi7H3Nz+
            ////S6dcC3iRgfMe+imD90YYWh6nPXZnvjHybcXnG6uhFrhiK493e9+VoZohgrLLa8ebu0wrbVRDflO1
            ////v/8AE3XuITTl9dByU4jowNUgNip9LzoUQj+uAsf9Fhx4RjkMBzoA9TS4CO/+ibLqnvfZe1aRAhqu
            ////7f7nabG1Uw2XU9kPw+FNW5hMi9ouHxJaTgnTnTKfJ7HiToUpcYEI5g8PsxrAbnY3QudnyNgk5SkK
            ////8H08OA8vb2q52jHw+MWrhTDZdT20CCjV1cV1+/W3P4TCZbPPrLpygX7FOH2tpt+74HIKzgc6EpA4
            ////OClIef8A86q25szbg51ZYBWrw73OyVXOzQ4c9qoiGhrn5vDzflg5kYhkarruOMuixoPwGC/h5DDh
            ////1PMp/wDpHF6892unkOFvzM8ctg+XANXc92Uq57vDixzJP3aZbBB02GAD/wBKK9/F7VFEVBgvnh8u
            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
            ////0arK27XkAeQXKgAB+rAB5ITnZOS5ztcOTXfW3EqQYoJqWslSYv0hek//AK0qri/X5t29L/xHZnb2
            ////847Ufqtn/B77PyvWOx//AKGz/hP/AG7K3tjY2NlluFq5PJe97nvdVn4fa36/Ddifs8W1CCXQy16a
            ////3+GeuxkQ5mFmvfxlyMJe1tRshh111r9MGsTuK8fjjyMCEP8AL/Df+E50cvufurub4YNad/fouqdo
            ////BjGusfU7budBhVltbuR7Md+AGU/qqw0mTb5Ms9bxCENePLbqR/N8flNsYXdVf5wAsZUzVkrnyowl
            /////wDotY472nKR9CFJ93fVw5+d1rQDPoM/90iaUH9aKBr+y1jdksvabEcXBpJnRvs5VQNe+zhzV65F
            ////RvC8asvBgRZaSkGCqB6eUDVX7UzeW+vc8hoErJsFwtP7V5uu4y1OaZpUGsKXFIWvtCooaMmni9oH
            ////nkoTSWjg0w/aDXm7L3XYm5saDcfVX0PTgP8A2rdNW94KGpdTDtWLv7qndzTATF/O4+NUcj90SzX0
            ////PxfUv2o/v/7zScGNEMbb53aXWMbNRvHquVer4NeUaOlzL/CcDm1giQ6YkvN8llU0ya7ecUfjQr9E
            ////dE2eFWZkfMvSwTPOwl4sUPyPNMoFYW/K8qJH643Pt3c3ua/K04jLk8BMIbqpYGk9KMlYfdCojrHd
            ////5N0n5iZ8YWfieDqYxkan9pzqmKGR0L9zMb/ZHD1VFYjuIlzjnnxbzONS66cCGiRo6cBCGpzieawU
            ////0Wf9D1Vd+1lhe/8AnOaK5F0wsrJ5hjT/AP8AyMnlSuPo/wDcvm3vvq4raVC7qITNU7bHHlx5GrU6
            ////jHICpbrnY77qobcuVlfIsfn3OZLyLX5t7mIh36N7CEt5Hqn597mIhhPy16Iu3O79TIuRY/Puc28O
            /////RvYQljEg/Wu0f7TDQxfGrRW7wzV2sSL3/znMISvkWPz7nMU5Hqn597mGB+qdo/2mJBfi6d7CEsD
            ////G847Iudse7xZYGL41aK3eGau1h7K+Ra/NvcwhFwxX5atMHb3d2plgYrsleiL9z+/Uw0O/RvZYF+L
            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
            ////dzCYRBv1S5eTr820hfx3aO9zbGEJQywO/RvZG23kWPz7nMIS/wCb4/KbYF+Lp3tq5Fr829zLWEJX
            ////yLX5t7mWUtLGOXdHLuYYHfo3ssDdRBx2ZeNt8LBCWB36N7LC4vhDjvhijeyMuL1mfW+vU7LsZYF+
            ////Lp3sIRgMXxq0Vu8M1drEg4ivjo92S+xhHItfm3uZVyLH59zmEImF+Lp3sT5Fr829zDAvxdO9lgd+
            ////jewhEgxesh364vftfodjYkGL41aK3eGau1g4X4uneywMbzjsi52x7vFhCPBivy1aYO3u7tTK+RY/
            ////PucwfkWPz7nMTDF8atFbvDNXawhEqXLydfmywMV2SvRF+5/fqYaHfo3tv5Fr829zCEROH8FL0z4a
            ////YbfKF7PVDFJqlCTFGAAUui09Uwav5Pvu068cGixYFo0s3VHslezNnvaZpLjejyYIUKHBdT4YuN7C
            ////Xt8OHutxhBGF9VQcbYv746YZlnJeeA0oExpuRpOEThfpDtMpOlMAhpvi1hAxes4jXsdVqdoY8XNa
            ////N3dpurfpEI8nlSZ9LAGVDg5FSwXtRbBc/ljqqZGdS5NlfWykAAyGUvh+Z2m9t3IFpb73Yr76obcu
            ////VgMqCpN6fTCxpi5rsvauLI2OduewhaVjAyolCWOAHgbMJLZdPD4YoMBwnLx/1WDGBRghAQf0XTCz
            ////Lf5OubfS5eTr82EIwXNPeYBh1Fb+H8R3SvMisJpZLVyho2XAUleVKgaKl+UZi836LR4/gxvhU/xa
            ////EAxesz7dHdre1FZST0jSSnMX00rT0yP0iag/7w6L77XwszMzY4bj6qG1LTyA9V0zH51MlCbwRTKe
            ////YBCwo8VMF3mOS89yOVyVBwbuVyeQ5znOqdF/Jje9zoOhCVBp4JKvkuoyjcM57k1BUF0wWfGLuSlJ
            ////nS/L5Man/wAWrkvjFz7W87ipLxYIKCCgn1gj0l8qGjJk3978V3Zcc5LkuBgpr5whgpeERwS8g5Qf
            ////Jpr2xQ6LqS/Ku5+Rn7DHj7Li3t5AaDj6VI6FbC8zee44Qm3m9RxRnUKglnzUPp/peVCwr5fvau3x
            ////6uhyqSHogSw86XoHl3cqsw59bnQhGNdboxhGFj7W8vczk4xxBR5Hk6b2dBT/AGbb51whFuhyxPSC
            ////LJPAz6iOACnoKgaLdqxcWaL6mRMjeEl4nXr/ACqonPMnAdLadiWC64Yu4AuqPTCsHXpKY9Ie90L4
            ////pVb73vfa9ufBg/1g3Xd+7O6yrfJ0v5R9M4YpGjkMINKBrBvB+r3VPr2cPwErGyas9XFV7am75bIA
            ////pL1Co4zH/lUkSfPAmlhHBhUYVE8rH+tNmivS3U+ZSVgS1zkpuBXBUpRRnFeaKcp1f4L+k1iD3Osi
            ////62D35INxukssuClIj/o68n2ftTbc+2pryTRy36FnkmrOFDg/o9eUFTCbfqtYrfXlsbres3bX2SEA
            ////WinyAPkF2Z+EJnTk6lTIysm/DGAOSjlD0B2V0OzEEqUoSx+HyoWcvk8pG5XJc6yD42vdDzrKhoYL
            ////10dVfve7Tbiay3OMnLOr0sBvSQ5hxcrtfjdxbG9qlygVKUx7nY8sPB72hgB4alTMnPXSe4q2vT+v
            ////YB8G0ozTmcPpTBD/AFj9O67XxBhpw/bo86tXc5sR5Orq8YBeQJjjw4yeFjPxPmvGCOUy8cAABdbg
            ////xrjZua2F6QzDPiThkdcPYqjEDE25nISd5Fi1eFKeTgFJ9ZcVJrHUj0qgl4K+61UR4cbW+JZBSPCd
            ////UTHoeNN2zG0qBhSJk4IN6gfsv0mrivvqdBmIsToI5CmBIPL0Pd7vBl/G+IlMa725GeWIylN3ELD1
            ////IlUhsgHMnffmr9ywnKkT/wADCQczRXr5Vl5Yn11VK4M/sfyy92n0uk2VXPi1FS4aaQJqRMYbqVAr
            ////gprCcqp0x/unZmaK1SdocUMalGs+k2x780M1bRuclkcP9c85TjeHuvutfFiHgYnnPE1aZwxc/wAk
            ////lbXrClmnTLCnkNQGA3Xwm/nuGmqR1JHk4MAAModqwksax18Y2xc52kvD6eMTNLH0XBYxxecO+pub
            ////5leUuu9eA6qt199/G1kfTylR9aNXbp4uz42PwMFjtEYO88sW3eSLC+5AAylIU/ukN5mej5q4yPzn
            ////JeICwMpFVg9QmeyqhZxr2zizwY8Y50ssKSmFWR6HC8K033W6dbmoGoSjUupzxdxc6zwYO6VA4ofa
            /////U+UL444VaIsC6oWUgTLAzppoEfjsT0T8rpaHzvpYBEzgwSlQHfR5n2v7oy7e9pfmz5+owSwmgrw
            ////LgATBrBTUK7HeUd7cZhZSDP9Vt44qzsl6eoqEamhg+WrjQ6FrQW9xwxyMsMSwlxMuiiwvyJFXb1p
            ////nKftvXpdL88iR4qyTJ03yx0cV9q9jjVXVxCqpp2OziJRYflA8oZ0eS50bcrrszeXmR5+VUt1xHQZ
            ////OAnjy+oGk9LSy5aOH6eMdtj+/wBJCZxERZKyeTp0pRKypLUuklHKoiSq0ZIryn8j94RD5FcHl/3z
            ////3/z3NnbW6RYn7tRxLSpitTB3r34JIoKz095hpK4E06ocVEtSUj5PAThhUUCvRsPY09I9D47anwc0
            ////nfO9Vo4dos03twl5u/wnkyZWWCkpTj/GpD6YS09L6SqPESf606J12WbW7ATZ84KZmdqhGm+nIkrK
            ////MYwVwp6amqnp/wD0T8v5MTVPcRUP7ieNPmnFFvb+IigAzcGMnw561QefQ0N/A4D7QqKBriGy3xoJ
            ////8KQaoubEmg3mZeyfK1/spYf7rcTXFntlQTNS9kdJUGo4nlVBVNY/S9ceM2emfwnEt/iRMvN8MEmo
            ////a4CoTjJ/SiItpeHEFhPSEtY6XS82vLFq5Pw2HX7y82PznH5Lc7Z0DWFTmSq/RzWC5b3XwdXbk1N2
            ////k52kg5BzfTyLCPNph3xPUEuT8qEssZqwN8rpLI6wrpbn/tzpaPDm4ky462dBe/amT7083O2szY0G
            ////4+qvLDHj7Lo0lhPCS00G3B0tPv1Xxz5Y2NGM/grwprjlX1p56LXb3tJxL1IP9Ff38poZ5xg1FNuD
            ////iMKlcI6bNGRlkx3+nl9UBmrFwDm3ywGG6jD5UO7kfTohbCLd/vg5jSaa5q8lQSA9P0eqSgKqhnBX
            ////kX9IdKPWP97WVvfXW3n1kXQlea/TCgwwiVChgr6vvS/jY3oK+DrCJ/8ABTkSpFU0BKcsGpQGzWDf
            ////TOiVR8j+lH1xsSc/e3eIod59Ql7fDh7q6HznH5LLGE0vWX7M/nnqsYkHfo3t0QiPIsfn3OZaXF4s
            ////9z6s1VVrIuRY/Puc28O/RvYQjAY3nHZFztj3eLbGHhfi6d7LAxvOOyLnbHu8WELd13/F2MsL3/zX
            ////MhZQF+Lp3sISykybfJlgYvjVord4Zq7WHsr5Fr829zCERDG847Iudse7xZYF+Lp3sHDF8atFbvDN
            ////XaxIMV+WrTB293dqYQlXznH5LLgxX5atMHb3d2phrbeRY/PucwhHy4uLP7vDPFlgYvjVord4Zq7W
            ////Dhi+NWit3hmrtZYF/Hdo73MIR4MV+WrTB293dqZYGK7JXoi/c/v1MBC/F072JBivy1aYO3u7tTCE
            ////YDFflq0wdvd3amJBfxHaO5zAQxXZK9EX7n9+piRcWIlz4caXcYmEIwF+Lp3ssDG847Iudse7xYaG
            ////K/LVpg7e7u1Mtpn5dTmEIiGL41aK3eGau1twYrsleiL9z+/UyMMV+WrTB293dqbAxqWvz0auHsIW
            ////SgE9FnHwjlc/uaYJPi+jgeufHBsdeKOOGjI0Jrgvo/MaT35tN/jHI0wI4rgiYMNGrL5t3h6DePUo
            ////t8OHunsGN5x2Rc7Y93ixIua6zf747H7mZ5c1o3d2m6t+klhWXb/8TSpdPYua0bu7TdW/SHlYapU8
            ////EHEa4fm4izDlROXI+RoYPxoXiKUMZ9lLGY4eci77py5MrUnnA58KOaEejyDR8OGLqmC9JKXYXVfq
            ////m3XdU3buNnoH5UPfbPT/AAr4LAoOEY637s+bOzJXJbybk4YJkz6mB0koO7Kmlu3Hzn9Uot7+Itzl
            ////lJzuQSpcEGVqlhpzBfZk3osi84oV+lOHZYxtpzLPnIr2Hgr0jScnJOHMK7UZMqioePnNOe1ubCBe
            ////jz34/UDmoLeOp01aNhlxaTrtUuT3SOk52M+MeepGPq0yVwFxN2XvvbkjOpK04szmyqlIjDDdGqCp
            ////gntf9T5rO/I1e1DnaSkVBAVKXiNJyUeDG4Giya5UInyf60y8WtNiBO/MaspaPhROgB9qNJqaawHD
            ////P62u91zO2EDE2E3LSlvauWh3JHxx08lE0rSCaVWHjJab1NbzWC5+Mz62ZEqF4IKTakTphwAcFUOz
            ////VW7MlcGtclqkxsrVDodUXvi49YNdllIpGks8QJvj8lqyTj7n4q4RLOpMOMjExyZU6XVSawVwpBW0
            ////Q1hyCcyWfLdv8H72ZY5Hl1mOa478RFSKSOJmOfrzCZMi5R4KGjg03s6Wn5+PC25pmWJyxjSOMCEM
            ////OAO8rgsMz7IQr3NTShWEYxQmgRwBi/ZXu7/fotZWYlH2Oob2iGFaI2ZuLap04jy4s9XQ0+eGSOTK
            ////zPEP0wbsrtejfVHG5gKgfpQ/XOrujvxx8so0M/RU3jDw7oaXtc2OG4+qrI6vA+hTwk+qUMoEgaDu
            ////zmsKuyeNUcTTxI+VAxWcCTZwIbr08qoGscfRcMb7I33WtVFLP0SwSjYXhf3eGXM0zTflTqzKwlgv
            ////ri5U/md74xyYmIi3DNJtcebO56zSgofE9cj7aA0Kk6Uho5KiUAzguvOKJp/Gba/I0qSPm06GplKW
            ////QBEcnVguEmqn8XX6GR0ZOb5PwyJEdYrdhJmDnk9Ua633+DV7lJOgcPqI3Si8OY/RrPPyassPE25a
            ////HzDgyoxPPCr0xTsRbw0Oz19xP1berRLE4Mm5OQCQQUoB/j5Qzvat8q52jho4PRZ8WrPmuyQaDVSV
            ////GFiDUQ2LbodbvZnmFkGkGGFdTjV4svnZe13A3UcWdw+/jh9CstHXpE2zABgKCmWWOvMqSDkoxjfL
            ////phRhwMI92yNtVdd72bZw+CKJ1XjZdZnxswzi8C/9HxbrL2RhqAwvqhogx83vvs3vtuuxDtgOWz86
            ////BUltbklnqQBxxP144BPA4fBt1ba/HTBgPTIPXPCGoLPPxvtezVOGraUXivh0cjoWsBMKgwIvVdQP
            ////c7JxVrZxLj+o183ds5Ozbt6kh8o/z3X5Iwhq4rjWzaEWaUx1XUAufdxZ4urhayjCocFFcML142/y
            ////042HCKn52GmLnWaXWN08Odef/loOSnTvEWRvU8V66+H5EeH/AJ3Hp8H566ns28Kpf/U+Frsdehhp
            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
            ////83KaQCBiCABtjnq1tIRNBBC+z6Mj3ZYXZMTZa9e1RcVflT2nvWquLsPCy8VUMfqzYvIY4uq9k5tH
            ////+uFtjprtxcYnM6iciCYQdRPNbZF8PBz3vabMFBCEfji52ezRC22DtTbi6eCN48YsVvc2Vtu0kUMS
            ////2/Bg+LHPWWq29j2bhIeTDk8tMM/J3moZDkl1nWgv7ovd4QxMSMSIBo+tB736OH22Y2mCiBDEpng0
            ////93HF0cUNJgIDB+tfQVVu7tueu29ofxyKzPTfXyynOLohA1JN/dybTT0ynA5hBTSpcYHAq32ZrX7M
            ////duStqxywCBCOdV6mOq5/lrsstpKxUB9i9RmjV35anYmqjLQYCkGAF4u87MmN7ai446KJD4kCZnUP
            ////VY/tDDws2wbjICeeWGGjQmqCjBCYwY1Pq4g+9mebNdZQhO1a4eOiLORQ61w2XXDi/FWzJOfnnVjQ
            ////rwbN3Y69rejQ8Q4DvQZ6aybyw08rjofdOshuaugDU1xWCC0rqZw3s9brte3Lpa13MvkQNLyfSR5M
            ////UGnJp5rpQ1j9EXPq2eDmpmIMMVsudn27OHN1p+C/QaKWCxKQUFw43o/BTNWS+NVVVWpp7a39gG64
            ////gHecAoLCwx6+sx0K9f52F4GkBRiDuxp5XBcXdbq1xaGS6p1YINz9N1nEa87LJfqgJpcUqIb6V7TX
            ////qx1Mwyx+lFcDxXVvt72r1o4cUGQHkCpOFP8AV1P/AOc26OMsb46gjQv4DqwHVvq97mbQRrq+tGut
            ////ze7LZfW2npQf89tf4sLuvTJKALCiYwLxqDFvzYu6xuE3w2BWi5kc4QNNT+npH9oi6v8AhQj4rY2e
            ////9u6awqJtGNE4A6rbXHfCGNzcPfhset5j85AwVQPSkj//AG8R3caa4NibH9X1qqEHvyC+RyI3YOx4
            ////71zx+DDngmxm+mHk2DLKXknJODJ69LCBZTVIH+j3Kixo1vtuxRL8JRODJWdqcCSsqpuZSJMsZNo8
            ////jegTSkmmnPwNQ6VWNW518Xs6/g6+bxMnOhzZ0eUkvJHgKq8YXpYFTSl0pKkjhiekKn6lXcr7rXXX
            ////SbzvOaLM/NLzf5VS8kQCOlHC5qT6WVTcKeeIel1VHr+/82pqmNt4jxfIyaWZ5SnpNe3XXAdkRcIi
            ////YkX9+JEBi37DtKdG9mNXXCWUgrysm18YX7qUMmKN1dUX42oTNOFhU7Mm/wBqKBrLUlxzZdNtbXqn
            ////ANUMi5SfstQhifDLw69qNzH9bOwjjXF+kTWT5Lq2Z8dz2tLCYB/hPqsuWeTtg9WwfXNdGyduh/e9
            ////qic6wV/TklQf0WrLD3Zmt0Tc4Whf1Fu33wamfOkpvjYgksaXfk92OrK0UPQbx6lC6ETPkOx82NMF
            ////h2iVE18bq+lEfddU3oiW7/8AIbz9zPpYx+WHNjR6av45Tf1YVY5I6H4zt6BFu/8AyGgicev3UugI
            ////YrsleiL9z+/Uywu6lrhk4r0bWEci1+be5iJcXFn93hni0iER5Fj8+5zb6TJt8mT/ADfH5TKA79G9
            ////hCWB9bZfHLGzNjrjpYgw8C/TubcHTZN12O9l0wlTKAxfGrRW7wzV2tpDFflq0wdvd3am/LCEUDG8
            ////47Iudse7xZYF+Lp3sNDF6yHfri9+1+h2NlgYr8tWmDt7u7UzCEubYHfo3sjZYF/Edo7nMJdbGUBi
            ////9XxCra+vW/QydsYTCKBjecdkXO2Pd4sSDFdkr0Rfuf36mAsSDFflq0wdvd3amXQjAYr8tWmDt7u7
            ////U2+mdk1PYYGK7JXoi/c/v1MspaWEMm+GTewhEg79G9lgX4unewcL8XTvZYGN5x2Rc7Y93iwhGA79
            ////G9ltM7JqewYMXxq0Vu8M1drLAxvOOyLnbHu8WEIkXF4t97q89dVjLKXLydfmw0L8XTvbbyLH59zm
            ////ELeYKgmqxXxyWV7PDckDRk2rsYFn2Wx27a/Iy9v3yLX5t7mXTCGCIKbR+xgZdD4VZ8lljcr+eQEC
            ////VnQJgig0BMugp+C+VuW/y60Ci+pf36owdqfobnvz8JgpSTjyDUpwpvlLAZbSPQcKNFjPsCxJ9Ixx
            ////+u/ODmVt7AW7Ni2nxLzdOXXHCwinb6MRjmOGGFebJiheIMCVGApncao5bmAnAuz+/iGKGRqcyblv
            ////OElmFImvLHXF/tJXJix66mdYc9wJUQFNNAjjjGLTNemvd7mpba64qwnLA+mWNcFvrG9YW3H3TWhm
            ////xwfnpyQaXk3IwoakplThgdxg373ZmrGspakg8sYE0Drv2N0OkmqArXXUNADD6Te7iGa+pmfPhNUT
            ////Pogy8lggADF/asTnvr44c13dPaLw8TswsRoBwZi++hrKVFl787OQ8TDGKhnc0d3w3/y3KkKGEOMG
            ////MNx4ZOKgOALB9YBJoxMcwMY7KWwbbv7r4taKaeaoGUZd4Iow9NCJorihm4rvfZNi7JxNm+JjDdG0
            ////45Yqoeze3nY8aq67ry27U+H/AC0qSNMQ1SNDhyWUgOx0THMYoMHB9K1q0z0a9o/N4GNF3DSjnIkr
            ////JxYj2VEMvw6y5W4zve1e5eyNXpGrnRq8EB9qKmSprDk85+tEnjz6QTHy8mxILGBhAjniax2VUTZW
            ////lcOPk+l8vGJznNAPOURiSMn0PU0KPKh70HBqvR6u6tLd3a2Lj7RRURefhoilATIABmfKUjzpW07R
            ////djrthriETDYew2QRlgZ8sFSfCxhROqGqe/yj7oOuvqciGKMMoAj9fQ2cXZ8u0CTFJlTjxhbDFfg5
            ////737MelntJs+TCODAhA9SYKu0Z9+R90W39vb/AJZ5dbsfPBySG8lgLD81Xh9G9+SkLpDJsbSIfoq/
            ////LdZfjZnhmqMyMDdksxeGptwppwsa6tPHlohnaLfiH/KjXSfqDxlLRT9MXIhenQlgDJVG9TDClMze
            ////jp/1uqPjsrstc97dXU9Bk3I1HJycQQMHTU+p2M5+tFZ3EbWqtzR5OAySmzOSwoXgL0uTWC4T/i+k
            ////Oyu+/OlqrI9AV2tYsQ+4WNVPpduz7Gxt93r38T4ZyBnPBq4Srh8aS47q/LgmsgCQ+TM/pmi9KCKL
            ////3+dmWEb2WUoNTgtXnrZthmvc/vq3OxRbVhT/AM8/U5sdb2/T9UEsW1NN7YWAhwJAyHt/OeYkjogv
            ////jXprf4Z67G3FxXfNVRji8odz3MHDFGo6Hi6u/vysYL3/AM1zJd/p5fVT9xr5/RbhBhvXPAxRfxo7
            ////3PsZkrB8Yr88PQ3YtPf4Ogz8DFpTNCKCPZfXjhly212OZHKCToKoXGogeufmg7Rkx212VNNDxEw+
            ////b7x5OD1OsNvA+WuQ+tclVeWiyCKHTC15M/FdeR2Wt8pFml+epwcfldlq72stLib5SLUw1COOD9Kj
            ////xV542r2qSNOdcCaBHdjjxmrve91jb66Y6EYMRIDnm/VQvMr8h4kk45HGonTToB1D5g0Dg9N5w2d9
            ////veyROtpwbuPOHuhKZySQwRYaipwBvpRYy/i2qN9tVbNwujUXXCv/AKK7Vw573Ohke24sI8YEUoCJ
            ////Ur1k82WIt7qnMc6YY8eb5pql0ulEoRYeeSF1r3Ym7ScyeS5yaWbdelUfdQHJUdlQcJ+73/WnGhqN
            ////83eYIacyUgKkqAjkZHo5pxpeUvtt/Rdlb+92VzdIJSL1KcBTSAAACanleikosW9gKJ7uNjrIM/Yf
            ////mJ0ypTh03BLdx4d3xHHrL4ZOoVZGPiXu8bff3tgZsEIT12S26vLbdd3M1S5nBQAepjojCLrWDmD4
            ////2EU3zMKoVR2XZovZ1MQ9RuHoVJBdU6ymprMkfdDddGLyQqpyHct/4INUHXPftaMi58YX/wBTXXfj
            ////3V11xfnedDPgfgOp4UlcdbLruvVjKRBJ4MMMVTSA432YzU7I90M+OEcdbcVvhnCgwXMPnUpgQCIx
            ////c1I+JYt/y8R37cWhu5CiKD+fLwxXvxbt7cT/AIaihF5ik8I36VI/FH+7xHujxbBsTY24MTMPL144
            ////8OFDQbNi21szxGOoOS4D8y+aqc6V0y6aryRngljIcmYVFAr0IiLyoRIEvSn7d2uaYOcRI2fJGkUp
            ////SDWZ1JcS4BL9qX5NykVHnu3pG7Lc2n4N8+CLMOMDTPAenqi+a9qz7K+LntKCVGHrgwxpY6VGMGlD
            ////CjUVS6+6urFbkbHxxNjegnU6nIjOWn1X0TdVt4/sxsw0gRsvKpIAnTRuNKvxbnIFopFykpXfVcau
            ////Kt1VjnOamcwYdLOYANiS1A1xXVla5k9/VSTlt1LwP0a/5Uszvtg1P+bn/dwd/YJ7/utqrCcKTn8B
            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
            ////t2O669qxiT8y2kQXTTkqJ2lY8CX7KVLStXunMDT6/knprIktKcm+dLImcfAyYQKUqyqLlcK7NdbC
            ////vx828J7U3JFQ8T+JA/2dXyLtT0mSF779jXai4o+7P6ObX3dm82ABLATbE8MaHBWXmbCJhK8qhjRO
            ////heXKp/aTJuo53cXss5wh9NNSPlVgvX9qIFcJfDzyVY7L4RXJecsYhhvRcmwDxxQ9qvycVQje08E0
            ////EecuT4wMqE0dKRzBv2Yt2HNxBvOrXtDDXfE+JiXIBA0k1fjJt69njuxV4bV13jDbO1ssRL9oNNsX
            ////mGOT6rg/zoOqS0EEEb6Uovxbb48ZDEwfVTdgwc/tC8oQ144wbq5OBzHpn5eBkgVU5LEDo/2To1US
            ////7/6i77YV2tuknzHpsZOIYKOjLEscDLmsKK4SaS6r3fUXHdo7D7X+zjCHIIDZTk0uZPEii8Rt/sp7
            ////R2LkbQMyZbQOILZh383zVM5P0IQg1L9lUPPvfY+65ql82cq81P4MN9nKygNV4+KtD8bdqg+aNJsq
            ////GNgspFUHCCv0kqlnocPvc9+LPEs1fweybNzLU5KohOQeVsIKqBXBjMl8BwPper5W6d2Y8jT/AOtH
            ////slTx+1lPhpr1J0v9V/aQTEDsnUNOmoz8jkpg+DnCBNTsc4QZ4wDsHS5HlcGwr9aLGrJog9um5z2h
            ////2Z+9qs80/m+jTIrc50pBZSfGP90D4vlCpZyXgPQzkjph1vTv62dZBrfiJdLnd54rNkcbO/0+7NRD
            ////f7RaYl94abnExRp6zVHb9ge0v/D6Yt9aTYcatIZyLH59zmJgX6dzYGjDfnsW+3y7mIhpY0K7I18X
            ////7Hu1NKO2/Zkt/tGrTcaT8+mKh/oP2j/4eeXXQOj6hLtO5t/Itfm3uZT0WNw93gyjosajyf8Aw47N
            ////G1mB2ruAt/tKrY7Gmup5apP+h1//APDT56ab+WqSUzsmp7fv5vj8plPRZz8y7/q+bbQyBv8AM1Zd
            /////EarGm/pJcf/ABPZ57PX8jo/Udmr8l/s6UnluebanlqFpDG847Iudse7xbY37wUb8y/W9swc59ne
            ////01hf11kyvEE4TBmw+nm6g/Ar0DPdxFHLbTYfHUm2hfi6d7KGQhmgRTFDTAUzo9mzVxfZkdXrc9tw
            ////X4une1hYRAiMXBr7T5YpDw5hnG0CDiMeO/D4SwO/RvZYwv5vj8pljd1ClDKGTtuDFdkr0Rfuf36m
            ////Ewtwd+jeywL8XTvYdTPy6nMrDFflq0wdvd3amEIkHfo3tuD9a7R/tMNDF8atFbvDNXaywO/RvYS6
            ////WBi+NWit3hmrtZQyGly8nX5stpaWMcu6OXcwhbS4uLP7vDPFlnznrsluXXbfiysjDG847Iudse7x
            ////ZYGL41aK3eGau1hCWB36N7b+Ra/NvcyRtgd+jewhLPnePymUMnC/F072UMIX5E9U/T/st+m0cv1T
            ////s+97ZTOyansLkAkgAOStogvV9bljXs7vC1vMTzzJ1UGcHnMS2l45NfKlBR5L/EOS5bBUs8Q9ER9K
            ////O/tbN0zkg1/PhFedyuyXR16aWa9S6KOvK4LLyWxY1gLiafF38F0n/wB7JQeTcPZr5y0EJHBk2aHA
            ////HWDBpQNJZkz24gTT/wDzvbfcy9uIrwwiYbAiT4OC+WIWvuO6e4iQYoSLGYYYYUzlPJRWhpZOS6p0
            ////kKTLngPaujfoByv5Vrv1PsabDk3KPKOTYstlk4AR6PK9KIBkzV0xj4txOsaK5WCioJwEZGBHVcHV
            ////cFNFsFw5xRQtt4r0OZGTS1JPMAqUslgcc4XK4X8WyxpzsMT/ANbXItuKD4PZEbUVIk7WZns6Hfl5
            ////LfRl1QsRDeGhdkOSJioPU1AEoEuWyzKgEn0OeAJ4L6KTfoBNPj8q9LZcWR7TbJP4nIIZPpkYBcUk
            /////wBqTS0ej/8AS311nrc02KiyTnBkkSQUsmAlJpl3oEs4t7EoO/t9a4i1e0ebSUZBUpl4E8Rwc1gp
            ////otguHH9P3LqrtxM94428K2PVaO76ec6S6oGJuKKGzFMQcDPDZbjqPOTuqUho5KMwAmkAnAAj+ylk
            ////3sO6p/GRnshhSqm+SiZwLpwgCX9KdJFulCBD9T/qDit7RXKVewUNSk2UBAQ00uawU0WLGsOXjl/y
            ////tldDLiczq+MZySUlxhispB/R/R5QqnfQDii65WSbveyM/wBNPfP1z4tgthbW8JYNEyeuGQf2d/gK
            ////8k28/EtpEIwykvHAFUngvSi9hRXAT5z7oS8WPiDRLKGW8m57lw4vEP4Ky8MGuy4M9xEg9O/ZN1jV
            ////dVJ85SSyk+Mgn5NyV9q6UNLaIV6DPnMfomtAv1M20PCyJwEYgMOAcwn+g4HdVw/wegrAwDRE54Tn
            ////nLisvawUNe8UCCagvnTHVh/Jl0ym3lQCVR1iR8rQQEpeL/JZkz7AsdL3/wDSN+mzFBpyQ14mjSfA
            ////JkDh6hL+yllI0+JOP1XVotrfCypueIc6qDLdPBkrK3sKkn/IK2WiRPdIbdOPNW4lI+UcvF5UGkGK
            ////NhywnlcKLKWFYCQWE/8A88qr8amXvWxibwhhMVBagri7T8vVS2ltC3fEiHiKBmIykK5Ul6K4yqaW
            ////JR9SVOdT+jXP73whHveyNHkaMaUBiYpygwj2qp+XXm1NzwWJ1Z5ptJxBkEUEBKGT3dqQ1sr29/d3
            ////NPJOf04LQqRoFxEbjNquyWNj7a44mwIqBLXKeY4ZBW0PekLECYDSYcml1zdT9OBJInJEmCcCO9d7
            ////3eGPQ2lLNPPp4I2Iq6vY7Zxc1UZWToHJRqBMmVODmMINZO7HxjhZaQ/yODTQhs0XRzaWXjbAw4q5
            ////Z8phqchhNdpadURgwlQiNQ9d9psds8r8sNJwWi6nXkr3PyVuY8oGgXlwaLFlffDi12iDRuoKnWDR
            ////drx6mRsHiJkkYT4YYbqphhl10AtJwUEISmz489mXfdFm2oKnr6LLCrz4vuZGoKlLTAxy+VuW+7Mz
            ////JUFkELqrKuHwx6d8HrDHj7Kvt8OHulioqDR0swzp/rPF+euuDq8d+K1sUFQEXqQhuMme/vxMkyac
            ////KJxmqq2Rq0Na2Fh119S5xJkhb29Jdc/imDTMGD9K/qr8kcuzTGNzNU6apRBrwYx08V2tuENA0dDd
            ////bmh73W97mGmBQQgxnDW68uyNbWljQbj6pGIod59QgywaBBL02LVGPGOGZrO8zOW4xWWCxJt8aFYS
            ////4Q4sq91z6cqguFBOc4bTXd4au5pa5ram4rOwjkwgX9oKqJXCccPLFft2VyfqOOz/AN2ysZff97y8
            ////qeauwoH8FlgMD7R2qL6nccW2tYpLCw8uC+vs9UTO12xq0rlCQlRTevGwr2nJkfbp0utabEdUGFDB
            ////pfUvdu4r97b1YdSEqGRujwQYY38OxXbbLWUcFAp+VF9cHfRX5cTO9UNdnBpeoBwarslmZ0beMzDF
            ////5Q3J5b3UwOpzMLt3OycfX5VV+afzPJvecPLgmjyjnIIkTij9JW0uVB4+sfqtJr/95u90PQVMf8HZ
            ////zTJkVgFSQZNpUqpVF0voo2pSk6LPEP1v0Skx9DPbjxzO5hxhVRNnIl50qlSVLmk8rJf4ydKYfKRQ
            ////vVOiIVomKUG17dySZoaVpOhII8lpKki5Xsq2pmktDfX90pKL6fvrsub5l7b/AGqXVD35H3Ld20L1
            ////2SBlIFqbt/B5q17N3JFwsOLz2dr7u3gQ4ILCYInru1krII8wU0tGLRTbyVAqqwZLwHPxlhjbcqc3
            ////2as0X62SoAAP6MaVMvFj412NEpeVByQcm6E/zhJHDnMKrLdF3XJaT/dN3RvuZYX57kwMksDTZbyw
            ////XMM9pNPUkuDied6KhafFkbjt7j7QH81d5aREgQ5Y7tN+Mlq47tJ2oh4Zh2g2qCTlwwBAYnKRxknI
            ////JzZJqxRPkE8X/rRUdbldpuvzMsL81WbEULqSaqBmVKuNUbb65Om/54fMnlkHgYU80hkpSf8AR5SK
            ////nxV/113use0/Br0yaoHTIM6khx/6NLKS57/ft9Ucl7m0X9FOzERP8OA4DD7ueEmrJtypP6c9sLD/
            ////AOpbW0JTO1kzYmujVPCnInNLm3FD6oaUYH9aJcKrfqKyPDmwnzPJE0nVL0oy/wDSTSX/AORVX2Qi
            ////1ui6pIM11IM50gB4fZpTpefhzsr4Og5pOR5EDHywJxLUiKqTMO7KZLGnwOY7Lr8eRoB2B7L2xndw
            ////eWA9CdNQeTz2H2i9sbATvEgau2DYZvJ5PoFS1G5qCaVDoSsqj3/OUv3Y66mPCc1UauilV/nKX4ee
            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
            ////jgXbEE4Aqgl6jRYt7fdGt8HcRa87+FiIkUGdGl5aclxbR15XRduyWqRNg5dhI6+kingTVFNUT01S
            ////PkuxqBpyWVMv8e91mKLdIJFmpKyXkGTTZb9QpSegvGlLC8BPnFD6oS8Trbu97c8Q1kaSSGSJiA9S
            ////XQfZjP3jC2r3wbJQTgrEu5LpslXnBxxi74mv0zv846qWMse/MjIEO3Anh7cHngrf8Qhnih+0wINJ
            ////kAgO7yL4tVTNPRLdHlQGgzqGpSJUo5wulJQFezdKEcDT6uiEtWqvzVNCaHLzD1AmMqepwqstms4g
            ////+Fz2JI8iEFASwSUtznbVCHZi30Py13uzNU5JxNNCUKXQEbrMWK7PrqZy2ENEAYlhjjkWfTBZ3/ac
            ////PFin3WluLU4NoHHG+0g0eTYoYKknglwBjEYRqtshxXY08J5vAKqag12atF2puZqHOMsSSwMEKGBp
            ////9td2V8c3EWshJOfNHlSG8E12E5l7sWLurbA3rdUVMh2m1aZfWmi3EBesPKGipGQfc1Z4P0FaJQVK
            ////UO11ebHtg6yxo3WFQak/wPHnVc+OVhphe6saiGf2j2WPGat17NVQVKUO3rovxcXVZWpLCwOrvq9R
            ////pjhTRsbu1IqDL9kg6fdkV8UD/WPzZr+7YzWVDQIofVDWZ8+jxiw0ws9sGBF4487Gapg+4qJ1Q1O8
            ////xd7o6a3O1Nd2Fh119S5xJlVW9v1PPf8AFMGnh02N6kKp+2L38eDnMHMGhuuBt1V+Nul+W1bS9Z66
            ////uPli0Wab2GGT4IQdN88Y1WZe+zTUzaRt6HefULKWloaX6Nly779NjmRqBkH89i4t3aGD4b/htn/w
            ////s1VBUurfdkf72srCwac666aTw3+qNvb9dfUucSZaVg/RcsevzyXR3s/ObGqDFZ4JNDBdeMYNYK6E
            ////H38WvxPtsg1QVPmY09cI67K3v1xtjBn3MGqdFzsSVUnOH+VE/s+O/dXkbY3TI7P+P4WOvX8xTg2F
            ////K5Uwaq6TywFGIKY1N67Co7qn6NOVpUkefwkuTH+e7tPDrrGjedAOlVHjeoGwrNl4rexiQZ99G4nT
            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
            ////lC3I0kHFkHrhvUV3u89WzE1PxEJSk4uYYF1AOFP3vdk91kXNJwkowTQYLnDU+jb4e5zUkbABxEwr
            ////YDh1g2Sfgo6J2fy0USwxmeuuLqVFTBRBsejbivxV2WsBEVARQ+qdqjltfphfiZkrB/CgxnAuzVWY
            ////q9TaS6p2cEHjO992bNiYh4GjylNnyw0y0fVceIOY5j4UnCGuzgghXaX1cXQZkqB+xzssXR1X69ra
            ////TB+0elAocFvjvtgzPEP0olMLDdihj0aWnsbDMaz63THDEqC3t8t/VQzHrA8IfpaHTbxV3VMjMBUo
            ////fWxqx7Xwx8XPcw3DwQhPXU8c/Dt2SDbnn4lxRhRrnP164eeRrBQ9/p5fVAVChKhjDZ9GeNemp78b
            ////EptzQxWXkmzjhhwHF1RP7S7Xr7mbZhQeffQ02rHdlxW3tuk+sgpawTOfZzV9/Ftfc15ASIf94f8A
            ////cFRR1OPuuvU4AQwpymrMOMFYcOzugyOQ5rBTgLxasuLXn4tbcsGgVSTaCvBDYR0glp5q3jJUzOQz
            ////QxVQ9cPQmHeL8t+jM9t3D04e2ysYraqgoAsn6YL13F3FuN7R7h//ABv/AM3/AMLPylBNSbJjfPOK
            ////+zWaceLI/ui0ehpuX+9/Dr/jR2W152ZXNjhuPqvcoGE4IP1PFsccLd0GiWcyUcpCsn14nJZNPdMG
            ////EtQKlVIqV9jUPvTZtsawghAEEPfXihxqYCYC6yNnF1m3Pc3j6pbGo3n0XkRnAm++EOkmqrCb8Q5V
            ////TjAmDShhMrSyCl4ecv8AvyTV2nJW1IZac2SeyUZw4pS45pcvzqkofKikXKyoefOf9us9j9je8AQg
            ////D+Zr3VsNMECdG6AIF0bdtXGaDS2FsIedS/nuTYjosABiwDNov5/onNGWEsxTf8GmelK/oyDLw9r9
            ////BSmy42AnJhwSovWzVz7pQ1naZGyodgcP+gvD62/oKCIyOL61NIjvf+i68dWjJm0vkugi+tQUof8A
            ////qt9uLHbZqvezv4p/iXbxOvX+VfzoliYeR/SnSR/901KGL9qf0kg5H2u6C17GkmQf7m8g5aE5YOlU
            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
            ////8+mK5mzQSj+KUsEdSCG+lPwrBn+OOyrPG5ujUsCBxxgEah9oK4U+7y7o6Kp4k/8AB1zGo/LA6ZAl
            ////UeGs7TKhUI/6lu0ujieyOfVBBkuGSTUsEfAk8rgpUzDDo5teS617mtbrgYq76vukciznhyqoLe9I
            ////aPDQ1WAZpS+d27Bo3mzPjBGHgi9RrhXnZ4LBblmVAYXlDPjynuuz5XQ4fFoHkesjFZSExn0/tT8K
            ////979Odp0Wj4/SA1AXfyw6oPjnyPa+Sq/oJKXqncY2aHL/AI42d+9neodaHn3ZuKmaogPlvg9+1z/B
            ////vD1HDYdfvIOJdp3Mi5frXZtz2JiBPy1aYO3u7tbDRfxtG5uCQA5kAp/D6HkflJ2aMuZeSVm5Rxl6
            ////VCwARJ/RS309XUPutJSI+moZO5q9zwc6aTchxFJBka4CWMqi/ZTRnCvQMm31u9LK311/yfk5ig3H
            ////+fznQE0ZQOL040qh1yUhgpgpVELe39H/AO5USMeItm46/YaHlDzIE98n3vynor26ezcVeBmHDBya
            ////NJ+JfRn1V0p8OdysKhM4TKnPidJXColC2FenjmRW/wD9fde3LudTnIjHyakmpYwABMwa7UtGTULv
            ////GqN1bUVnQ5zi9LdVpivYSdhUsZ7dgbnZ8eNpU5v/ADVZwp/VAnKOWQx5KkGXNfSfb1i/0TmrdubH
            ////ted8RLT+6TiMC3NsZUZb3uLs7Pwo8QR98NRneU8cWcmWC3TfyclfPxKToeRhMccmXNP6UlIa+QUe
            ////P+ult1exuyMycwUj5pU/sBMA8vGKlRbM+3nO6x+JzOubua+Ss2iGTk3JdMBSiaeV9mLbd79l7SQJ
            ////Te+GT+Nubb3V2choETE5TbQa0fH4lh717UxMc4FMN2FRWQxqnIGKDX37ve/Ra1OedoqJoShNiTNG
            ////wAATBqWBrtJr9jvg1kMK6zrc3dVjj3V4242/CqSyWE9YmlTUUftnRa+ahhX607vRO6DL9ori/GLs
            ////vC7HYGQwqQJbqSfRM9lu0X4Rel33lUio3ENXDDNxTEWESz6DR/g9JEf86dnZ+J4pMX1RwD/OuLa8
            ////VroXNxJm2lucVBBkcVYkqAvF+1YMpKioRP1f1E7prXidcx6VErpw5OGKYIcDH2aVEeNGSGTwOO/0
            ////aYeIn+Pl65kOARxDtKmFGXv1h/pEAflom75BvYA9HhVdwiYVL89G/uycZGJKh8FGTxjYtt0XeL7+
            ////+qpvPTLjnGzwTaF0dYXiZ54CwvJ6WVwZeSn93lXCqptypztJ7JLy8Gk2KnDqvxgQU+CdKQ1h2Bv6
            ////UWI9E9C6atDUY/0abyhj4qHvBwCHFQWY45tx4zu7D7e7tiB4aIgPuuGcSM2Yj1z5Opmlh8Jib5tP
            ////OQnCUpZTPnpVDdF9AyDlIWXkvD5NyfeqO9KJKStIPQHTco47cjWJkH/6QvNKEnrHx8krPEeUzBV/
            ////QP8ABeQeAI6hk6FXpNRjY6Pc3J6ewJYnVOAk5ZTekCKkn9qwlN9vJX18OasZjm+oNJ1qOuAZHqiX
            ////w+GR/n9Z9jYcXLcV33Z+Hf2dkbJYMCQAHk2+YXzp2xiLtvm/Y+8/xHFwC8tBjTKtF3sL/DzTYr1C
            ////TWTgCGT+lKRaa+VBE+TzdCrspeLrYVXlp8K9I+UcuE1YILCGeQU8qoFcFclqmHnOl/vZJlohSajC
            ////vPpblEJzeEEWhh8YyOcqlHoZox2eDCFTmyghdcVWFUf+koNub07w7bprd7eTES3Sy0ExPUY1oYIw
            ////sBFCJhi7Zl5sH9jXLNdCJa88ibeWQgynJxSIoakYNONGsGNdBxUK+HPaH5Wc5GTaoX+Ui441tZq7
            ////HfiusjnamZjm0qVvSQ+OJlBVX8bWAmOb6vFaahOU9v0VUI48nu1tR/hUNVyeemLdOOOpHaLZl/Ze
            ////Xt1x3K4yHPmgpdO40NT4Rxjfw90WkhHnGQZUFwRyoNPhHsvauK81t7c2TE0Etivz3Wxu6U1Pft13
            ////1NiPJudSSQmGpakeI2vhhXHvZeI7OQ0QHhzk8358RgdCrCG7U0EQ1WAEqM0tDTgSuriOjI7xARhY
            ////U36NZHbxGupnsTR000YcEKNQO11ZbffU3NmRc7U6iMYoVkn1P2n27DM93m1tJLzwI68GCCqHACJw
            ////z7LG7yyYsrY6OuqLhzIO3HcWA1w8nC1MBfsJHhiRISJ4asfZWcESycnBAaU5Tgv+zbe6PfZVOUi5
            ////1aEMEmqDDnk37VY8nX3+9qfmD9MXcD0kXHB4di40tW+eycFeSzCBIOS6kOQUpQdqVDJZzuxp90PB
            ////3kxdUPFW0UxkzSMpSnm/nTRMXr4UwpadaTwH0rOi7zSPnulgvHAZNyDQQFxHTnelZfrZvAUEmn/d
            ////f7bxNz2+Ek/dIVJUE5VdDoarJuT6X0XJd6b25eJqCv6YV1SViT9x22+TQdI/n1ykmlQ0eR4pMA8C
            ////XK4KlmSxt+Hk6/lSz5byOa0Uh5wZBz+hg/E1SoJVLMDSomqRqzEqSt31PbSfmoertIGtARvrLJmC
            ////o7rgbs/UxRYnNhQ7P8iZ+44SyonLnIFUAPSSoROlzWFFXFuw+kO5nhLCcGexZQ01BXpSj9Gp/aiq
            ////a83DA8dfGPI3ZKdzmUTVIKf8alkYchKR5TCuyxPIJxQfD0p8U3/IvFTctZWTUywIKgJxUBHMIyh7
            ////Ktli0SHR/dkyNZ2F6QwMxOX7TtMgbs8Mt6mt7EREQ/4gDsgUMpS1wk+O4FlFclxZw0FPGlUKMlLi
            ////aXqwZS0Ww41sHXZ35YLxehNA9FE63ejCv1flrjw/E2S8lGCfMAoKCc7Gnmu1GS30yGit12ViSWqI
            ////6en4IfBAAGMf5hbXldj1uuZ+wH+9NnL4+PokiYpzP/Zg1m7c3fzUVidDlRAVIqpROO247uMdjTBN
            ////+aBnQUAZNrI1Bg/ajRn9X/ej/Kup2dtMm5lk2cEwcUgxgEoFP+jVYAcxJcMXm0YqiMpSSlAc6LOH
            ////0oYvHBTJY07JVGrjMz3fQ8SPDEE57U6yqZ473yxVIbeJ2T+VJYHUGoPmJtIeqniWiymoxcGSqMKA
            ////Ajl/rItidb0tbf31NHpM+TCOEwSCkSIjGH/auwVP1PxaWjcnJwE+WOKSyvjgYQ7CoGTXHGpmdREx
            ////TA2CnRwAf0l9d/FeRoLGABd54T4VxaXpgydHaGgNWYyGgPWm5W7Dl2goxMmmhDF+kjHZSpZ9px/3
            ////p3WPzNV1V6SlHKEYkF64c1gvZn+O2/LWwcmVwU4UOUw4+DmnaKn8d8GfiWKOjLBxYoQRxsF7Ljhv
            ////33waewgDYN4YamRIFPn6UVVbxItpxJEpidGn8S3SmpCkvI0Y0so5Qq+gf7KVMmSrvlDXfDLU0zTw
            ////EBkZDR5KpawlDk8Jfb2HDOiNTtOtmfNOqTqLMqOniqCeViaeU+jINz7q8u3PBpO/c5nynfnITUIr
            ////NXKoxhHR6CVUviuqkSBO5XVOlnf1tF+ytobW67ziIoSIBr5eYb2omIftHCw0MwOkjiGAnwHHRaea
            ////3zblid+cBMHWSeAyDk+aT1SWS19sri9LSXffco68TegOTaympZdNk2gkyKUgp5XotLTS/sBNP0+6
            ////3SypJzSps2kj0GRMnEzoomn9qNdlwE+dUPrdUVoY3wjW9zOpPkv0WcBGFOVlzUY69738Ob0u6rqE
            ////PCh2dhViWwGOmC8/vu9fxCJr+zo7SZvbny0ysQcPEwwIa+y63X4vuraEzlMliDUvX4O+7HHRXpay
            ////0oDVdDQ8Vd0OItCa4jdKU1WTVVi8b2fsLc4jH66DrA1rQcjyUb/GMkVMAnAuoOFzTn11cRqzVVtI
            ////KhOWvBIdMlrA4BJQ9qLYVkuha67M9ogWJLjhBjUVdzMNKPnAhDkm1UbqVCpLtf6Qywvrvdoa1Fj3
            ////5c4GmGFfT+YXTvziRzHwollgoKUspQDAvGp7s79eOLstbXGmXQRkaS5NBSwRx1JQNPVFXBisVC30
            ////Ri21162HMnMssLxg5KRUB6Dk2XNP9NrZXsByyPRP30+PFsLvIeGEEv4qzXoKr2l3pSUhkr6eV3ut
            ////j9yoeTe3FvbsG0bf/PgGGQnD3x15BQPKxBQSCoCpThUEo1hP+S5EuNegke7+Flfppbs/g+7+C3e0
            ////Yri9KSVKwOM+nPDGOy8W1OxuhB9zWtLzLI7znSU4UpKcf6VJuTfbj/8Apb5ARb4/3T3YntYuQEgy
            ////ZWndIiSqVJwH2U0pGe3L2hXWr4b2Rt46lKfNG8uLTdcqkMk+b7OcvE+klTAZKo8PaZSGnkVA5d8k
            /////L+3K5phJzNzboxcHD3rksFL6UZMmnIaDW/7prX7f8ZoW2Nd1PmzGNGMMF/zk0ai6y3bUzk+K6CV
            ////9aEAqjYyxXiqpk+/08vqq+2tpyzADeR9w+84BeVnniTSryNOhKRYKkwAEGUHaktMLfQ31uxe5ufq
            ////pI04EYBgm9biyw1vxwb0mfCMScwUSSspEbqDhcr0WaLFSv0DTDh+ZuRcqJeKRVL+TUofB/tKWlvy
            ////5mXthRhl7j6K7sC8MdQT5bKoqJN8cPhnBhRgCODmnYUXcVz2x9+NraTBzaE5BkycsBXfwqWCuFQM
            /////Q5P1Rrd/fHvYbM9I1SnQlZ0nKOnAkenmvT2Ddh6Yu6LSNlrq26KLgsgypemFR0rDIYL2YrDA923
            ////Hkae64EW9a6+VeYLGTLm2t+4pMGedfdVXlIfWBQ+qGHru73X99UWh8QJSFOUx8Ye2wznq0acWNpy
            ////lQso5UShKvAHfZg2l/hmaMVFUTSpcbrgM1tWf3NeeHGR5H50HJQd+dOY+NRzTVSzSkKYGGCGcAD9
            ////pq2VXMyS68vSclgmrBU4ORXk9UwoqZLb6q2MHJUJttNd9Gfvx5GZ+Ho/SgKkf68b7M/TbxixNxKw
            ////yI4fUM3pz7rvNM3PIgzgyXTVggbAAOFyvpRNjhx8moQ+S+iY3WOytP3xjGFCoRQR6F1fapLqhGp1
            ////r/QuzRY3nLknKk5JeUByUiWMeInDHsv2DLxfa90bL9zZ86V4Qaamn1gAA4Y7Lgyka/1SreLrqsnW
            ////WDdN9PJU9tYnDQhjy+hPHArqinytBCOA0RscDCPo3SioR/10hWvsrfU0KT4JfTJM58/hBXCipkz0
            ////X8oW/UsMuaD4NoR55E0UnTLyOq4uzKnYP7aqrZhKE5YMo1To0UmRSk0v7KWLFe33/Kyu/Z31tHbD
            ////8vT+75uBzZQQ/ibCJphQNQswph9FRxPKjBSgBouo7V7NZVY9znNY84DyRuWEIP6x4Acan4+VCzWz
            ////Rl5JLouVgKkFDA1C21z3qGbLZaztLhhmSpQVwn4Tnl+Q6L3wv5T97VavO/OY5j4X9As5bod3uYMY
            ////K6N3dourdpPnPVaXd7mqtO5zlpHTcuGRyAwEo5VF+ymixY12BHfjV1b/AN335bW8NiIkQ8nAIYaj
            ////6NxVrAwMVEb5Sq79fyeUnS0lbJuQaGMvytWAEpNL/afpn6rSUn66W68zsbcr5+OdopLIRxNS1IeR
            ////0jy5XtJYsa9PLGJysrfUv/J+Tl0WrTzgOc3AyclVLxew5SL9IdFppWwmn/daT9y4sTcSZ9Oc2sS3
            ////EGBCGHSkcu/2aPF+dsfHX4Yn8tC7neT5cfPiV6NcfZWkTE/4g/B5D1bLRWbnw532AFziDIigpi/Z
            ////cJLPc4gUjbqu0NzIUF6VMslwEEqCeXF5YNdlLfbFDZHiyDRuqTg4eoYGFTnhzH2b6Znq7n+Ldzvg
            ////z+bwgizd/utSjTQD0qlhelAmFTJm0knpF/njuaG6rr8QQYrGYevXPznor1vOFuCE/KgOwwm8gRvl
            ////0HTc5pfMGOBYHLaekEA8cqNJckvoBO2PS1y1rxZ27FI6MTRk8EmVBALgl/o3FuVj5MhRB0QVXjY6
            /////jIywMqMEYBBoeH7s1trb2Hh4WGoMGyowryzdeMXresVeEV4iJdnlslp4TAachnWS0lyoooj69Wa
            ////uvbkqg2mVB9Hk3gaaaOAdJGCuFYPG1P+9H4q/JjCoawCL3W6OMWetqlrEy080785g05wqwPNzINH
            ////SyCCWW5bGkuSsg+j+lVh3SisrLWLpb+TmbI3ZxmOYSNhD7URTZJLSAeZ+DhWqnguaJnw6YIZw7r+
            ////I8PtvbiH8JxKiRJWeyQaavAjj9HyDwlxYuawH60WLncObqJ+6/NWVnAXpESNlJ0rJWR6WnlTU4Ck
            ////V6DIS8lgrqiw9X+KaT9yScQ+if4Qfyqbg/8ACITDzqc6qfQmpSI+LhGR6emYJ8ZJSKmAkHv/AGT/
            ////AAlX7ccmX5m48fCYkDOcuKvLruq82Y3dJmoZCQBas3wpjgmr+4tzXZeJ5OVUqAJY9JYNgvoReSyM
            ////bIszzE0EzxShBkuvT4EU39Jlkl4B0fZDonoKq623uAyP+CxUhQ6ZengoBi/97aD/AL26dy3syJ6P
            ////g658ptEcaUk2csFWcZHL+1JqaaVCErSf9Ux9NR7sVjFhel2RBENDx83AIak9nHhPJqYqe3uOKsD+
            ////ZBGWJGnvpKVSnjPJJKR8sjk0sjyqxLE8myglk745LfReHEJHyfij+lLvvZW11sNlgVmrS56KEhOQ
            ////lEUeS8l5PoSWalIaeSPw9+RuaYkrZyEEwMmmpSSqIjJ5vBTRYyqKnY82LNDEwc4sqS+c6SWVIdWU
            ////vtJk1h2KON8K21MPBCIAYgsBN6jE479MVVW4MOXBL/ND6HzXZERekSqGVg5+7BNyOOsOwVU9PJfb
            ////Lv8AdOrPV+k+S8lZRqHRqXLaQ6qcMeypqbKhLw85lSUm3vsg3IpLCpRKu7I7jRic1zOYul//AEwJ
            ////sVIUEd6ajlZQKhoz9AJei4O92OLM20B4eGBhWJBHBiOOct1GVRK3iWiSwIerPRn+C+AxdXYUJm1I
            ////IMGlBIgAl/0pLr4ui7YwH9y9SFDBBBwG76Ul5rG7SKE5k25AvA/KRD/zrjLvsat85nPI5tMhAx/j
            ////GsJR4aPyaVS3nj53+qXwx+NrVQF6ScBpYYevumHh8Cem+nkuZhybNeFiME4uOCXdgvZjXvxs3FCR
            ////qkQLjdjHhXhVj9lb367mlqXHwm0zNIMDJKYdDVbcFMSkKJZK39ioTVXlBz8ZSSocNgs3s1cnATBr
            ////sr0ORr8lnTWLFVG61prGwijgJP7SbKks+S5EPQ1EjXd/FoE6hZByqNPBBKkx6YxX2Yph/ujbsgzb
            ////MSclJSKRMJGh0eV7K8yVjGqGpmqlz+ryocpjRyheYq9G+g/9S3Rty47GlSRc4JNeXEdHFwg8MsG4
            ////e1KnyfkqfVjzMWF1RMiMw8t3vXdo44t70aTUkJcH+OJ0QEOS6kKTBBPpoGGfSi2Tdl4hCctJqgZX
            ////TiSDkql9hU1g10UUM/rBXVEdHtvc/paL6trX2Q16QcrQ5YKaCTPAEpHv7UZwrt5yy7FZuhU2GFSZ
            ////+Rsj5FTzLKaOPKowqdPSXwY129YUUj5ISlZ9T+hN0YPqab8CiYglxSr6t7cXqoYe/TD0JqGYkNRv
            ////gUVb57ObnPBzbpUj4KTlHLGbEw/CkuUZYrh2Bp/3WrV+hctlzUPElk+Uc4EpF00LQDP9FJeE/Q+K
            ////7tD26fCc+qc40fwwVSAAJ4T8m9FpeAVasnvblHPIsrCpOpLyWIoNAFKhe6e7MVwEh6XfbxkxNDa9
            ////nIaHaJEyWDB2k2XWNFsLj7VRMQfDRUxmXZpCbtlhPzWhUNYeoHDfzEIlXY0/O5pbkWvKU3yGclUQ
            ////OPpo9KG+1fWP1RCEMWJquoZ/CjAJP1DzHZcded9mT3N0smX5kfOK51UlwRpuUFKIyPMGu1S2lIqd
            ////BoP7Lc75fWq/73JMvrqrc9oBARMQ0P8AdfP9nQaZeVJMFt4y8LrEIwIG0wodBRmbg856KJZJ876f
            ////5eMDEz68OuYQa+uyuHVxuj9SVZn32xdM0pOdKvT0oYM3p8mlAdDleySkLFcB6Yj8r/sV8bowtdfF
            ////rvSf+BbnJQZLqQKzPBIABSUOy9JIhWVC7C77ik1ZbCp7M9Q+BHnhKkzj0ueabLtBXsrjPxoI/wC4
            ////rvG+LOjs73zf7PEmnmR93QVZ/wCYWU/FYUF/xA7pTpKu7pn5Ll5r5N4YdUhZbIaVQGsFNJpbty8c
            ////j90pOp720mJtBl5UJpknE1VXMINYKVMlqsN93FT26BSX+Bq51AqwcGPnJAScBTzWClVtSllDDP1p
            ////6F+Mq/kjVtg16pr/AIKac6S4gKwvT5yVAWC5XsvxbQVQ9geO34s2xvrhY034HFUeVGeXw3WBVgO1
            ////ULYQwhXcnLF8Z7twdcMZwEuWExhIGR4owA42CYUaTcK7eTcr2XQ7s8HtD5c0NLIwTRwhqcZQ7Lgx
            ////n3Pz8Rbu1OZ8DpORLaVHT37vyIqgmDMF5TW0FUIn8lf8Jems+pjC58EvMPJIuTUhZzpfnlJO6Pwo
            ////zgslyJA5nSYdP/8Aaap1lbdoHs5E5HAthgcnVVbdooVgzTZm4t1PyZcwZyPgzud1JxLCOEJsVWUZ
            ////MwVcawaTaolrh8mnu/Yq7Diy5qNrkys78jVDoeVE28uEM5HBcGUpLqhHiy3Fjb2tyklupoyeT6G+
            ////y1x42V1Ob5IOe4ZZDGJmqjhf2otXVfF+6/Y2qsLjlPR/J+ZJ9qzy34tFTY+Z0r1iOPGHmR/BGgy3
            ////k8gzq85s4qoaOoFelEGa4t2FeOp9fQ6pKxW+pXf4vt1cQ+arze5tBAQZJTPyAAGIeyKZpBS1w+Tg
            ////772WuMrWcOLwJouCNU/wfU6qLNVQVAaT12R2muNXj4Na+AhYfKTNLd7jXiqq2vWKt2BcTmTlKWHq
            ////tCeqDJZgHrgAAf0bFpjbffFpJJynJik8Q2WG3FxY0JmDQIvXdQ/iOO7Y7G2kwfGcX6qoaMNey3U5
            ////oWGXXQC5BLTyn5fHkkcuD4JpR7KCBTOrhi2+6Od7o36LG7YcFi/Zi0QfkflZ7CFRhRAaXTVsfxlZ
            ////hziSjJyWR6EKOGGPJ+SDMPrLr6IAeijeUiyDhgxMUZ+bzthXWzWLrIIobwYOyRztEihKMYanOC9e
            ////NdthbpxQZtqEtwUYv1vrqrK76uM2kUvc9xMzcSzwA+M25KVDAowpgYEIGnGMdlKlnW5cXD2trNnz
            ////ZJEybRwZbTvrCUPKr5US5NmYPII90Fb76W7ccMsWiSYKTikjI4M50sgeuUO1SNRDL/Y0/wC9MuSt
            ////9ros/JQLJxZMDDCjf82ry34789j24745nkOsAoP/AFxlzYD1L8+Cfko5UyINnH0oJ+UZwv7LhJrA
            ////UEn/AFT3eLAXyjXjROhIUBFN+zJpXACFWTLDSwdDk4KaE60HRjzZcrmmCTcgxghaY0NQA27M2qxz
            ////7r2g7/Ty+q7IDIuTZxUOAjGgKfzy633a2sUTF6GL0OT2bv8ALLBgIZ8mllqEqCA/9Jvhihvu2M1T
            ////i9+aHfTa8tj3bMjLiZAzVepO+MdFAbDMdkdHdftrgNlhOhJuQaGMsSjWENDHMFfRfTZrAcM87Ktz
            ////QbKyVvxNS+mHkulVhQ+QU0z7AbfmvRMrsmJueM4hBRlQsCyklvKQA8sGPpBn6Gn3paSk/UqJ5xta
            ////0sIISJYDXKRm+LezzZFhYaaz9vIONwxKbc9E+ZKXkoDhwqMeVSZf7yK4CnnKovqzf4suuaq8oJZJ
            ////goYwISChgQtf0Xh9n7ax6qtDS0ckkMf5FCQBoEf6UZf9Lx15O6zEzJXJG4L11DTgu/RdUHa8ddTo
            ////2NbCHhSBTWhnyKe/Tyx458xPi+ihMxK1SC6kgDg4Jf2W0jDFxrfFmeprMpDQkBRtMMWZ3EdLSoIQ
            ////cEcoejRy9T/DLVpjqYCcS6V4xMgCOeUjD+ylixXt+q3PYx+npThlyDDg2qa+lfJQOuCrDvWnOuh9
            ////G781tlkYMBLoJw11xqn/AKNHRp98WuZJPm8LCoGCpSjeARG+zVX5OO+NhEeZFBQeuFJgDjP4dj4d
            ////Gy1G3t8fTkcN0xwxKj7/APw89n40HJc00+apZPiAjBEx6G8yZ2Wa4X5q2eAc0CwV9UT679GzXWWR
            ////z21wbpkHINNfULQABY9GN0e51ToubcYNSbQaYYqTAHOWvMZtOa9+e1o6qE28VbaCVfKeRABfzVJ5
            ////L83KVSoXBGWToCGT9qgpPgfObeNTTNJ+Qc3s3NCcIJoB5eL2ralE8fJ8ZGMSonBG9cF1HavaXewV
            ////d/vyND5leGNCU3XvyQvvdiqur1tLY2B1451GPkeOAUKkJclucFMUJUbqazb8r9r437GYfxoOFVgm
            ////MF1+Dmk412a91+evF4sjDBBCDGGFBHpjLsepz9vDmIo8nBxaEb14xg06/it1zNpe2k3D3VqVwL40
            ////yfBGIVdlwoq5zoWRu0utjYzFQgBeURiOE7kCUwkeTB//ABYWO82OIhU4lpxMGHU91Uc/FzDEtdQE
            ////1x8koPHwwFUOuHt/jv5bnvsd4Zmz6dsbdgx8vKYGnlz9bs/nO0UlkudR5JDfE6Tf0pbwrAV44n/7
            ////lqdGMnHNxhnw51SDJIucTUYZ55SLx7TH2OFflW9zVFn4516xKgx0ajHKBNL/AGW67i/Y1CZWStOq
            ////vLGGNjddheFa7cmuPj8kW8RF3hE1rln7mm7kF9DXXccLd8zwfN3nu82fJOqdCelelacOLymcHHwn
            ////6Nksvr8crQMTS1iW4lD15dN+lGeK6+5+N9cnyOm5UpeHAcKB7H9mjdXHNvfHK16pv+b6mpdNhRLq
            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
            ////K7M9dZq1QbA51Eempxi8vE9Uwl/64S0eH+qX44NJCoa7PTU30XHiy57H53RaOJx6/dU0NJuv3luk
            ////nKMdFlICpU1AFhdz663PzV5vfd6T85aOK4EEY5q169FuZuYKoawAxTU1Ve3P4ZmexdZGEJkjgI1h
            ////XBao48vnsarU9vjvPqF0yV5y5HkEoY4KcA7P9Fc/Lrtri73UCnInaHXlAbBRnAAwj2a3PU1dpaS8
            ////OBBjginB+z/RuK3Oqi/uxwOYnBGpHAmhfaHwy+F7T9ydeYXFjY9w03BZnx45+5U5LCzEwP13U8at
            ////10amZ5xZeKJQhcX+DR6JKjCvnojGYVv4xW+bWu5q81QM4UtBpVLxSnkrJftRp+C9gWFD6oStuOqu
            ////EL5v0+r8m8zU9YwxPX/Suh3NTmqBm+kW+VS8DgMsJYFcLNFjFXQ6dH0Ql53ZtLWuJr1MJQ0PU+Uc
            ////jnwfvzNEoqoMaFpqanBuz2WZ72MFxRyxam+0V7c3nktaq7/Ty+qTUkGV6l9U+n2wqxXufd5sNEVH
            ////BB9q6/bF3DtkHs1QzVgwQw/aM3e/Z4ssJ9aJhov0fLDbZXihbkYS6MUVCGMcF8bve7JWzbEFGWTG
            ////BlAd+BQjlyudZ5kjAqkqCURbbo43VNJ0n0FxAMEahfTGMtXnrtsZiwx4+yE1BJG0JMEEX12irc7J
            ////XU334uYL8z1N+E47oYn8Z5sJycog3HT43tEMGLRdlvv9+WESLi8pKhjA5LjERwC5rBTUpDP9ySP9
            ////7/8ALRbj/J/HZldsKjcPQpe2wbT3UQS8FTUsOhNAj0yh2VLTSxXDj6wfd90uud3xxNEpea+Xsoy4
            ////wKz/AAAk2Yc/tLjSWelasJ/+5f8AtPjvawhMggoJgZRDp5RyqUPlSVq2/t5zGlpKTaiojv735ORs
            ////YOuLJw+4YE1769FVm6pube366x5lziTJiwx4+yjcvIiR8ki9Clg48KNGTWHKBy35Xu4izVWJRkyo
            ////YwJUICh+043efvuexKUh+iLjdsfndF+PytuavUpFQajj8yYywtz6PG5oXOfXQHJO2DONw9D7slq/
            ////Kgak6o7lv0269OSLQCqL0KYYIYcf6KVzYu6Gd1zbpULI1HQ03XP91uy3c0ecsVxoTqgeLK/G/HFp
            ////bBnG4eh92TaJmDXV+uz1d7uMbrmEGAqahBF6jsvF+i59TFwyo35mgwb3Ve57tbHkpGwowCMfsfw/
            ////PZjjU3dCZ5NLpRAaUHrs9ZyD8jrX8Qg0noclzgXXBfR/ZdllW7ug46nyXoi9N89X7Tng67Qz2T0s
            ////YIMEmljDU1xarHbDZHYwlO/1HMfCbaVJxwQnqeu+zGcdzn7rGepeSVF2xUGcATL1lSxarjK+qOip
            ////1paNgoeGGgYjF7IRjbuxZmjeXks8FpgaYGhA28Qx+S3fHXkFVztzrrJ25tXRtGUeziSyoifQyW/s
            ////b+yu0R4jsaExRRupohsT3Wa++1ty4aGPmARn/asKwUtG23zf5MjH6oPrLfatW3xraBPiQAyW5PCG
            ////NHFI5Q9SXK/RoOxeXEW2ckblwd+EYMcl764VeLuHMUSwgQkumC+kPrx3Wuq33tpCJ0/IcJg4HLj+
            ////M7h/FbWCr7fDh7qrqPMPJs1Q9SP/AJ1XfdruaVJP816TYtDRdK24V7VGrzbT+7xNKgnAU1G9OHPZ
            ////cJUjXQaD/pa692x1bLP+EYMKsAoKXLZCccMezJsiUtLIkHftacKc5dk0gIub4synb4qt47tfET+8
            ////RqTQSnmzNMNhPFfcAgPs+FLv/FKftM1AJsMi27V3UhI/M8BFOAnEY7Koipe1YThVePfZkZ7GOYzL
            ////YJP9Fy8lGRwg1hXy9jj73cPaQphxZyfjgTlVLznFTckZK3zfpsspLS4Pm/1WrKz3SaQHPj/e55ta
            ////icye6beRsk15SFl5I7DC6CoGkt/xoS+2KHRfGuNjeeXl2u+0GBvXYu27o7avQHaAP7JbZH7IIBAL
            /////d85LQQfZHsNb3XtRURAgFiQAQACzhsuGuC4PzwH16aWVi9JUKciVS6sJ5pPLKhUtKhUcQJKH3Xx
            ////FhqPzrziUjkyZ9NHHOFyuC4TUewyu7Fnsqaq64vDLKwpHD41OcUFRQVDRmH1hurtsY8llU00XBGo
            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
            ////etz6bcdT8drc+OejnmjudnP1+VMChODS0wJAG36SZtrdbj3t6dvgv5pVKRHNvTZYLJP+Ek6Br4zm
            ////jJkr/J/5HkjfU/oN3xg/rmEG428zf4PuVM9JxHl3OMTPSVmx9HGihYz2Fel7+yf1J/jBU/d6ypHy
            ////OBk5ItBQUYmAATR0tPKlSpb6Gn6n4oQtrraWwx4+yqY63pQdM0jh9HeaZ5+wbj8VmeoGqX/1OKEH
            ////VudrzZcjSEslRgjHWurfdldxHLlaN1ShiLTRuhny3xtty5WsElD27lpT9264aTjFUF7QDcNG/irH
            ////7ossSwhl70YVBybnWVVO4e2kwVpTg357i3ZbddjkiQRAmWWE0mKCBQ4Viy7ovtZe3tzDwwicdKyI
            ////b1+iuRMA5pnmJOHEYvTCx7P9F97rIQvs0tNklyoKMhg0oIFMY7UaM3Ph9Vd+W+1nsudG4OMMETyX
            ////3u0bmapiBqhB/wD02irPqzMjdcaY/wDMEUlwDUHL6USlv/USE3yeuHWaww94oY1fd3wxQewcIKih
            ////S/ZbfDW66qGRnIGECCT62/TjqZGJ8yFmNO7nPdHRHVBrZRIaTCwUMYbLkxcbb23dcLyAQRQQB8I+
            ////028ZnxttbcIQ6wAnTf0qrds1vytuDCGFF/McW8XaGEIaGjA/nrvpPldse+ONmGoFaVRBJi9nG0vz
            ////xtaVDhAF3rfU1eb3QrzP3szyRo4EIcGocOwg12X9Dz4n2vaexqN59Eum2YIDUgEO0BF92riFlzbW
            ////CFNQg/PGLIRsfU7d7mk4wEm/gRK9hGMVGixl/YLcz412W48TATBCmLnVMXqMG7KVdD2zjJbBpu/O
            ////Y5j4R3Gvn9FHoiXRCYGVHgCX9qMvf449Ucz4RvRYUGpLFD1Jg12X9nvhi4zOg0qrgRwJHOUQ3XqH
            ////ZcJ1vuy+OZnGCGAF6EL6PxnhCL7dVjFvjuPoEd/p5fVRuAKceG4anoMejRxW2GCtKXpng+0GvB8H
            ////cZWeBwrRBjDdRizxfe+7JxHBCtEXoaHqcGhAy+GbE/RBkkKE1ghglN13tDtVeOvfkaMTiWD641Te
            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
            ////&dataman&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
            ////8juXDrIueTiN/SJkO/p85QqeCWVEtnb7/KSuLrdNjkcjU5ywZZH89HpLCUi+Uj2POlR/Tzyzrvz5
            ////h/VeuMGqu9JZv5eYSavWA6nOnS/0am/OBVZVto1MvYX7/RT/AE+fRuZdz2KkpQSyRmPRYdMnre9A
            ////q71ZXdiyFFHJG/s+RrFiBzkEHO/vQqVKn3OI2c+QMpFytk2qRkol7yIepw/lnlSgRhUG/f4spF9m
            ////r0hxqA91CCdLnWbJkufcL/nW1rYWHbdzbadpZoLe3NB+XVq87yZQa/MoLyVGEkqkdVEbca437kIu
            ////Umde9aDy3wrjipne+Cnav0xqMgg7927jthjXczV+y6NUF5OLKKfPax5c4DgPdQ2F+/0RMx8u0ozR
            ////PJQQd56tQ4CluyOWzyQaEo6fJutu24hC9SRuFzpTJmZInv3qFdFG6Hqyc8HCj0xyUiYh8sR4ND4J
            ////z4hMJ4Od6O18mFTxxCE6AXsbeGiUTyA6f/y2+HzqtuEYf0yD2vsb6KLYRhjUwLfxyAwk5Lbs4UR3
            ////ebef/RmTtLjrLjuRROp4vk4FBxI78fGu6tmr28cUYdphvxsu2spKF5L5LnpmYWQ54GPhezQWJTij
            ////NLWNo2U4CykG+lKLcRA2CR57+qeqN6Ezc9GjXSPnVHk3F+Jc674VQSoojzoorj4QtZnpzc1s8q9k
            ////Y84ssJ3pAsCTtMT8setbMKJcU6qagTTCgdXnqv8ABlEx6HKvanhTGyvFN1rJxhWdQOKsuD5bfixO
            ////aOnKsQ2Mt4xz4BLscO+yEpGGnFaYq6zljk0nZN5XHdoZmbfdZTXijdBorLUgYXMm2h8d+rYwRmrE
            ////qieKuxbffzEWLb1HRT2FiQXe/t+X50uYYUSqMnjTjyDo68V4rgpTSPNydMRPWYAdkedLQy65UHL3
            ////eTnXts0zVV++U2+F8K6WcjrlIjNMJdqqfElTGHPnqviyFuxa+nqfunfMNKjZf+qnKT8t3lI1Yiea
            ////WfBGn3R4Q2V0wiDX3R5QZHZRnG51jrRoSHw70tAD+TAAxilsxnO/kbreBztfJJB7nUKvK++qHm0t
            ////SbSHScWHZgdPud4flvyG6zlXXRUj9Rs3YcC4Gxs0eB4/XZdXNvTboFJfKW+JR545l/sXf7qCn8nV
            ////fxutpZhvB6PhzPB5I1ZJK4l4Jc6SxhDZqaDZD5RnYglJ2MaGmeCUfdqcz86+LOqUL57MfpM6cuPO
            ////97S5zTnjv3DgdrKqeHYAUqODnlROqTmUZ8Kn4e7aCEYJfdo1bhos+UW0y6u+WklUmORzOnTjmqVS
            ////p/OQ1xoDzbHKVD+KQLHa/kExaGcx7+Hi055B5eLFT4E5AsmDlCrOs5U3AFt2oNrK29h23b+4uIn5
            ////9RkN2G4Mw7u9sH0eeVUmVrvFwr3lME51mucqdWNlUK23ZcAGlO9IkONzg4joiAqKICARsrpARDxb
            ////xidTPKC55Bygc6x/vJd2woSu9V2kloQLO14YviGtvWHkDyoI5eSb7SKVgoK+70uygQjXuiI1CzsD
            ////bSadwxym/tk7TVJb2Bx77GVBRg9mWDcy+mBvQjfQIN0a1UCDBgwYQgwYMGEIMXMLtjqp30D67aKm
            ////MN8dOoNvkLCEnGE/DzgI8wH0ZNNK/jjWOwPgNLKRlm/ybmwmEsMGDBhLoMGDBhCDBvj64XDy9WE5
            ////0P8AaBhC+2DF50m/mPq35nAauX/mYQjLBi2cBq5f+ZuE6dfzD1YQlBgyfOnX8w9W+tN/xeTCEeYM
            ////W+obeHL0b6mQ1cRYQu7fH1wuHl6tzmQ1cRb5zQm4eIejCF2+uFw8vVhOdD/aBuU0TdyH0br9QLx5
            ////ejCFzng1cBYTwauAt3YMIXx9cLh5ercfrm3By9WMsGELnpMfVbowYMIXx9QLx5ejD6gXjy9G+2DC
            ////E15RFdI13HEl1n0XhQAQ4x9Gj3J7JNEgWPF+TScBUfdybu0BDo9EQERuEBH+KIUAIDWDPCVz0B3u
            ////ZYYA6Y8ASpAuX0gFFNEAgA6mrr1jOsXJXqrZCFktpSHAofvRdYpZLSbTdIe0JSSggAg63UFUaxC6
            ////ADCmgU82GMs8H5JudcPrpZAepZkzf2VTK/Kp1ouz0mauGTiZVF/SjXhAOy3S6RGIiMa6RgAxgMG/
            ////m6dczrzS267mW2UmVTKCd2VJvtTOnDJJKq7g53f/AFRr7c1xG2GqWvpQOs2/subwfC3Kq+H49ssz
            ////wlR2olk2pVfySyVyO/su59Pv4hEWxJUmnKikbtKWH9mqFdIqY989Y4G4H7dm9qcWrkzXMnrD9hWb
            ////4v36ck9soEqJHvQwk5ec9T+z0uapXa7VXcEcOQaqw4g0bqH87X8WszB2rjyU8AoVb/PezkUOuSrm
            ////UExOIfizOvdlMOz8Wah1tYovLc7JOSfOc5WSvJyuJzXNUrydrrdYZnH+1vv2L7qEdfBrWwsPlX9e
            ////NNk9mx0lScyZK0xRNX6neHPfHVBuJj0eLrUEnOv21qlNx4YsZxyolQS+VB33ahQ96hFMlzGO4aLq
            ////PgzWLNONLmfYE412Rob7U9jUbT0SksfJxqgl5JNAsozpMKYMw1brcRbj2881Rh06SRZEUyTw89dV
            ////oNxz+aMhTM08xjx9IUscLVB+F+Yp+dXEa6YMwvUmqDYqdKTm8eMat437aGWEa8mEznmcXJqq4hfT
            ////v1BeyaoSnGlnHKjseO20ddLNswCSi9KGKoURsxaNd4xz4BCdT0VO00sCTarx21R+VXFqrDXaUZ8P
            ////EB1jspqpGDaMnjfxtDXX8q8A3IvSmQgHriF9NreoS8WbFPyqvvs2CFVrds6JNL56/jbC7VW3FO6j
            ////lehKJ4hjwDwZyFyXOmye5nz22uGMVsv44y7/AMWY4qawhzgbru8RiXIqSGZ6xL7E0rFsKPHgxP8A
            ////Fx/tNKieRryVF6LXTCvHheEYnP4OXkammczPnv1OahRVHhiLLW8cLiMuR73HBeeRi7ciRlgNhABF
            ////L+Dzqo4RmnTl2zAMollEw/vqb9mKA1tITvkQ+Cpkns0hRxq46xjwrZ4J5B6TSu0+e/dlUKNflwoa
            ////C2j9F6htt0uVx2jJPWEBFYUvIzFMueDKGTHWHtiqvP0o11NxLdZwaasnx21jiqlrUO/JKcaXPGie
            ////RnEe7ZriqGofFlJPklWFGE+wP/dqfGvXthY0FtrWFkJOwBnlluPtMp8apiZTwkwyyz6Yyro6yjii
            ////gndBjWEI01MvmJTiehMFVflfG8GnJ6ZIHklUTBpJBEK99AeNHjcC8mj4KpmRPp/S3U7atmu1ohHQ
            ////hAL1A/h9l82+qokB2NxpkN0nlJMNzqkapOS7Xz/2lSrso8R4NNkkzVjnTg53oR2q7VEc0UpqMz5h
            ////di1kfwaPhUomezVpB37tr8Rq2bGmGRckliWZRqs+mf8AK1Byxriy1hECrjuQuzqcdhSVjAxQyxJD
            ////YSG45bpptvQskt+O05USeQsTqs17STDXzxCqtntLRec/nH2kVPkLHMlzXOU1Sx32+WxpsMyQfa11
            ////krJ7N1jn7r7p75EOfC8LWRxyGPk1PPIHweeTDNVTtUuvMMRDgzIt4aUm3U5r3y+Wlw0vfMcVXtzv
            ////46VDjOdpRxJDyT6tmN1d72yXvQ6Tj0mROI7uq7r++bq7LBh4t2fmS95SIfhKx1zB5KlIHdk3anc7
            ////v6i82lRz5JX8vzN5uUk9c8ves2zX3zz1UejeW/zEgOAFLh3cl/p9+5/d3y3XXwyP5aZVHHo8wz8h
            ////GnS5qldqaj+iArCtvV91B8oKxe45NrCnweejfHZ+dJrf6L3WhVWF4N4/8n8jZSSSeDteS8l6up5K
            ////FWadmvJ10Qe9l+26oaKvU11B0BzhLkejNOIXI/u/u3uOZgOA9LGLCwMPKr0GP343JG3t8NvdQzHu
            ////70iIvd0/+VDxFlBiaT3Yj/L9HwY41qkUGDBgwhBgwYMIQb46dQbfIW+2DCES6dYbPMWKMb6dYbPM
            ////W4Tmrn8GEwjhc9bCG7XV5t+fUNvDl6MZYMJdFpof2w8vVhm4auX/AJWMsGELhMhq4i3Sb6H+yDfb
            ////BhC+PqBePL0YfUC8eXo32wYQgwYMGEIMGDBhCDBgwYQgwYMGEIMGDBhCDBgwYQgwYMGEIMGDBhCD
            ////F1H8wN/gxhk95GgUjOOD8EPrV7I1bWEKGsscqHPJFxo39KJYhdUmnQr7UfzyeSvMUCNA6aY2haNV
            ////QcA8c/0mXX4CX+UQ7Ka5JRpzZNSPVvGR2TqTQQB3ufpdIR6XSlVAAARfnScourpDf0hcIja2n301
            ////fWLlGvdGTfqaSIeQES9yoyyXvOVIu1UEUmT4BEXOHERGFUXQMAiIt5AOvhlLc8jXf9lZIudCQ55L
            ////vR4ZOZGps6/rB0dj/a6VD2r8bmFaw9hIEsOgG2nWbVLNQPrGZUHPlClYSjQIzyHk8X88FUsn2pqW
            ////WYshAamquoNOejwWEoD5hz25tfTRVWGpuJZqx/PA4ko49ccoVd6zb854j8IbWmB35OTkGhfJK4gn
            ////Nc7B2pkvf4a8W7WesLDvDqzP2aQW9v3h1Zn7NGe7yXCk0PZpB9HvLzegBso3bfAW0/FU0jOInnUQ
            ////Soh/RtnDFrOuUmT6WGb/APq4uQu39S8hiNm6yAjezJUSDOSpxOXnZj6cYR4W1xae3kS0pHoEj42X
            ////L7qPTDdJMlafdbHaA/Cxjhao7Qj+Ni3wtqFuxhqNAo/bjiqO30G1k1QvzozREzEK66dVMfBok/Y1
            ////G09EvJ0s1E407nQPxhftgxzPySizjq4a4aqRxBkJ3lHGm+2PhVUHKim4W6mJVios4hLQdZizxiEd
            ////TfBiBDsQd7916M0lNYQJJzxvuZ87uF7Lirehyov2wW/KGzbVCtkfTKiv2/CiOMWvyS+TR/PQyZKJ
            ////2xsq12a/FrUSL6vqw01GjVOfQqL7LfDd4BSR2vIWHPKrz2953BW1hqOJt9sssG4e2xVLdcg3kqhO
            ////oz5mHvIYH0aWpP5B388DCZpHP5xquDiNfCMa20skH1fTkhcya7Z8n8rAY4p5jbUFqJPZDCUqkk4o
            ////mYqCGa4jRu3NnLf4qHDpXoejLXwHwrTzIemIaQOHeKyjkH1Wn92h98oz5kPzO+j469rWudfVaJzf
            ////vRJMyn91U3cNuBbTlz5LySivYn8qqN3xuqaQXfk+JKMpIr3cKAhTW2ViPiOKxkTvmX9ORyV5YfDc
            ////NgGlza5sizyWV6PqtO00yh2nT2tLZ8YhYAMvJ+rccbEkp2zAp67eOBCxtXC5EI6dCE9iqwPPWywn
            ////kQT+Fft9PnrZD9exZqCQa8t1wVqNUwtgGIBlQAcsnHO8lZO/8FA1Unzzs1QQanpzmmA4xXQpOfqv
            ////kFFz0yQedAOF9VcIDgW1WRyS9rOk3RjwEfKO3axMyS5JRh2hsCyNFt/KilorbW0VWdxka0pucV4l
            ////wmLHVULgLs5yv2iT1ptzZL6u80XMz4EE/wCVuqp1YizkR9X0ibgq05yeOa5tRAPOr1bQ77JE/hE6
            ////ELOeNjD7M/3Cfi0A1rEylRrxlnl0wmwNVwrih3D3Wb6zIEsNMnjXbPk15sphQPOG+7VTx/gbzVGM
            ////2jQkHfphCyiscXtpAsk5Oj7G2EdmMQoTf4Pkf4pInhtHdw+bH62isOYyzy6YTm/VMKzEaJk1dnsF
            ////mO78kCx1vQ41VMKM4/K76Y89+2l4OfJAS9HgSSvRnITqdflbGiy4Bt0xc+TRzqlH9G3jjeOvlFpP
            ////ceTl2mmEzKMCPPZbu4UxZ2w1rEuDO55m5h6dyejjtVQthQXlzyHoqlyHyDudzdmnIFh88o/TJc+j
            ////fR8WuNJPIO5x6BKxUSQ9gUe9Zy6/GNu/c1opD5KnalRkqyieMYVbfg10sleTTtQ1HodCn2+dN4am
            ////2MDbmIYmVM6iubmdbljY6wEPcL5s8gwzvaWxY/5SepRI+VCc1/lOdCRm/uqdN7hX/W3h4VNXU3Jz
            ////PKCXDkkkTJx1PiT6rvUpJSdqU9kWA6XLRWFdDeud2dVFwSnd0yvOzAFHes2S69mIjc1VusJ9F50Z
            ////Wud5HZPekgIfBA5ylUxBCvVjXCIURCoA4WNq4H1HULAR1kAWcPg/Debr7wHkvPvk/cMsHyoRrMpk
            ////+9SZPfeiVTJtwuvsFZXTsxCLegr6OPJoc+Xg8pYP4l1LnMn704Rh7nrDbr3RBvO69DZSZL8pjyyH
            ////S3c6jJysk+9IvTtt6UviP9k9t/1Jxp4NP2Svrw5eMjeUBbk8QZTkKGSjvVd1zZL2593hXDf4Vta2
            ////4EpYevsFVr2mdFQQngSJxIQjCmnXGFHP4HOgb0TAj0Kdvwi2OvV761RMt3g7ftG7ZYyxeSjMPvIV
            ////Q5h/3QHpRDjrk6FWdIiTyyDyJ+I5upoEAhTCuiHnGMGXQlxvj64XDy9W+2DCF8fXC4eXq32wYMIR
            ////fS4+s3X6gXjy9G+2DCEXN/1t3kxdjDF2EWF+/wBEoMGDBhCDBgwYQgwYMGEIMGDBhCDBgwYQgwYM
            ////GEIMGDBhCDBgwYQgwYMGEIMGDBhCDBgwYQgwYMGEIM334uIdzrea1WbMo0juWqFCizoh0OgIxqGm
            ////jpUBeFMKWcDUO+kgyuq8iPUzy8S3QdE4HmmkY8HW683APrdF5PuLrddNYfW6XTpCircwvLH19n5O
            ////vFt1sOs2/lWVjL91onoSufiNO9JQZOMkr7CCFC5wkk67RbzT5VMo0qsr7wOfD/eR56N396FN+QR9
            ////rj97j8OFba0dfyVqzI3kX6vmQErQZQvsu8MqEvFIqhXf/SL98ui6tx9k6462w2lQ+RSu9G7XWSM8
            ////oVd6zb85bVjazIDkDEsrC2qdo6KQ8m6o51rJl15u6iVFHbalLqh5YrB45QJUywdac5GglU40/dRz
            ////oJJJXWhCyt7W27mS8jSt5aFHKNzyjXSVd/enp9m+y0L+Hb204oVfNlPKwElXyb/IhzvVPTU+1X38
            ////sqj909hePk1mD4ABxD7fd3yZrmlUzJzOKqitekqjTO9P5+HkhD3l6PQYbavMI2sTeD+zqM0T5YjX
            ////Z4Qcj8SrM3JJKJmLc5DGq3UOpmTmAlGTJtIfAPKjxsZG3t8NvdQzHu61hx4E60rnljliuOmVaY3b
            ////dbjUFrLCNLRordlIx5+EL27O9KcqMmZmA2avG+PzaZpJ5NFj0MIOmYkqIeGvX82QiIkQ0yRQ3tTe
            ////JdVaw0BExDNiGDVdsRKXs4ZM+TcnHmvUaIk+CjdswFsBtFrZyLyIkqlHekemr40V1hjaM85L8iwm
            ////5nmrtITrP8rt5U1tfaReRsmcJI093uscz3R10NzvW3xGXPljMGeJast2bnJdF1V8OMxIDhnFMDfM
            ////dJVMlV3JvkMRpZgczIP/AMzRXGHpeF990pD5L0aROSSlII//ALOu/WAR3WtPEk8kqNAWTogP57r+
            ////N2sGnhzSIRpehoUcxgeeNTY6Nj4qIIrxmdmUrpF1srCBhYeocyuGV2bDtlBrnyfElGE7sBiEKmlt
            ////zyXJKv2VbdVnGlpNRyXJm4Gk6ajHLXG6LKSOTgCZZ8sbdVyHju0yTIVPsnvAz5/ZNVO4SY6UkB1b
            ////McGXi3MTN6WAYv1cAhVQzqLcs0YTNfGmi+rjvtcidBZM3Yhgd9c/g6Jv6+6PAz5/ZMNO5iTi9Xw1
            ////XA3bsomcniiYjrro87qBg0hGIJqj4eddlzJvZxOAH/zNB4GR4H3QmrmBX7HT7scubE1DmnaYQspo
            ////sxx3s9s1mqK4c4at99OtuM1pLeWz4baam+EWF+/0TC7KN/YjxBjqdzTumDhHcIw5VDGO5njmo3jy
            ////9W4eyMAJmNA7R8vnQLCYTP6bmJo0PPz8oXt2IdZM4GOeOTOSaONN2+Wvzo4UsdRoJoz5UQ1WW4Fh
            ////MJRk+6ya5mz54Dfa05SbQO2bGdJ03nRdi+1olRlHFYCjABRTW0nSbN7wT+x177q6YUX6otYw9d/r
            ////oqij6bz1KsVIdzAasIJKOoERr8dzXeyfpT0EyclmJ5NzCnFIjfFqf5Oy3aas0WKLate3U165BoJ2
            ////ZOSwPsxRTu4NuNX2/wC6Df8AhlLLLn+S59rSp7/vaKu5kzXnvB1gKr2tNNPAd/CsLmk9mTI80kXe
            ////TNBMaqg2cMCz66P83/pB49FttD03f/lcyjpRGkcDTYQsKvpn+o2TltyQPfL7k6SATlbyYuHpKlCZ
            ////Mlz3pSmk/wBGEXXAQCIgNoBD6sBhaPicyT5ZCVMuFjtlasIQv54KxSd1SihQdoOeOIc2/qRPV3I3
            ////mkVO5eSSpRryOmmUpz4QVdEREB6I2CELIRjcAN/OF+mk6nDx6mfXQf0sZKueZye5QFYyxkaIJQFB
            ////F7CIPl1RC0OkAgIUQGIDUMLCw+YlWuPU4PXY8yoX+U0tGT6JlixI9QcqKzkksueVWQadwyqcz+Iz
            ////P3VK8nb+cD4b22i6qH0pGVFF2O6Mpjseso3GAD0VL1B1/V6QAN3S6P8AG6O4Q4t5nernlBeOUJOj
            ////eRrhmEbndYOvNe1No9qffVHiG5ry5O+sijk3KAl2uZG9u0neq7L7MlGlda1wo6q/lvb3wM+f2SNh
            ////bvJr6bx3fW95e2/JhlukJlZdRDyk28ielnCYFObKBABALRpgAw3CNNYg0yN5sch8sn86zHPLx/HP
            ////xC7c67qpcioUDh56237yTSoOlRJNGsVjPKk4ZqKmrO4RH6wRuEKboBCoYrqdSmwYMGEIMGDBhCK9
            ////OnojHV4g3Fu3T/mju8QYrOaufwYU+jQbB0SowYMGFAgwYMGEIMGDBhCDBgwYQgwYMGEIMGDBhCDB
            ////gwYQgwYMGEIMGDBhCDBgwYQgwYMGEIMGDBhC+en/ADR3eINgT9PR1kZN5EchWTOSso+iec68pEtO
            ////zXkmT/6zudYdHp9Lpb+n0ul0RCoIQjfvt0/5o7vEGww+m2+jwHrvZFXbKlNlDRSBXZD3c85TJVDz
            ////TPDpoVXSCPSHo9ISf4nR+rGAxvAOkMel0YilsS2nPi15kBvfev50nXs6y38N2XzKplOSu2YRygen
            ////Zcl3apoBzyPki6+x5IusYf4G6XTtubPcuVByB6EvI1HP5uqjTXv1fDY1uesBkveUl5cSqkGqfzqf
            ////n2Pf3YKp5O0e4LL8V7667PDJpKQxPnjrcL1XO3+0s1ggo3D5URZ+xqNp6Jm3HjzBb7X5HJWuR9aD
            ////JubIMlzv6R8xKpPDNX25O4r1f/O3DZZFoBlRlgJfyg44pHMEZt3WPk0S9gkusSTno8kJB1iVMqBc
            ////vD47KWXpTuZwvRGjeTrlg4yFij3p29lvRCvR7PuKPAKmmiKnYegUPgZ8/smq9JRgqCBryPxz1cYU
            ////iDBzpe2VEzPUY489bNUx1zSj2xB+pNjje15Oq3kROygvAkkpHPHKFI26tvPnU1HHW/loXOueOfHG
            ////dWV3qqHFtEsQJCvT0uSlk3yQEv5MjJKc8Vn5pTt9dm+LaWZH+rcdNu00126DNbuG+2m+9tLOq/1D
            ////3OmRo1j0JIn81Hu1/CyOK20scfVlc7rTkzSMggU0at2AsvbnUdHRUQ7SFwuIlx3U2ro0DYQsOzzZ
            ////nvpTbjldVZdyL6vuYJyZp2n21jUFWz4167LOfJeQlLJONdseONsYR8LyI8miN1+y9tXduuGqu6y4
            ////KHCT7I0kjhTX5DYAcWylvYZmueJy963vLR2EdKVKDkB+ZyJuVY3fIiZKJmicYvZ1FOGaL0pPmHkH
            ////rbS0wKXDNaauFNNm3ZrvjTYmmFelO+gfXbRU0Hg6Pb+6tbC3GH2mDuuN+M7oxMQf3PhXTtDzb8LQ
            ////Ub9vzxqZ+qEu7y8N1lIbyYu+dC2OK/PdFjwdHt/dPpuFpZq7b4ws3MZZwdBBXutxjewMQVb7cY3N
            ////8pdNtSUBowuh4WY2NxMSkzeyzz8+IBazkmv4mlqt9b8VsTzQrAMITbmtJby2fDbTU3GZ0nx1cauW
            ////tl4xLpPLHGnXGwWE1q6PD4MIsLf1E+95A2i8JOmQ1cRYvMk6uIMsmFaOOLoAHIN43N2miZvS206t
            ////e0OFl4xEwkbNCbh4h6NyMOmqfhu4YBlgyJQx3fPVbUyOZE0Yb/nqsraK3odp6hMI4614jPEnUwx4
            ////XRr4SE51+a4u4V03tFZX88N3iDLCNfMmaU4PC2uijfBprCTHI/7ktb2Gzl7e1LmnbSR7+RzhM9oD
            ////gqpwPlfS15MmcsiEqgkkDvePzKYNfAOVOxso3W/powmaOjvjRHZ8Gstk/lQVoZ1YeRvG/EaNTaSB
            ////jQwE5b3FOM+NZlZXWuqn3dzzxF8lvXIB6CvRFTokHHXhAKL6YhsohW0p9AIwG4R5gDULyL5QQSmO
            ////1Ea+CDyR/UjYIWa4a403NekgyeLKNC6NOuNPHnGutujaqtxbwoeRrsemDzbouL68gTDxVzGk5PN8
            ////XLM+6ZdHOnUG3yFvPB/pEmQT+FfqnOGWDrdpB7/yfP1epTKc3+sIIXt0nQX0uiI0VdLoCERr6X1q
            ////oUeh/p1Bt8hakP0gEiEeUHqz5Q5NqiQPBQ6/dYhSEA2wgN41agi1p4/gMRcKZS9s8L51NjVsfxBq
            ////v+73TK8L+eR1L5RywcL0eWYOxCuBP3V6O1SlG/5wpta6T0fISSlqjlJ9lcxc8uFWdKkw9+eHaGwP
            ////OupoByduZZkby2Phzusk8hZnTw7spspvugIUcAa9RcpHC/S1jnfMldMoVZ04VKl158gRPCkKNWBb
            ////3zot5CTd7sKdJQeB5eJBmxny+444rQLq95aZKyXyLvf7Zdq9mPf7rSu1T37M3g9/7Jtxrb0H9SAw
            ////47IPJU5WsPXHnpRFQqUgAir6VIRCNQwEaLaqqG8p2SN15QsscsZN5N5OOcghz9qO9KqUqUmYwC77
            ////6oppq8W9juRyQhOTnJvJSShR0+e6HWgSqVAjSMKRhHdZbqZdPW7c9EcpbFLrBgwZhIoMGDBhCK9P
            ////+aO7xBuLdun/ADR3eIMRYU+jQbB0SwwYMGFAgwYMGEIMGDBhCDBgwYQgwYMGEIMGDBhCDBgwYQgw
            ////YMGEIMGDBhCDBgwYQgwYMGEIMGDBhCDU+68UrXRI/quZbHo+HcheiIMncogVJnmqBGgEOzBgL06U
            ////aOjSHSCiNABQARG2StTmpZpp3sQAN2LfJsH/AKcTKVKRy9WcmSxWcESblRKh3up/JnaI5/KSAj91
            ////gFXYtMBEAARgERGAQmsdF9J7h1BBH34TcoD3cl/O8yoGnKn4c8pZI+yjpQPR4P7uqX3z7154panO
            ////UzKM+JRrOx3WcuQuFP3Xs3Oo1UjXZvsg0qZdJWvh6ZSJYLClh6h29qL3Wk/QI0H+EwpxCNjQCY69
            ////seflRXc1lsVgmenSnGmQhSAY3RuZSLQfjAF9mz5DHeLL2YCl/Bt3UCPmzqRyczpOTNHj5elFtm5l
            ////vGOfAJdE5DyIOfL8dvtz+9UpsUcfl63Po8+q+5ypPu15KnAQQcoSu+MR3W42N5++rHIh2L5eOE4o
            ////mfJzvNVSbbdANkObe3/qZySRpJJu05ejI/ot3+84CoLAt1tlNa9//wCbevNaLVXy8/vv4Xc3U75P
            ////8nBLhRko5nQx3evjsaQlEnCcbr/EfRn4nSzQTJXseeK6/AGOZrN6XF8MRrjbFs34GfP7LR+YNxHE
            ////eyhpZJyZ303xj4ao62ip7oAKMOrUV7K6KcWtZCUBs0UdNa99sdevbWDQO+Coz2rdD4c7mq7ewu6c
            ////TfskPcK+gZjeOoUVvA3Z50emutm3Naujw+DLzwNmTBgPpVXvHbyBkFQq0fn8o8x82o7e7d6rXWNB
            ////sPVCa1dHh8GKTWks57fjtoqYkYqxTT5+IVMO1P8AlcPi1en0sTWro8Pg3EwqdL8toU440NxF4To2
            ////QxX57ot2nZ6iqOuMLatcK4+DMJdNtZb/ANFkieDVwFngoQEG+1HlHZbZv9Uw1KSUPhxsEGYtmk2V
            ////N6Eke1vjHVWAeHBhMna+IsszRN3IfRvyZHXxBl0wkAue+UNf83zb9gcbQaTCocWRoAKuLK+a6uX/
            ////AOVv2ZDVxFl0JGMnv2N8fTXUNDIKienPWHLFzOqc1c/gyaoK/Gs8AH4DrhvaK3v2nqEwmeYacUZ8
            ////ag106x2cmBZpxpnxrDVTqDbyZSUFX7Pn67IMTMmfnHV/O8m+EwuIKjkpk8Tq5Uaqw+EaWluR0sjp
            ////uZVEw/edcfXx2NEhRU77XbGu4BxSykjS940R3DXbdfgG+7C3Pmt8pX9gE7KY+W4Bd8R0V/MneUs5
            ////KUSTnmm/K4rsvuubUPIZ1i+2umTJuUZJ5BwhBK8hhAbwGuivZRCj6wDiVIo05LMkzM+Tdi1rpZN3
            ////y8kC1GBWgR/plKS4cDri2/1VHSADhgMWfF8A2xcy15qmFiHe7b67vyruAnVkqiwOLOiVCu+q+yA3
            ////RoqaLMtcnT5SSDfLsTfjpoBG2oN941wjGhmhkzlQcKImeO7lxDARwNLT8aBKpPeSoAbdnpWN1lLb
            ////Gwt/MwuPUzlu7kuU28MdXxQcydqXSkc6kTLtWa8NHXEyGnSIymLHklIE85QqeCrOc17+j27MWsUk
            ////XklJlk60ZyB/PZxv539nqu7PTMqrI4si28vXr6vLner7OfK8k+ZHvWc5tbtCiikKg2NRB4SCdqWT
            ////8ygk2hPWWPJSl+8EVQYgHwmsfQ9VPHlwDiAeLJ4fRxyXJQZXFkm5Wyk0yd691HOs+X8quHJvUOnm
            ////psqaqhruGPNvON1N8miN6ZSEawpHMP5P3pTGvnT477fRi7CTCECQk32xSfo9EdsIeQYqnVZb3bvV
            ////KLBgwZhLoMGDfHTqDb5Cwhcjf9bd5Mn9I6A+kB5ixvp1hs8xZMYTFiAXcPWu5OBgwYMJdBgwYMIQ
            ////YMGDCEGDBgwhBgwYMIQYMGDCEGDBgwhBgwYMIQYMGDCEGDBgwhBgwYMIQYMGDCExX09BLeaJJAJm
            ////IwEKQWroj9R2WhHpdGHSthEYxg3nM+kXlNlCykysywy8cMP4MsjOTuWMmZHdKALUK2WMIPeVA/VC
            ////kQfQPXoAIx6X1ej0QERbbzLXLZ8SLkzKN4oCielKRM4HgEliOkMRHKBK559jyRdgjaPS7VERGoRi
            ////2T30jDmc+SnqF5c0faRCElOLvkH22p7jnnZDs+94/wDXna4b7qWf0QwAwGL/AJ9snrG58TXYObr+
            ////eb1nJGkuaXD+RuE5CuRvBK738qUu1L/7XOvti2gPuN7Q1iO1quvRLNFkTugOzXGB3Qi2pXWIyX/y
            ////fWZSJEHBKKTcXgl7STOvuCOR+SOS8j8m7oel/wDKN+OmVdv9TVVNQlRJw5U40axUT3z3pV46qY0Q
            ////AI0C0C+lFZbhOVOvPJkZ6753jG0PJpacDhSdju6aJ0yj3rOdvH4xrjBjjnQEoCxnSTxJjGunFULm
            ////sInkQSU8HCj94OUpe9Jqsz+Verwn8Hbx0UurmdTTJe4XW/HOca7SFyx4dnwU50Hc7btQfFvVZkWe
            ////nZaB25qf7ul929PkFzYD9UOSSN1PB2rCpiZTpc1S2Yso823IySGglA8438x7rw2/C1sprC7d6K7g
            ////fUdQr9uN69qF4vosoZZUT02dX579ULqbrWjeTa8kr2f5jiHxHytZ+KFU0XPG+xH0xTUO9qNaSxDk
            ////SeZ6BuaZT5mc3Ona4bowCuzyaBpUGzM9eFu34Dr5NKkoHz3gDufws894tCcsF+jOGnvFduKqI0V7
            ////6qOpvPUrR6psWL1IIqTUeu/aSolei/8Aj4vHdi9mqoX0btlOIcdbHFBRxplGA5064cYsTMQaQN3x
            ////14iDZRbawkCMPsic6cbXGvl6XhXVFlJOV6xx4RujaxP2OIQhxjGO/XFiZipYVGa4asW+VLLphOpP
            ////Mzfr5YubsnNIK2Dsjq+VzNV3Kjjfa6o41xojSyyYbNGBANfzpvpqFmLC/f6IS6oNIm574w9Kt0dd
            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
            ////50+NTqd+XR2ppnTET36nhTZiuxrWBewPLGu/IZUpdRx1hCxHDF2zzpuXq9ycZY3Y9E5JRwkAfmse
            ////7R21WRiItP6OUbneZczOzB36aN1VdfLybydyD65BzhWI5pZoaKc61xxs2tsZkD6wTtlunRw0B0Pe
            ////c6z8OfKiyGoNVYW/Tv3uvpN+c61gWinBZi8pUZrmoG+6vXLBAjKnjjSSOFPkOrVXrbPDrYOEl85M
            ////5SEkk6bst4Q1Y1jRZFtGngaS/nONWKLPlRTBqx5YJJI1Uk3kkVachQlzX08KGQH1oej+k09YfSMS
            ////5YcnC8yr4llLzq8SDR5YEDn7cdqd6QfzuVJffHfW993Bs6+t514SesQok27ZJOFdI6TbviqejteS
            ////r3x4f/4SFte1ttutxJdGV1M5bOc0mBGavCvh5RuiDeSmdOKUTBhOmT+lGquioKm/VX6JdRQ0RDjW
            ////Rmc5sZA1MxSVFw/4wjomxifLVzO6jyfHBL2WQ3tCQb4nf8PVedlXra1derebB+LUc9fr4/FrOSsK
            ////JemTd5EmnEHnAl71fbzhuFqc5A1WYZQMzSrPzVo2XV3Wt2DWlgP1kGwHTRlOT9MTRZWx+mO/oFLS
            ////NUc68tCydOmCT8Vj56trI0qDVrmyoO1YacnmVD0+GMAKnLiZQZXHbnZwEZwqd/eY+oQuoGFNLM/L
            ////IlOKlY4VhqzN6feU2rGyjVSnb2/feW2t5MgQ8wasQa7/AOJTYXPfaQnTHzLwS91hsrx6RYy5B0Eq
            ////1WT0iTo9E/piNN4B6M7Sy1ip6SbAmIk5q7xznZEYcvFjD/dAdF5ngr6AdA6j63RzSyIwqAde+LU0
            ////ZMjafVWnnfLj8N8hg7S6ywdt/wDXKYMGDflpdAQYMGZUuZTkSNkhKOVSkAEpwONc9OlAaf4vRHpd
            ////EaKKBABo1sIqnj0egMabLrd4DEG+xCICF7Z09RDrZS161Lvygv8AlO5nM5XbJ96gicaV2D0un0fq
            ////DR0h6TxjDpxCgR+qPTABAQH6oCA6KdCodvkDekk1R4PguDM3naHowPJfbBgwbxCDBgwYQgwYMGEI
            ////NDGXSVktZD5L5SyqyfSZTywlK6EudJZOn0dFYX0en0+0QEQpGHQGoKIiIVdIGmduZhYGVsIWS+TK
            ////W/Xoyy9N+S0dkkcmUhnaKYHSjk3LBPKlF0ukIgIg8w6Tn6Q9LpdIYRhERooCARZ7uzq/ddeUSLPX
            /////wBZCS0gTTwEexJNSCF+ijqAYPV8vyIjqABEQbSspKSWGjKJJ/8AcAHR4/xQAdcQb66YBNxtEfMW
            ////l/GCzAzLJjx8ByaXFYe9ZjqmdZwZJmnm9ahRKo5396zZS4Bkog4OZ+xAQC+kW8ZPWMyoSqyfZaDp
            ////SPlYhlHLCS8qPvTOe/O9YDoegY9LP6LnWEc2dSKlI8573dwvDu2wcDZXx/mt9cCYXy0yhLJ4j/1y
            ////lB3nV2pimNjdq/RbDeONYOGkQ7DZnnRy4FXWA+IrdorRNwbAYY+vJan5aPpDsg8rerG8spEjctmU
            ////bJz1iuwXfmsgJNpcxcP2gphqr82wUeH0pXXqNMnv4fpYgQnVVJlXOuN0K6WrpKD3RZ7xUFVVlWpo
            ////IeCWaTnX67Pn8a67K3+F4eCjPxE/ifSfGpHIuJM2TyTlhHePCCkhhlJw9e8Stqv4aZYZc5Lu2XmU
            ////aUi+VUsHx2eL0eTyjn6y/VCgOLWiyR9etw9V9G+JB5Rna/JR5K5cOt3qn85HIr/rGjf8K2zZyPmz
            ////WS+So8twbvNmf1mF5xpjtJ/BzXdTt2bqtbdetdVQsfqHRhokMGFM2ukO81zuxtv69MQ9HYASFBJs
            ////6KSOthluWZS5YPKWGSB8yqkdk9eHusm+3nriikNu5qr5M8vEtpLy1RPN8vh6yjJzV4JUqZ5PR6Zg
            ////jeH9UPTfr5WLBZs7IsmNBKdL6wGjELgaATCjjXoSd+9bcVQrFsSPhWGhyKOCJHaNmQyNGWo89FZc
            ////lobLWUby7YkrLdVp3k8O6vTvXcFl8dnwoaJsunWClI4ZLywkS4JjsHKQ4ey387Xklz7M/uuP3Tfa
            ////EbItJyhL2zJNwozTg91glpxiwGpz1jBWpFiNGqdp5CxP71FLvj6edEa/43gYiG1VT+iwqBRp3UZP
            ////fDtv48S73766PvVUVLVTJh37aHpAaqNnFtDcm8zKPJu4XwqOPPRu9K8EqrNrOIQjwbPh6IBKURK9
            ////jTZjlva6XVmfP8k384TTzyCQVD3nYOvbXY3ArD9v6etGe70z6Db3bvVXR6u6p3Ot6dmm0kvDvSWA
            ////f1gOAv4tsnkH/lQ9CUa84g/OEvde6gOZ7qargovthipkrdf34jJQEnidnTvVJP3yuPzrsi25HVvS
            ////o1UrJNrHWSeQS8Erv952V1+PwbPR1N56lWmqrD1M+ofrwFVurkTkR9nJNo6lAqEvht17QrabFCU4
            ////rHpwrpGxuMl1SNK43aTGkUuIh8obWWFGljCnGvdGqMNjZRaOHsGLyl6N3vzkz1E97HbiHDkDE+xT
            ////jd2/04xCulngWgJNNxrxDnQyksmXeUTO6C6GA1Qr4NX1T3jteOI9lHqxzZiVfDjRdrvrsrqaH5US
            ////jRpJ4ks4ju48qMcaWJ5fMtKKS7nOJKPmDo0Kd9nLEAbH+XHW+JdbwWozTjz/AN5srHjDFQN7b2FJ
            ////98Pet7yesLto6laTLJcTs8TRiMOdcGZKx/TvsjqI3V7sB5Zvo+tAUvLnilg95H3bfXe3H/hNu3TH
            ////dpTB3pyht3NVeWOHf+bMK8sLfy7kT77/ACV8Fi84lRPZ5X6/Fk1ZKk4r8bFlMbsQbNmVHWqRzkyU
            ////+CCP96q1R1DRqZHdfWROX6Y1/IZmzvWujzj6NB5A5cB7ZjiprCO2Odl5/KVXO5aiO+WRJpelgGKe
            ////WyqGxyEPkk2ZmTsarPNs65N5eEZpZJJqwg84PzNNGsPgMbxg0/OPKMjVJyTijpjFcdtAQoZLwM+f
            ////2T/j+PTjhfzbHPbcAt/EzcybZ4+Axjt8W458Sb7E4Lsa4+OwGrSZLwmd98v+ev0vEKF51yyzqNES
            ////dV1kfiDCkU8J15M7Qdf9avF9THDF87T8fKu25orRv6dhZjj5+DLJb0ncDwjz51UsumE9c514/wDh
            ////ZHPVAVV8arhxexPOtH7blr4V89TITwfJuqPpfimxhC/Hw+dH56t3OI2UVQZkmSomjNMdRQI68Ueo
            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
            ////86OQOJT4FYmO0KipNXmeu+6mht/ur+b3d2nFHV27b4AHrqaqsLDwMi9+Jp1FyI238wBP74XO0g6r
            ////r18EByp4P7258/I14d224Cn1bwi5RJUjK1Y/tMR3d6vBKqTAH9YU0YtEW/oNdcCSSNeYSc9Ce5vB
            ////1vB150m2VR8qLa2/npywkujkZlJytSPQEH5nJ+WUoHWkTKaIO90PSmu6yhu8foQiH15Hw7sZX1Yj
            ////a+Zvdcs/SXAi31FARIuauZFc+E3nOcndX+UbydZhxKVZME50Hdo3hDywFZPreoBSu92vI32yjvXy
            ////C8PjrZq5H1RKV6K8/OIT/wCZshfi2DPzrKGnSjyZrD/fuz4glUpt+yPo37Ct7Dx9WAhz+FjtdjXu
            /////NfnOwsBDxRAn3j3uUPud8nPTIucSUdoE6V4d2Dhiv0ask1xL0yTvhGqmD1uavC5uOSM056ZM387
            ////TBpzR4Ro8I/DaxPJWacbJ+UrtK9sn7QS/GnnHxEGq7awaFlh9qlsnvblPYW4EU/b1wN7SntqmHkT
            ////N7m+EZU+fnEOMbACq+EK62fsmn0S60ixF270kUy9VwZuWl/i9H+P0aabR8ABowyPzpT8lI7Srvy2
            ////K6GXHkoKdrwWojkJ/T6ZCjp9EelEQsAamU1fb/Li6eA9SVbW1j45BlLu/v09GyzIW8noZpcrWVQg
            ////lR+W/hGei7jAdkYs21+Qf7OOs15FZQsop7yTjnWcqZZPRdHHC5rLI16ObpO/3ejGNVCDLh6IzHGd
            ////NHQzj1r3DRvb8f29uDn2+N9bnyk/d4e2m0xMYycidc335yh6R/Wl6xeTQzM3pMZRpN/432WhfyOH
            ////+LW0RxXZ1NLKR+X53ybeSUl6oZSJ+0FSWST7cL0h2h2X/a39A6wDXY1J3hmSrQmhnG6wNoxG6nc2
            ////n3UvyXSJVZm+H87SHqS75Gywf3Zqn8n92YqHVBkbCbPOYrtK0QPgAHEPt93fJmuaXl9lxl4fDmyi
            ////Swdq92kHmp388KE2N2+uoBWHV1jHOqLJRrs+Q/5mvfgIbhjTnKgqJVZTJYHFHETP2olBmubU/wBa
            ////Db5WbaBapi+uOn+XCnhHayNv8vgX7Fe3VrYfMTfKo6HotJk+UYl4FzzmVkTLwv8AAamUk8o1k4Gm
            ////PoqppxsjW2crnlI8nWYSsSrJgU9MPOMOXCtpUdeXOUiAAJNAg+r8riAemxjxziOI9k8Gh6M7ijFz
            ////dudtmxXHUP55G+1O5RjHFLKJb+Wmlkkz1eI0W1X7WrS48shL0ns/Rxzf0x40s9nfLx2vT3U4SDqa
            ////vhgIXVfa8t/NNuGHdGZpuzXqWu3gKM0oWbbAxVubsoek7phhbREN/DZSNIMw86OVV7uNOrlbvYGL
            ////81L0p0A124G2jeyfy3bKGwEVJxhdd+Tcr0vKF+de1JmCaqa+AX0jRRCrU8JPv4lAsRnTozKf4Wcb
            /////WJe1Cc3mZ4jjuhdC3yYJ3ySUoJmjveO6pa7Qs200hYAMzD1GwdCkIi2kRSRrjyPeFffp9ETlAkr
            ////JjqhyPnTz+/qRU001hvC3U2nSjLTI/8AWevzr13Bdif9H+6zpOdVPJujNJEDuywVawr31ePG0TwV
            ////e289fOnERbUQNdw6Bcs1oz6RFTXFvw6LLMf/AEhzK04X9kXyYybdZ08colk71VmAtotbyC5YFU65
            ////kZJVaePpx5eIb2fTeSjOOemRJw0TOdSgVW/4P5cWwHyse5oyfxqsU+F1cYw/Vf6Ov2Hw0ADVyA7V
            ////OjhWew3rj2tbD5oN3MV358BSosqDZ1OaSb7awcXiNfk0VqB7vMm+lg2xjiwGkKVhuj/vtvCrG22K
            ////1E9m5x1MztCkNfMbN4tPG2/zYbHjQC7pLMqzh5Qmj/N7LQjIGacqc7gzoIZulorp5avNoHy0LyTZ
            ////cLNDodtFPAcDvnLIGaP2bdo/jZrbRrHdbU1dMqCok2Wjyr7uq+IbcBt1It31YJuWAbdoyvN/E7Hz
            ////f/U94pyvc6dkXM0T2a/LnTAGrrJg2afaMbBVYsGz4tYN9mzUh5832yhNXqrtt2WcWrtJcqdlI7da
            ////qOPWitqrRtyIvRowIw+22tJ0krBnhuXELT5GvONLRm1912Q84ejUb66GllI7Tv3V38ceG5rvI0vd
            ////0dvdcV0VVc6Wor1yCpqUrtsOzUax545s58Yf2FobNL/xSXw7YmH1pM312tt3Y3Omp1S0pKvKpIlG
            ////b7FTKiT+dD/1p669l7e/jI+9CftZlBybqjp9zqJByPejhTKfyf2RdfY9cavva/aDeEr6P+RqyW/W
            ////EyVuFKdA54Syk/f/AGpwhffwb3FLHoRJLrIOeamDyVKV4SXVbnXVCLfin9LWtvLw2r4YG9yHz0aj
            ////aT2y/Wn6LdUiIGsIn8NzTAmD+G8irPvMrlk714MmhxUre3nWjmDk6rvSlMltpu5wuaQfo55OHPnL
            ////45zjSZ92u4c6VUBDtCn4U/Jry9YyQbtlG638SqJnzk6VfRjVGinVU0M/RbycE3LI+BNJ7mndedJV
            ////X+IXVYiNbYbUcd5iGZpt0avI13pj4qgBYRVxvLbuj9ll6ClBU6jOJOurjHgHpDU0Myo0U8GqMQH4
            ////NPDwNJmzo/lwtvrpDHEYNAMrF86WdNDbu8b8UNFHU3nqUjA13DoFSHK4q0hxPHzH4b9bVRf7+mk5
            ////06doU9d4Q+Wre1u8oiUF+eRtxvj6jW2deWBK8lbrWOdKfpnh3a/f4U7dTVgmQMVqoGwF/rdvrKlc
            ////71URRl9c8knxKqUqX3Nz+65zTnjwo5D8oNQ94Kss3Wvlg8jnWSuPdudRuQo67+EK6m0IyX9WlHKi
            ////UCwiXjt+4fzWzhr4Ui02ZL0EjsgUqXxJvseYdudfdalN34VrviFcYbdrWIt/A9mxDDKd3VQRtgbe
            ////kr5dB0kJMvPf1nMgTyyLFu1G+Z7PHh+ahiwNTVpku+XDJd6O15Go0K45OEM2eSYFyBYONmsBb0sd
            ////fzIs58vuS/t6Qcwufzn+9Eqb9XCHrtGxvLu/HWsTPRYjNJUELE6oUqp2qYBmeBEdzaLVUcL2urzb
            ////ezNuWWttVxVuRM1G26mZcHOqtFlol5krl4W5yJGyDJkqen/pRS7VfcFl22FHPW1hOo3kqduUuUDy
            ////kq9HbPu1R7qqtR8PS5s95LOZ8L3ojRmozz84r9MereijqB5OXbk0c50pH8TMHKUvdbLtlFWurW0G
            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
            ////FLaxuORuYO8kTXaBHddXjDwo4M1er3kWJdmZ52Tjh8Wvg+JJTTnniv0vCzZG+MObTeS+Ve/aeuzn
            ////wVJbRzxQz9W7wpcypOelmjNGSOzGzaxPQm799HLzEQ2NJD8dftok8fQPHe0b5gsJWEzRGhxqj4eM
            ////KO3sO547Pet7y1MDECW5pm+/bOr+yiXKhJvOXGsOEjTY+HMKGxty8SDOeGeaGfO8sV76G9CD8cM6
            ////4zp0kD+6xwMI8/Vsr8skiM1eh0CdDZ6330XaoRq5w89+1m4u4+12isLbzEMYVp38uNBhzZZLo5G5
            ////yYc7VRMz8fhbsgAwYmtyVHOueOSnCGrGrXVe1xn5k+0c8lJmFltnHXTYyCXJzPyyZ0+YOoojVbTG
            ////vzbQwMd4wE954TpKmOVxWdt4Dy8VlKZuwflszqqdJnMclMAhUjsshwxcLPtzpXbnBJxpO6GAp+Vw
            ////zwskvNFaVGQfC6GKKa+bB35P0aoTp0nTWqfCy6gaNbe29vSXfH3re8nrDyuWb7R9s8L1Fagp2mmU
            ////zFe+GLNXBBWZnTNE+FwwjiEaWnJRkv0miOUco12W3ctTcU2SqdMus28A+NFYQaC3t/aXe8A7TcE2
            ////kHJmYr7cRnFEh3fXq869VzbtdX9/PhU73Ojnpjuto+PPFI5d5L8lWavCeShps6/M0Yr12DqbUrJG
            ////lzAxEQaTMHJsQv4U6m9h67/XRVPrtj+K8XX4LW7JegWL3ejz+k5RfTgOTWETycBCVPG286t41cRa
            ////Dci70A13o86xrwGprUFr0apPMlHVQxruh6032jQbB0XMbZxiJDqqi9ZxB2pkrlU7f1DreFEb4U8+
            ////dlvkvysZFiV+TaUjyczyPIB3pXhnTuU/nKt3gFkG9g2VhNnUm3+Sb+keGvdTbyvby45QHWsJc+VS
            ////SqXPp53qZQYGyrVTSz+p2htbatiLxpaLkPM/i0RxLh6lfMVYCIgtJv4CGvMr7uwvN+YgR9sHEqiZ
            ////g/Or+fHxDY1upBv58fZp5I3WsmDgdeaw130Y2QpqLKUrNZQPLOyNMnejwS2Yuvra5fVfcKOWRhzn
            ////VLBIOUJXgPxxvEaG/ojqe28eB0HoNDRI/wAo695fkiPh/njKYtCDc39IbWyqOM8yJHquwcuCydJn
            ////zlD0eHdqf6QwMKKKGXpSRQZaCFmZZiSoj3ZNXyDnrZYyySDeWSrrGdmvAgD0ad6e8pvzmrz8GUsr
            ////iXNZWSPfxSP3gO9Yjw2xZSHFxzH+5NWth+7u9O763gyiWVndctmk/wAP3U04ti0xyzKUdtmZucom
            ////pgmEIAFfTvjv1tBeUg05BlMdqw3+sOz4KR24jfC1rIvR2HvDpIFJAHdIvputCHREdRY3wvZaEsZF
            ////yAdrXjI49lT2lsbD8Iq4Hc+58fRN2WcaX+nhXdGEKGrflcQTTwJJngPzdLQNVHw3V2NeovJ8+DSw
            ////0Oh5W68a7KT5ZECxLKx5IzgIE5P2f84VwxFvxtHWDZUy99125dvgfqd3oFDMn0s7KBzkmkifnD0d
            ////9F2IU3tczr2PR8O/q95Wlkl5+TjnTyDcEl3p2b2XmCztf+q/vr7/AKoBBq65G3N2plUkSSaSeJKi
            ////VDv91CFmrXdHU08/SoFSbemQfrLPjtJdnkn39k+cLqTdqutAg7Q+1DnF7B2T/XX3G9tXgIo6vv3+
            ////qvra3mBmK9kMxz9vJoomSjLhv537+AwYTpJRfttNCjzv+GxiZmlmYU4GNcI1827TMyZPXa+dHhbq
            ////sgiKnYegWgh6bvTRXYue+UNf83zY4WIlF12Y5aqo0Mmzs6Zsp86te7Y3YCjipk6ryjwxRcDfasbG
            /////f6JYMNnS8Yt3bYt2Tmzpm/GKgYmWbAue2CO6i7biljicrFXyCjbRRWy6m/+/I75TlmXO98kpJve
            ////Qxb0mUlBUzpow1/CyONSaWM0ZDnbDHKyNRzpm/tcYvjqavU9hUPgOLFPCT6oDUZxFHzjCqIwq9YN
            ////JHV4def9YzJK7ffs4l5J8a/8UwMNTRW452bOjGZhqjZDnDfva0XUbSo1/XMyGI1Xcc4lk7807qO7
            ////UAbmtYGu4dAqmNppbAv6E7rJzWT7nRm+2Tut37RDdWNsIc60B8qgKLgVDYGAss5iy8sNApOj/wAr
            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
            ////aKwKdox2RELxZHUe13+XSZRUG4q+QUbaKa2TVEz4Vx54/wBlq9WCKdP2QbfMWbSxfmqn533BHyZY
            ////eColKX6cKqdfForeqo5e8Jkonyo2Q53hFvdGo2jqgh5FXqyNPkkp3knG4hRv4xayyOVpKrpgSSTZ
            ////iHjRU1S8mDhfKWT5M6jPxjXc1lpDuE5UoJONJxRdRSPOxtTq9xoi6nULDx1g5ebznP3rlXqpykeG
            ////dPQkn0pjbr9YVNIWUBBmrmNnDveOPpxjdtbbrQdl6b8bG+/wZq5SMoyNUj7NN9tizFFzW1vbgX5d
            ////+gO+4Kqhx82JScbL/tyVY5UFTSg4me2DxjuuaN1BXt+A07qfCIbWdT0ehJph0AoCreHPXtENbNot
            ////USaZjdZjk2WtqnaOi38BLRD5dQm4oNmjN+MVC0myClb2Wo/uVEO8iHwoxa0WSoNJKLnitnO8fUGa
            ////rolHmqwidO0IDuxVbc1U5hy7mV9T+YG1tqtPqNu+nUvx3LVbJw/nPKR4djvQkg/OAGCmzUA0wopu
            ////2tQzr29TV+yfVnZVJBoz1rjPH7/SpkwCKMI1wupAAEQAY11NJeTeVBJqhGclOmDk8dVNEKvjzFtO
            ////JO5QpLSnk72fKAU5ucpRSqkyqpXRTRbEYDZTqBr2A8rHwp80wN2V82nm7exwutrbWuqIvRioTROl
            ////ofu6eiA5IP4WIdthuL0w8qbvKONTk1bKrarrohr2M9neqOKKmbNnOG7ZRbFrLda/JVJvJ9lLeSyR
            ////wkfZaUEHomTpqOyHiFbrCkYdHVGMIA1avZXxjqrEPDi1REWAsKFwSSGajP0aty3MBHeYhASKgGdX
            ////IfdhuvaSuWvPK9nwh8fO9ngkfJxpel9t6/IL94NG5arSYgGK6d9gspJ1R3kPpRuh82R8bR7f2Tak
            ////fPjv2o8BZZLVzv43pqgGxmGjNJN9sdTzqgMRu2MDDbSjtnO302N5Yzrgeqr7e7d6p7KFRxvs6tnw
            ////xdWwRmk/i+dQjHdH1uZnp39pJk7F3rDaMbGOdskzZx097vwv27vVn1UW1DsHVSeW9HagRnEmrJjO
            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
            ////SZG3aUnOB1o5imvXRVAPLeDSdLzLxJtK8NMSn3xHUAcfBmSXlucK5PPFHITyQ/eqMfGGt23gYpiR
            ////T0DB+fpRVY15DEgY5j3TDc8t39JIAcL5OPPRKPdVKn8nz5+lHF+S3WJaEp0+TVDVj40wZ4PB/SVl
            ////GnmVRJHeMVR2Bt5MN4SXc5SeeSrJ8mI1843Vg1WxwKu4GJBmTcDMmUhzY1e/cmQ9MoLyzOepnvOE
            ////OfzZuSfygu18vwl3Klh9ELL92yAamZ8uHy7XCWsndOSmD8t89twQ2NW91vQ7tztJKdPkqFXdbrKt
            ////3pCLPWOqvMNJ32znnWWMqKC3+I/LkXdH4TE9nF1uFINwuHscmaAg9aopEMRxvaWpPoJowmaJmM3h
            ////TTiHOFLUhyN5RiXg6ySc8n3k70sf0K/a9q9mq5rsSTlQifKOeNOIIWJ/eqxo87KrGqo6Biofuf5O
            ////cgFawOtoWIYEucHeZFanLGQCmx1m93hTdD43YvZYMNHXTuiHkHjxZnkLySi6DyLY+fmMI7GXka8m
            ////nTZx6Bjztai8CJvPX2U9tbir8OFw2MRk2KOGKjrB2enxHXAGTVCo7Zgd3lSG9SnURvsoX1fLGylH
            ////eBWal4xRANlLfXgHsD3yHBEMRKfPb7jiEm+yMnijjyACFNtvDy3MvJ3gSvImTZ8igIKfTYzDUL9J
            ////7bw36vHwZSz8gouejXb8IU+W6nywqNg6FEfYZ94038yLkTfj5JQFnEqjgwNdQ10R4NXt4Pkk5Ycf
            ////nkxw48bwoCI3MvZRZRkqiziUugP912+gc9TUhlnlBWScd7yOVHETyevzr17r6G0kBYeYIasizPMn
            ////1o5Eljta29e54UMuWZUHdcyW5L/Mc7mSnEZ6nVfllXLh8aotob1F8iz+VSCRvJUsmDlCV392UpK9
            ////VV+AChsAcoEo3lK3KBnhs/PZ14Bsutjqb13dRdecl6u7gc0o3aQtR9lu9KleSbuK9JXQHmNEWr/0
            ////iWMLo6jENEkgBqyehG1sX3yWHsLB4rHCb9OHvcgviRr+cyN5IynC9X4Tmv8AVqXPuW8MUNh69UBx
            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
            ////f+rTCq7gsiPlXbbQ2SJr+eSBQJKU5QQcnpxijU0/ZN8vCxzJz0b+JTvV2qId2U8dtWK2tLeHhYio
            ////aV3t3hRZWH1rFavihUzE5lw421wfChWq0nuty7dM7HodMHe65tR3P5x2ALPxHl0JeigklzPI8g5R
            ////7qpTKrMUxoubH+VkspHr1meObuJGa95xQNrE0cqHk4ZlY63l92507x969zDZirY1Lb6ihSfbcG3m
            ////XLFakfFJYOXYYZbclvxJPKq+FUyS9DonJ/enkm83TcOoItYot/dqI/wP922WRsH5NjbknyoS2XmI
            ////3m6ziHqc5/e3YpozyA16+Hq2hEj8rUlX8nJeSU4HG+FH9KOTOq6Y9qOmA8h1tRRuo/LgFpd13d1V
            ////7qrXhiCKzInPJshgpIei+dMOmtBtxG/zsZnvCUZyUuB0ZnFPKznYgviVqMozSnET37tvqwN9rRLK
            ////SW6OaOnTpgU4+FHK7m2VsIf5rk2y6Qzbfw0MbHyF/b7HxzTPyuStVutGsWF+2gGaqU3niMIXC2ae
            ////WjKWsVO95djHELifzXENgcg1tKnWAyqu0p3rCSnkonlHuv6DXHFO1szXpK1YDwWTUDyVFdNsKvXx
            ////rboGo4Fsbsd1ccM3osDruNv2emG5gNuae2T9AsllL1zu1APfFCrduCOqiqzf69Oq+VKpzZN3O7RR
            ////rpnNfdocOFW9sK/oY+rI7es31qEbtehILnO74QTJlWYv7bHjHEP6FMjfo0ckslncLtJlTKpQj6NC
            ////ZN0uzuiCML+iIdDpB0rv4oU2XNVfF3wvD/FrauiCZNOdJO93H3Axth8R+Rd5mZo5ubnxxZYjO51r
            ////HmoWdqOxQQTXb8PPbBsN+sAg7L6yEpCTdP3V35rdTHf6t7xOn1B8jIu49Hnkqgn61HaggNF4UUiA
            ////ViPqHkA+lu6q/R6s3WvcJbuf70fzmlg4RfyVUodmZAkEBEBdYCFF90LQoEG6Z+gP4D1b8Ea8j4iH
            ////J/FrQBgXdgwLB5MTT7rnXxvruJ1tDTAAqQHHBgH+zzqsdcpiX+VCyaiRnHz+d4iFY0tXTLAlBVId
            ////ZPac5P8AKO5rsZQHCTnjtoHvCWHCy2sQpuascu3Wd2O+HbPJ+8Jfebd3jwb9z2FsbfVo/FcZ4ufw
            ////+wXHbCx8vE7bvve32kq95E5pfJNYjNq167a4izFlLJsla8x6eb/WmiCk8Yw9mPT/APMy7kKNJJMf
            ////yM06YWZ13WuGwbAGrmyPKsTCX4sLTHETQdIIQVDXTGrY2c1lYm30LMir1bKXHZWit7CNsLG00/Hc
            ////k04h9nN5Ot98rGXiSrhejyOejymM4Ve82xhTjyoascpMukm3w71gIHlPkvBL3XGN7Zy5QMqp0qHw
            ////sJK/MKu9ApxEfPXb2kG+c6WLCTTpjOEo5qERxr43U/jPWluJt1vuF8uVJlfrWBh/LyIeQz37S5ai
            ////HWY/9V5KzR3vCp4Ks2sxZZGmLUtM9oJIb7tlmrbyayHWIN+9JNov07rgqu1VbuFFrVvM0Rk9P0WB
            ////RirxassajaeidjL/APCuxBR5Rft9NC2vwjsjdFu01q6PD4Nxzqds8o8rMagptx/stYpHwdHt/dHC
            ////yiSo/vFO/FQeDdkZU0ZpaAj8McdiPOnTm7VGvhGyqFmplfoVDt8gZdPWF+/0R/8AEx/st0UGk/sc
            ////UwqxXTWyaXPFKLJnEK6NYhFlL3oyzkNI8vPy+PAOA4D3QuKc0mOPiPy2Qfkk5lUt1Y2hq9AqYc0T
            ////HRWbgxxp2s9pLlHFFzyUke7qsRpth4tEoZ2Bx2zfDJwOG1KUpF5KqUDsJKrTqhS3D4W7KbbYf0M+
            ////rH939VfIySV/+rmT9w09l+NXkLfzu3OlWL5cO0lUP9IP5320jgL4a40t/RhyNpSXV1c8mKP2BKeQ
            ////cn933XVRjm1nD0G0dSs7rs/vZ05KN5eKj0rneRxX5dJj0v5t/Pl6wb+GVvWEyqP406f7QyjSgzVT
            ////R/am2rdyb3sZdJR9gyDlg8p4gg53uF4Ku9W1eVoWcW/njqH12zLBY+DvbPB/PBVr/pSvjvobpHwn
            ////9Vofz6HWzXNdbfSn+XS/3BarZF0v8jiApno6vDnd4tMBhPdztN7v+mu107RhH4w/kbVnFSbJJNJv
            ////4hTdilpaMKONLnkvsMVXwhC7g37X1R/ZWh/KPRcEiLD5ssZue+29TnX1mDjlagmjTUVw4aojgLIl
            ////yR6WUBJP4ydLyENePBpm6xCA7ODlkdDt203Q5hXS0M5Gyvvw46ZoT2Qo5fO29uaRzfr4Udx10PR9
            ////zrcQf9mHYP8AaFqVNE/YMk7QT2a1wv1jGjfuBqHygVHEysRzRNaoMDCu7EGvU75lVIsSTfbZrDF1
            ////Ne1qWvxASa/J8qjN1UOHh43UUNro36XR2HqFnLD6vR/l9k1cpio2b0pOmUJbPhs27We2Q8r+TZJN
            ////6rlT8eFrM/KZMZucsN9sKXf89Y+rPzI/MkybR6H81C7GBhY1LYH5wG5weqdt5QzGRYSNaq3Ui0uf
            ////ylc6L2HeobN9l29u30hA/wDojcJP+KRzYNY2cW4yXNOJlA7ZrUGsbMWQprBo368ktznpk+JRlOdc
            ////Rm6kPeYbsV+eT+PrA27To2WG7BWnwrXR2+oTVyfzP2Lc53+A7R8xGgeHOhLjVf8ApsOOKO03anlt
            ////jAYWD403AyHvntnJ/pSTyDne681/znCNPxan8kzprLpPGkCeT29CvgGrxZTV9j4GrtXFw7hn26I3
            ////huatbe3+Y1gcHO5tCoa+VdoFy0IyoGnJcnaydCvVSFPnzbP2SZqwl8TxJ0wTTT8oDSOINerLYqPK
            ////kEdNfmLfOOI1Ruz9RmwWE6aY71WFOIcqLIt8fHv7fR0RkOgFGu+73r34drv9ApsWOYl6OckmfCeD
            ////vKXfVihoxRqhQLAJNJhMV+N2NzScWqmXOC0pZPku/wB6zaGMUQaK3obnTwFbbbtgO7HD89x1h5cg
            ////cHOz3EsMFv7C3u6dgMw/K+YJHyoJd6ienphYnDOkt1PGAtplkjy3I1XZqNUeCFYoriHcKdwejY8m
            ////KZr2t1mADkGppIkXlBWOtQkSCfPo06q6vjDnDVAGzkdYeYaTSvcbMpMFo4GIFheKVfD8xxBXouk/
            ////L05UWTNHabF12yyxrCfa77nmV4BMqEo1btWK2xhyT5bkeeEkqnkQeTXnO7xjtjbU19nXLcFSck4p
            ////YR3igU1+N0LKasdHQJB7dwOLY5LYQEc+BpgZsG7o2Ssgnek6XPJTvW+jHxXnfLI+b7NVe2H3T98D
            ////EKdXGH3W/kc3+w24t3MyZcS3JdaNZnR0wd+p8dQUQhvBqry/jyZssLm3thlfO8Mf5cO8mv8Azamd
            ////E1cuuV9Y5TDjyp8glP71TQPH56otmPLjLI8nooOJzw8gnFtfxtZSy05WiX88HkSasPPHNc1FTq2+
            ////EddsGpO+H9mpZ1R8cbatfk2igdUjAkNuk0qVk+1i1yx8draciaXHhSl05sWKnIvKW+DTDkaU4bM7
            ////U68bo8WZ6x6LFTwOWGne8D4+WyLRK55UHFG6bFW8dtvg6kb0E3THDV44HbC5rawsIWHzIb0uz31S
            ////VjERUQGoOV3FvQJ7J31NKCSfwbscb9TPw11knJ54o4g/bxoDAjyaEyzNJPFa4BDZ4X7GdSd8LCig
            ////J08zzDFetoLe3Gz0p6ML95paQOqomIrltnMb6GuySasuEpxQT0zplCraNtPlzaQsk70WJXgjWFE6
            ////ZP7144pjCFjci3eS9Czs6JPp53+NQhxaTZDuF2oJ40qmuHjt1shHW/ywv54Zj0lRxNarVPwpFQ8U
            ////Iln2ANWQypS5aESDlHJWUaNGJpJE9HvVlu2HPi1hE7mkHmf5HfRrDwjubNN3qjkBk87zpkK+7R4U
            ////QDl4M9k2UFYUmzNUcf3j8zs9NcI1NkPBOfELo1hqmQlgThdfwf8AwgCitRlAlRJtA7znaUcRSlHN
            ////qvLZGzzbMfLJLJ8dnnI/eCfyqmmNu2MYWWcWmx8SjOXmHDPnnk1YqjDzsraJZWOs98pztDnBKhJ5
            ////XhbjUzsD8uQ9xD390/K5GO1V5iFn3KfF5PPos/Xg/lhTxnqP3r587QAGciMzOi9FizbTC74PaUGR
            ////uUk4cdmZ8zVj5QhxZtlyNfqAs4k0nTUZru+Fvm2wh46FYXkM88hOV9/S9ckj9RRMPEzoDg4rm+Dp
            ////tvh6TWhKOtvtvsHVsZHTy8WICznaad3NQAwCr5elMbjnYL3zg6eRn+9bsBZC5kF+SSeSUueVEzFl
            ////1Uah+VAVs/YW8KTdyyaT5jfPBUvkIq9huCsVk3y8SqkQ9HatQPLQ166oar4C2hEi8vqOVBiN8HOf
            ////Mn8p/pRMmCLhWf4puuEL4RsxVTqjkuhNxRVjZc02ZN5ULECgZp5TAflUsOVg7A3tBHQ/mIaW8Yz9
            ////GptTmqrcw8Ux2ts6P9sVtUnylkvR354lOAezvek1I6hhHFVbQPlYyvkpSj5qY7vDOsVRaB3fLcCi
            ////zs6OzE5R89e20Gg3KhKidUQKWT+cJaMauYWUxHK2GqfmqcpY72boblqrfWvysq4UNxOMqMFGGUCX
            ////pz0URnp8FKoMUW8aWj4tfOjEoLPS2DNV6L86UHTtXkNeBs2Mdk3PK1hJJVJyj54jubU+AIaFalZ7
            ////Ps35LDx8e9ZvV3N+d92Lr27/AOjV9UZ/DmXWESu1CejeCp3CqeWdd/Ru+j58qW9ynQt3ebeV/wCg
            ////g6t/WJye5FinxJ7KqhdLgeDqd4fZt5uzPUCONgOoBAbKBsG1vQUpkx1mjwmS8pEjCAGPeCJLw2RA
            ////QiF8B1slquZczP4TM1uWIty7bn5qy/RCIdEbA+t40N5Nf9I/cKtBKfq6ywJIIAg8JQOpUoqgGIco
            ////N6SU0mesD0UxPRUZTJOmmhQpAJJO4AD/AOW8BqpGmhvM7/pA0iMviaS2SyWEupRuqUMg3e/xdbsU
            ////u1G7Hfmjxe0Aj0oh0RiIAAAI19GAhEBBumfB1t+HXsAaPMg7BI4F6ZPmqPWv0vHoF535aFEg53Cs
            ////0E9dTzjTfDygLV1lAU7FSd5/sc1r2bdeoa2sU+Cu1JBknT2mTpe90carg2eLVpUHI84OJN9jVAN1
            ////NAbG/VOqrf5XK/hvznM5UXM2m19FRXJ0qzXKQ/iVWgOUKl/++b7LtmxpClm40gvw3pZun6f1ySul
            ////9aF/16N0Gjd4FHOHK4cTP/mu9W+OIVWtKconYDyeIrDy13QMOJL6XSDf0sDrb4Tnlnu7/wAyrUWq
            ////ONWCcqO0yj3quA8gEdvKDWEyT96WHLDSSJhP2el7zALMRp11NA5jrmlBJJR2vXRHbdXGi5rFZJ4K
            ////izkf42dflkoxrrr572/ClvYd95bKXET/AGXYRAMTc2dJbRnhxuYfWUczySysdqw1GeQ7VCUUqRT+
            ////svCPiMWrroQA6dJo4+Ta3ZbMg8m8oziyerE33G+E7reCp6PJN37tjYFmrANnLKDJKsQZ4SgeQLjn
            ////eqzX9Drru2BCliHu2DoUhb3bvVRIXMTmivo4+OyirU3cv2obv/Exx4OE5AXMqiTyFlHCGunaMebE
            ////+gVmpUxtxi4LGbRYX7/Rdpomc9tTtG/jj/absnnzZ6zN9tlNd/lQLJv4mP8AZbtO/wATRVWel+Km
            ////EwjedEiJ5PxoANkPLgDfqc2aNjaIY577mJpytHPbqIbBjvGLKSco5UoJJJJ/7NjXx20LoQnNXP4N
            ////J0jzZp3nHQCZFVdiyzxBo9UOs4r2qM+mMaLt/wA9bTNItB9xnTpN/GI1a47m+LCo2DoUW9271ROQ
            ////ZZyrKpIMkok8/OJZSfS//wAUr2027bW/ouONMKXJXI92/gp5Lyf/APwvXgB1t/Pf6sbmWPnrGZK0
            ////f4P28k/G/wDpSqnEabm/ofPArNZJu0ae7ut3pbuG/AtaWNBsPVY/W1+/0WXfX0f32X6s+WZ/FQnn
            ////fIOUGa/91/K0G8EMnyvvxH+xTqrbQshHjCqPBvbZ9KxKglB1X8oUm0pw9pSwS/Zd1U/2vy1awpbx
            ////2ufJNKp1vAk5VmMwCrvXeo+Ax36trdB+FIgQ0UCafiDu3/bPcfzXNtbULYaTLQjJOaSbJskkAmCf
            ////L0xSDTY7yic4JJndDGvx3NWmRb/drrd6NHPTGb+9QHEPS9pOMlu7TdClWV24o2iNdN4t+s9U/Feo
            ////dGEAiNYgEABnE2aVabDSgZm5REaqiYiKcBg5L1Z2AcqAetYUSldaw4okgg7Oh922XBRXfvaruQ9V
            ////98HUD5+kMBQ1lsviUJUSfWdlnZ8sUKwxfRDjQ1b8k8l38g6aw5ekPQnU3eflaDYLWevdVnXoiYbS
            ////BBImDIUE50wpm7K6sIeLsIRjsat0hwotIJNvQlVJtYj/ABk4e87g1wvvhwapb0NjKBYTZnV1Q8r7
            ////LmmZxrxSu9ZHQV1DCPyjyaJViX74WLBJP96oEEuI1Nr7bXEGYQf0tEvd+IPIDa3YeirIKBILsXd6
            ////G4530HWaivKQqJBGSSbZHHL5VtLWS/RSec5Ik+8Qr4VhT4Qo3wzlESnGmRmT6xHF8Arp1NLUk+6u
            ////tzgSd7ulp+fzvCyNZA6wgxEjS/FoiZdyLi7ucma71djYE27M7NdI3MHuqGxlk1zJHriftK4dDps6
            ////d4UeWuPxgyP14DSVWSJ5aGYiqxyZt5O3oeVKB2rFR2hxbCq+zxZydbR/o39kifBJU+P5r3Xyu2hA
            ////LmzfxvrDRiG/CRkxFNzzzlLYytNRw/l8ey45BwxZVpyLzKXJvPIKc4S9787+G7WNRMm/ecth3449
            ////qPDFW35NanI2acTkoOOD8u63hbz1bag2V1LyJzyrLBPfqFTwujDdiGpoZ+W+Hc9Lj+422fNJTfWO
            ////w9dD25K/uXDTZO4fpw88fOvN4yzf5No1loKJJkOcJZHvCWEMRiPIYtniaVEs86Z9R8PCoLGd+KLC
            ////QbAdKT6cSndRe3opsyTuvtRxvNGadHOOWsKdtnCho3lCgOk4oORmnT4p1Uaa8V1WbWlnq/zSow4k
            ////32yijNo1X3w8q25ZYHCscKg05Sj0LwxWO7UFljcm138O/K+bYyL3saUuwC1MFHjzPld+ADkTEzee
            ////Kg0tTnZlVVkK/Km1uKI3NVsDdniHKmFe+wJyiR00YXU45WcifTKOnJ6es4awH50amwFsORA5LSQ9
            ////2wdCpgc8rjnWYScUdf7txwOsWuxkny+Z/MozVvfE/wCpVa8BRRXtbMdObNKIzwRqxHdZez2ke9Dk
            ////r4zz9PTiii6m2mxqmOgfMYM3bDHva9Ax3l2mNuxmLzmPSi3sknKg5e6yVipXpgszqjGuytoHyyZS
            ////zuzxJN05KjtBLRxC7ft1jGrjjyvvJ1uOeKWU/wD3ygKBrtxdAT8ylvJ8qFk6cfM51w4x9bmzlhAN
            ////FYNjKl08PfNXltrTxwMWDjq7T7uSlKRfNKDjjYzNFABbiynlRG6w3P8A2VXnCAbsbf1Y/heuhmb6
            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
            ////LaebTWJLCZoeo9hwTifmdnJTNEbHhEaK2Ui5ULCjfbaaAjTVHhTfraqMpMpcpHMWScqJEaatdddk
            ////IhiLRi9OsujQGDnRNCfGK/EGvYew8xRxO66eX2pwjsNeQsO3mtwbZPmAK5OtOHXLLOippWNnz+UL
            ////ospGP5HN+2xVVt28YNlS7+t84Uph2dEhrr44DwYm+OuujmjswRnn15qmpx4VRGmLTjVcVKZbYacV
            ////OPjHVdg0xMjNmIrhV6CoIoVpZKCUZJJcSvbfH03U2Wwy8JRkqjNKtIsqjX5eDZ4rOtU+JR6GZPID
            ////4jbCniEGOOOW7+fzwJJNOP7xfT4BinU3nkvLsTKQf74HjyTH/NMLEN5bLO7fjRyrlrJREzkyV7a2
            ////gNwYCiq1ll1qzl5mi2BjX8qWZ8j5LnL5nOvY7KPK2A+jTY75No0CbuowEIevNs7b2/Z7e7lcKoW9
            ////v5jbWfdOKOFm5qnp9sFsYU453sw5WGgajnraRCGrHNn2Ylmoh+DDAx4bdrRxKReTm5xM9gR1+uqp
            ////oYD5gjaOo96Ce1VEcwyDeipPlUdZJqM85KdPkqB71TXfs327Gz9fiU5C+DiTTqM6pshvGPxjrFry
            ////ZTF5M2szA3vmdd6TYr+VDUDfj0ONWHAbSdd43crYXN1rUVgWGQGGDDvO67j+vI75omd4vfeR0+yU
            ////lqo6biV5caK9VTNtYvWGzMTjzyd3AKAr522sTMeB03pRpot2eo0N2d5o54TXM6twbgu41NovAz5/
            ////ZZy2t3YC9t79X7lU45yjjTSRK4bY42topkLyLLJUJ+0pOLCCHyn7PDs15Je4LLvvawItS1zuE4qD
            ////yKJzgn81bjU2q3Vbla7TU7tJVE98T91VZtAAp3XUXB4+2HzOb3S6F+GKqo2O8iHDsb2o+d92RYph
            ////5SMmj+kYYjIlHJVc4zlCW8cwV/8AW0a7bObRXNI/2MxbdGFt8AxBt5i39JWWTnzOUcm3U9kX9V9p
            ////JQXILfnX4tA+USRmTdzFnEmyJdcyCXOs5TJc+d6yrF7PjVL3cA6zdh8RAmZDPe8p6OOfXYshTJmc
            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
            ////2qNVGyN/BsfbiJemDd1qOWxd4gDDRENzGN27lxVdDJ6bE6er3eeBouY6V7MP21sdlvOEbKmGiKTY
            ////ARjxv1DTxJzU6ZPUd3hX8Kbtoa4t8AOQMSynhru/4kCxNnJk3227dUIeTdvw5k3j8NWoG4+1L0R1
            ////vnTTRi4WE5q5/BmbawcA4gVu9ZP2KT+OMTxPsjicokoue+WLLtTBuE7Owhq84avNu+mK341V84Ml
            ////E39/wr4Xcs2aL0VSikasV+DfPQqHb5A3KdnSxJ1/LVdXr1t2nSSi4YHFcfBoIe7YOhX35gYnifZc
            ////TfaD+xs42cowtrbsWM1PBP2Rjvxs3sTndLosa/TxpFv1QaOmJKwFmsPhUDWljQbD1UETf3/Cti/o
            ////R3Mc9OtA/nx+C5pBvC2n73vrGyEBub1NS0NzV1PI6ERTOt4KoUWWfHlW3mn+gjdU1lUytPj9PJeT
            ////6WOsXo+Bx8REPQhl8lH9nMl8vHwaP9HyXlAqp/5rDVRru4AzAqNoSVs08HGxvwryj5UHyS9Mpkqn
            ////wbW8H88NccV6uIM1TNKXZM3jG75fG1NeCole+Fqz8ZQrjCzEKNzKSeM2H7bdq+GutrUWxAAcyAuC
            ////wMR9Udh6BcZoTTJnjt16qbPBlJHoqDb4iFHCjh8GTS/aT1nhT67bKmOKDYFj7en48N7QqaxlXE9E
            ////J0mcrxDaxwueNKr1168a7giDJqdKcqMmSiZ87ZxsxEGfhcjZSTY9zASN26O/fzZjwDhpcR3eOKQt
            ////467aeh7JyJuTJMKOOtp4eUfiNcWUk/tJ43wxD56wZSUOF5IPekZ5AVat1l1FbAtzLJyZKSHnio/d
            ////bNV/zvBvPBOB4hL+O13L7rjNaSe9huqu9bNdbdk6okoyvdr53U3M43PIN/L1BJJTtUEEqIRUqbrR
            ////G/bBpPd+Spzuso46Uaw8878qmTU2hi2iFbTWEP2135ba3ky9t44XFsJ5A8MciMlDKfPF5hJKVGef
            ////qHwxALGk7Ju53kglQ53w8JhCS71WdZypVDTT5YpoCWk6WSrmd4HFEzGb095v26+etoflRlQk2+c8
            ////k2lJz5Y7495dtO2HD5xoesLEwxxvnN9pxSFtG+YlKmTFq3T72K9WVDrpPJA5yZqVT2XHJ0uautM8
            ////tY413RobKPKZlafEo3wseT1eR55zw70q/Pr/ABthrqFmFLiUZy8w0k07Qp6vGyzc0KPRUdNnHFaf
            ////YI43X8nreOuwDT2CuWO7JI2EBWl92yvrsDzZLDwllO6I04+ZTx3avH0iLIP8IzzKUEHFLDxJTx7t
            ////shvoo82iVYvWGmUnRxRqxqZqrHmcaZdDwssZHzAxPE+yvLCBGDU6NLKjNdvVkC8o2dLCTqSDlGKw
            ////4wqrZS+2/fPahMwqgF8OO6FjVjTqZ38aGurUIB5fGhyJJ3Mzlhv6qr5Bbvq2sq5xKY8DPn9lZZxy
            ////jnTCDijtNnWKxgHrdY9jHpnRc8bXwqHGBaE5DqjikxM7fTdbywLPadnVp2mpswO0d9LM2Fu92X24
            ////7RSoZqq3sGL4Tph6ehvBlD+UxKcqeBKzHhTvvBokejrWOosBVEnkZx7rnPhYF3jY1nJQOslUWTO+
            ////2Tj3Xly+TW7T9XNw5bshax8ScmPtVJcc6Spvz9Ij2tqvuarjrfy/ewHdPZyWj1UPHhmEzveglj2B
            ////VZFp0s6YE7H53ar7Y8RD0mCjNe4Q282csqJLv6ST0WO16IzyDk6r9LiNNrMNYadOX7cCyPj5cvun
            ////jD+BUbje/wCb06ScbjehJRmk9jcOIQhRsg0tI15JRk8lrq1jRXG702NA5fs54Bvjdru3+UWcjreh
            ////xJhOmCZ21QjdqZhI2FuRWU+fLvA1uxJfKCclLBGlOmDqdVeLY62shJfK0+EhaMlWsPP/AMsqs86r
            ////qGzTcb5zBRnk9tx8KhrtaVHXK040yeKOr3xHdTTrqqg1DHap8zgbvcHjfOu/SQGvDYScglr6TA++
            ////zntrkmylkmGEndpQO/zduNvNrLrMqDnm5k1Zpt8NVlGBBsH5L5WjnXPaaYzcIJeQ/KippIR5eHka
            ////nOJeCwgjOP3uzGygGxNv8OMZ0BcvkQdzkgbty28Fr0MCS9PR2w31o02Wqz0yguxKnOWJVlIxrDGr
            ////xausr8pZC8s5YacR3a1MqxdEWp8XlkONRnd8n0aiwY1Y5UNHDwl4cqMnij5gkPCj4jDfe01hqjJq
            ////XbODBtgarojdeC3AF4YYOJc6dsr1OvKESa75432O4eADq5CzVlZK12r3ecSSdps1q8YwiI33tSd4
            ////ZQTkrvOJSrNNXzh513sgo8pZxSeeVLJ/OAvDlVaz1hqrAdyJaW8b0iNd6UhL/KfZSotlSKR6EzRx
            ////B6ygcV7o7WeyzKMcvdZKOeDu+vy5RpaoyyUZOeZ4l09VY1wvowLfih/+xOKOuq5fPdCoGn8j5gjA
            ////XPPZc0vV0lba1YyPtcbq04vgrFo8oz4cKgViBYfH80m+UKL+NLK5mXN5L088Ud3yPerKqqo4Fqov
            ////SUefpzppZ3z9Mmtq9a9QMyU8qFhRhxB2gr8rox4Ba02jqOGlIPLipR8SyAyavsFPEu8oyx/GdsTo
            ////fpfIaqd91NrVdlg+TjjZ6P8AmlID6jZt2Mceb+nS5nf4WXeTRu8F87PTuvZ8aMVtew8CIcAhg4FP
            ////dpnAZBZeOjjEmtffaz/aSTVnek88UFYxrxfRCluLrQHKlJKNKTPnKNo4+bHEaWdMilJhnAbPTVBt
            ////PupH1RhyjPgl/P6YIRu+nvPnR46tjQR0eIbBmpftY9jqvAwMVExL3cGZj6/lVWi+jT6t00sJf0qJ
            ////KkSjJzrOkv7k8Y4qHVt9j2RORpJUl3D2eSQhebvSu9VTDGuiPNsqeqVkkJkGWcjKdpGZp/dXl+st
            ////14i2tEm3z2K5yTjVhBBKdL7z6048MPbRxijKZkO6zci9bHwfKwwdwxdy9xfnLuse/SEZcyZG5HOw
            ////VSyYWPjuqqijbTRtHa3kReD0OXy0fD+05BShVnWcqa6QtDZr8Wvh9JZ1qv4VcoiyRMnHlPueT6rN
            ////VWbUDXtrhVCu2tsze1JoueSvIgAUfqVVQ3AG7zbcfCuqp+ZiqtINWmxwSd6wHxfrx4UQsMcHmKEB
            ////5fZmfapxfipYa7zlk97uHdddfjs33spPLc4pOSSvJInoVJlWIUQuuvEGcZKjNXesRmzB51KUM57i
            ////vrhx1+MGjIx/IznoSjmVE9nVY7Y49G3HgC4HgfdcyFgSBOoHPcpgFe8nyoOEp5ZijzvOlSb37PBj
            ////irwoZ1ONAS9HgDyXvI885N7qmzryxRClorKfKNL7WYIJzrdw186djPxzqivfCiDyP0qmFWqNHPm3
            ////woLCBoae7XcmbHapmLAhAojMnkQ713bkFPprroaSHOv75mZpJC7813mPpiLRW416zMyTkp3vCSGb
            ////eFsLMUM/E6o5K7yTjTkRGcd1zmvxvxBo7e3v6cDdsmN15T4YNh6KfnA+XaDvJnST0P8ASHu3ft9v
            ////htFjB7/UAYIO5b3WH8Tu01Tb/EjRZgGhFQ/uy05M0PvHdVf7nRZbtp9G4pin+rJ6JxB68C+lEA+p
            ////0Z7oxCv+PCmuqxprG3ke/UU5ZyaUs3y7XfixpOlz/ZXq68nX26uEt+rnlIkrk+yqOOUcpJQOHstK
            ////mdqr+1wsjjZU3k7ysqtI5507Qil148LBZyIyiV8ydPQJzrVrqtxvZh5TJntzM/YEp0vdU27fH4wG
            ////5sfb2/j0vo0t7ywN67xAwPl4XcNzSHbORcyiUtUSbGgNfxppxSLdi1WkmfYcfCvZCGpuxhRM5PTO
            ////4eMacV0Viw0s37YPOGKY766WVX2hNElGAd512V/Gi5uxZU7pirN2NgDCNDBPPaYk3ERwNUGBZs0Z
            ////ovTdZqAa9rNeNo9v7JrwB2D75jihOklTxM9tttwI162Cc3R7OAeY6+TcZ2dMJK9vr8R9KNzHE5WK
            /////mNOymipoPAGB4H3XtgzXVD8SuJk9OetVteK46mCn2RH/JbiYVOmaW3jV669TdjRmtCXHlXftH5V
            ////A3wvhdizSZyZxZTZ462JrDf2V+OMNY+YT6JRXdRVftujRbQDdlCUFReiJn40a9ohVRiDegFx14e4
            ////SkRENWW+ntzLm8mXoW+geSkiZlyeU97v9n0tv+MDC743gLax9eCUZLh6veUhYbCZUOHssQ/54+XD
            ////c2Wn0Ma9w5P8neVp/SteSGTnaD1k+li8u4h2e6O2KB/728LBAGu91uMueSuW+SOXkiJOSwdS58Sg
            ////cLwdbrzaj7w443CDPw8PEmJFfwm6dJGpGCoo6PhbAGZLjI3SvuLcqOvPEWajzjREkQ/U0X107fW9
            ////llOlOVe6knn2d21R5Y1t2kvkadEjVE9Kh+rpRrA/LJXo9Mwxfz1TAnla7XXMZgSQ6kea5rfi3wub
            ////SWEBXvCvq+T3LFmOBJIBmS1XmUw08iJSLyyTinafMqP1OK/KFVqx9iDnYH3o8yCCf3bvy+PD57Rp
            ////OPjKeclTT08eoOT96SpqkGqFbRuXlBFe8CTlRwnrFA+7Yp1cY3s8IKGDS0ZbPdV3jRWJ4BTkjeDo
            ////k4X3VGQQTm36Xv6y8NvkDJqyW6xUJ00dME0xzbjH4Q3WtG78fxwJiZ2fIJ84/L0pZkqJRzpmi0BP
            ////iFHxFprYCHDyaQFDKREtgEssgoLD9v6etGe70zmaT8snkc8J4Dj/APLKca+WppsLf7mXlEnKiUOe
            ////BXaA487WpO63yJSieCYIJwEfCoPi8PtRO6YnGNdMdotBY03HqERN/f8ACrUGStOQJyUaCYIiq952
            ////4q9YNHsoMoJKAtYcqOCeThXfijbTS0Vp5RTpE+Ud/m6qK407Y333NXXKRLydLORFLAvzayGKWLah
            ////2DqobCw27+6ttNKlm7ZQMtL4eihW7UDyPIRgqzrHCnnQLHJPm9gybnlRwdpPDvSpT+jou1bY1VNE
            ////uTt1kvR6HP5f7m6PdRp748AjAcBwqZxysfJM4dNT88oDvW/GyoNTeKby2Xf+ZIT4eh04ccasUH+d
            ////cN1cYXb2bZq/+IN3wHePnxZtvB6aT23lTH0ZN7UJK9qOukRjVj4W1tvb9v23ubyZWthYbed7ZX7n
            ////yvTXoUsUqNEOKgpsEYX1Mjmus+cCd9tqx4Dazqzomc+V0fjt4spFpQNMnpnw531eG1vqqfSC53Ac
            ////qM0RO0KvW+PiFLSdJ9zE5usRqidNs3R+XJl51uHMEZKw3Xyh5VWa40N2ncwUz34PypCjjXClhV/j
            ////5cvuibrNRoCzkf4ye+O+yijewMX6Q701Yq8GR3waSaZniU63VbTz1M1e1J0zFvjDfCMdQSWFv2eV
            ////22Z9ivfA8w+bz3OODyn9psLNzpHPfghdTVXS0kZF8ubyyQSszzTnuF4d1eib5jr1URaAXI9O7nE2
            ////+dsLo4hS3ZYbO6E3Fvpwpg0EdYefdn28PYU6IgbaJgIrJhsrwxI5rYzKpkqyY9aDJGjlJI3spc/k
            /////dUqlMH3gjude6i3hBsT8tvVzlhkqUTy9zr+zf1Oa8sVC0qZP8skvMiz5OWSSeR5BKhV96u1T7gs
            ////p8oeUW0Id/W0yV5c5Pu2TcsnaDjlJ7qqF5Je4LMbPJs5bQUTAEFyxbKUj0ypIrZCOho+GzcXMZZX
            ////+7LBlOUBvtY1bed1XjQxxQUcl9l87vhTqa72Wzqv9lyhWHSNmBRvjvTrzZUC5As87ON1tMnw5n84
            ////VhznfztPQrE6rNVSZSlAaqgvZ6HjfHYOZAVzGHClFU29hhy4ybJiKHBjX9Rmne2r9RxtGOtn4715
            ////yX2V8ddPyp8YNHqNUTNzNsPHZzpsZyIzc6Gg73fdHzqu5UMwgWBqGllo7cU/Eb0ONUDOh43eHyob
            ////ssXzv4wYtu18mj1QrmjKTt4U4hRYNVkGBa/++2c7vLe3lvD7OWErssqCjB5xEtIGnf8ADkFNaeUZ
            ////JSeZNG7bHXRHWyQMo+8HTp2hsxXdQFW5oxMen4M8OrXVC60flBkcxecaZSddR4V7aqhjYyHgDHvh
            ////kF75o4nv/DkOCk58P4lUWST+NijFNFTNXt44ozRHV023WWUbrGaph3w84APMR9GJZ0E5M0V74V8f
            ////nUx4GfP7LzzOff8AlUtlr51Mcd7A4MeIaotx7UCbmJ/XWN9V8WjctfNdASSj4fLFAspGKtH544U6
            ////42A3thYVn3w9qXNM8zn3/lS8sVaQ44qOA2CFm4WKJ1RJv40ACzFw172Zyh6HGmRLxbyvi3YxV7E6
            ////uFO3xsDEGnUiXlComyE9y5xjbVvrZBUIO1AgV7bX6c4Wc2Jp541Zpgrhdwju9WsTIPJosfKgnQnn
            ////kqI+7QpxyujSyMdb+XYggy27MpuE1AwIt4qd5aYdxhhfSfs9+r3kHf0o347TjURC4nOvdlPnCDb/
            ////AGQeSX2MKdpKB2kISVAd6TDr8PXXQ1Xcjcl0ckUZJ0zA5Ol70piNHhT8YtPyjLnJXJynWvJe+EOe
            ////p0udZt+fp2wxC+Dc6jbaK1hEhnZ2lICkjiS21dFsbLVeqIZ9IgG+4uwzM+9usUl5Wu2S7rFYqOzF
            ////GnS96D50crt+fvXA+ky7LcazJ7klWHHmvDtF1vSUiaFFcOyaradnPKnLJ10pYZVS1jnSvjsmTQqu
            ////6pk3v6x329rQH12NT56PSeTk+wPJzrvf6+mqqnf5NsNR/DngNExTXNK80PESkdt6538RfEYtz8rS
            ////V2DUrdMUbYphTyoWPlY8nwqWHnrHyOdKlKnv0dVNXoyPOrCtMbX+p8PjGho9c6p5ThxyA489HRTn
            ////WfcqrxjvZ1KHocUXmY/9pwNOqLbewawDyIIlXoAucW9iYkkl6ze/75UXZ4SjOKUHO2eAFlKX3qPP
            ////xrHUyP29NLCDiiPvL9Tdd48GR1k0aYTOnaZP+W1jTthfaDLEnyie0CTx/LW+du0fmz9hb99/cMbw
            ////ZFjYeXqJdnjhSilSS6V5Gisz9Hps1zqCm740/NpgdeeKkxKM06eJUfpto01aqaGitx54lnjkqPQq
            ////B3Y16trSo4ykZUyjn5g780mUgGPnW3wi2sLunE37JDJsFMEl0pyVOdEke8fqeQQ37os9ne9HagU5
            ////m9SafektEPvAePzjraN5Nv5Ygd8yvoJTqhq2/P1jQzqMNzrMzisxP/efz6PFsKa4jBl1B5E5ck9l
            ////BvahZJJxMwd70lTeGy3FDOZE6Xp0kxQpzJwv6tHSzv47GjtQ+cwmSZ4+0O7DCgI0Y4hbIbufbs6K
            ////MoDzUXSMhSNNPMPPa0fzPbr1jYSFT03ua945jO/ql5eHynJWObJjLg8pOq70pTOHuG/d4Qpi0P5W
            ////Orblsdj471k9lGR3XuqlS68xiFltni3tayJ9cPJ7LeT/AGOaskq6n8nTZq/nk7VUl3HJJG8If1T/
            ////AG152a6Q9fTLJ1dXXJc58KnlJt+ZQlHdUubP7PnhQFW31bOCZG0LplhrWK8q85DPbn3uJ8hZmSXK
            ////dpiTZHvUglP713QY7saxpoZHMkHLUpRMqpNvwg4fy3Zdm3hrjSLaKPjLw4StClNInqAVJacX2W7W
            ////Jo8vyIpRnhswfm+vMfu8PQIbKBDU9a2MhsBl3uD7DcVBY61idlDXBvuL63zWcqhwylKUTJrneqc7
            /////KvT0oZHLKWFaY0k+ZD8zXrhgB3QbVZP1h5HlmTPZCE85SqzrOc1u2Qt3cWUy8tOQF6I80f0g3VP
            ////KAiqzZ1uvF3JoPAe/n9l6NbRQInzOX35YTyXmhSmCdTiF9LdS1R034D5DrspbTh+FdWN+pyTipK9
            ////lHB+XTYuavcuMn2St6Iyf4LwevbDwVCmSuR5JRzCyH3sGOTe29h4DEUkRs75J2H1r5iJABua/IGl
            ////aX3sxVSyva6XX8I84w162BpRyqZzUg8DtdAbfGsWvgo+j2ywOFxkyql4/pHSHcPvf3k9M+X/APdL
            ////l1UUh5CyDJeSUlZBGHHD9+LE8M1eSlLmIXR7J4c4C0MCDEYg5i6Wx3lmruNjhq+F+ZIc0AOLDqQ/
            ////bw/IPIi/pR98eE+43P8AqYjEMb/JrRSTyaZPZOJyiRdqd+PL9S8sfEfFNMfKw4vRLNMo+VNUKviy
            ////b9qEaXuenzuOa6sa7KK4C2ogoEXgYvpHvAA8FzqO1rFRDYPslcMht9FYpG+SUCM5GVp83H3ZLizw
            ////aPXzLhYasOdv9W/lRCmvGpoZeErnkUbmaVYf+9KU1dPl42MgmLzitNPHqLBj8r8UtP8AT9h/Zm7x
            ////qyTEGZO8zHoXllvUqGSj0leiT2X1W3VbgtZtviVFehTgTHzuCsaLbmit+Pk5UNGgzfdjFQUMw3g8
            ////1hxZJJpx9QD414trsFiwtxurLs4/mKTWFh3PHZ7UuackShlQsVF+2mCfdfDfwugDNV0KjlT4R6aY
            ////CuPjuCvazDeCr2M0dfTyhVupHfULOqQZs69DVio4JlOl3BUHGod2ti3t+8eju3YqW9h3PHZ71veU
            ////+ykfJJsySbQCdLZRHbCn4RZoGPkkDJmvwprrGgOEWYcpJURemZpdOSnH3my+yzfQyCY/powqaEYx
            ////8KrqWVRA2BvaWz3pOlM71Kid6ZqZpfZXY12c2Ui30BXso+QaqYg0S9vTpmiJh430WhbshGlg8HzN
            ////F+2mKI7qqYXbN8KhQW9h3h1Zn7FJCeEsjkCNYdPET136y/bR4tWOUEqDnos0vtlGN3jTXaxKVEo1
            ////i8LZmFOyuGqsdtrHsl8l+3pSEvI3+jXP3pVbiEBorqpYXljdsPVT6nK+zck3O7fxvelSauzZeMLt
            ////VbRw/FU6WccB3vFkdm3G2l0yseiP2xp1yUKRxTCqiii5olUL86prJCqO2rGyNLLp+xsPeffMbryk
            ////dabNeyxi2kNY1smlmnGmcsQ4V3wEYiLHFBt+35+myDAsr8cNgfCIbfO5q9MI4n/vt8eflDfFpCk3
            ////NGqKSZ8LR8qfkzJTlTpn9989l9gXWg0nSXJJKU0x+V48dcL2sFX29271UkLNKjJmdBCHdsB6XQog
            ////zCei/NUxxMz7xtso16ubPcw3R+xp1+e0I37xaPZSmxD2MDrarb6fTlSwoLGg2HqmGYvOSz345J+v
            ////F1XwZHMNpnirvHwDgyks9n/fKI+dsBHhVRTSzPz+aMNJ/B8tW6yG+1l1b2F+/wBE5HW/s1UaX2Kj
            ////XzhgbWk4FSNUjJWFHaaPl5b6WgeBM7PeXw5boxZ1SfehJRlx2NVVFLfEPUbB0KXt7t3qnUo0pkOF
            ////l8Y18tzEzNFSYA1XjjyZeMK0eIUcxp4jvZtvCeNLmLNY022VURae3/b+vpVnv9c0YfzUPPYLhtxr
            ////zmlh3ZS5YOGZJdb4XAjTCGaplKrPs01cWUnxlaOlOX/K1woXqdmuagp9xX+eKY0NHszo/jr4V89T
            ////EzDiStDCnx4a67xgGpqnyWWj3vVrYRz1763MzZ5pHfjrc84cscxx5EKFTtU86sVwrgDVTqjkpmio
            ////qo5eNHqzqUFCaGK44v1sSzEnXyZnwcjxCLC3Jd5+shnPlS5pp06caoGd9tx20btTdjDdJiNHIaOI
            ////b24lmglUR4QxbTvuYGe0nhHZfquxdFvUyuKhV8+NNPmN+pk0tVpPPHCjVC0G4qDb9vz9NkGKTwau
            ////AsuvPGOfAJdUKt/n47rKA3Juc68f/CxOd0erbjj/ALNjCZ0c/wAtde2EdddDC9SkWqxTR5+AVspG
            ////KzjSP7my+qnnRWzbT/zx3eLLPQ9kO3zBjwM+f2QupU9Ob8RshfC2tlJG4Vi9RMlBoVAY3Rsjxqbi
            ////7yv2t3GGy3lti0qOQxGgLJxRisR9Gn8E58QpfMHEcR7J4SHySkvXMlhpx5BKdV3rwjqxsa8kk1Ul
            ////ZGusmaAjPIf7/RyCqLUnLl6sAuZSnCRm9CbftruZHUS8WGz2dLDz84pS2Zm8I7RAbWqbfVXmGd2e
            ////ewgPlxuwU9hrzy9C+BnLD1lJXklZ1glqV3kkuZZofzWc+NvLk1V5WZS3k+VhxypafMqNnLXT8Whk
            ////x8rP22qzXbVubjn86ZPGk3cqKd/prCeB1VCw+F1ZuZHNy4wzdUsdrSLj38wSz4yuAEtrcJzZPZOv
            ////Jm88SnaaijZruhv5wU0685eZ3o7A6xoxxaiMqa/9zYp+OujlCAspJyjs57rE/vVoRzPztwI0Xny3
            ////bKlUnO9U8kqYUZRwTIqs6S6uQYjG1g8HocgLOWL5g8lR+Wr236obmJ9qI0qck5WcQJsdfc7LKPmy
            ////aCU6Uc+sNWEEI0/uqnNbdmqgIUt55cZcf/bMcV9iwAILGReh90pI0ufzJytZMEqPdR3fDW0kSfS6
            ////fRHaH9MA7d2Lmh/PySVHZueETKeGafkYjqxc0tSceGYGHTSMhcdmuNXiGxvhT237cDRZpdOm31Uw
            ////J1QJZnQnzPvSXwhCka+WxpCTr+1E5M776nVZ0q7r8QjZrZku58TsySq0BKenOdmLmk51r86LzOZH
            ////M81ilU5rV/ztfiqDfPjnsj2zHFI+CbCvDlXLZldJ1SfmUpZxJps+d+mxvvpgywnXzph2YIzyO9B3
            ////Wy7ZVCPizaRr0aAw44qYPOhD9dmeKx3t3ULzkrwOmjjyUed90Gi++oR+LNKfxxieJ9k7zHpNPAkl
            ////UQNoQCqzbC3eAs4+jKOT0KHMh6YDV0gVesWjNYuJKMJO/AUd1thRw82RBUro/dxBea/6k/0Z4yNs
            ////emL9qqo2jazNjQbD1UHgi2nyq13OV3Weayc2WCUrRP57f9/bB4hrotoZBen22ephKw55LlpKfuve
            ////VWfYor3s8HOqJm+9nHzKfuqWv5fJuL0fJ6BQjJSkT/aGB+Y86mz3gZ8/st4o9UJX9OaUlRPbbdmN
            ////1bBQqf5RcCjp+j9L4122BRqaVDDe7nHFEz52aw3hYAa4MTTqiV7nIWGkkEHKPy1IjGraA4Bjx8uX
            ////3SngHAcB7qMem9HkVDO9nwobsXKg4ovSo5867VH4YAGWFhRJTwmatlPxj4amJp3Dn7wRkzMc428b
            ////+d29ewv3+iiTjc74JfJcEs+RGPG3EK4Vwac5JoCUBiN/Kp8js9VnSX98u1DT5wqaMZPyD7KUHPI3
            ////NyCf0ylViEWeCheE3MlQq2U4C5nvA8wzXd/m11JJcW5hyCKghsatxcB5Ka8omW6VUtyx7efB71Rp
            ////wzZMmU+4I9lVcfk0QGPmd00zDONsIaxxdRUyCXPGmHTx1A1bI0YuooiyCoXzRcSjqP3aMcQpsouh
            ////FprCw8vkHaTSl16AKa3iIqPbzVAAwllxG2kksJ38sNMnilmmxZXUAa/BuLwemknTRnz85vDeDMkr
            /////V3+bcc/0mi2hjgzgOB4JFOrOhK9lp845VVUX7gbioehw0mk6G+nXsCq0bGJlr5pPEqE9zjX6URu
            ////ZBWGzpZ07bX5fG4K6RaOJ7/0otrD0IbvcCdhuK4rFRxij20/5VBttv4MjqFR23jq9OQ7iZhs0XPG
            ////nHkWw5Dd82TjF87btrDyEbBr2sWH7D09aO13plPYNDz7xoazuXVYq/BoHZCrld86WkJ1mnOaT88a
            ////T3xQHeruz6gH1HfQzDdaWdeml9j71ur1D4V1WsoyklGBhhxJQzH5XNrdmIb6wLe3v6cDdsmPcqE2
            /////mMZ3HOXrlXKScoes6Ycd54GHK2DI5j0AoyeohX4YhvtZBUK5rTT11vnbFkFQqA34Y4xZLxjnwCn
            ////8BqHn9k8DH8cSZPFex4UWV27N+pHesozlRf99HgNo4G0KmapirFFHl4DUxNQbiv5jTsppqY8Y58A
            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
            ////cRz8PHAxg2yzdIE7VV5007PBobau8dF9I4XFVMklE4pvoqu3UM8FmZOt3Zml052uHx4+UWR3eVNF
            ////54MCKq+ccaxgya8F81Paa6qz0hujTug8fLl90wkZR7SeK9jHyuohZxZCUG4q+QUbaKa2WDFRxpel
            ////xqt2amR1CqdiSVt41Uj53iwvi3sRiO26yw3GqPPTpul21V7OI2V1McRlHGmf3MbPHHBvljye3/kg
            ////zCRsLA49sH7nvu7FpdJt48qKdXARaZkaDsF3kow9sOvHprsZnyOQTqwFhpOcEp7442jdSIMvPRcd
            ////pjo7KIbLdmKRF7b3bvVI70VEzf8AfbR+dgU6r2bZZM6Xw10UANGodXIG7F96DSjby5WUt2mvwt1e
            ////+EWEImYApS+VHGijVsjwbiYVo9nLf48AY4Z+CTfzo3VhspHh2M0tdsNca9l9ENzL29271U/g7eIR
            ////MsrR7OIQ21h48GOFgSUX8N1octtLE/xMf7LHCyvSjdQHrsorYUC7TsB0V3hxhWy8jKt40Y2gO64W
            ////Ri0szpqMcxo1/FTRKjilGi32WUU1/ODWCLe7d6qTpPqgzeZN0EbNXrZQyO8FRQmHW7YYxYyk51U6
            ////jO0NwxurxzgyO8Jn2xXtt+6zf5CwqnwdEX9fdM94c1FHliiO5mesKOnP7mnA+gcoM6nppfxo78Qj
            ////ZXXEa4sz1miM31xhXy1erfFvfsPQK2sL9/okEzRGQgHpiN9FjcTDvh5wAeYj6N2MN0mzlu8eINxU
            ////T3hXDnj/AGWSsL9/omF2ThO0w1Yp3c2UkxpNFIYjr1YiLIJRU17XbGq4BxQynMhq4izCXTvRL81M
            ////nitgBXVi2q6lns63ysN9odGvA+d1ljRL7HEIQ4xjHfriy8556bPJEMU2a/gDCXUqmL6d2z5fPWyY
            ////YbnRdFOLOGvwYm6yZ0sb/lr14CLKRaCBgfsQvjrx4VNL45xHEeyLax9CGPewE7DcUmlpQNMo3hZr
            ////4Bwo2sDEukGd8rat44iLOQwqdmZrlxroGofFjiNLOmTJX5ijZbCAetg0Rb7RY2GO2fewONgvKj54
            ////OuaTzxXrRZx47KwaihLo7+FHiEeHGLTM9EE0WeT+67fXXRXXVU0YqSgNGF0PCzGxl0wkEsomcHf8
            ////vLxCxl536IvXtsC2MNfBkya0lvLZ8NtNTOt3uadMIqEm+7EK9tDLphSbJd6HZuSSb+X/ADNXMMU3
            ////NPMn5UI1RhPah0+Sn90znlq16+DV1RpcwMHVC3AheAWUs6s6JFOTO0nJ/hiMdkWLC/f6Kvt4K8bK
            ////7GnzY5A3KyDweiN6F910Byf3qqvXeyOY9CUphxJWcbarYU04AGh9MqOK0xS2fBOFeLt1VbLHb2dJ
            ////yiSvfP8AK+YR3cLGtBEUA2Dv8KRsD5eRD07z2+tHt28cb7XQV+uKm4rTVhpZJxWnJT96js1VU+UY
            ////2txRrySiyZ0n/eYDDAXcGN6HOCZr8x7rfqut1DG5k0quRZXaiOZNoD9Tvp4UbKRZHMdeaDpSc+KT
            ////0qs3xHxjqZ0p0s6YSSVoM4p9PEeYXMdLMJSpziVSxCecFWbR41UeIbmYQo9LcyOcOVlIzyCeVteL
            ////xCmLE3g9XZm/ZpRMxm4+87vhvY4+JRnGlnEko5glRWp+I8L+bM9IvJSijzrTxiOc2+kdercwmBIg
            ////4I5PEzcz/wBlxwgA824ykSnGJyTikZ5A/wCavDb5b27GZmUsOJNJmP0l9vLnqu4llHKlB2mPmRhi
            ////PHVquWtqnaOifDW44ZO0s8cma5k20Zs0V3qYu+fHkyujNJNNO0NnvIhCO7FQRZIUe8AT7fkNseLL
            ////CNKT7Yr/AHoPKvHJvLCwiRfnz2T5OGpf6ni51XZcTpn3j8znXrCuvjQ0suP70MJmStCoS5173rpv
            ////tgPrU0MutUSaaUiNGrEKxjs+TS053Y8k3QRnFLE56NRAc2Tc6ceDPQ93f8So7exMPtzM37rQyUkC
            ////gJVFzxUe7+618I7/AFprVzF5xqM5GqRrkNeaqgVYu17Isdkugdq9GdNI1yg4j9N+T8Rts2woZeeC
            ////A5K7yZok+in3TPvu7A69zT25qxvPUKD6isujPxd9vtBsqV5ObnEqjgzxRR+/8raaqw8K5K3k8D1B
            ////hic4maEf4vehupq4cqgaV8phSw37yQaAlQqHu36wacDRCi5q2rl6boKTOgoPInegIdHpUiFQatre
            ////WNvKlwrXHI9ismcsrCFZtlNwHbyfYUec5vdzZ32MPHz2UAyO/FR/3bSeednUEqYR98wLLyMrR+3E
            ////mFPdq+flXrZYNVHewzw+jkAUx3WRCm8Gzq2f/Td4JNTzyoo4k323D53VR3wBiaNAclzzOiTyM4VQ
            ////TfvlluBY4YbmqieNOI/dd3jSNQDS3adJKnjvxh/Mgl8Rp2eFDeiwmJ3i/wCyg8fZx0fbIJMeBs1M
            ////k+w+G6gbvFiiP2ozvsLLoa4WcoR1sgvQ4/OJ7T94+Oy6iPgwRqjjVBJRgQhcN8LKsbGtgAAHa7jL
            ////2HJI+N48VhOrZXUu6hE5UTJXtZ8CbE3kAY20sHeqONLnitATi2IWfODJsqFXcziuOLgphWxOT6/O
            ////k5xJRUxm9uNcKaLrGXtssQzbLkynUYq/BNiH7zXz+dXEmYlmjKInwHAU207+DdjM7nJ4r23gPhwb
            ////ipVToTMzpq6LqseVbQePly+6l8DIcB7o4MyaZoueq2Aed1DJrxVHJZ6J3OqjGKB7TpJRc8aG7VC6
            ////+nEGar0VT1Xp8RafxjnwCS2Im8F+jGaO026uyunG1k11zxqjS+xpxsp9WBhU6XPR5DAOWy7zZyON
            ////KcUnOeRv+6elvhAG9TCcizuqeZntDmsMBur2b4yWGnTl+3As43gvzodN7YRCOLPCyiLNWdnYkz3z
            ////o8/jRBhMLiYaJpZ2uqnGrV4sj/iY/wBll9QlhoSvhgfCqEGTBS1Tobg8+WKWF8W9hm/fszUMpMRP
            ////l0Kx2eYMollCaYSTfEbedwXsCyfjHlEQ5AHqz2k26yVSwk40Z/NhzoKPXbt2wYSSezvKBzOMlGVM
            ////TyjFQgOqiulme+DZ3QzwCKbdrjfQy8+FU0YTNaA4Uvhsr4sz1hs7XbQMMWhq3MwhJqc6dMJJp+PM
            ////AHhzbso0RgE7adsdcY42fnsroQ11CPjxbuV/e66uVTLphEzf5g7/AAFu2m/4vJu2hK341V84MDJn
            ////5x1fzvJheeCc+IRMyzf5McLNOmvTbVuwAMTUGnR/uQ3BbQGKbqG7JzZ0uNgDjluuYUCUk88aZM17
            ////R32XMpJzZnzGvaGPmm+xxCEOMYx364scLNJ/Y7PkA7auDMJdPx1qtHj0hbzopiweGlno2Q3RhDw1
            ////16mTZPmkmmHDDzoouthiDB6T05Pa413a4a/QaWEume9NKXCrG+7X6M8woddG+AeYeHFns8CoF3cR
            ////wHOOpmqYUGqndEfIfHiy6sE1ZrSaK6rdxDhS3Wdmox1+UdXmx0yBQQ3/AD12VsnKPa7/AC6TeW2W
            ////I6IRKdONM8ddXxgF7KSc07UNfnt86tsOKeZKLOo8huu3+cGOF/to7uARpDfyha3qECv9Xf5ssF6K
            ////qyOqFW26mO9k4aztnmDG05pxpcSsU/OjbBhCeDnX+MQtoxv4s5HcqOnNL7GEMQv8mj1OqzUzFtMa
            ////t1dLOpGvBVEkrA0c+AsJdPsv+6jCyGOGrUy+nKJKNnzdePn82271UU8yMIjRjfZxtFns65k02eNm
            ////D/nwpq1xaWHqNg6FL29271SC9CjjdCVGIXa8atzRgs7rPU6oUfKEfm0wvg0koyeK9tXTx5BcFzRu
            ////9Cp0yyeCO75BRc0SYsL9/omqj70ZM+W+imOvgFDSQjd+ao5nHrZGO1kdzoCZs86ZA8Y0qRjqowMN
            ////kWeCZAdoTvYEhruxZyBhMJddaU5eJBJqOHdPeYgOvhXH5MpmoIJziTSSDzsDVdgamJo1WamiSUTr
            ////DAUUcrYs6i9L+wxTWPpSwl0207iWfXn/ANOAfDANITrS+2J/3qGOQx1A3Z3mlFFxN9tcl36vPbTW
            ////pFpTs8JWFHbPhyu9Zfp834NzNT3ej42ibuvsiZhRJpZJ2I4xcuo0qI0s6dNI7v8A/ueNdPBuRhWj
            ////OmpiIeNcYhiDcSzjlSfMjTv3oE/jut2VUQaDwPMMzy9/Q1SFvY/NPQHbliMg+YmzTJ9qaQ4kNMSo
            ////ozm4Y7PnyZkqCSZw/OoiSnxv8GcjwNPKLOI94OjbqoxRxZtqFWfpjp3xr48OVNLT2FRsHQpjwBge
            ////B912T5nNnaUg85PbqDAVcbGZ74nlUZoggTlPdUubb74cNtbLGanJBnktFFo86PXaybnRM5QdPnJ7
            ////+Nfqxb1Ow9Avhjge/wAxxXZ3pe7iSpWL3qsT0U7fJupiUlKj0Qb43b7m/Ua+dMOJ0E98gp4Ua9jE
            ////1ConN/baYMXU2X7miVhYX7/RJpndS9JTVu+dNfm3BGqO02anYDFAADFHoacMzptDVGO2OvAWUNxL
            ////XkpS6Zie+er5Mwi3u3eqezvNKKMnl8+OL66vNpac5s6nAlKcBHes6oVWUfFq6u9edOwVVenlTvEa
            ////KGfiOVBzrLnip/u9nHddzgwi3DtJ6equNJNec5lhJKWYPRn96VR79u12V0+U2J3ycU7zjr0m8ADg
            ////1A3XlBmjDjikYzKhL3rNqNleNd08Sbygu1UjJJ0E8KrX3MLhpaSHufnvb05Kk8Ai4DcNuO9PyWEk
            ////nbLJGcdPEJ1n7qqoWPDZwD0pagcpMkDzSvtenSqzemSUd0uj0RMAPrRCuPLjRQ12C5UklT5M9/aH
            ////xGqqveOtm8rXp1XSKOF8kJh6RBYTMYfVgPS12xb6tv3u8Avmypu0fVUfMNJm54o7Q5rVdz8L+H46
            ////1WdaY2YIJT2qd+qrXv2c0odE7pZr0+h0RJh/NgIa64+THukWShMRkpySuiX/ALI9GNdF4NQn9vW7
            ////044rp1tQ7B1SS9DTu2CZpHPkZr7sp1brbYV3sbeCo5KnOgSRt+A7OFVTOUzQO41SX/FN6f8AO6W6
            ////5o/UKTjTDx6fSjQA1bNt7P2IoMzyCpkRUGnKi9L7ZOIhq584WV3MTMXzSgk438uAUDq3eNlOplMq
            ////np/WtmQL1fVGNGB8AgjmaY8npmU9KrVWIR24qaC3u3eqGGHfYCTHglJVT2mAg6I/msQgIUYBm061
            ////+YGHIyod4VQ2UhfV6wrZ5PAgvNyaLR8mj8eiBKwZujvYV0sumFIpk8UVXrr1413hEWCMqdM/vvX1
            ////s9YslieZ9QnoxCGbDZds24BlQv8AiqTgDFIeo+TMJdB4KppOdRSERsgPGn08Y9UGm/i007LI2xox
            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
            ////Ql1dGro/FvnxtLtvZQWNgCDPuWWy7YzT/9k=";

            //            string mobile_created_date = "1604646632636";

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            createText += "" + VisId + "," + VDate + "," + UserId + "," + PartyId + "," + Item + "," + Qty + "," + Rate + "," + SMID + "," + Android_Id + "," + ImgUrl + "," + Remarks + "," + CompName + "," + Discount + "," + BrandActivity + "," + MeetActivity + ", " + RoadShow + "," + Scheme + "," + OtherGeneralInfo + "," + OtherActivity + "," + longitude + "," + latitude + "," + lat_long_dt + "," + image1 + ", " + mobile_created_date + "" + Environment.NewLine;

            string Query = ""; string Query1 = ""; string filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";
            string[] imgurls = new string[1];
            int compid = 0;
            // string[] th = image1.Split();
            if (string.IsNullOrEmpty(mobile_created_date))
            {
                mobile_created_date = "0";
            }

            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(mobile_created_date))
            {
                double ticks1 = double.Parse(mobile_created_date);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string docID = Settings.GetDocID("COMPT", DateTime.Now);
            Settings.SetDocID("COMPT", docID);
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;

            if (image1.Contains("http://"))
            {
                ImgUrl = image1.Replace(path, "~");
            }
            else if (image1 != "N/A")
            {
                //  imgurls = image1.Split();
                string[] imges = image1.Split(new string[] { "&dataman&" }, StringSplitOptions.None);
                imgurls = new string[imges.Length];
                for (int i = 0; i < imges.Length; i++)
                {


                    byte[] bytes = Convert.FromBase64String(imges[i]);

                    Image image;
                    using (MemoryStream ms = new MemoryStream(bytes))
                    {
                        image = Image.FromStream(ms);
                    }
                    string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }
                    String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    filename = Path.GetFileName(SMID + "_" + docID.Replace(" ", "") + "_" + i + "_" + timeStamp);
                    {
                        //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                        string filePath = Server.MapPath("~/DSRImages" + "/C_" + filename + ".png");
                        File.WriteAllBytes(filePath, bytes);
                        imgurls[i] = "~/DSRImages" + "/C_" + filename + ".png";
                    }
                }
            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

            //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            //{
            //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
            //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
            //    if (dtfr.Rows.Count > 0)
            //    {
            //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
            //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
            //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

            //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
            //        {
            //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
            //        }
            //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
            //        {
            //            totime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
            //        }
            //    }
            //}

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }

            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
            if (ChkLock == "True")
            {
                //                string insertfromtemp = @" INSERT INTO [TransCompetitor] ([VisId] ,[DocId]  ,[VDate] ,[UserId] ,[PartyId]  ,[Item]  ,[Qty]  ,[Rate],[SMID],[CompName],[ImgUrl], [Remarks],[Discount],[BrandActivity],[MeetActivity],[RoadShow],[Scheme/offers],[OtherGeneralInfo],[OtherActivity],created_date,android_id,Mobile_Created_date) OUTPUT INSERTED.ComptId
                //                                SELECT [VisId] ,[DocId]  ,[VDate] ,[UserId] ,[PartyId]  ,[Item]  ,[Qty]  ,[Rate],[SMID],[CompName],[ImgUrl],[Remarks],[Discount],[BrandActivity],[MeetActivity],[RoadShow],[Scheme/offers],[OtherGeneralInfo],[OtherActivity],created_date,android_id,Mobile_Created_date FROM [Temp_TransCompetitor] where VDate='" + VDate + "' and smid=" + SMID + "";
                //                compid = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, insertfromtemp));
                //                for (int i = 0; i < imgurls.Length; i++)
                //                {


                //                }

                //                string updatevisid = "update TransCompetitor set visid=" + VisId + " where VDate='" + VDate + "' and smid=" + SMID + "";
                //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                //                string deletefromtemp = "delete from  Temp_TransCompetitor  where VDate='" + VDate + "' and smid=" + SMID + "";
                //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                //                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from TransCompetitor where DocId='" + docID + "'";
                //                Query1 = "select docid from TransCompetitor where Android_Id='" + Android_Id + "'";
                //                string docid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                //                if (!string.IsNullOrEmpty(docid))
                //                {
                //                    Query1 = "delete from TransCompetitor where Android_Id='" + Android_Id + "'";
                //                    DbConnectionDAL.ExecuteQuery(Query1);


                //                    Query1 = "delete from TransCompetitorImage where Android_Id='" + Android_Id + "'";
                //                    DbConnectionDAL.ExecuteQuery(Query1);


                //                }
                //                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                //                string Address = "";
                //                if (latitude != "")
                //                {
                //                    Address = DMT.InsertAddress(latitude, longitude);
                //                }
                //                //  string Address = DMT.InsertAddress(latitude, longitude);
                //                string str = "INSERT INTO dbo.TransCompetitor (VisId,DocId,UserId, VDate,PartyId,Item,Qty,Rate,SMID,Android_Id,ImgUrl,Remarks,CompName,Discount,BrandActivity,MeetActivity,RoadShow,[Scheme/offers],OtherGeneralInfo,OtherActivity,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date)  OUTPUT INSERTED.ComptId " +
                //                " VALUES ('" + VisId + "', '" + docID + "', '" + UserId + "', '" + VDate + "' , '" + PartyId + "','" + Item + "', " + Qty + ", " + Rate + ", " + SMID + ", '" + Android_Id + "', '" + ImgUrl + "', '" + Remarks + "', '" + CompName + "', " + Discount + ", '" + BrandActivity + "', '" + MeetActivity + "', '" + RoadShow + "', '" + Scheme + "', '" + OtherGeneralInfo + "', '" + OtherActivity + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";

                //                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                //                { }
            }
            else if (ChkLock == "False")
            {
                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from Temp_TransCompetitor where DocId='" + docID + "'";
                Query1 = "select docid from Temp_TransCompetitor where Android_Id='" + Android_Id + "'";
                string docid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                if (!string.IsNullOrEmpty(docid))
                {
                    Query1 = "delete from Temp_TransCompetitor where Android_Id='" + Android_Id + "'";
                    createText += "" + Query1 + "" + Environment.NewLine;
                    DbConnectionDAL.ExecuteQuery(Query1);

                    //Query1 = "delete from Temp_TransCompetitorImage where Android_Id='" + Android_Id + "'";
                    //createText += "" + Query1 + "" + Environment.NewLine;

                    //DbConnectionDAL.ExecuteQuery(Query1);
                    Query1 = "delete from Temp_TransCompetitorImage where DocId='" + docid + "'";
                    createText += "" + Query1 + "" + Environment.NewLine;

                    DbConnectionDAL.ExecuteQuery(Query1);


                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                //  string Address = DMT.InsertAddress(latitude, longitude);
                string str = "INSERT INTO dbo.Temp_TransCompetitor (VisId,DocId,UserId, VDate,PartyId,Item,Qty,Rate,SMID,Android_Id,ImgUrl,Remarks,CompName,Discount,BrandActivity,MeetActivity,RoadShow,[Scheme/offers],OtherGeneralInfo,OtherActivity,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) OUTPUT INSERTED.ComptId " +
                " VALUES ('" + VisId + "', '" + docID + "', '" + UserId + "', '" + VDate + "' , '" + PartyId + "','" + Item + "', " + Qty + ", " + Rate + ", " + SMID + ", '" + Android_Id + "', '" + ImgUrl + "', '" + Remarks + "', '" + CompName + "', " + Discount + ", '" + BrandActivity + "', '" + MeetActivity + "', '" + RoadShow + "', '" + Scheme + "', '" + OtherGeneralInfo + "', '" + OtherActivity + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";
                compid = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, str));

                createText += "" + str + "" + Environment.NewLine;

                if (compid > 0)
                {


                    for (int i = 0; i < imgurls.Length; i++)
                    {
                        str = "INSERT INTO dbo.Temp_TransCompetitorImage (DocId, ImgUrl,Visid) VALUES ('" + docID + "', '" + imgurls[i] + "'," + VisId + ")";
                        createText += "" + str + "" + Environment.NewLine;

                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, str);

                    }
                }
                //if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                //{ }
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<Visit> rst = new List<Visit>();
            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            {
                rst.Add(
                    new Visit
                    {
                        Id = dtvisit.Rows[i]["ComptId"].ToString(),
                        DocumentId = dtvisit.Rows[i]["DocId"].ToString(),
                        MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                    }
                );
                createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[i]["ComptId"].ToString() + ", " + dtvisit.Rows[i]["DocId"].ToString() + ", " + dtvisit.Rows[i]["Milliseconds"].ToString() + "" + Environment.NewLine;

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            }

            using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_TransCompetitor_" + VDate + ".txt"), true))
            {
                file2.WriteLine(createText);
                file2.Close();
            }

            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransVisitDistWithImage()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            int Userid = objResponse.bodyLine[0].Userid;
            int VisId = objResponse.bodyLine[0].VisId;
            int Sno = objResponse.bodyLine[0].Sno;
            string VDate = objResponse.bodyLine[0].VDate;
            int cityid = objResponse.bodyLine[0].cityid;
            int SMId = objResponse.bodyLine[0].SMId;
            int DistId = objResponse.bodyLine[0].DistId;
            string remarkdist = objResponse.bodyLine[0].remarkdist;
            string Android_Id = objResponse.bodyLine[0].Android_Id;
            string NextVisitDate = objResponse.bodyLine[0].NextVisitDate;
            string NextVisitTime = objResponse.bodyLine[0].NextVisitTime;
            string SpentfrTime = objResponse.bodyLine[0].SpentfrTime;
            string SpentToTime = objResponse.bodyLine[0].SpentToTime;
            string ImgUrl = objResponse.bodyLine[0].ImgUrl;
            decimal stock = objResponse.bodyLine[0].stock;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string image1 = objResponse.bodyLine[0].image1;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;

            string Query = ""; string Query1 = ""; string filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            if (string.IsNullOrEmpty(mobile_created_date))
            {
                mobile_created_date = "0";
            }

            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(mobile_created_date))
            {
                double ticks1 = double.Parse(mobile_created_date);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;

            if (image1.Contains("http://"))
            {
                ImgUrl = image1.Replace(path, "~");
            }
            else if (image1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(image1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(SMId + '-' + timeStamp);
                {
                    string filePath = Server.MapPath("~/DSRImages" + "/DistDisc_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    ImgUrl = "~/DSRImages" + "/DistDisc_" + filename + ".png";
                }

            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

            //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            //{
            //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
            //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
            //    if (dtfr.Rows.Count > 0)
            //    {
            //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
            //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
            //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

            //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
            //        {
            //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
            //        }
            //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
            //        {
            //            totime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
            //        }
            //    }
            //}

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }


            string docID = Settings.GetDocID("DDISC", DateTime.Now);
            Settings.SetDocID("DDISC", docID);
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
            if (ChkLock == "True")
            {

                string insertfromtemp = @"INSERT INTO [TransVisitDist] ([UserId],[VisId] ,[Sno] ,[VDate] ,[cityId] ,[SMId] ,[DistId] ,[areaId] ,[remarkDist] ,[remarkArea]  ,[remarkL1] ,[L1UserId],[DissType],[NextVisitDate],[NextVisitTime],[SpentfrTime],[SpentToTime],[ImgUrl],created_date,android_id,DiscDocid,Mobile_Created_date,[type])
                                        SELECT [UserId],[VisId] ,[Sno] ,[VDate] ,[cityId] ,[SMId] ,[DistId] ,[areaId] ,[remarkDist] ,[remarkArea]  ,[remarkL1] ,[L1UserId],[DissType],[NextVisitDate],[NextVisitTime],[SpentfrTime],[SpentToTime],[ImgUrl],created_date,android_id,DiscDocid,Mobile_Created_date,type FROM [Temp_TransVisitDist] where VDate='" + VDate + "' and smid=" + SMId + " and type IS NULL";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
                string updatevisid = "update TransVisitDist set visid=" + VisId + " where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                string deletefromtemp = "delete from  Temp_TransVisitDist  where VDate='" + VDate + "' and smid=" + SMId + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                Query1 = "select visdistid from TransVisitDist where Android_Id='" + Android_Id + "'";
                string visdistid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                if (!string.IsNullOrEmpty(visdistid))
                {
                    Query1 = "delete from TransVisitDist where Android_Id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                // string Address = DMT.InsertAddress(latitude, longitude);
                string str = "INSERT INTO dbo.TransVisitDist (UserId,VisId,Sno, VDate, cityId,SMId,DistId,remarkdist,Android_Id,NextVisitDate,NextVisitTime, SpentfrTime, SpentToTime, ImgUrl,stock,Created_date,Latitude,Longitude,Address,Lat_long_datetime,DiscDocid,Mobile_Created_date) " +
                " VALUES ('" + Userid + "', " + VisId + ", '" + Sno + "', '" + VDate + "', '" + cityid + "', " + SMId + " , " + DistId + ", '" + remarkdist + "', '" + Android_Id + "', '" + NextVisitDate + "', '" + NextVisitTime + "', '" + SpentfrTime + "', '" + SpentToTime + "', '" + ImgUrl + "'," + stock + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + docID + "','" + mobiletime + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }
                Query = "select max(VisDistId) as VisDistId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Max(Created_date) AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Max(Created_date) AS date), Max(Created_date))   AS Milliseconds   from transvisitdist where Visid='" + VisId + "'";
            }
            else if (ChkLock == "False")
            {
                Query1 = "select visdistid from temp_TransVisitDist where Android_Id='" + Android_Id + "'";
                string visdistid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                if (!string.IsNullOrEmpty(visdistid))
                {
                    Query1 = "delete from temp_TransVisitDist where Android_Id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                //  string Address = DMT.InsertAddress(latitude, longitude);
                string str = "INSERT INTO dbo.temp_TransVisitDist (UserId,VisId,Sno, VDate, cityId,SMId,DistId,remarkdist,Android_Id,NextVisitDate,NextVisitTime, SpentfrTime, SpentToTime, ImgUrl,stock,Created_date,Latitude,Longitude,Address,Lat_long_datetime,DiscDocid,Mobile_Created_date) " +
                " VALUES ('" + Userid + "', " + VisId + ", '" + Sno + "', '" + VDate + "', '" + cityid + "', " + SMId + " , " + DistId + ", '" + remarkdist + "', '" + Android_Id + "', '" + NextVisitDate + "', '" + NextVisitTime + "', '" + SpentfrTime + "', '" + SpentToTime + "', '" + ImgUrl + "'," + stock + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + docID + "','" + mobiletime + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }
                Query = "select max(VisDistId) as VisDistId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Max(Created_date) AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Max(Created_date) AS date), Max(Created_date))   AS Milliseconds   from temp_TransVisitDist where Visid='" + VisId + "'";
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<VisitDist> rst = new List<VisitDist>();
            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            {
                rst.Add(
                    new VisitDist
                    {
                        Id = dtvisit.Rows[i]["VisDistId"].ToString(),
                        MS = dtvisit.Rows[i]["Milliseconds"].ToString(),
                        DocumentId = docID
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SaveOrderDeleteInsert()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            int VisId = objResponse.bodyLine[0].VisId;
            string Android_Id = objResponse.bodyLine[0].Android_Id;
            int UserId = objResponse.bodyLine[0].UserId;
            string VDate = objResponse.bodyLine[0].VDate;
            int SMId = objResponse.bodyLine[0].SMId;
            int PartyId = objResponse.bodyLine[0].PartyId;
            int AreaId = objResponse.bodyLine[0].AreaId;
            string Remarks = objResponse.bodyLine[0].Remarks;
            decimal OrderAmount = objResponse.bodyLine[0].OrderAmount;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;
            string ImgUrl = objResponse.bodyLine[0].ImgUrl;
            string image1 = objResponse.bodyLine[0].image1;

            //int VisId = 20267;
            //string Android_Id = "242  00000059";
            //int UserId = 468;
            //string VDate = "2020-04-06";
            //int SMId = 242;
            //int PartyId = 3023;
            //int AreaId = 7034;
            //string Remarks = "r";
            //decimal OrderAmount = 6500.00M;
            //string longitude = "-122.084";
            //string latitude = "37.421998";
            //string lat_long_dt = "1586162671681";
            //string mobile_created_date = "1586163208725";
            //string ImgUrl = "";
            //string image1 = "N/A";


            string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            if (string.IsNullOrEmpty(mobile_created_date))
            {
                mobile_created_date = "0";
            }

            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(mobile_created_date))
            {
                double ticks1 = double.Parse(mobile_created_date);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;

            if (image1.Contains("http://"))
            {
                ImgUrl = image1.Replace(path, "~");
            }
            else if (image1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(image1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(SMId + '-' + timeStamp);
                {
                    //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                    string filePath = Server.MapPath("~/DSRImages" + "/O_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    ImgUrl = "~/DSRImages" + "/O_" + filename + ".png";
                }

            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

            //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            //{
            //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
            //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
            //    if (dtfr.Rows.Count > 0)
            //    {
            //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
            //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
            //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

            //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
            //        {
            //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
            //        }
            //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
            //        {
            //            totime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
            //        }
            //    }
            //}

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }
            string olddocid = "";
            string modifyorder = "N";
            //string OrdDocId = Settings.GetDocID("ORDSN", DateTime.Now); 
            string str = string.Empty;
            //Settings.SetDocID("ORDSN", OrdDocId);
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
            if (ChkLock == "True")
            {
                //                str = "delete from transorder where  partyid=" + PartyId + " and VisId=" + VisId + "";
                //                DbConnectionDAL.ExecuteQuery(str);
                //                string insertfromtemp = @"INSERT INTO TransOrder (VisId,OrdDocId,UserId,VDate,SMId,PartyId,AreaId,Remarks,OrderAmount,OrderStatus,MeetFlag,MeetDocId,OrderType,created_date,android_id,Mobile_Created_date,[ImgUrl])
                //                             SELECT VisId,OrdDocId,UserId,VDate,SMId,PartyId,AreaId,Remarks,OrderAmount,OrderStatus,MeetFlag,MeetDocId,OrderType,created_date,android_id,Mobile_Created_date,[ImgUrl]
                //                            FROM Temp_TransOrder where VDate='" + VDate + "' and smid=" + SMId + "";
                //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
                //                string updatevisid = "update TransOrder set visid=" + VisId + " where VDate='" + VDate + "' and smid=" + SMId + "";
                //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                //                string deletefromtemp = "delete from  Temp_TransOrder  where VDate='" + VDate + "' and smid=" + SMId + "";
                //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                //                Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from TransOrder where OrdDocId='" + OrdDocId + "'";
                //                //Created_date
                //                str = "select * from transorder where  android_id='" + Android_Id + "'";
                //                DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                //                if (dt.Rows.Count > 0)
                //                {
                //                    str = "delete from transorder where android_id='" + Android_Id + "'";
                //                    DbConnectionDAL.ExecuteQuery(str);
                //                }
                //                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                //                string Address = "";
                //                if (latitude != "")
                //                {
                //                    Address = DMT.InsertAddress(latitude, longitude);
                //                }
                //                // string Address = DMT.InsertAddress(latitude, longitude);
                //                str = "INSERT INTO dbo.TransOrder (VisId,OrdDocId, Android_Id, UserId,VDate,SMId, PartyId,AreaId,Remarks,OrderAmount,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,[ImgUrl]) " +
                //               " VALUES ('" + VisId + "', '" + OrdDocId + "', '" + Android_Id + "', " + UserId + ", '" + VDate + "', " + SMId + " , '" + PartyId + "', '" + AreaId + "', '" + Remarks + "', " + OrderAmount + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + ImgUrl + "')";

                //                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                //                { }
            }

            else if (ChkLock == "False")
            {

                //olddocid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select OrdDocId from temp_TransOrder where partyid=" + PartyId + " and VisId=" + VisId + ""));

                //str = "delete from temp_TransOrder where partyid=" + PartyId + " and VisId=" + VisId + "";
                //DbConnectionDAL.ExecuteQuery(str);

                string OrdDocId = "";


                if (olddocid == "")
                {
                    OrdDocId = Settings.GetDocID("ORDSN", DateTime.Now);

                    Settings.SetDocID("ORDSN", OrdDocId);

                }
                /////////



                ///////////////////

                if (olddocid == "")
                {
                    Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + OrdDocId + "'";
                    modifyorder = "N";
                }
                //else
                //{
                //    Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + olddocid + "'";
                //    modifyorder = "Y";
                //}


                //Created_date
                str = "select * from temp_TransOrder where  android_id='" + Android_Id + "'";
                DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    str = "delete from transorder where android_id='" + Android_Id + "'";
                    DbConnectionDAL.ExecuteQuery(str);
                }
                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                if (latitude != "")
                {
                    Address = DMT.InsertAddress(latitude, longitude);
                }
                //  string Address = DMT.InsertAddress(latitude, longitude);
                if (olddocid == "")
                {
                    str = "INSERT INTO dbo.temp_TransOrder (VisId,OrdDocId, Android_Id, UserId,VDate,SMId, PartyId,AreaId,Remarks,OrderAmount,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,[ImgUrl]) " +
                   " VALUES ('" + VisId + "', '" + OrdDocId + "', '" + Android_Id + "', " + UserId + ", '" + VDate + "', " + SMId + " , '" + PartyId + "', '" + AreaId + "', '" + Remarks + "', " + OrderAmount + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + ImgUrl + "')";
                }

                //else
                //{
                //    str = "INSERT INTO dbo.temp_TransOrder (VisId,OrdDocId, Android_Id, UserId,VDate,SMId, PartyId,AreaId,Remarks,OrderAmount,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,[ImgUrl]) " +
                // " VALUES ('" + VisId + "', '" + olddocid + "', '" + Android_Id + "', " + UserId + ", '" + VDate + "', " + SMId + " , '" + PartyId + "', '" + AreaId + "', '" + Remarks + "', " + OrderAmount + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + ImgUrl + "')";
                //}
                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<Visit> rst = new List<Visit>();
            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            {
                rst.Add(
                    new Visit
                    {
                        Id = dtvisit.Rows[i]["OrdId"].ToString(),
                        DocumentId = dtvisit.Rows[i]["OrdDocId"].ToString(),
                        MS = dtvisit.Rows[i]["Milliseconds"].ToString(),
                        Modifyord = modifyorder
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class Visit1
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string DocumentId { get; set; }
            [DataMember]
            public string OrderId { get; set; }
            [DataMember]
            public string MS { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransOrder1DeleteInsert_Service_New1()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            int OrdId = objResponse.bodyLine[0].OrdId;
            int VisId = objResponse.bodyLine[0].VisId;
            string Sno = objResponse.bodyLine[0].Sno.ToString();
            int UserId = objResponse.bodyLine[0].UserId;
            string VDate = objResponse.bodyLine[0].VDate;
            int SMId = objResponse.bodyLine[0].SMId;
            string PartyId = objResponse.bodyLine[0].PartyId.ToString();
            int AreaId = objResponse.bodyLine[0].AreaId;
            int ItemId = objResponse.bodyLine[0].ItemId;
            decimal Qty = objResponse.bodyLine[0].Qty;
            decimal Rate = objResponse.bodyLine[0].Rate;
            string Remarks = objResponse.bodyLine[0].Remarks;
            decimal amount = objResponse.bodyLine[0].amount;
            string Android_Id = objResponse.bodyLine[0].Android_Id;
            string Android_Id1 = objResponse.bodyLine[0].Android_Id1;
            string cases = objResponse.bodyLine[0].cases.ToString();
            string unit = objResponse.bodyLine[0].unit.ToString();
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;
            string seqNo = objResponse.bodyLine[0].seqNo;
            int selectedDistId = objResponse.bodyLine[0].selectedDistId;
            decimal discount = objResponse.bodyLine[0].discount;
            string LastRecord = objResponse.bodyLine[0].LastRecord;
            string modifiedorder = objResponse.bodyLine[0].modifiedorder;

            //int OrdId = 20055;
            //int VisId = 20267;
            //string Sno = "1";
            //int UserId = 468;
            //string VDate = "2020-04-28";
            //int SMId = 242;
            //string PartyId = "3023";
            //int AreaId = 10706;
            //int ItemId = 433;
            //decimal Qty = 8;
            //decimal Rate = 96;
            //string Remarks = "NA";
            //decimal amount = 768.00M;
            //string Android_Id = "242  00000059";
            //string Android_Id1 = "242  00000059 1";
            //string cases = "0";
            //string unit = "8";
            //string longitude = "-122.0840122";
            //string latitude = "37.4219905";
            //string lat_long_dt = "1588072071684";
            //string mobile_created_date = "1588072483460";
            //string seqNo = "0";
            //int selectedDistId = 1055;
            //decimal discount = 0.00M;
            //string LastRecord = "N";
            //string modifiedorder = "Y";

            string Query = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            if (string.IsNullOrEmpty(selectedDistId.ToString()))
            {
                selectedDistId = 0;
            }

            if (string.IsNullOrEmpty(discount.ToString()))
            {
                discount = 0;
            }

            if (string.IsNullOrEmpty(mobile_created_date))
            {
                mobile_created_date = "0";
            }

            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(mobile_created_date))
            {
                double ticks1 = double.Parse(mobile_created_date);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }

            string str = string.Empty; List<Visit1> rst = new List<Visit1>();
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
            if (ChkLock == "True")
            {

            }
            else if (ChkLock == "False")
            {
                if (seqNo == "0")
                {
                    str = "delete from temp_transorder1 where partyid=" + PartyId + " and visid=" + VisId + " ";
                    DbConnectionDAL.ExecuteQuery(str);
                }

                string docid = "";

                //str = "select orddocid from temp_transorder where OrdId=" + OrdId + "";             

                //string docid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, str));


                str = "select OrdId,orddocid from temp_transorder where smid=" + SMId + " and vdate='" + VDate + "' and partyid=" + PartyId + " and visid=" + VisId + "";
                DataTable dtchk = DbConnectionDAL.getFromDataTable(str);
                if (dtchk.Rows.Count > 0)
                {
                    OrdId = Convert.ToInt32(dtchk.Rows[0]["OrdId"]);
                    docid = dtchk.Rows[0]["orddocid"].ToString();
                }

                try
                {
                    if (string.IsNullOrEmpty(docid))
                    {
                        System.IO.StreamWriter TextFileCID = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/docidblank-" + VisId + "-.txt"), true);
                        TextFileCID.WriteLine("Query  :-" + str);
                        TextFileCID.Close();
                    }
                }
                catch (Exception ex)
                { ex.ToString(); }

                //string _OrdId = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, str));
                //if (!string.IsNullOrEmpty(_OrdId))
                //{
                //    OrdId = Convert.ToInt32(_OrdId);
                //}
                //else
                //{
                //    //OrdId = 0;
                //    OrdId = 9999999;
                //}


                //if (string.IsNullOrEmpty(docid))
                //{
                //    str = "select orddocid from temp_transorder where smid=" + SMId + " and vdate='" + VDate + "' and partyid=" + PartyId + "";

                //    docid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, str));
                //}


                //if (!string.IsNullOrEmpty(docid))   freely insert to db
                {
                    str = "select * from temp_transorder1 where android_id='" + Android_Id + "' and android_id1='" + Android_Id1 + "'";
                    DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                    if (dt.Rows.Count > 0)
                    {
                        try
                        {
                            string strinsert = "Insert Into [Temp_TransOrder1_Temp] select * from temp_transorder1 where android_id='" + Android_Id + "' and android_id1='" + Android_Id1 + "' ";
                            DbConnectionDAL.ExecuteQuery(strinsert);
                        }
                        catch (Exception ex)
                        {

                        }

                        str = "delete from TEMP_transorder1 where android_id='" + Android_Id + "' and android_id1='" + Android_Id1 + "'";
                        DbConnectionDAL.ExecuteQuery(str);
                    }
                    WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                    string Address = "";
                    if (latitude != "")
                    {
                        Address = DMT.InsertAddress(latitude, longitude);
                    }
                    //  string Address = DMT.InsertAddress(latitude, longitude);
                    str = "INSERT INTO dbo.temp_TransOrder1 (OrdId,VisId,OrdDocId, Sno, UserId,VDate,SMId, PartyId,AreaId,ItemId,Qty,Rate,Remarks,amount,Android_Id,android_id1,Created_date,cases,unit,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,DistId,Discount)  OUTPUT INSERTED.Ord1Id  " +
                    " VALUES (" + OrdId + ", '" + VisId + "', '" + docid + "', '" + Sno + "', '" + UserId + "', '" + VDate + "', " + SMId + " , '" + PartyId + "', '" + AreaId + "', " + ItemId + ", " + Qty + ", " + Rate + ",'" + Remarks + "', " + amount + ", '" + Android_Id + "', '" + Android_Id1 + "',DateAdd(minute,330,getutcdate())," + Convert.ToDecimal(cases) + "," + Convert.ToDecimal(unit) + ",'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "'," + selectedDistId + "," + discount + ")";
                    //System.IO.StreamWriter TextFileCID = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/AppLogFile-" + SMId + "-.txt"), true);

                    //TextFileCID.WriteLine("UnlockInsertQuery  :-" + str);
                    //TextFileCID.Close();
                    string compcode = "";
                    DataTable dtgrpsmid = new DataTable();
                    DataTable dtdist = new DataTable();
                    string pro_id = "";
                    string displaytitle = "";
                    string title = "";
                    string createdatetime = "";
                    string partyname = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Partyname From MastParty where PartyId=" + PartyId + ""));
                    if (Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, str)) > 0)
                    {
                        if (LastRecord.ToUpper() == "Y")
                        {
                            compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
                            createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from temp_TransOrder1 where OrdId=" + OrdId + ""));
                            dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid from mastsalesrep where smid=" + SMId + "");
                            if (dtgrpsmid.Rows.Count > 0)
                            {

                            }
                            else
                            {
                                dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName,userid from mastsalesrep where smid==" + SMId + "");
                            }

                            if (dtgrpsmid.Rows.Count > 0)
                            {
                                pro_id = "RETORDDISCAN";
                                string sql_getsenior = "select smid,Mobile,userid from mastsalesrep where smid in (select MainGrp from mastsalesrepgrp where smid=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " and Level<=(select level from mastsalesrepgrp where smid=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " and MainGrp=" + dtgrpsmid.Rows[0]["Smid"].ToString() + "))";
                                DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                                if (dt_getsenior.Rows.Count > 0)
                                {
                                    for (int i = 0; i < dt_getsenior.Rows.Count; i++)
                                    {

                                        if (modifiedorder == "Y")
                                        {
                                            displaytitle = docid.Replace("-", " ") + " -  Order Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                            title = " Order Modified";
                                        }
                                        else
                                        {
                                            displaytitle = docid.Replace("-", " ") + " - New Order created by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                            title = " New Order Created";
                                        }


                                        lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[i]["userid"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + docid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), Convert.ToInt32(dt_getsenior.Rows[i]["smid"].ToString()));

                                        if (!string.IsNullOrEmpty(dt_getsenior.Rows[i]["mobile"].ToString()))
                                        {
                                            pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                                dt_getsenior.Rows[i]["mobile"].ToString(),


                                              title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                                dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS");

                                            pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                               dt_getsenior.Rows[i]["mobile"].ToString(),
                                              title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                               dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER");
                                        }
                                    }
                                }

                                dtdist = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT Mobile,  UserId FROM MastParty WHERE PartyId=" + selectedDistId + "");
                                if (dtdist.Rows.Count > 0)
                                {
                                    lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dtdist.Rows[0]["UserId"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + docid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), 0);

                                    if (!string.IsNullOrEmpty(dtdist.Rows[0]["mobile"].ToString()))
                                    {
                                        pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                           dtdist.Rows[0]["mobile"].ToString(),
                                            "New Order Created", dtgrpsmid.Rows[0]["SMID"].ToString(),
                                            dtgrpsmid.Rows[0]["SMName"].ToString(), "GOLDIEE", docid, partyname);
                                    }
                                }




                            }
                        }



                    }

                    Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from temp_TransOrder1 where OrdDocId='" + docid + "'";

                }
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            {
                rst.Add(
                    new Visit1
                    {
                        Id = dtvisit.Rows[i]["Ord1Id"].ToString(),
                        OrderId = dtvisit.Rows[i]["OrdId"].ToString(),
                        DocumentId = dtvisit.Rows[i]["OrdDocId"].ToString(),
                        MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                    }
                );
            }

            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        public class Party
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string MS { get; set; }

        }

        //16-07-2021------------- column place change according to bal
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SaveParty()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            Int32 PartyId = objResponse.bodyLine[0].PartyId;
            string PartyName = objResponse.bodyLine[0].PartyName;
            string Address1 = objResponse.bodyLine[0].Address1;
            string Address2 = objResponse.bodyLine[0].Address2;
            Int32 CityId = objResponse.bodyLine[0].CityId;
            Int32 AreaId = objResponse.bodyLine[0].AreaId;
            Int32 BeatId = objResponse.bodyLine[0].BeatId;
            Int32 UnderId = objResponse.bodyLine[0].UnderId;
            string Pin = objResponse.bodyLine[0].Pin;
            string Mobile = objResponse.bodyLine[0].Mobile;
            string Phone = objResponse.bodyLine[0].Phone;
            string Remark = objResponse.bodyLine[0].Remark;
            string SyncId = objResponse.bodyLine[0].SyncId;
            string IndId = objResponse.bodyLine[0].IndId;
            decimal Potential = objResponse.bodyLine[0].Potential;
            bool Active = objResponse.bodyLine[0].Active;
            string BlockReason = objResponse.bodyLine[0].BlockReason;
            int PartyType = objResponse.bodyLine[0].PartyType;
            string ContactPerson = objResponse.bodyLine[0].ContactPerson;
            string CSTNo = objResponse.bodyLine[0].CSTNo;
            string VatTin = objResponse.bodyLine[0].VatTin;
            string ServiceTax = objResponse.bodyLine[0].ServiceTax;
            string PanNo = objResponse.bodyLine[0].PanNo;
            int UserId = objResponse.bodyLine[0].UserId;
            string DOA = objResponse.bodyLine[0].DOA;
            string DOB = objResponse.bodyLine[0].DOB;
            string Email = objResponse.bodyLine[0].Email;
            string androidid = objResponse.bodyLine[0].androidid;
            string Longitude = objResponse.bodyLine[0].longitude;
            string Latitude = objResponse.bodyLine[0].latitude;
            string LatlngTime = objResponse.bodyLine[0].LatlngTime;
            string ImgUrl = objResponse.bodyLine[0].ImgUrl;
            string image1 = objResponse.bodyLine[0].image1;
            string GSTINNo = objResponse.bodyLine[0].GSTINNo;
            //Int32 PartyId = 0;
            //string PartyName = "Outlet One Manmohan";
            //string Address1 = "Ajmer palace ";
            //string Address2 = "";
            //Int32 CityId = 6493;
            //Int32 AreaId = 7573;
            //Int32 BeatId = 7574;
            //Int32 UnderId = 0;
            //string Pin = "979779";
            //string Mobile = "2580085225";
            //string Phone = "";
            //string Remark = "";
            //string SyncId = "";
            //string IndId = "26";
            //decimal Potential = 0;
            //bool Active = true;
            //string BlockReason = "";
            //int PartyType = 16;
            //string ContactPerson = "";
            //string CSTNo = "22AAAAA0000A1Z5";
            //string VatTin = "";
            //string ServiceTax = "";
            //string PanNo = "QWERTY6776AB";
            //int UserId = 4543;
            //string DOA = "";
            //string DOB = "";
            //string Email = "";
            //string androidid = "2269  00000001";
            //string Longitude = "80.3443667";
            //string Latitude = "26.4825932";
            //string LatlngTime = "1597152413781";
            //string ImgUrl = "";
            //string image1 = "N/A";



            string chk = "0"; string checkmobileno = string.Empty, _partyId = "", _Query = "";
            DataTable mobileno = new DataTable();
            DataTable dtandridid = new DataTable();
            string qry = "", Millisecond = "";
            //double ticks = double.Parse(LatlngTime);
            //TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            //DateTime startdate = new DateTime(1970, 1, 1) + time;
            //string minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string minDate1 = "";
            if (!string.IsNullOrEmpty(LatlngTime))
            {
                double ticks = double.Parse(LatlngTime);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }
            else
            {
                minDate1 = DateTime.Now.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }
            WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
            string Address = "", filename = "";

            if (Latitude != "")
            {
                // Address = DMT.InsertAddress(Latitude, Longitude);
            }

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;
            if (image1.Contains("http://"))
            {
                ImgUrl = image1.Replace(path, "~");
            }
            else if (image1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(image1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(SyncId + '-' + timeStamp);
                {
                    string filePath = Server.MapPath("~/DSRImages" + "/NewParty_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    ImgUrl = "~/DSRImages" + "/NewParty_" + filename + ".png";
                }
            }

            PartyBAL PB = new PartyBAL();
            int retval = 0;
            string Partytype_Name = "";

            Partytype_Name = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select PartyTypeName From PartyType where PartyTypeId=" + PartyType + ""));
            int smid = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT SMId FROM MastSalesRep WHERE UserId=" + UserId + ""));

            int RoleId = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RoleId FROM MastRole WHERE RoleType='Distributor'"));
            string msz = "Record Inserted Successfully";
            if (IndId == "")
            {
                IndId = "0";
            }
            //   string partyoffline = DbConnectionDAL.GetStringScalarVal("select PartyOffLine from mastenviro").ToString();

            if (PartyId == 0)
            {
                if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
                {


                    retval = DB.InsertDistributors(PartyName, Address1, Address2, Convert.ToString(CityId), Pin, Email, Mobile, Remark,
                        SyncId, BlockReason, Mobile, Active, Phone, RoleId, ContactPerson, CSTNo, VatTin, PanNo, 0, 0, 0, 0, UserId, "", "", PartyName, smid, DOA, DOB,
                        AreaId, "", "", PartyType,
                        ServiceTax);
                    if (SyncId == "")
                    {
                        string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
                    }

                }
                else
                {
                    retval = PB.InsertPartyFromMobile(PartyName, Address1, Address2, CityId, AreaId, BeatId, UnderId, Pin, Mobile, Phone, Remark,
                        SyncId, IndId,
                    Potential, Active, BlockReason, Convert.ToInt32(PartyType), ContactPerson, CSTNo, VatTin, ServiceTax,
                    PanNo, UserId, DOA, DOB, Email, "", GSTINNo, androidid);
                }


                if (retval == -1)
                { msz = "Duplicate Party Exists"; }
                else if (retval == -3)
                {
                    msz = "Duplicate Mobile Exists";
                    _Query = @"select PartyId from MastParty Where Mobile='" + Mobile + "'";
                    _partyId = DbConnectionDAL.GetStringScalarVal(_Query);
                }
                else if (retval == -4)
                {
                    msz = "Duplicate GSTNo Exists";
                    _Query = @"select PartyId from MastParty Where GSTINNo='" + GSTINNo + "'";
                    _partyId = DbConnectionDAL.GetStringScalarVal(_Query);
                }
                else if (retval == -5)
                {
                    msz = "Duplicate AndroidId Exists";
                    _Query = @"select PartyId from MastParty Where android_id='" + androidid + "'";
                    _partyId = DbConnectionDAL.GetStringScalarVal(_Query);
                }
                else
                {
                    string sql = "update mastparty set android_id='" + androidid + "', Longitude = '" + Longitude + "',Latitude='" + Latitude + "', Address='" + Address + "',Lat_long_datetime = '" + minDate1 + "',ImgUrl='" + ImgUrl + "',GSTINNo='" + CSTNo + "' where partyid=" + retval + " ";
                    if (DbConnectionDAL.ExecuteQuery(sql) == 1)
                    { chk = "1"; }
                }
            }
            else
            {

                if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
                {


                    retval = DB.UpdateDistributors(PartyId, PartyName, Address1, Address2, Convert.ToString(CityId), Pin, Email, Mobile, Remark, SyncId, BlockReason, Mobile, Active, Phone, RoleId, "", CSTNo, VatTin, PanNo, 0, 0, 0, 0, UserId, "", "", PartyName, smid, DOA, DOB, AreaId, "", "", PartyType, ServiceTax);
                    if (SyncId == "")
                    {
                        string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
                    }

                }
                else
                {

                    retval = PB.UpdatePartyFromMobile(PartyId, PartyName, Address1, Address2, CityId, AreaId, BeatId, UnderId, Pin, Mobile, Phone, Remark, SyncId, IndId, Potential, Active, BlockReason, PartyType, ContactPerson, CSTNo, VatTin, ServiceTax, PanNo, UserId, DOA, DOB, Email, "", GSTINNo, androidid);

                }
                //}

                if (retval == -1)
                {
                    msz = "Duplicate Party Exists";
                }
                else if (retval == -3)
                {
                    msz = "Duplicate Mobile Exists";
                }
                else if (retval == -4)
                {
                    msz = "Duplicate GSTNo Exists";

                }
                else if (retval == -5)
                {
                    msz = "Duplicate AndroidId Exists";

                }
                else
                {
                    string sqlupdate = "update mastparty set android_id='" + androidid + "', Longitude = '" + Longitude + "',Latitude='" + Latitude + "',Address='" + Address + "',Lat_long_datetime = '" + minDate1 + "',ImgUrl='" + ImgUrl + "',GSTINNo='" + CSTNo + "' where partyid=" + PartyId + " ";
                    if (DbConnectionDAL.ExecuteQuery(sqlupdate) == 1)
                    { chk = "2"; }
                }
            }
            if (retval > 0)
            {
                if (chk == "1")
                { msz = "Record Inserted Successfully"; _partyId = retval.ToString(); }
                else if (chk == "2")
                { msz = "Record Updated Successfully"; _partyId = PartyId.ToString(); }

                qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where android_id='" + androidid + "' ";

                //Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();
            }
            else
            {
                qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where mobile='" + Mobile + "' ";
            }
            Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();

            List<Party> rst = new List<Party>();
            {
                rst.Add(
                    new Party
                    {
                        //Id = retval.ToString(),
                        Id = _partyId,
                        Status = msz,
                        MS = Millisecond
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }



        [DataContract]
        public class LockDSRModal
        {
            [DataMember]
            public string Msz { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Wip_LockDSR()
        {
            string createText = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            //var httpreq = HttpContext.Current.Request;
            string Smid = string.Empty; string Vdate = string.Empty; string Lock = string.Empty; int AffectedRec = 0; string Visid = string.Empty;
            LockDSRModal rst = new LockDSRModal();
            try
            {
                //Smid = httpreq.Params["Smid"].ToString();
                //Visid = httpreq.Params["Visid"].ToString();
                //Lock = httpreq.Params["Lock"].ToString();
                //Vdate = Convert.ToDateTime(httpreq.Params["Vdate"].ToString()).ToString("yyyy-MM-dd");
                Smid = objResponse.bodyLine[0].Smid;
                Visid = objResponse.bodyLine[0].Visid;
                Lock = objResponse.bodyLine[0].Lock.ToString();
                Vdate = objResponse.bodyLine[0].Vdate;
                Vdate = Convert.ToDateTime(Vdate).ToString("yyyy-MM-dd");

                createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                createText += "" + Smid + "," + Visid + "," + Lock + "," + Vdate + "," + Vdate + "" + Environment.NewLine;

            }
            catch (Exception ex)
            {
                string errormsz = "Error In Wip- Params are not proper - " + ex.ToString();

                createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                createText += " @@@@@@ Exception Generated @@@@@" + "" + errormsz + " @@@@@@  " + Environment.NewLine;
                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + Smid + "_Wip_LockDSR_" + Vdate + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
                Query = "insert into AutoSyncDateTime (Smid,TaskName) values (" + Smid + ",'" + errormsz + "')";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, Query);
                rst.Msz = "Failure";
                Context.Response.Status = "400 Bad Request";
                Context.Response.StatusCode = 400;
                Context.Response.StatusDescription = "Bad Request";
                Context.Response.Write("Bad Request");
                Context.Response.Flush();
                throw new HttpException(400, "Bad Request");
            }
            if (!String.IsNullOrEmpty(Smid) & !String.IsNullOrEmpty(Vdate))
            {
                try
                {
                    //string Exist = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Id from WIP_Transvisit where smid=" + Smid + " and vdate='" + Vdate + "' and Visid='"+Visid+"'"));
                    //if (!String.IsNullOrEmpty(Exist))
                    //{
                    //    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "update WIP_Transvisit set lock=" + Lock + ",Ismoved=0 where id =" + Exist + "");
                    //}
                    //else
                    //{
                    Query = "select * from wip_transvisit where smid=" + Smid + " and vdate ='" + Vdate + "' ";
                    createText += "" + Query + "" + Environment.NewLine;
                    DataTable dtchk = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                    // if (dtchk.Rows.Count == 0)
                    {
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "insert into WIP_Transvisit (smid,vdate,lock,visid) values(" + Smid + ",'" + Vdate + "'," + Lock + "," + Visid + " )");
                    }

                    //}
                    rst.Msz = "Success";

                    try
                    {
                        // commented by jyoti mam 06/Mar/2021 not use now

                        // pushnotificationforEndVisit(Smid, Visid);

                        //
                    }
                    catch (Exception ex)
                    {
                        ex.ToString();
                        createText += " @@@@@@ Exception Generated from : pushnotificationforEndVisit function @@@@@" + "" + ex.ToString() + " @@@@@@  " + Environment.NewLine;
                    }

                    //using (WebClient client = new WebClient())
                    //{
                    //    string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
                    //    string url = "";
                    //    url = "http://" + host + "/And_Sync.asmx/Scheduler_LockDSR";
                    //    // url = "http://localhost:20547" + "/And_Sync.asmx/Scheduler_LockDSR?flag=M"; 
                    //    string json = client.DownloadString(url).Replace(@"""", "");
                    //}
                }

                catch (Exception ex)
                {
                    rst.Msz = "Failure";
                    string errormsz = "Error In Wip- " + ex.ToString();
                    createText += " @@@@@@ Exception Generated @@@@@" + "" + errormsz + " @@@@@@  " + Environment.NewLine;
                    Query = "insert into AutoSyncDateTime (Smid,TaskName) values (" + Smid + ",'" + errormsz.Replace("'", "''") + "')";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, Query);
                }
            }
            else
            {
                createText += " @@@@@@ 400 Bad Request @@@@@" + "" + rst.Msz + " @@@@@@  " + Environment.NewLine;
                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + Smid + "_Wip_LockDSR_" + Vdate + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }

                rst.Msz = "Failure";
                Context.Response.Status = "400 Bad Request";
                Context.Response.StatusCode = 400;
                Context.Response.StatusDescription = "Bad Request";
                Context.Response.Write("Bad Request");
                Context.Response.Flush();
                throw new HttpException(400, "Bad Request");
            }
            createText += " @@@@@@   Providing Response To Android  @@@@@" + rst.Msz + "" + Environment.NewLine;
            createText += " @@@@@@   Providing Response To Android  @@@@@" + JsonConvert.SerializeObject(rst) + "" + Environment.NewLine;
            createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + Smid + "_Wip_LockDSR_" + Vdate + ".txt"), true))
            {
                file2.WriteLine(createText);
                file2.Close();
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        public string pushnotificationonorderdispatchcancel(string msg, string compcode, string mobileno, string title, string createdbysmid, string smname, string ProductType, string Docid = "", string partyname = "", string Dispatchcancelstatus = "")
        {
            var result = "-1";
            //string Query = "SELECT * FROM MastSalesRep WHERE Mobile='7906767390'";
            string Query = "Select Deviceno from Mastsalesrep where mobile='" + mobileno + "'";
            DataTable dt = new DataTable();
            string serverKey = "";
            string senderId = "";
            DataTable dtserverdetail = new DataTable();
            //dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //if (dt.Rows.Count > 0)
            //{
            try
            {

                dtserverdetail = DbConnectionDAL.GetDataTable(CommandType.Text, "Select serverkey,senderid from Mastenviro ");

                string regid_query = "select Reg_id  from LineMaster where  Upper(Product)='" + ProductType + "' and CompCode='" + compcode + "' and mobile='" + mobileno + "'";
                string constrDmLicense = "data source=103.231.40.154,1565; user id=dmlicense_user; pwd=SaG@e321; initial catalog=dmlicense;";
                string Query1 = "";

                SqlConnection cn = new SqlConnection(constrDmLicense);
                SqlCommand cmd = new SqlCommand(regid_query, cn);

                cmd.CommandType = CommandType.Text;

                cn.Open();
                string regId = cmd.ExecuteScalar() as string;

                ///regId = "dhlIGmAIT2Q:APA91bHX_9SaxJVgADxA_h653QXxQqEjVlUB1B7twiI9zotPn8upCbPSyyGZjzW2gmSTRaL0kx8yVlThrYnGBkzQejHj_OyCoL8gan5jjMO8hL9K_LGBLxRFOQzqCz9PttlO-W94XOtw";

                cn.Close();
                cmd = null;
                if (dtserverdetail.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(regId))
                    {

                        Query1 = "insert into TransPushNotification(smid,[Subject],Content,WebFlag) output inserted.id " +
    "values (" + createdbysmid + ",'" + title + "','" + msg + "','Y')";
                        string Id = DbConnectionDAL.GetStringScalarVal(Query1);
                        if (ProductType == "FFMS")
                        {
                            serverKey = "AAAAg3ziCCE:APA91bG2ambp-VLvSJSL8cbmiAygmgTXMQcoWk6kzunAWZ10UJT92wZt06NuJZpRnIGq1XgZYfHG_EpVE7qxGoey2oLCxo5g_me9AS85ouEu8T9bWz6XWFovfpsSoIdSjoibxl4iQHit";//dtserverdetail.Rows[0]["serverkey"].ToString();   // "AAAAGmgBKmE:APA91bGhywq0On9VncehIFPDorXSe59jP4rC-asBGLlnObDf2kF79_GRV3zf9zplDZ_Vyn8SNbr1UFIPM9Fb4bjy-a-Lx70BjQOmsJcRA5BINxTi15W8sANIXALjwaDN6l0nex919eJI9s_C4q46aYpa3feESG2TOg";//s


                            senderId = "564735903777";//dtserverdetail.Rows[0]["senderid"].ToString(); //"113414056545";
                        }
                        else if (ProductType == "CRM MANAGER")
                        {
                            serverKey = "AAAAU9r9dNQ:APA91bGQnNQK0uiNjNZA_sapid9yItgbClKquZRTHubkjGG1IUcCIiNKa57TNulr2BaS8NWqdE_hklLneTQdmfESwTL3n_eBDFm2jInksd-C5jYzmgdjqqrh-1vN8F6e79_hDiVoSe5p";//s


                            senderId = "360156329172";
                        }
                        else if (ProductType == "GOLDIEE")
                        {

                            serverKey = "AAAAwt64dG0:APA91bFMf2SOqW_CcfRnIKIMMQbysoz5i7ckOtALo8rzJnN75PIqRxmSSVJ9biH7RZCC8oVN0uLmE7cnDTGQaWJ65GOHtnxyEWv3u4GalxCvwRNwi-hZnfVt0zXdU-S9YE_-WI-L6cKQ";//s


                            senderId = "836960285805";
                        }


                        string webAddr = "https://fcm.googleapis.com/fcm/send";

                        //var result = "-1";
                        var tRequest = (HttpWebRequest)WebRequest.Create(webAddr);
                        tRequest.ContentType = "application/json";
                        tRequest.Headers.Add(string.Format("Authorization: key={0}", serverKey));
                        tRequest.Headers.Add(string.Format("Sender: id={0}", senderId));

                        tRequest.Method = "POST";

                        var payload = new
                        {
                            to = regId,
                            priority = "high",
                            content_available = true,
                            //notification = new
                            //{
                            //    body = msg,
                            //    title = title
                            //},
                            data = new
                            {
                                body = msg,
                                title = title,
                                docid = Docid,
                                PartyName = partyname,
                                // image = "http://lakshya.goldiee.com/SalespersonImages/defaultspimg.png",//"http://sfmstest.dataman.net.in/ThumbnailImage/VID-20170808-WA0009.jpg"
                                msg = msg,
                                smid = createdbysmid,
                                Dispatchcancelstatus = Dispatchcancelstatus,
                                smname = smname
                            }
                        };



                        var serializer = new JavaScriptSerializer();
                        using (var streamWriter = new StreamWriter(tRequest.GetRequestStream()))
                        {
                            string json = serializer.Serialize(payload);
                            streamWriter.Write(json);
                            streamWriter.Flush();
                        }

                        var httpResponse = (HttpWebResponse)tRequest.GetResponse();
                        using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                        {
                            result = streamReader.ReadToEnd();


                            Query1 = "update TransPushNotification set serverresponse='" + result + "' where id=" + Id + "";
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                    }
                }
                //    }
                //}
            }
            catch (Exception ex)
            {
                result = "N";
            }
            // }
            return result;
        }





        #region SaveRetailerOrder


        public class RetailerOrderLineEntry
        {
            public int Userid { get; set; }
            public string VDate { get; set; }
            public string NextVisitDate { get; set; }
            public int smid { get; set; }
            public string frmtime1 { get; set; }
            public string toTime1 { get; set; }
            public int withuserid { get; set; }
            public string modeoftransport { get; set; }
            public string vehicleused { get; set; }
            public int Lock { get; set; }
            public int nwithuserid { get; set; }
            public string android_id { get; set; }
            public string cityids { get; set; }
            public string cityname { get; set; }
            public decimal orderamountmail { get; set; }
            public decimal orderamountphone { get; set; }
            public string visitcode { get; set; }
            public decimal Attendance { get; set; }
            public int Fromareacode { get; set; }
            public decimal OtherExpense { get; set; }
            public string AndroidAppRemark { get; set; }
            public int toareacode { get; set; }
            public int ncityid { get; set; }
            public string longitude { get; set; }
            public string latitude { get; set; }
            public string lat_long_dt { get; set; }
            public string mobile_created_date { get; set; }



            public int VisId { get; set; }
            public int SMId { get; set; }
            public string Remarks { get; set; }
            public int ProductClassId { get; set; }
            public int ProductSegmentId { get; set; }
            public int ProductMatGrp { get; set; }
            public string Android_Id { get; set; }
            public string ImgUrl { get; set; }
            public string image1 { get; set; }

            public int A_OrderNo { get; set; }
            public int A_POrderNo { get; set; }
            public int A_DemoNo { get; set; }
            public int A_FailedVisitNo { get; set; }
            public int A_VisitNo { get; set; }
            public int A_CompetitorNo { get; set; }
            public int A_PartyNo { get; set; }
            public int A_DiscussionNo { get; set; }
            public int A_DistributorCollectionNo { get; set; }
            public int A_PartyCollectionNo { get; set; }
            public int A_POrder1No { get; set; }
            public int A_LeaveNo { get; set; }
            public int A_Order1No { get; set; }
            public int A_BeatPlanNo { get; set; }
            public int A_distStock_no { get; set; }
            public int A_SalesReturn_no { get; set; }
            public int A_SalesReturn1_no { get; set; }

            public int DistId { get; set; }
            public int ItemId { get; set; }
            public decimal Qty { get; set; }
            public decimal cases { get; set; }
            public decimal unit { get; set; }
            public string seqNo { get; set; }
            public decimal mrp { get; set; }

            public int Sno { get; set; }
            public int cityid { get; set; }
            public string remarkdist { get; set; }
            public string NextVisitTime { get; set; }
            public string SpentfrTime { get; set; }
            public string SpentToTime { get; set; }
            public decimal stock { get; set; }
            public string DSRType { get; set; }
            public string Mode { get; set; }
            public decimal Amount { get; set; }
            public string PaymentDate { get; set; }
            public string Cheque_DDNo { get; set; }
            public string Cheque_DD_Date { get; set; }
            public string Bank { get; set; }
            public string Branch { get; set; }
            public string status { get; set; }
            public string androidid { get; set; }
            public int visid { get; set; }
            public int UserID { get; set; }
            public string Nextvisit { get; set; }
            public int ReasonID { get; set; }
            public string VisitTime { get; set; }
            public string Item { get; set; }
            public decimal Rate { get; set; }
            public int SMID { get; set; }
            public string CompName { get; set; }
            public decimal Discount { get; set; }
            public string BrandActivity { get; set; }
            public string MeetActivity { get; set; }
            public string RoadShow { get; set; }
            public string Scheme { get; set; }
            public string OtherGeneralInfo { get; set; }
            public string OtherActivity { get; set; }
            public decimal OrderAmount { get; set; }


            public int OrdId { get; set; }
            public decimal amount { get; set; }
            public string Android_Id1 { get; set; }
            public int selectedDistId { get; set; }
            public decimal discount { get; set; }
            public string LastRecord { get; set; }
            public string modifiedorder { get; set; }
            public decimal BaseUnitQty { get; set; }
            public decimal PrimaryUnitQty { get; set; }
            public decimal SecondaryUnitQty { get; set; }
            public decimal PrimaryUnitConversion { get; set; }
            public decimal SecondaryUnitConversion { get; set; }
            public string DiscountType { get; set; }
            //public decimal DiscountAmount { get; set; }
            public decimal MarginPercentage { get; set; }
            public string BaseUnit { get; set; }
            public string PrimaryUnit { get; set; }
            public string SecondaryUnit { get; set; }

            public Int32 PartyId { get; set; }
            public string PartyName { get; set; }
            public string Address1 { get; set; }
            public string Address2 { get; set; }
            public Int32 CityId { get; set; }
            public Int32 AreaId { get; set; }
            public Int32 BeatId { get; set; }
            public Int32 UnderId { get; set; }
            public string Pin { get; set; }
            public string Mobile { get; set; }
            public string Phone { get; set; }
            public string Remark { get; set; }
            public string SyncId { get; set; }
            public string IndId { get; set; }
            public decimal Potential { get; set; }
            public bool Active { get; set; }
            public string BlockReason { get; set; }
            public int PartyType { get; set; }
            public string ContactPerson { get; set; }
            public string CSTNo { get; set; }
            public string VatTin { get; set; }
            public string ServiceTax { get; set; }
            public string PanNo { get; set; }
            public int UserId { get; set; }
            public string DOA { get; set; }
            public string DOB { get; set; }
            public string Email { get; set; }
            public string Longitude { get; set; }
            public string Latitude { get; set; }
            public string LatlngTime { get; set; }

            public string Smid { get; set; }
            public string Visid { get; set; }
            public string Vdate { get; set; }

        }

        public class RetailerOrder
        {
            public List<RetailerOrderHeader> RetailerOrderHeader;

        }
        public class RetailerOrderHeader
        {


            public int Userid { get; set; }
            public string VDate { get; set; }
            public string NextVisitDate { get; set; }
            public int smid { get; set; }
            public string frmtime1 { get; set; }
            public string toTime1 { get; set; }
            public int withuserid { get; set; }
            public string modeoftransport { get; set; }
            public string vehicleused { get; set; }
            public int Lock { get; set; }
            public int nwithuserid { get; set; }
            public string android_id { get; set; }
            public string cityids { get; set; }
            public string cityname { get; set; }
            public decimal orderamountmail { get; set; }
            public decimal orderamountphone { get; set; }
            public string visitcode { get; set; }
            public decimal Attendance { get; set; }
            public int Fromareacode { get; set; }
            public decimal OtherExpense { get; set; }
            public string AndroidAppRemark { get; set; }
            public int toareacode { get; set; }
            public int ncityid { get; set; }
            public string longitude { get; set; }
            public string latitude { get; set; }
            public string lat_long_dt { get; set; }
            public string mobile_created_date { get; set; }



            public int VisId { get; set; }
            public int SMId { get; set; }
            public string Remarks { get; set; }
            public int ProductClassId { get; set; }
            public int ProductSegmentId { get; set; }
            public int ProductMatGrp { get; set; }
            public string Android_Id { get; set; }
            public string ImgUrl { get; set; }
            public string image1 { get; set; }

            public int A_OrderNo { get; set; }
            public int A_POrderNo { get; set; }
            public int A_DemoNo { get; set; }
            public int A_FailedVisitNo { get; set; }
            public int A_VisitNo { get; set; }
            public int A_CompetitorNo { get; set; }
            public int A_PartyNo { get; set; }
            public int A_DiscussionNo { get; set; }
            public int A_DistributorCollectionNo { get; set; }
            public int A_PartyCollectionNo { get; set; }
            public int A_POrder1No { get; set; }
            public int A_LeaveNo { get; set; }
            public int A_Order1No { get; set; }
            public int A_BeatPlanNo { get; set; }
            public int A_distStock_no { get; set; }
            public int A_SalesReturn_no { get; set; }
            public int A_SalesReturn1_no { get; set; }

            public int DistId { get; set; }
            public int ItemId { get; set; }
            public decimal Qty { get; set; }
            public decimal cases { get; set; }
            public decimal unit { get; set; }
            public string seqNo { get; set; }
            public decimal mrp { get; set; }

            public int Sno { get; set; }
            public int cityid { get; set; }
            public string remarkdist { get; set; }
            public string NextVisitTime { get; set; }
            public string SpentfrTime { get; set; }
            public string SpentToTime { get; set; }
            public decimal stock { get; set; }
            public string DSRType { get; set; }
            public string Mode { get; set; }
            public decimal Amount { get; set; }
            public string PaymentDate { get; set; }
            public string Cheque_DDNo { get; set; }
            public string Cheque_DD_Date { get; set; }
            public string Bank { get; set; }
            public string Branch { get; set; }
            public string status { get; set; }
            public string androidid { get; set; }
            public int visid { get; set; }
            public int UserID { get; set; }
            public string Nextvisit { get; set; }
            public int ReasonID { get; set; }
            public string VisitTime { get; set; }
            public string Item { get; set; }
            public decimal Rate { get; set; }
            public int SMID { get; set; }
            public string CompName { get; set; }
            public decimal Discount { get; set; }
            public string BrandActivity { get; set; }
            public string MeetActivity { get; set; }
            public string RoadShow { get; set; }
            public string Scheme { get; set; }
            public string OtherGeneralInfo { get; set; }
            public string OtherActivity { get; set; }
            public decimal OrderAmount { get; set; }


            public int OrdId { get; set; }
            public decimal amount { get; set; }
            public string Android_Id1 { get; set; }
            public int selectedDistId { get; set; }
            public decimal discount { get; set; }
            public string LastRecord { get; set; }
            public string modifiedorder { get; set; }

            public Int32 PartyId { get; set; }
            public string PartyName { get; set; }
            public string Address1 { get; set; }
            public string Address2 { get; set; }
            public Int32 CityId { get; set; }
            public Int32 AreaId { get; set; }
            public Int32 BeatId { get; set; }
            public Int32 UnderId { get; set; }
            public string Pin { get; set; }
            public string Mobile { get; set; }
            public string Phone { get; set; }
            public string Remark { get; set; }
            public string SyncId { get; set; }
            public string IndId { get; set; }
            public decimal Potential { get; set; }
            public bool Active { get; set; }
            public string BlockReason { get; set; }
            public int PartyType { get; set; }
            public string ContactPerson { get; set; }
            public string CSTNo { get; set; }
            public string VatTin { get; set; }
            public string ServiceTax { get; set; }
            public string PanNo { get; set; }
            public int UserId { get; set; }
            public string DOA { get; set; }
            public string DOB { get; set; }
            public string Email { get; set; }
            public string Longitude { get; set; }
            public string Latitude { get; set; }
            public string LatlngTime { get; set; }

            public string Smid { get; set; }
            public string Visid { get; set; }
            public string Vdate { get; set; }
            public string LineCount { get; set; }

            public List<RetailerOrderLineEntry> RetailerOrderLine;
        }

        public class disList1
        {
            public List<Descdetail1> bodyLine;

        }
        public class Descdetail1
        {


            public int Userid { get; set; }
            public string VDate { get; set; }
            public string NextVisitDate { get; set; }
            public int smid { get; set; }
            public string frmtime1 { get; set; }
            public string toTime1 { get; set; }
            public int withuserid { get; set; }
            public string modeoftransport { get; set; }
            public string vehicleused { get; set; }
            public int Lock { get; set; }
            public int nwithuserid { get; set; }
            public string android_id { get; set; }
            public string cityids { get; set; }
            public string cityname { get; set; }
            public decimal orderamountmail { get; set; }
            public decimal orderamountphone { get; set; }
            public string visitcode { get; set; }
            public decimal Attendance { get; set; }
            public int Fromareacode { get; set; }
            public decimal OtherExpense { get; set; }
            public string AndroidAppRemark { get; set; }
            public int toareacode { get; set; }
            public int ncityid { get; set; }
            public string longitude { get; set; }
            public string latitude { get; set; }
            public string lat_long_dt { get; set; }
            public string mobile_created_date { get; set; }



            public int VisId { get; set; }
            public int SMId { get; set; }
            public string Remarks { get; set; }
            public int ProductClassId { get; set; }
            public int ProductSegmentId { get; set; }
            public int ProductMatGrp { get; set; }
            public string Android_Id { get; set; }
            public string ImgUrl { get; set; }
            public string image1 { get; set; }

            public int A_OrderNo { get; set; }
            public int A_POrderNo { get; set; }
            public int A_DemoNo { get; set; }
            public int A_FailedVisitNo { get; set; }
            public int A_VisitNo { get; set; }
            public int A_CompetitorNo { get; set; }
            public int A_PartyNo { get; set; }
            public int A_DiscussionNo { get; set; }
            public int A_DistributorCollectionNo { get; set; }
            public int A_PartyCollectionNo { get; set; }
            public int A_POrder1No { get; set; }
            public int A_LeaveNo { get; set; }
            public int A_Order1No { get; set; }
            public int A_BeatPlanNo { get; set; }
            public int A_distStock_no { get; set; }
            public int A_SalesReturn_no { get; set; }
            public int A_SalesReturn1_no { get; set; }

            public int DistId { get; set; }
            public int ItemId { get; set; }
            public decimal Qty { get; set; }
            public decimal cases { get; set; }
            public decimal unit { get; set; }
            public string seqNo { get; set; }
            public decimal mrp { get; set; }

            public int Sno { get; set; }
            public int cityid { get; set; }
            public string remarkdist { get; set; }
            public string NextVisitTime { get; set; }
            public string SpentfrTime { get; set; }
            public string SpentToTime { get; set; }
            public decimal stock { get; set; }
            public string DSRType { get; set; }
            public string Mode { get; set; }
            public decimal Amount { get; set; }
            public string PaymentDate { get; set; }
            public string Cheque_DDNo { get; set; }
            public string Cheque_DD_Date { get; set; }
            public string Bank { get; set; }
            public string Branch { get; set; }
            public string status { get; set; }
            public string androidid { get; set; }
            public int visid { get; set; }
            public int UserID { get; set; }
            public string Nextvisit { get; set; }
            public int ReasonID { get; set; }
            public string VisitTime { get; set; }
            public string Item { get; set; }
            public decimal Rate { get; set; }
            public int SMID { get; set; }
            public string CompName { get; set; }
            public decimal Discount { get; set; }
            public string BrandActivity { get; set; }
            public string MeetActivity { get; set; }
            public string RoadShow { get; set; }
            public string Scheme { get; set; }
            public string OtherGeneralInfo { get; set; }
            public string OtherActivity { get; set; }
            public decimal OrderAmount { get; set; }


            public int OrdId { get; set; }
            public decimal amount { get; set; }
            public string Android_Id1 { get; set; }
            public int selectedDistId { get; set; }
            public decimal discount { get; set; }
            public string LastRecord { get; set; }
            public string modifiedorder { get; set; }

            public Int32 PartyId { get; set; }
            public string PartyName { get; set; }
            public string Address1 { get; set; }
            public string Address2 { get; set; }
            public Int32 CityId { get; set; }
            public Int32 AreaId { get; set; }
            public Int32 BeatId { get; set; }
            public Int32 UnderId { get; set; }
            public string Pin { get; set; }
            public string Mobile { get; set; }
            public string Phone { get; set; }
            public string Remark { get; set; }
            public string SyncId { get; set; }
            public string IndId { get; set; }
            public decimal Potential { get; set; }
            public bool Active { get; set; }
            public string BlockReason { get; set; }
            public int PartyType { get; set; }
            public string ContactPerson { get; set; }
            public string CSTNo { get; set; }
            public string VatTin { get; set; }
            public string ServiceTax { get; set; }
            public string PanNo { get; set; }
            public int UserId { get; set; }
            public string DOA { get; set; }
            public string DOB { get; set; }
            public string Email { get; set; }
            public string Longitude { get; set; }
            public string Latitude { get; set; }
            public string LatlngTime { get; set; }

            public string Smid { get; set; }
            public string Visid { get; set; }
            public string Vdate { get; set; }


            public string LineCount { get; set; }
            public List<RetailerOrderLineEntry> RetailerOrderLine;
            public string ExpectedDD { get; set; }
            public string OrderTakenType { get; set; }
            public decimal TotalDisc { get; set; }
            public decimal NetAmount { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void SaveRetailerOrder()
        {
            string createText = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            string HeaderMsz = string.Empty;
            string LineMsz = string.Empty;
            string Status = "400";
            string Line_Status = "400"; string Line_ms = string.Empty; string HeaderMS_Query = ""; string Line_Android_Id = "";
            var objResponse = JsonConvert.DeserializeObject<disList1>(bodyText);

            int VisId = objResponse.bodyLine[0].VisId;
            string Android_Id = objResponse.bodyLine[0].Android_Id;
            int UserId = objResponse.bodyLine[0].UserId;
            string VDate = objResponse.bodyLine[0].VDate;
            int SMId = objResponse.bodyLine[0].SMId;
            int PartyId = objResponse.bodyLine[0].PartyId;
            int AreaId = objResponse.bodyLine[0].AreaId;
            string Remarks = objResponse.bodyLine[0].Remarks;
            decimal OrderAmount = objResponse.bodyLine[0].OrderAmount;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;
            string ImgUrl = objResponse.bodyLine[0].ImgUrl;
            string image1 = objResponse.bodyLine[0].image1;
            string HeaderLineCOunt = objResponse.bodyLine[0].LineCount;
            var RetailerOrderLineEntry = objResponse.bodyLine[0].RetailerOrderLine;

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            createText += "" + VisId + "," + Android_Id + "," + UserId + "," + VDate + "," + SMId + "," + PartyId + "," + AreaId + "," + Remarks + "," + OrderAmount + "," + longitude + "," + latitude + "," + lat_long_dt + "," + mobile_created_date + "," + ImgUrl + "," + image1 + ", " + HeaderLineCOunt + "," + RetailerOrderLineEntry + "" + Environment.NewLine;


            int OrdId = 0;
            String orddocid = string.Empty;
            string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            //if (string.IsNullOrEmpty(mobile_created_date))
            //{
            //    mobile_created_date = "0";
            //}

            double ticks1 = double.Parse(mobile_created_date);
            TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
            DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
            mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");

            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            List<RetailerLineOrderResponse> rst_line = new List<RetailerLineOrderResponse>();
            #region UploadImage
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;

            if (image1.Contains("http://"))
            {
                ImgUrl = image1.Replace(path, "~");
            }
            else if (image1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(image1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(SMId + '-' + timeStamp);
                {
                    string filePath = Server.MapPath("~/DSRImages" + "/O_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    ImgUrl = "~/DSRImages" + "/O_" + filename + ".png";
                }

            }
            #endregion


            #region MarkFromTime_inTrasnvisit
            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");
            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }
            #endregion

            string modifyorder = "N";
            string str = string.Empty;
            {

                str = "select partyid,visid,OrdDocId from temp_TransOrder where  PartyId='" + PartyId + "' and visid=" + VisId + "";

                DataTable dtexist = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dtexist.Rows.Count > 0)
                {
                    if ((dtexist.Rows[0]["partyid"].ToString() == PartyId.ToString()) && (dtexist.Rows[0]["visid"].ToString() == VisId.ToString()))
                    {
                        HeaderMS_Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + dtexist.Rows[0]["orddocid"].ToString() + "'";
                        modifyorder = "Y";
                        // Now we would update that this header , since it exist

                        str = "update temp_TransOrder set ItemCount=" + HeaderLineCOunt + ", remarks='" + Remarks + "',orderamount=" + OrderAmount + ",Latitude='" + latitude + "',Longitude='" + longitude + "',Lat_long_datetime='" + minDate1 + "',Mobile_Created_date='" + mobiletime + "',OrderDownloaded=NULL,[ImgUrl]='" + ImgUrl + "'  OUTPUT  Inserted.OrdDocId where OrdDocId='" + dtexist.Rows[0]["orddocid"].ToString() + "'";
                        try
                        {
                            string _output = DbConnectionDAL.GetStringScalarVal(str);
                            if (_output == dtexist.Rows[0]["orddocid"].ToString())
                            {
                                // Header succesfully updated

                                HeaderMsz = "Successfully Updated";
                                Status = "200";
                                // Now from here we would update line file
                                str = "select OrdId,orddocid,Android_Id from temp_transorder where visid=" + VisId + " and partyid=" + PartyId + "";
                                DataTable dtchk = DbConnectionDAL.getFromDataTable(str);
                                if (dtchk.Rows.Count > 0)
                                {
                                    OrdId = Convert.ToInt32(dtchk.Rows[0]["OrdId"]);
                                    orddocid = dtchk.Rows[0]["orddocid"].ToString();
                                    Android_Id = dtchk.Rows[0]["Android_Id"].ToString();
                                }
                                else
                                {
                                    //some error occured while updating header
                                    Status = "400";
                                    HeaderMsz = "Ordid and Docid not found after updating header";
                                }
                            }
                            else
                            {
                                //some error occured while updating header
                                Status = "400";
                                HeaderMsz = "some error occured while updating header";
                            }
                        }
                        catch (Exception ex)
                        {
                            Status = "400";
                            HeaderMsz = ex.ToString();
                        }


                    }
                    else
                    {
                        //msz to say that, this android id exist in other data;
                        Status = "400";
                        HeaderMsz = Android_Id + " - this android id exist in other data";
                    }

                }
                else
                {
                    orddocid = Settings.GetDocID("ORDSN", DateTime.Now);

                    str = "INSERT INTO dbo.temp_TransOrder (VisId,OrdDocId, Android_Id, UserId,VDate,SMId, ItemCount,PartyId,AreaId,Remarks,OrderAmount,Created_date,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,[ImgUrl]) OUTPUT INSERTED.OrdDocId " +
                  " VALUES ('" + VisId + "', '" + orddocid + "', '" + Android_Id + "', " + UserId + ", '" + VDate + "', " + SMId + " ," + HeaderLineCOunt + ", '" + PartyId + "', '" + AreaId + "', '" + Remarks + "', " + OrderAmount + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + minDate1 + "','" + mobiletime + "','" + ImgUrl + "')";
                    try
                    {
                        string _output = DbConnectionDAL.GetStringScalarVal(str);
                        if (_output == orddocid)
                        {
                            HeaderMS_Query = "select  OrdId,OrdDocId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + orddocid + "'";
                            modifyorder = "N";
                            Status = "200";
                            HeaderMsz = "Successfully Inserted";

                            str = "select OrdId,orddocid,Android_Id from temp_transorder where visid=" + VisId + " and partyid=" + PartyId + "";
                            DataTable dtchk = DbConnectionDAL.getFromDataTable(str);
                            if (dtchk.Rows.Count > 0)
                            {
                                OrdId = Convert.ToInt32(dtchk.Rows[0]["OrdId"]);
                                orddocid = dtchk.Rows[0]["orddocid"].ToString();
                                Android_Id = dtchk.Rows[0]["Android_Id"].ToString();
                            }
                            else
                            {
                                //some error occured while updating header
                                Status = "400";
                                HeaderMsz = "Ordid and Docid not found after updating header";
                            }
                        }
                        else
                        {
                            Status = "400";
                            HeaderMsz = "some error occured while Inserting Header";
                        }
                    }
                    catch (Exception ex)
                    {
                        Status = "400";
                        HeaderMsz = ex.ToString();
                    }
                }

                #region GetLineEntries
                using (WebClient client = new WebClient())
                {

                    for (int i = 0; i < RetailerOrderLineEntry.Count; i++)
                    {

                        int Line_OrdId = RetailerOrderLineEntry[i].OrdId;
                        int Line_VisId = RetailerOrderLineEntry[i].VisId;
                        string Line_Sno = RetailerOrderLineEntry[i].Sno.ToString();
                        int Line_UserId = RetailerOrderLineEntry[i].UserId;
                        string Line_VDate = RetailerOrderLineEntry[i].VDate;
                        int Line_SMId = RetailerOrderLineEntry[i].SMId;
                        string Line_PartyId = RetailerOrderLineEntry[i].PartyId.ToString();
                        int Line_AreaId = RetailerOrderLineEntry[i].AreaId;
                        int Line_ItemId = RetailerOrderLineEntry[i].ItemId;
                        decimal Line_Qty = RetailerOrderLineEntry[i].Qty;
                        decimal Line_Rate = RetailerOrderLineEntry[i].Rate;
                        string Line_Remarks = RetailerOrderLineEntry[i].Remarks;
                        decimal Line_amount = RetailerOrderLineEntry[i].amount;
                        Line_Android_Id = RetailerOrderLineEntry[i].Android_Id;
                        string Line_Android_Id1 = RetailerOrderLineEntry[i].Android_Id1;
                        string Line_cases = RetailerOrderLineEntry[i].cases.ToString();
                        string Line_unit = RetailerOrderLineEntry[i].unit.ToString();
                        string Line_longitude = RetailerOrderLineEntry[i].longitude;
                        string Line_latitude = RetailerOrderLineEntry[i].latitude;
                        string Line_lat_long_dt = RetailerOrderLineEntry[i].lat_long_dt;
                        string Line_mobile_created_date = RetailerOrderLineEntry[i].mobile_created_date;
                        string Line_seqNo = RetailerOrderLineEntry[i].seqNo;
                        int Line_selectedDistId = RetailerOrderLineEntry[i].selectedDistId;
                        decimal Line_discount = RetailerOrderLineEntry[i].discount;
                        string Line_LastRecord = RetailerOrderLineEntry[i].LastRecord;
                        string Line_modifiedorder = RetailerOrderLineEntry[i].modifiedorder;
                        if (Line_seqNo == "0")
                        {
                            str = "delete from temp_transorder1 where partyid=" + PartyId + " and visid=" + VisId + " ";
                            DbConnectionDAL.ExecuteQuery(str);
                        }
                        //if (string.IsNullOrEmpty(Line_selectedDistId.ToString()))
                        //{
                        //    Line_selectedDistId = 0;
                        //}
                        //if (string.IsNullOrEmpty(Line_discount.ToString()))
                        //{
                        //    Line_discount = 0;
                        //}

                        //if (string.IsNullOrEmpty(mobile_created_date))
                        //{
                        //    mobile_created_date = "0";
                        //}

                        if (!string.IsNullOrEmpty(lat_long_dt))
                        {
                            double ticks = double.Parse(lat_long_dt);
                            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                            DateTime startdate = new DateTime(1970, 1, 1) + time;
                            minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                        }
                        if (!string.IsNullOrEmpty(mobile_created_date))
                        {
                            double Line_ticks1 = double.Parse(mobile_created_date);
                            TimeSpan Line_time1 = TimeSpan.FromMilliseconds(Line_ticks1);
                            DateTime Line_startdate1 = new DateTime(1970, 1, 1) + Line_time1;
                            mobiletime = Line_startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                            mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                        }
                        str = "INSERT INTO dbo.temp_TransOrder1 (OrdId,VisId,OrdDocId, Sno, UserId,VDate,SMId, PartyId,AreaId,ItemId,Qty,Rate,Remarks,amount,Android_Id,android_id1,Created_date,cases,unit,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,DistId,Discount)  OUTPUT INSERTED.android_id1  " +
 " VALUES (" + OrdId + ", '" + VisId + "', '" + orddocid + "', '" + Line_seqNo + "', '" + UserId + "', '" + VDate + "', " + SMId + " , '" + PartyId + "', '" + AreaId + "', " + Line_ItemId + ", " + Line_Qty + ", " + Line_Rate + ",'" + Remarks + "', " + Line_amount + ", '" + Line_Android_Id + "', '" + Line_Android_Id1 + "',DateAdd(minute,330,getutcdate())," + Convert.ToDecimal(Line_cases) + "," + Convert.ToDecimal(Line_unit) + ",'" + latitude + "','" + longitude + "','" + minDate1 + "','" + mobiletime + "'," + Line_selectedDistId + "," + Line_discount + ")";
                        try
                        {
                            string _output = DbConnectionDAL.GetStringScalarVal(str);
                            if (_output == Line_Android_Id1)
                            {
                                Query = "select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from temp_TransOrder1 where OrdDocId='" + orddocid + "' and itemid=" + Line_ItemId + " and OrdId=" + OrdId + "";


                                Line_ms = DbConnectionDAL.GetStringScalarVal(Query);
                                Line_Status = "200";
                                LineMsz = "Successfully Inserted Itemid " + Line_ItemId;

                            }
                            else
                            {
                                Line_Status = "400";
                                LineMsz = "Error While Inserting ItemId " + Line_ItemId;
                                Status = "400";
                                HeaderMsz = HeaderMsz + " : " + LineMsz;
                            }
                        }
                        catch (Exception ex)
                        {
                            Line_Status = "400";
                            LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();
                            Status = "400";
                            HeaderMsz = HeaderMsz + " : " + LineMsz;
                        }

                        #region SentNotification
                        try
                        {
                            if (Line_LastRecord == "Y" && Status == "200")
                            {
                                if (HeaderLineCOunt == (Convert.ToInt32(Line_seqNo) + 1).ToString())
                                {
                                    string displaytitle = ""; string title = ""; string partyname = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Partyname From MastParty where PartyId=" + PartyId + ""));
                                    string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
                                    string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from temp_TransOrder1 where OrdId=" + OrdId + ""));
                                    DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid from mastsalesrep where smid=" + SMId + "");
                                    if (dtgrpsmid.Rows.Count > 0)
                                    {

                                    }
                                    else
                                    {
                                        dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName,userid from mastsalesrep where smid==" + SMId + "");
                                    }

                                    if (dtgrpsmid.Rows.Count > 0)
                                    {
                                        string pro_id = "RETORDDISCAN";
                                        string sql_getsenior = "select smid,Mobile,userid from mastsalesrep where smid in (select MainGrp from mastsalesrepgrp where smid=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " and Level<=(select level from mastsalesrepgrp where smid=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " and MainGrp=" + dtgrpsmid.Rows[0]["Smid"].ToString() + "))";
                                        DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                                        if (dt_getsenior.Rows.Count > 0)
                                        {
                                            for (int k = 0; k < dt_getsenior.Rows.Count; k++)
                                            {

                                                if (modifyorder == "Y")
                                                {
                                                    displaytitle = orddocid.Replace("-", " ") + " -  Order Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                                    title = " Order Modified";
                                                }
                                                else
                                                {
                                                    displaytitle = orddocid.Replace("-", " ") + " - New Order created by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                                    title = " New Order Created";
                                                }


                                                lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + orddocid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), Convert.ToInt32(dt_getsenior.Rows[k]["smid"].ToString()));

                                                if (!string.IsNullOrEmpty(dt_getsenior.Rows[k]["mobile"].ToString()))
                                                {
                                                    pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                                        dt_getsenior.Rows[k]["mobile"].ToString(),


                                                      title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                                        dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS");

                                                    pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                                       dt_getsenior.Rows[k]["mobile"].ToString(),
                                                      title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                                       dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER");
                                                }
                                            }
                                        }

                                        DataTable dtdist = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT Mobile,  UserId FROM MastParty WHERE PartyId=" + Line_selectedDistId + "");
                                        if (dtdist.Rows.Count > 0)
                                        {
                                            lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dtdist.Rows[0]["UserId"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + orddocid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), 0);

                                            if (!string.IsNullOrEmpty(dtdist.Rows[0]["mobile"].ToString()))
                                            {
                                                pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                                   dtdist.Rows[0]["mobile"].ToString(),
                                                    "New Order Created", dtgrpsmid.Rows[0]["SMID"].ToString(),
                                                    dtgrpsmid.Rows[0]["SMName"].ToString(), "GOLDIEE", orddocid, partyname);
                                            }
                                        }

                                    }
                                }
                                else
                                {

                                    //Line file mismatch
                                    Status = "400";
                                    HeaderMsz = HeaderMsz + " - Line File Mismatch : Header Line Count: " + HeaderLineCOunt + " and LineFileCount: " + (Convert.ToInt32(Line_seqNo) + 1).ToString();
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            Line_Status = "200"; // status is set 200 becoz order is saved but exception in sending notification.
                            LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();

                            Status = "400";
                            HeaderMsz = HeaderMsz + " : " + LineMsz;
                        }

                        #endregion

                        rst_line.Add(
              new RetailerLineOrderResponse
              {
                  ItemId = Line_ItemId.ToString(),
                  Ordid = OrdId.ToString(),
                  OrdDocid = orddocid,
                  MS = Line_ms,
                  Status = Line_Status,
                  Msz = LineMsz,
                  AndroidId_1 = Line_Android_Id1

              }
       );
                    }
                }
                #endregion

            }
            string MS = "";
            try
            {
                DataTable dtHeader = DbConnectionDAL.GetDataTable(CommandType.Text, HeaderMS_Query);
                if (dtHeader.Rows.Count > 0)
                    MS = dtHeader.Rows[0]["Milliseconds"].ToString();
            }
            catch (Exception ex)
            {
                HeaderMsz = HeaderMsz + "  : " + HeaderMsz;
            }
            List<RetailerOrderResponse> rstheader = new List<RetailerOrderResponse>();


            rstheader.Add(
                new RetailerOrderResponse
                {
                    Id = OrdId,
                    DocumentId = orddocid,
                    MS = MS,
                    Modifyord = modifyorder,
                    Status = Status,
                    Msz = HeaderMsz,
                    AndroidID = Android_Id,
                    RetailerOrderLineResponse = rst_line
                }
            );

            createText += " @@@@@@   Providing Response To Android  @@@@@" + JsonConvert.SerializeObject(rstheader) + "" + Environment.NewLine;
            createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMId + "_SaveRetailerOrder_" + VDate + ".txt"), true))
            {
                file2.WriteLine(createText);
                file2.Close();
            }

            Context.Response.Write(JsonConvert.SerializeObject(rstheader));
        }


        public class RetailerOrderResponse
        {
            [DataMember]
            public int Id { get; set; }
            [DataMember]
            public string DocumentId { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string Msz { get; set; }
            [DataMember]
            public string Modifyord { get; set; }
            [DataMember]
            public string AndroidID { get; set; }

            public List<RetailerLineOrderResponse> RetailerOrderLineResponse;
        }

        public class RetailerLineOrderResponse
        {
            [DataMember]
            public string ItemId { get; set; }
            [DataMember]
            public string Ordid { get; set; }
            [DataMember]
            public string OrdDocid { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string Msz { get; set; }
            [DataMember]
            public string AndroidId_1 { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void SaveRetailerOrder1()
        {
            string createText = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            string HeaderMsz = string.Empty;
            string LineMsz = string.Empty;
            string Status = "400";
            string Line_Status = "400"; string Line_ms = string.Empty; string HeaderMS_Query = ""; string Line_Android_Id = "";
            var objResponse = JsonConvert.DeserializeObject<disList1>(bodyText);

            int VisId = objResponse.bodyLine[0].VisId;
            string Android_Id = objResponse.bodyLine[0].Android_Id;
            int UserId = objResponse.bodyLine[0].UserId;
            string VDate = objResponse.bodyLine[0].VDate;
            int SMId = objResponse.bodyLine[0].SMId;
            int PartyId = objResponse.bodyLine[0].PartyId;
            int AreaId = objResponse.bodyLine[0].AreaId;
            string Remarks = objResponse.bodyLine[0].Remarks;
            decimal OrderAmount = objResponse.bodyLine[0].OrderAmount;
            string longitude = objResponse.bodyLine[0].longitude;
            string latitude = objResponse.bodyLine[0].latitude;
            string lat_long_dt = objResponse.bodyLine[0].lat_long_dt;
            string mobile_created_date = objResponse.bodyLine[0].mobile_created_date;
            string ImgUrl = objResponse.bodyLine[0].ImgUrl;
            string image1 = objResponse.bodyLine[0].image1;
            string HeaderLineCOunt = objResponse.bodyLine[0].LineCount;
            var RetailerOrderLineEntry = objResponse.bodyLine[0].RetailerOrderLine;
            string ExpectedDD = objResponse.bodyLine[0].ExpectedDD;
            string OrderTakenType = objResponse.bodyLine[0].OrderTakenType;
            decimal TotalDisc = objResponse.bodyLine[0].TotalDisc;
            decimal NetAmount = objResponse.bodyLine[0].NetAmount;

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            createText += "" + VisId + "," + Android_Id + "," + UserId + "," + VDate + "," + SMId + "," + PartyId + "," + AreaId + "," + Remarks + "," + OrderAmount + "," + longitude + "," + latitude + "," + lat_long_dt + "," + mobile_created_date + "," + ImgUrl + "," + image1 + ", " + HeaderLineCOunt + "," + RetailerOrderLineEntry + ", " + ExpectedDD + ", " + OrderTakenType + ", " + TotalDisc + ", " + NetAmount + "" + Environment.NewLine;


            int OrdId = 0;
            String orddocid = string.Empty;
            string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            //if (string.IsNullOrEmpty(mobile_created_date))
            //{
            //    mobile_created_date = "0";
            //}

            double ticks1 = double.Parse(mobile_created_date);
            TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
            DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
            mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");

            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            List<RetailerLineOrderResponse> rst_line = new List<RetailerLineOrderResponse>();
            #region UploadImage
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;

            if (image1.Contains("http://"))
            {
                ImgUrl = image1.Replace(path, "~");
            }
            else if (image1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(image1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(SMId + '-' + timeStamp);
                {
                    string filePath = Server.MapPath("~/DSRImages" + "/O_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    ImgUrl = "~/DSRImages" + "/O_" + filename + ".png";
                }

            }
            #endregion


            #region MarkFromTime_inTrasnvisit
            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");
            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }
            #endregion

            string modifyorder = "N";
            string str = string.Empty;
            {

                str = "select partyid,visid,OrdDocId from temp_TransOrder where  PartyId='" + PartyId + "' and visid=" + VisId + "";
                createText += "" + str + "" + Environment.NewLine;
                DataTable dtexist = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dtexist.Rows.Count > 0)
                {
                    if ((dtexist.Rows[0]["partyid"].ToString() == PartyId.ToString()) && (dtexist.Rows[0]["visid"].ToString() == VisId.ToString()))
                    {
                        HeaderMS_Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + dtexist.Rows[0]["orddocid"].ToString() + "'";
                        modifyorder = "Y";
                        // Now we would update that this header , since it exist

                        str = "update temp_TransOrder set ItemCount=" + HeaderLineCOunt + ", remarks='" + Remarks + "',orderamount=" + OrderAmount + ",Latitude='" + latitude + "',Longitude='" + longitude + "',Lat_long_datetime='" + minDate1 + "',Mobile_Created_date='" + mobiletime + "',[ImgUrl]='" + ImgUrl + "',[ExpectedDD]='" + ExpectedDD + "',[OrderTakenType]='" + OrderTakenType + "',[TotalDiscount]=" + TotalDisc + ",[NetAmount]= " + NetAmount + "  OUTPUT  Inserted.OrdDocId where OrdDocId='" + dtexist.Rows[0]["orddocid"].ToString() + "'";
                        createText += "" + str + "" + Environment.NewLine;
                        try
                        {
                            string _output = DbConnectionDAL.GetStringScalarVal(str);
                            if (_output == dtexist.Rows[0]["orddocid"].ToString())
                            {
                                // Header succesfully updated

                                HeaderMsz = "Successfully Updated";
                                Status = "200";
                                // Now from here we would update line file
                                str = "select OrdId,orddocid,Android_Id from temp_transorder where visid=" + VisId + " and partyid=" + PartyId + "";
                                createText += "" + str + "" + Environment.NewLine;
                                DataTable dtchk = DbConnectionDAL.getFromDataTable(str);
                                if (dtchk.Rows.Count > 0)
                                {
                                    OrdId = Convert.ToInt32(dtchk.Rows[0]["OrdId"]);
                                    orddocid = dtchk.Rows[0]["orddocid"].ToString();
                                    Android_Id = dtchk.Rows[0]["Android_Id"].ToString();
                                }
                                else
                                {
                                    //some error occured while updating header
                                    Status = "400";
                                    HeaderMsz = "Ordid and Docid not found after updating header";
                                }
                            }
                            else
                            {
                                //some error occured while updating header
                                Status = "400";
                                HeaderMsz = "some error occured while updating header";
                            }
                        }
                        catch (Exception ex)
                        {
                            Status = "400";
                            HeaderMsz = ex.ToString();
                        }


                    }
                    else
                    {
                        //msz to say that, this android id exist in other data;
                        Status = "400";
                        HeaderMsz = Android_Id + " - this android id exist in other data";
                    }

                }
                else
                {
                    orddocid = Settings.GetDocID("ORDSN", DateTime.Now);

                    str = "INSERT INTO dbo.temp_TransOrder (VisId,OrdDocId, Android_Id, UserId,VDate,SMId, ItemCount,PartyId,AreaId,Remarks,OrderAmount,Created_date,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,[ImgUrl],[ExpectedDD],[OrderTakenType],[TotalDiscount],[NetAmount]) OUTPUT INSERTED.OrdDocId " +
                  " VALUES ('" + VisId + "', '" + orddocid + "', '" + Android_Id + "', " + UserId + ", '" + VDate + "', " + SMId + " ," + HeaderLineCOunt + ", '" + PartyId + "', '" + AreaId + "', '" + Remarks + "', " + OrderAmount + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + minDate1 + "','" + mobiletime + "','" + ImgUrl + "','" + ExpectedDD + "','" + OrderTakenType + "'," + TotalDisc + "," + NetAmount + ")";
                    try
                    {
                        createText += "" + str + "" + Environment.NewLine;
                        string _output = DbConnectionDAL.GetStringScalarVal(str);
                        if (_output == orddocid)
                        {
                            HeaderMS_Query = "select  OrdId,OrdDocId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + orddocid + "'";
                            modifyorder = "N";
                            Status = "200";
                            HeaderMsz = "Successfully Inserted";

                            str = "select OrdId,orddocid,Android_Id from temp_transorder where visid=" + VisId + " and partyid=" + PartyId + "";
                            createText += "" + str + "" + Environment.NewLine;
                            DataTable dtchk = DbConnectionDAL.getFromDataTable(str);
                            if (dtchk.Rows.Count > 0)
                            {
                                OrdId = Convert.ToInt32(dtchk.Rows[0]["OrdId"]);
                                orddocid = dtchk.Rows[0]["orddocid"].ToString();
                                Android_Id = dtchk.Rows[0]["Android_Id"].ToString();
                            }
                            else
                            {
                                //some error occured while updating header
                                Status = "400";
                                HeaderMsz = "Ordid and Docid not found after updating header";
                            }
                        }
                        else
                        {
                            Status = "400";
                            HeaderMsz = "some error occured while Inserting Header";
                        }
                    }
                    catch (Exception ex)
                    {
                        Status = "400";
                        HeaderMsz = ex.ToString();
                    }
                }

                #region GetLineEntries
                using (WebClient client = new WebClient())
                {

                    for (int i = 0; i < RetailerOrderLineEntry.Count; i++)
                    {

                        int Line_OrdId = RetailerOrderLineEntry[i].OrdId;
                        int Line_VisId = RetailerOrderLineEntry[i].VisId;
                        string Line_Sno = RetailerOrderLineEntry[i].Sno.ToString();
                        int Line_UserId = RetailerOrderLineEntry[i].UserId;
                        string Line_VDate = RetailerOrderLineEntry[i].VDate;
                        int Line_SMId = RetailerOrderLineEntry[i].SMId;
                        string Line_PartyId = RetailerOrderLineEntry[i].PartyId.ToString();
                        int Line_AreaId = RetailerOrderLineEntry[i].AreaId;
                        int Line_ItemId = RetailerOrderLineEntry[i].ItemId;
                        decimal Line_Qty = RetailerOrderLineEntry[i].Qty;
                        decimal Line_Rate = RetailerOrderLineEntry[i].Rate;
                        string Line_Remarks = RetailerOrderLineEntry[i].Remarks;
                        decimal Line_amount = RetailerOrderLineEntry[i].amount;
                        Line_Android_Id = RetailerOrderLineEntry[i].Android_Id;
                        string Line_Android_Id1 = RetailerOrderLineEntry[i].Android_Id1;
                        string Line_cases = RetailerOrderLineEntry[i].cases.ToString();
                        string Line_unit = RetailerOrderLineEntry[i].unit.ToString();
                        string Line_longitude = RetailerOrderLineEntry[i].longitude;
                        string Line_latitude = RetailerOrderLineEntry[i].latitude;
                        string Line_lat_long_dt = RetailerOrderLineEntry[i].lat_long_dt;
                        string Line_mobile_created_date = RetailerOrderLineEntry[i].mobile_created_date;
                        string Line_seqNo = RetailerOrderLineEntry[i].seqNo;
                        int Line_selectedDistId = RetailerOrderLineEntry[i].selectedDistId;
                        decimal Line_discount = RetailerOrderLineEntry[i].discount;
                        string Line_LastRecord = RetailerOrderLineEntry[i].LastRecord;
                        string Line_modifiedorder = RetailerOrderLineEntry[i].modifiedorder;
                        decimal Line_BaseUnitQty = RetailerOrderLineEntry[i].BaseUnitQty;
                        decimal Line_PrimaryUnitQty = RetailerOrderLineEntry[i].PrimaryUnitQty;
                        decimal Line_SecondaryUnitQty = RetailerOrderLineEntry[i].SecondaryUnitQty;
                        decimal Line_PrimaryUnitConversion = RetailerOrderLineEntry[i].PrimaryUnitConversion;
                        decimal Line_SecondaryUnitConversion = RetailerOrderLineEntry[i].SecondaryUnitConversion;
                        string Line_DiscountType = RetailerOrderLineEntry[i].DiscountType;
                        //decimal Line_DiscountAmount = RetailerOrderLineEntry[i].DiscountAmount;
                        decimal Line_MarginPercentage = RetailerOrderLineEntry[i].MarginPercentage;
                        string Line_BaseUnit = RetailerOrderLineEntry[i].BaseUnit;
                        string Line_PrimaryUnit = RetailerOrderLineEntry[i].PrimaryUnit;
                        string Line_SecondaryUnit = RetailerOrderLineEntry[i].SecondaryUnit;
                        if (Line_seqNo == "0")
                        {
                            str = "delete from temp_transorder1 where partyid=" + PartyId + " and visid=" + VisId + " ";
                            DbConnectionDAL.ExecuteQuery(str);
                        }
                        //if (string.IsNullOrEmpty(Line_selectedDistId.ToString()))
                        //{
                        //    Line_selectedDistId = 0;
                        //}
                        //if (string.IsNullOrEmpty(Line_discount.ToString()))
                        //{
                        //    Line_discount = 0;
                        //}

                        //if (string.IsNullOrEmpty(mobile_created_date))
                        //{
                        //    mobile_created_date = "0";
                        //}

                        if (!string.IsNullOrEmpty(lat_long_dt))
                        {
                            double ticks = double.Parse(lat_long_dt);
                            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                            DateTime startdate = new DateTime(1970, 1, 1) + time;
                            minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                        }
                        if (!string.IsNullOrEmpty(mobile_created_date))
                        {
                            double Line_ticks1 = double.Parse(mobile_created_date);
                            TimeSpan Line_time1 = TimeSpan.FromMilliseconds(Line_ticks1);
                            DateTime Line_startdate1 = new DateTime(1970, 1, 1) + Line_time1;
                            mobiletime = Line_startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                            mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                        }
                        decimal discountamount = 0;
                        discountamount = (Line_amount * Line_discount) / Convert.ToDecimal(100);

                        str = "INSERT INTO dbo.temp_TransOrder1 ([OrdId],[VisId],[OrdDocId], [Sno], [UserId],[VDate],[SMId], [PartyId],[AreaId],[ItemId],[Qty],[Rate],[Remarks],[amount],[Android_Id],[android_id1],[Created_date],[cases],[unit],[Latitude],[Longitude],[Lat_long_datetime],[Mobile_Created_date],[DistId],[Discount],[BaseUnit],[BaseUnitQty],[PrimaryUnit],[PrimaryUnitQty],[SecondaryUnit],[SecondaryUnitQty],[PrimaryUnitConversion],[SecondaryUnitConversion],[DiscountType],[DiscountAmount],[MarginPercentage])  OUTPUT INSERTED.android_id1  " +
 " VALUES (" + OrdId + ", '" + VisId + "', '" + orddocid + "', '" + Line_seqNo + "', '" + UserId + "', '" + VDate + "', " + SMId + " , '" + PartyId + "', '" + AreaId + "', " + Line_ItemId + ", " + Line_Qty + ", " + Line_Rate + ",'" + Remarks + "', " + Line_amount + ", '" + Line_Android_Id + "', '" + Line_Android_Id1 + "',DateAdd(minute,330,getutcdate())," + Convert.ToDecimal(Line_cases) + "," + Convert.ToDecimal(Line_unit) + ",'" + latitude + "','" + longitude + "','" + minDate1 + "','" + mobiletime + "'," + Line_selectedDistId + "," + Line_discount + ",'" + Line_BaseUnit + "'," + Line_BaseUnitQty + ",'" + Line_PrimaryUnit + "'," + Line_PrimaryUnitQty + ",'" + Line_SecondaryUnit + "'," + Line_SecondaryUnitQty + "," + Line_PrimaryUnitConversion + "," + Line_SecondaryUnitConversion + ",'" + Line_DiscountType + "'," + discountamount + "," + Line_MarginPercentage + ")";
                        try
                        {
                            string _output = DbConnectionDAL.GetStringScalarVal(str);
                            if (_output == Line_Android_Id1)
                            {
                                Query = "select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from temp_TransOrder1 where OrdDocId='" + orddocid + "' and itemid=" + Line_ItemId + " and OrdId=" + OrdId + "";


                                Line_ms = DbConnectionDAL.GetStringScalarVal(Query);
                                Line_Status = "200";
                                LineMsz = "Successfully Inserted Itemid " + Line_ItemId;

                            }
                            else
                            {
                                Line_Status = "400";
                                LineMsz = "Error While Inserting ItemId " + Line_ItemId;
                                Status = "400";
                                HeaderMsz = HeaderMsz + " : " + LineMsz;
                            }
                        }
                        catch (Exception ex)
                        {
                            Line_Status = "400";
                            LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();
                            Status = "400";
                            HeaderMsz = HeaderMsz + " : " + LineMsz;
                        }

                        #region SentNotification
                        try
                        {
                            if (Line_LastRecord == "Y" && Status == "200")
                            {
                                if (HeaderLineCOunt == (Convert.ToInt32(Line_seqNo) + 1).ToString())
                                {
                                    string displaytitle = ""; string title = ""; string partyname = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Partyname From MastParty where PartyId=" + PartyId + ""));
                                    string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
                                    string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from temp_TransOrder1 where OrdId=" + OrdId + ""));
                                    DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid from mastsalesrep where smid=" + SMId + "");
                                    if (dtgrpsmid.Rows.Count > 0)
                                    {

                                    }
                                    else
                                    {
                                        dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName,userid from mastsalesrep where smid==" + SMId + "");
                                    }

                                    if (dtgrpsmid.Rows.Count > 0)
                                    {
                                        string pro_id = "RETORDDISCAN";
                                        string sql_getsenior = "select smid,Mobile,userid from mastsalesrep where smid in (select MainGrp from mastsalesrepgrp where smid=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " and Level<=(select level from mastsalesrepgrp where smid=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " and MainGrp=" + dtgrpsmid.Rows[0]["Smid"].ToString() + "))";
                                        DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                                        if (dt_getsenior.Rows.Count > 0)
                                        {
                                            for (int k = 0; k < dt_getsenior.Rows.Count; k++)
                                            {

                                                if (modifyorder == "Y")
                                                {
                                                    displaytitle = orddocid.Replace("-", " ") + " -  Order Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                                    title = " Order Modified";
                                                }
                                                else
                                                {
                                                    displaytitle = orddocid.Replace("-", " ") + " - New Order created by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                                    title = " New Order Created";
                                                }


                                                lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + orddocid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), Convert.ToInt32(dt_getsenior.Rows[k]["smid"].ToString()));

                                                if (!string.IsNullOrEmpty(dt_getsenior.Rows[k]["mobile"].ToString()))
                                                {
                                                    pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                                        dt_getsenior.Rows[k]["mobile"].ToString(),


                                                      title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                                        dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS");

                                                    pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                                       dt_getsenior.Rows[k]["mobile"].ToString(),
                                                      title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                                       dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER");
                                                }
                                            }
                                        }

                                        DataTable dtdist = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT Mobile,  UserId FROM MastParty WHERE PartyId=" + Line_selectedDistId + "");
                                        if (dtdist.Rows.Count > 0)
                                        {
                                            lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dtdist.Rows[0]["UserId"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + orddocid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), 0);

                                            if (!string.IsNullOrEmpty(dtdist.Rows[0]["mobile"].ToString()))
                                            {
                                                pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                                   dtdist.Rows[0]["mobile"].ToString(),
                                                    "New Order Created", dtgrpsmid.Rows[0]["SMID"].ToString(),
                                                    dtgrpsmid.Rows[0]["SMName"].ToString(), "GOLDIEE", orddocid, partyname);
                                            }
                                        }

                                    }
                                }
                                else
                                {

                                    //Line file mismatch
                                    Status = "400";
                                    HeaderMsz = HeaderMsz + " - Line File Mismatch : Header Line Count: " + HeaderLineCOunt + " and LineFileCount: " + (Convert.ToInt32(Line_seqNo) + 1).ToString();
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            Line_Status = "200"; // status is set 200 becoz order is saved but exception in sending notification.
                            LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();

                            Status = "400";
                            HeaderMsz = HeaderMsz + " : " + LineMsz;
                        }

                        #endregion

                        rst_line.Add(
              new RetailerLineOrderResponse
              {
                  ItemId = Line_ItemId.ToString(),
                  Ordid = OrdId.ToString(),
                  OrdDocid = orddocid,
                  MS = Line_ms,
                  Status = Line_Status,
                  Msz = LineMsz,
                  AndroidId_1 = Line_Android_Id1

              }
       );
                    }
                }
                #endregion

            }
            string MS = "";
            try
            {
                DataTable dtHeader = DbConnectionDAL.GetDataTable(CommandType.Text, HeaderMS_Query);
                if (dtHeader.Rows.Count > 0)
                    MS = dtHeader.Rows[0]["Milliseconds"].ToString();
            }
            catch (Exception ex)
            {
                HeaderMsz = HeaderMsz + "  : " + HeaderMsz;
            }
            List<RetailerOrderResponse> rstheader = new List<RetailerOrderResponse>();


            rstheader.Add(
                new RetailerOrderResponse
                {
                    Id = OrdId,
                    DocumentId = orddocid,
                    MS = MS,
                    Modifyord = modifyorder,
                    Status = Status,
                    Msz = HeaderMsz,
                    AndroidID = Android_Id,
                    RetailerOrderLineResponse = rst_line
                }
            );

            //   createText += " @@@@@@   Providing Response To Android  @@@@@" + OrdId + ", " + orddocid + ", " + MS + ", " + modifyorder + ", " + Status + ", " + HeaderMsz + ", " + Android_Id + ", " + rst_line + "" + Environment.NewLine;
            createText += " @@@@@@   Providing Response To Android  @@@@@" + JsonConvert.SerializeObject(rstheader) + "" + Environment.NewLine;
            createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMId + "_SaveRetailerOrder1_" + VDate + ".txt"), true))
            {
                file2.WriteLine(createText);
                file2.Close();
            }

            Context.Response.Write(JsonConvert.SerializeObject(rstheader));
        }


        #endregion



        #endregion

        #region "Distributor Order Details"
        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void GetDistributorOrderBySdID()
        //{
        //    string str = "";
        //    string _SD_id, _FDate, _ToDate = "";
        //    string HeaderMsz = string.Empty;
        //    string Status = "400";
        //    List<DistributorResponse> dist = new List<DistributorResponse>();
        //    try
        //    {
        //        var request = HttpContext.Current.Request;
        //        var input = new StreamReader(HttpContext.Current.Request.InputStream);
        //        input.BaseStream.Seek(0, SeekOrigin.Begin);
        //        var inputtext = input.ReadToEnd();
        //        var inputresponse = JsonConvert.DeserializeObject<SuperDist>(inputtext);

        //        _SD_id = inputresponse.bodyLine[0].SD_Id;
        //        _FDate = inputresponse.bodyLine[0].FDate;
        //        _ToDate = inputresponse.bodyLine[0].ToDate;

        //        str = "select mp.partyid,mp.PartyName,mp.Mobile,ma.AreaName from mastparty as mp  left join MastArea as ma on mp.CityId=ma.AreaId  where ISNULL(mp.partydist,0)=1 and ma.AreaType='CITY' and  isnull(mp.sd_id,0) =" + _SD_id + "";
        //        DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

        //        for (int i = 0; i < dtordr.Rows.Count; i++)
        //        {
        //            str = "select tpo.PODocId,tpo.vdate,case when isnull(TPO.SMId,0)=0 then mpDist.PartyName else mpSP.SMName end as OrdrTakenBy,case when isnull(TPO.orderType,'')='C' then 'Cancel' when isnull(TPO.orderType,'')='D' then 'Dispatch' else 'Pending' end as OrderStatus,isnull(TPO.DispatchRemarks,'') as DispatchRemarks  FROM TransPurchOrder as TPO left join MastSalesRep mpSP on tpo.SMId=mpSP.SMId left join MastParty as mpDist on  tpo.DistId=mpDist.PartyId where tpo.DistId=" + dtordr.Rows[i]["PartyId"].ToString() + "  and CAST(tpo.vdate as date) >= '" + Convert.ToDateTime(_FDate).ToString("yyyy-MM-dd") + "' and CAST(tpo.vdate as date) <= '" + Convert.ToDateTime(_ToDate).ToString("yyyy-MM-dd") + "' ";
        //            DataTable dtdistordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);
        //            if (dtdistordr.Rows.Count > 0)
        //            {
        //                HeaderMsz = "Successful";
        //                Status = "200";

        //                List<DistributorOrderDetailResponse> distOrder = new List<DistributorOrderDetailResponse>();

        //                for (int j = 0; j < dtdistordr.Rows.Count; j++)
        //                {

        //                    distOrder.Add(
        //                   new DistributorOrderDetailResponse
        //                   {
        //                       OrderDocId = dtdistordr.Rows[j]["PODocId"].ToString(),
        //                       OrderDateTime = Convert.ToDateTime(dtdistordr.Rows[j]["vdate"]).ToString("yyyy-MM-dd"),
        //                       OrderTakenBy = dtdistordr.Rows[j]["OrdrTakenBy"].ToString(),
        //                       OrderStatus = dtdistordr.Rows[j]["OrderStatus"].ToString(),
        //                       OrderRemark = dtdistordr.Rows[j]["DispatchRemarks"].ToString()

        //                   });

        //                }

        //                dist.Add(
        //              new DistributorResponse
        //              {
        //                  DistName = dtordr.Rows[i]["PartyName"].ToString(),
        //                  Mobile = dtordr.Rows[i]["Mobile"].ToString(),
        //                  City = dtordr.Rows[i]["AreaName"].ToString(),
        //                  Status = Status,
        //                  Msz = HeaderMsz,
        //                  DistributorOrderDetailResponse = distOrder
        //              });
        //            }

        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        Status = "400";
        //        HeaderMsz = ex.ToString();
        //        dist.Add(
        //              new DistributorResponse
        //              {
        //                  Status = Status,
        //                  Msz = HeaderMsz
        //              });
        //    }

        //    Context.Response.Write(JsonConvert.SerializeObject(dist));

        //}


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void GetDistributorOrderBySdID()
        {
            string str = "";
            string _SD_id, _FDate, _ToDate = "";
            string HeaderMsz = string.Empty;
            string Status = "400";
            List<DistributorResponse> dist = new List<DistributorResponse>();
            DataTable dtval = new DataTable();
            dtval.Columns.Add(new DataColumn("DistributorOrderDetailResponse", typeof(DataTable)));
            dtval.Columns.Add(new DataColumn("DistName", typeof(string)));
            dtval.Columns.Add(new DataColumn("Mobile", typeof(string)));
            dtval.Columns.Add(new DataColumn("City", typeof(string)));
            dtval.Columns.Add(new DataColumn("Status", typeof(string)));
            dtval.Columns.Add(new DataColumn("Msz", typeof(string)));

            try
            {
                var request = HttpContext.Current.Request;
                var input = new StreamReader(HttpContext.Current.Request.InputStream);
                input.BaseStream.Seek(0, SeekOrigin.Begin);
                var inputtext = input.ReadToEnd();
                var inputresponse = JsonConvert.DeserializeObject<SuperDist>(inputtext);



                _SD_id = inputresponse.bodyLine[0].SD_Id;
                _FDate = inputresponse.bodyLine[0].FDate;
                _ToDate = inputresponse.bodyLine[0].ToDate;

                str = "select mp.partyid,mp.PartyName,mp.Mobile,ma.AreaName from mastparty as mp  left join MastArea as ma on mp.CityId=ma.AreaId  where ISNULL(mp.partydist,0)=1 and ma.AreaType='CITY' and  isnull(mp.sd_id,0) =" + _SD_id + "";
                DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

                for (int i = 0; i < dtordr.Rows.Count; i++)
                {
                    str = "select tpo.PODocId as OrderDocId,replace(Convert(nvarchar,tpo.vdate,106),' ','/') as OrderDateTime,case when isnull(TPO.SMId,0)=0 then mpDist.PartyName else mpSP.SMName end as OrderTakenBy,case when isnull(TPO.orderType,'')='C' then 'Cancel' when isnull(TPO.orderType,'')='D' then 'Dispatch' else 'Pending' end as OrderStatus,isnull(TPO.DispatchRemarks,'') as OrderRemark  FROM TransPurchOrder as TPO left join MastSalesRep mpSP on tpo.SMId=mpSP.SMId left join MastParty as mpDist on  tpo.DistId=mpDist.PartyId where tpo.DistId =" + dtordr.Rows[i]["PartyId"].ToString() + "  and CAST(tpo.vdate as date) >= '" + Convert.ToDateTime(_FDate).ToString("yyyy-MM-dd") + "' and CAST(tpo.vdate as date) <= '" + Convert.ToDateTime(_ToDate).ToString("yyyy-MM-dd") + "' ";
                    DataTable dtdistordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                    if (dtdistordr.Rows.Count > 0)
                    {

                        HeaderMsz = "Successful";
                        Status = "200";

                        dtval.Columns["DistributorOrderDetailResponse"].DefaultValue = dtdistordr;
                        dtval.Columns["DistName"].DefaultValue = dtordr.Rows[i]["PartyName"].ToString();
                        dtval.Columns["Mobile"].DefaultValue = dtordr.Rows[i]["Mobile"].ToString();
                        dtval.Columns["City"].DefaultValue = dtordr.Rows[i]["AreaName"].ToString();
                        dtval.Columns["Status"].DefaultValue = Status;
                        dtval.Columns["Msz"].DefaultValue = HeaderMsz;
                        DataRow dr = dtval.NewRow();
                        dtval.Rows.Add(dr);
                        dtval.AcceptChanges();

                        //List<DistributorOrderDetailResponse> distOrder = new List<DistributorOrderDetailResponse>();

                        //for (int j = 0; j < dtdistordr.Rows.Count; j++)
                        //{
                        //    distOrder.Add(
                        //   new DistributorOrderDetailResponse
                        //   {
                        //       OrderDocId = dtdistordr.Rows[j]["PODocId"].ToString(),
                        //       OrderDateTime = Convert.ToDateTime(dtdistordr.Rows[j]["vdate"]).ToString("yyyy-MM-dd"),
                        //       OrderTakenBy = dtdistordr.Rows[j]["OrdrTakenBy"].ToString(),
                        //       OrderStatus = dtdistordr.Rows[j]["OrderStatus"].ToString(),
                        //       OrderRemark = dtdistordr.Rows[j]["DispatchRemarks"].ToString()

                        //   });
                        //}

                        //  dist.Add(
                        //new DistributorResponse
                        //{
                        //    DistName = dtordr.Rows[i]["PartyName"].ToString(),
                        //    Mobile = dtordr.Rows[i]["Mobile"].ToString(),
                        //    City = dtordr.Rows[i]["AreaName"].ToString(),
                        //    Status = Status,
                        //    Msz = HeaderMsz,
                        //    DistributorOrderDetailResponse = distOrder
                        //});

                        dtdistordr.Dispose();
                    }
                }
            }
            catch (Exception ex)
            {
                Status = "400";
                HeaderMsz = ex.ToString();
                dtval.Columns["DistributorOrderDetailResponse"].DefaultValue = "";
                dtval.Columns["DistName"].DefaultValue = "";
                dtval.Columns["Mobile"].DefaultValue = "";
                dtval.Columns["City"].DefaultValue = "";
                dtval.Columns["Status"].DefaultValue = Status;
                dtval.Columns["Msz"].DefaultValue = HeaderMsz;
                DataRow dr = dtval.NewRow();
                dtval.Rows.Add(dr);
                dtval.AcceptChanges();
            }

            Context.Response.Write(JsonConvert.SerializeObject(dtval));
            dtval.Dispose();

        }

        public class SuperDistributor
        {

            public string SD_Id { get; set; }
            public string FDate { get; set; }
            public string ToDate { get; set; }

        }
        public class SuperDist
        {
            public List<SuperDistributor> bodyLine;
        }

        public class DistributorResponse
        {
            [DataMember]
            public string DistName { get; set; }
            [DataMember]
            public string Mobile { get; set; }
            [DataMember]
            public string City { get; set; }
            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string Msz { get; set; }

            public List<DistributorOrderDetailResponse> DistributorOrderDetailResponse;
        }

        public class DistributorOrderDetailResponse
        {
            [DataMember]
            public string OrderDocId { get; set; }
            [DataMember]
            public string OrderDateTime { get; set; }
            [DataMember]
            public string OrderTakenBy { get; set; }
            [DataMember]
            public string OrderStatus { get; set; }
            [DataMember]
            public string OrderRemark { get; set; }
        }

        #endregion

        //#region "Purchase Order Details"
        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void GetPurchaseOrderDetailByPODocID()    //for update
        //{
        //    string str = "";
        //    string _PODocID = "";
        //    string HeaderMsz = string.Empty;
        //    string Status = "400";
        //    List<PurchaseorderDetail> PurcOrder = new List<PurchaseorderDetail>();
        //    try
        //    {
        //        var request = HttpContext.Current.Request;
        //        var input = new StreamReader(HttpContext.Current.Request.InputStream);
        //        input.BaseStream.Seek(0, SeekOrigin.Begin);
        //        var inputtext = input.ReadToEnd();
        //        var inputresponse = JsonConvert.DeserializeObject<PurchaseID>(inputtext);

        //        _PODocID = inputresponse.bodyLine[0].PODOCID;

        //        str = "select TPO.PODocId,isnull(mi.ItemName,'') as ItemName,TPO1.Qty,TPO1.Rate ,isnull(TPO1.Disc,0) as discount,'0.00' as PrimaryQnty,'0.00' as SecondryQnty, '' as PrimaryUnitConversionFactor,'' as SecondryUnitConversionFactor, case when isnull(TPO.orderType,'')='C' then 'Cancel' when isnull(TPO.orderType,'')='D' then 'Dispatch' else 'Pending' end as OrderStatus,isnull(TPO.DispatchRemarks,'') as DispatchRemarks,(select cast(sum(Qty*Rate) as numeric(18,2)) from TransPurchOrder1 where PODocId =TPO.PODocId) as orderValue   from TransPurchOrder TPO left join TransPurchOrder1 TPO1 on TPO.PODocId=TPO1.PODocId   left join MastItem as MI on TPO1.ItemId=mi.ItemId where mi.ItemType='ITEM' and  tpo.PODocId='" + _PODocID + "'";
        //        DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

        //        if (dtordr.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtordr.Rows.Count; i++)
        //            {
        //                HeaderMsz = "Successful";
        //                Status = "200";
        //                PurcOrder.Add(
        //                 new PurchaseorderDetail
        //                 {
        //                     OrderDocId = dtordr.Rows[i]["PODocId"].ToString(),
        //                     ItemName = dtordr.Rows[i]["ItemName"].ToString(),
        //                     ItemQnty = dtordr.Rows[i]["Qty"].ToString(),
        //                     ItemRate = dtordr.Rows[i]["Rate"].ToString(),
        //                     ItemDiscount = dtordr.Rows[i]["discount"].ToString(),
        //                     PrimaryQnty = dtordr.Rows[i]["PrimaryQnty"].ToString(),
        //                     SecondryQnty = dtordr.Rows[i]["SecondryQnty"].ToString(),
        //                     PrimaryUnitConversionFactor = dtordr.Rows[i]["PrimaryUnitConversionFactor"].ToString(),
        //                     SecondryUnitConversionFactor = dtordr.Rows[i]["SecondryUnitConversionFactor"].ToString(),
        //                     orderStatus = dtordr.Rows[i]["OrderStatus"].ToString(),
        //                     OrderRemark = dtordr.Rows[i]["DispatchRemarks"].ToString(),
        //                     orderValue = dtordr.Rows[i]["orderValue"].ToString(),
        //                     Status = Status,
        //                     Msz = HeaderMsz
        //                 });
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        Status = "400";
        //        HeaderMsz = ex.ToString();
        //        PurcOrder.Add(
        //         new PurchaseorderDetail
        //         {
        //             Status = Status,
        //             Msz = HeaderMsz
        //         });
        //    }
        //    Context.Response.Write(JsonConvert.SerializeObject(PurcOrder));

        //}

        //public class PurchaseOrderID
        //{

        //    public string PODOCID { get; set; }


        //}
        //public class PurchaseID
        //{
        //    public List<PurchaseOrderID> bodyLine;
        //}



        //public class PurchaseorderDetail   // for update
        //{
        //    [DataMember]
        //    public string OrderDocId { get; set; }
        //    [DataMember]
        //    public string ItemName { get; set; }
        //    [DataMember]
        //    public string ItemQnty { get; set; }
        //    [DataMember]
        //    public string ItemRate { get; set; }
        //    [DataMember]
        //    public string ItemDiscount { get; set; }
        //    [DataMember]
        //    public string PrimaryQnty { get; set; }
        //    [DataMember]
        //    public string SecondryQnty { get; set; }
        //    [DataMember]
        //    public string PrimaryUnitConversionFactor { get; set; }
        //    [DataMember]
        //    public string SecondryUnitConversionFactor { get; set; }
        //    [DataMember]
        //    public string orderStatus { get; set; }
        //    [DataMember]
        //    public string OrderRemark { get; set; }
        //    [DataMember]
        //    public string orderValue { get; set; }
        //    [DataMember]
        //    public string Status { get; set; }
        //    [DataMember]
        //    public string Msz { get; set; }

        //}


        //#endregion


        // Optimization 17/04/2021
        #region "Purchase Order Details"
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void GetPurchaseOrderDetailByPODocID()    //for update
        {
            string str = "";
            string _PODocID = "";
            string HeaderMsz = string.Empty;
            string Status = "400";
            DataTable dtordr = new DataTable(); ;
            //List<PurchaseorderDetail> PurcOrder = new List<PurchaseorderDetail>();
            try
            {
                var request = HttpContext.Current.Request;
                var input = new StreamReader(HttpContext.Current.Request.InputStream);
                input.BaseStream.Seek(0, SeekOrigin.Begin);
                var inputtext = input.ReadToEnd();
                var inputresponse = JsonConvert.DeserializeObject<PurchaseID>(inputtext);

                _PODocID = inputresponse.bodyLine[0].PODOCID;

                str = "select TPO.PODocId as OrderDocId,isnull(mi.ItemName,'') as ItemName,TPO1.Qty as ItemQnty,TPO1.Rate as ItemRate,isnull(TPO1.Disc,0) as ItemDiscount,'0.00' as PrimaryQnty,'0.00' as SecondryQnty, '' as PrimaryUnitConversionFactor,'' as SecondryUnitConversionFactor, case when isnull(TPO.orderType,'')='C' then 'Cancel' when isnull(TPO.orderType,'')='D' then 'Dispatch' else 'Pending' end as orderStatus,isnull(TPO.DispatchRemarks,'') as OrderRemark,(select cast(sum(Qty*Rate) as numeric(18,2)) from TransPurchOrder1 where PODocId =TPO.PODocId) as orderValue   from TransPurchOrder TPO left join TransPurchOrder1 TPO1 on TPO.PODocId=TPO1.PODocId   left join MastItem as MI on TPO1.ItemId=mi.ItemId where mi.ItemType='ITEM' and  tpo.PODocId='" + _PODocID + "'";
                dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

                if (dtordr.Rows.Count > 0)
                {
                    //dtordr.Columns.Add(new DataColumn("Status", typeof(string)));
                    //dtordr.Columns.Add(new DataColumn("Msz", typeof(string)));

                    DataColumn newColumn = new DataColumn("Status", typeof(System.String));
                    newColumn.DefaultValue = "Successful";
                    dtordr.Columns.Add(newColumn);

                    DataColumn newColumn1 = new DataColumn("Msz", typeof(System.String));
                    newColumn1.DefaultValue = "200";
                    dtordr.Columns.Add(newColumn1);
                    //for (int i = 0; i < dtordr.Rows.Count; i++)
                    //{
                    //      dtordr["Status"].Value = "my new value";
                    //      HeaderMsz = "Successful";
                    //    Status = "200";
                    //    PurcOrder.Add(
                    //     new PurchaseorderDetail
                    //     {
                    //         OrderDocId = dtordr.Rows[i]["PODocId"].ToString(),
                    //         ItemName = dtordr.Rows[i]["ItemName"].ToString(),
                    //         ItemQnty = dtordr.Rows[i]["Qty"].ToString(),
                    //         ItemRate = dtordr.Rows[i]["Rate"].ToString(),
                    //         ItemDiscount = dtordr.Rows[i]["discount"].ToString(),
                    //         PrimaryQnty = dtordr.Rows[i]["PrimaryQnty"].ToString(),
                    //         SecondryQnty = dtordr.Rows[i]["SecondryQnty"].ToString(),
                    //         PrimaryUnitConversionFactor = dtordr.Rows[i]["PrimaryUnitConversionFactor"].ToString(),
                    //         SecondryUnitConversionFactor = dtordr.Rows[i]["SecondryUnitConversionFactor"].ToString(),
                    //         orderStatus = dtordr.Rows[i]["OrderStatus"].ToString(),
                    //         OrderRemark = dtordr.Rows[i]["DispatchRemarks"].ToString(),
                    //         orderValue = dtordr.Rows[i]["orderValue"].ToString(),
                    //         Status = Status,
                    //         Msz = HeaderMsz
                    //     });
                    //}
                }
            }
            catch (Exception ex)
            {
                Status = "400";
                HeaderMsz = ex.ToString();

                DataColumn newColumn = new DataColumn("Status", typeof(System.String));
                newColumn.DefaultValue = ex.ToString();
                dtordr.Columns.Add(newColumn);

                DataColumn newColumn1 = new DataColumn("Msz", typeof(System.String));
                newColumn1.DefaultValue = "400";
                dtordr.Columns.Add(newColumn1);
            }
            Context.Response.Write(JsonConvert.SerializeObject(dtordr));
            dtordr.Dispose();
        }

        public class PurchaseOrderID
        {

            public string PODOCID { get; set; }


        }
        public class PurchaseID
        {
            public List<PurchaseOrderID> bodyLine;
        }



        public class PurchaseorderDetail   // for update
        {
            [DataMember]
            public string OrderDocId { get; set; }
            [DataMember]
            public string ItemName { get; set; }
            [DataMember]
            public string ItemQnty { get; set; }
            [DataMember]
            public string ItemRate { get; set; }
            [DataMember]
            public string ItemDiscount { get; set; }
            [DataMember]
            public string PrimaryQnty { get; set; }
            [DataMember]
            public string SecondryQnty { get; set; }
            [DataMember]
            public string PrimaryUnitConversionFactor { get; set; }
            [DataMember]
            public string SecondryUnitConversionFactor { get; set; }
            [DataMember]
            public string orderStatus { get; set; }
            [DataMember]
            public string OrderRemark { get; set; }
            [DataMember]
            public string orderValue { get; set; }
            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string Msz { get; set; }

        }


        #endregion





        //#region "Purchase Order Details in Excel"
        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void GetPurchaseOrderDetailInExcelByPODocID()
        //{
        //    string str = "";
        //    string _PODocID = "";
        //    string HeaderMsz = string.Empty;
        //    string Status = "400";
        //    string filepath = "";
        //    string _filepath = "";
        //    List<PurchaseOrderExcelPath> PurcExclPath = new List<PurchaseOrderExcelPath>();
        //    try
        //    {
        //        var request = HttpContext.Current.Request;
        //        var input = new StreamReader(HttpContext.Current.Request.InputStream);
        //        input.BaseStream.Seek(0, SeekOrigin.Begin);
        //        var inputtext = input.ReadToEnd();
        //        var inputresponse = JsonConvert.DeserializeObject<PurchaseDocID>(inputtext);

        //        _PODocID = inputresponse.bodyLine[0].PODOCID;

        //        str = "select tpo.distid,tpo1.pordid,TPO.PODocId,mp.PartyName, cast(TPO.VDate as date) as vdate, TPO.Remarks,case when isnull(TPO.SMId,0)=0 then mp.PartyName else mpSP.SMName end as OrdrPlacedBy,mi.ItemName,TPO1.Qty,tpo1.Rate,(TPO1.Qty * tpo1.Rate) as amnt, case when isnull(TPO.orderType,'')='C' then 'Cancel' when isnull(TPO.orderType,'')='D' then 'Dispatch' else 'Pending' end as OrderStatus,isnull(TPO.DispatchRemarks,'') as DispatchRemarks  from TransPurchOrder TPO left join TransPurchOrder1 TPO1 on TPO.PODocId=TPO1.PODocId  left join MastParty as MP on TPO.DistId=mp.PartyId   left join  MastSalesRep mpSP on tpo.SMId=mpSP.SMId left join MastItem as mi on TPO1.ItemId=mi.ItemId where isnull(mp.PartyDist,0)=1 and ISNULL(mi.ItemType,'')='ITEM' AND   tpo.PODocId='" + _PODocID + "'";
        //        DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

        //        if (dtordr.Rows.Count > 0)
        //        {

        //            string fileName = "PO_" + dtordr.Rows[0]["distid"].ToString() + "_" + Convert.ToDateTime(dtordr.Rows[0]["vdate"]).ToString("yyyyMMdd") + "_" + dtordr.Rows[0]["pordid"].ToString() + ".csv";


        //            string headertext = "Docid : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["PODocId"].ToString() + "," + "DistributorName : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["PartyName"].ToString() + "," + "Date : ".TrimStart('"').TrimEnd('"') + "," + Convert.ToDateTime(dtordr.Rows[0]["vdate"]).ToString("yyyy-MM-dd");

        //            StringBuilder sb = new StringBuilder();
        //            sb.AppendLine(headertext);

        //            headertext = "Order PlacedBy : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["OrdrPlacedBy"].ToString() + "," + "Remark : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["Remarks"].ToString() + ",";

        //            sb.AppendLine(headertext);
        //            // sb.AppendLine(System.Environment.NewLine);

        //            if (dtordr.Rows[0]["OrderStatus"].ToString() == "Cancel")
        //            {

        //                headertext = " Order Status : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["OrderStatus"].ToString() + "," + "Cancel Remark : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["DispatchRemarks"].ToString();
        //            }
        //            else if (dtordr.Rows[0]["OrderStatus"].ToString() == "Dispatch")
        //            {
        //                headertext = " Order Status : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["OrderStatus"].ToString() + "," + "Dispatch Remark : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["DispatchRemarks"].ToString();
        //            }
        //            else
        //            {
        //                headertext = " Order Status : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["OrderStatus"].ToString();
        //            }

        //            sb.AppendLine(headertext);
        //            sb.AppendLine(System.Environment.NewLine);

        //            headertext = "Item Name".TrimStart('"').TrimEnd('"') + "," + "Order Quantity".TrimStart('"').TrimEnd('"') + "," + "Rate".TrimStart('"').TrimEnd('"') + "," + "Order Amount".TrimStart('"').TrimEnd('"');

        //            sb.Append(headertext);
        //            sb.AppendLine(System.Environment.NewLine);

        //            dtordr.Columns.Remove("distid");
        //            dtordr.Columns.Remove("pordid");
        //            dtordr.Columns.Remove("PODocId");
        //            dtordr.Columns.Remove("PartyName");
        //            dtordr.Columns.Remove("vdate");
        //            dtordr.Columns.Remove("Remarks");
        //            dtordr.Columns.Remove("OrdrPlacedBy");
        //            dtordr.Columns.Remove("OrderStatus");
        //            dtordr.Columns.Remove("DispatchRemarks");
        //            dtordr.AcceptChanges();

        //            for (int j = 0; j < dtordr.Rows.Count; j++)
        //            {
        //                for (int k = 0; k < dtordr.Columns.Count; k++)
        //                {
        //                    if (dtordr.Rows[j][k].ToString().Contains(","))
        //                    {
        //                        sb.Append(String.Format("\"{0}\"", dtordr.Rows[j][k].ToString()) + ',');
        //                    }
        //                    else if (dtordr.Rows[j][k].ToString().Contains(System.Environment.NewLine))
        //                    {
        //                        sb.Append(String.Format("\"{0}\"", dtordr.Rows[j][k].ToString()) + ',');
        //                    }
        //                    else
        //                    {
        //                        sb.Append(dtordr.Rows[j][k].ToString() + ',');
        //                    }
        //                }
        //                sb.Append(Environment.NewLine);
        //            }



        //            str = "select sum(tpo1.Qty * tpo1.Rate) from TransPurchOrder TPO left join TransPurchOrder1 TPO1 on TPO.PODocId=TPO1.PODocId  where  tpo.PODocId='" + _PODocID + "'";
        //            string TotSum = DbConnectionDAL.GetScalarValue(CommandType.Text, str).ToString();
        //            string footertext = "".TrimStart('"').TrimEnd('"') + "," + "".TrimStart('"').TrimEnd('"') + "," + "Total : ".TrimStart('"').TrimEnd('"') + "," + TotSum.TrimStart('"').TrimEnd('"');
        //            sb.Append(Environment.NewLine);
        //            sb.Append(footertext);

        //            filepath = string.Format("{0}/{1}", Server.MapPath("~/SalesInvoiceReport"), fileName);

        //            if (System.IO.File.Exists(filepath))
        //            {
        //                System.IO.File.Delete(filepath);
        //            }
        //            File.WriteAllText(filepath, sb.ToString());

        //            str = "select url from MastEnviro";
        //            string url = DbConnectionDAL.GetScalarValue(CommandType.Text, str).ToString();
        //            _filepath = "http://" + url + "/SalesInvoiceReport/" + fileName;

        //            HeaderMsz = "Successful";
        //            Status = "200";

        //        }

        //        else
        //        {
        //            HeaderMsz = "No Record Found";
        //            Status = "200";
        //        }


        //    }


        //    catch (Exception ex)
        //    {
        //        Status = "400";
        //        HeaderMsz = ex.ToString();
        //    }

        //    PurcExclPath.Add(
        //                new PurchaseOrderExcelPath
        //                {
        //                    FilePath = _filepath,
        //                    Status = Status,
        //                    Msz = HeaderMsz
        //                });
        //    Context.Response.Write(JsonConvert.SerializeObject(PurcExclPath));

        //}

        //public class PurchaseOrderDocID
        //{
        //    public string PODOCID { get; set; }
        //}
        //public class PurchaseDocID
        //{
        //    public List<PurchaseOrderDocID> bodyLine;
        //}
        //public class PurchaseOrderExcelPath
        //{
        //    [DataMember]
        //    public string FilePath { get; set; }
        //    [DataMember]
        //    public string Status { get; set; }
        //    [DataMember]
        //    public string Msz { get; set; }

        //}

        //#endregion


        // Optimization 17/04/2021
        #region "Purchase Order Details in Excel"
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void GetPurchaseOrderDetailInExcelByPODocID()
        {
            string str = "";
            string _PODocID = "";
            string HeaderMsz = string.Empty;
            string Status = "400";
            string filepath = "";
            string _filepath = "";
            List<PurchaseOrderExcelPath> PurcExclPath = new List<PurchaseOrderExcelPath>();
            try
            {
                var request = HttpContext.Current.Request;
                var input = new StreamReader(HttpContext.Current.Request.InputStream);
                input.BaseStream.Seek(0, SeekOrigin.Begin);
                var inputtext = input.ReadToEnd();
                var inputresponse = JsonConvert.DeserializeObject<PurchaseDocID>(inputtext);

                _PODocID = inputresponse.bodyLine[0].PODOCID;

                str = "select tpo.distid,tpo1.pordid,TPO.PODocId,mp.PartyName, cast(TPO.VDate as date) as vdate, TPO.Remarks,case when isnull(TPO.SMId,0)=0 then mp.PartyName else mpSP.SMName end as OrdrPlacedBy,mi.ItemName,TPO1.Qty,tpo1.Rate,(TPO1.Qty * tpo1.Rate) as amnt, case when isnull(TPO.orderType,'')='C' then 'Cancel' when isnull(TPO.orderType,'')='D' then 'Dispatch' else 'Pending' end as OrderStatus,isnull(TPO.DispatchRemarks,'') as DispatchRemarks  from TransPurchOrder TPO left join TransPurchOrder1 TPO1 on TPO.PODocId=TPO1.PODocId  left join MastParty as MP on TPO.DistId=mp.PartyId   left join  MastSalesRep mpSP on tpo.SMId=mpSP.SMId left join MastItem as mi on TPO1.ItemId=mi.ItemId where isnull(mp.PartyDist,0)=1 and ISNULL(mi.ItemType,'')='ITEM' AND   tpo.PODocId='" + _PODocID + "'";
                DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

                if (dtordr.Rows.Count > 0)
                {
                    string fileName = "PO_" + dtordr.Rows[0]["distid"].ToString() + "_" + Convert.ToDateTime(dtordr.Rows[0]["vdate"]).ToString("yyyyMMdd") + "_" + dtordr.Rows[0]["pordid"].ToString() + ".csv";


                    string headertext = "Docid : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["PODocId"].ToString() + "," + "DistributorName : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["PartyName"].ToString() + "," + "Date : ".TrimStart('"').TrimEnd('"') + "," + Convert.ToDateTime(dtordr.Rows[0]["vdate"]).ToString("yyyy-MM-dd");

                    StringBuilder sb = new StringBuilder();
                    sb.AppendLine(headertext);

                    headertext = "Order PlacedBy : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["OrdrPlacedBy"].ToString() + "," + "Remark : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["Remarks"].ToString() + ",";

                    sb.AppendLine(headertext);
                    // sb.AppendLine(System.Environment.NewLine);

                    if (dtordr.Rows[0]["OrderStatus"].ToString() == "Cancel")
                    {
                        headertext = " Order Status : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["OrderStatus"].ToString() + "," + "Cancel Remark : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["DispatchRemarks"].ToString();
                    }
                    else if (dtordr.Rows[0]["OrderStatus"].ToString() == "Dispatch")
                    {
                        headertext = " Order Status : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["OrderStatus"].ToString() + "," + "Dispatch Remark : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["DispatchRemarks"].ToString();
                    }
                    else
                    {
                        headertext = " Order Status : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["OrderStatus"].ToString();
                    }

                    sb.AppendLine(headertext);
                    sb.AppendLine(System.Environment.NewLine);

                    headertext = "Item Name".TrimStart('"').TrimEnd('"') + "," + "Order Quantity".TrimStart('"').TrimEnd('"') + "," + "Rate".TrimStart('"').TrimEnd('"') + "," + "Order Amount".TrimStart('"').TrimEnd('"');

                    sb.Append(headertext);
                    sb.AppendLine(System.Environment.NewLine);

                    dtordr.Columns.Remove("distid");
                    dtordr.Columns.Remove("pordid");
                    dtordr.Columns.Remove("PODocId");
                    dtordr.Columns.Remove("PartyName");
                    dtordr.Columns.Remove("vdate");
                    dtordr.Columns.Remove("Remarks");
                    dtordr.Columns.Remove("OrdrPlacedBy");
                    dtordr.Columns.Remove("OrderStatus");
                    dtordr.Columns.Remove("DispatchRemarks");
                    dtordr.AcceptChanges();

                    for (int j = 0; j < dtordr.Rows.Count; j++)
                    {
                        for (int k = 0; k < dtordr.Columns.Count; k++)
                        {
                            if (dtordr.Rows[j][k].ToString().Contains(","))
                            {
                                sb.Append(String.Format("\"{0}\"", dtordr.Rows[j][k].ToString()) + ',');
                            }
                            else if (dtordr.Rows[j][k].ToString().Contains(System.Environment.NewLine))
                            {
                                sb.Append(String.Format("\"{0}\"", dtordr.Rows[j][k].ToString()) + ',');
                            }
                            else
                            {
                                sb.Append(dtordr.Rows[j][k].ToString() + ',');
                            }
                        }
                        sb.Append(Environment.NewLine);
                    }



                    str = "select sum(tpo1.Qty * tpo1.Rate) from TransPurchOrder TPO left join TransPurchOrder1 TPO1 on TPO.PODocId=TPO1.PODocId  where  tpo.PODocId='" + _PODocID + "'";
                    string TotSum = DbConnectionDAL.GetScalarValue(CommandType.Text, str).ToString();
                    string footertext = "".TrimStart('"').TrimEnd('"') + "," + "".TrimStart('"').TrimEnd('"') + "," + "Total : ".TrimStart('"').TrimEnd('"') + "," + TotSum.TrimStart('"').TrimEnd('"');
                    sb.Append(Environment.NewLine);
                    sb.Append(footertext);

                    filepath = string.Format("{0}/{1}", Server.MapPath("~/SalesInvoiceReport"), fileName);

                    if (System.IO.File.Exists(filepath))
                    {
                        System.IO.File.Delete(filepath);
                    }
                    File.WriteAllText(filepath, sb.ToString());

                    str = "select url from MastEnviro";
                    string url = DbConnectionDAL.GetScalarValue(CommandType.Text, str).ToString();
                    _filepath = "http://" + url + "/SalesInvoiceReport/" + fileName;

                    HeaderMsz = "Successful";
                    Status = "200";

                    sb.Clear();
                }
                else
                {
                    HeaderMsz = "No Record Found";
                    Status = "200";
                }

                dtordr.Dispose();
            }
            catch (Exception ex)
            {
                Status = "400";
                HeaderMsz = ex.ToString();
            }

            PurcExclPath.Add(
                        new PurchaseOrderExcelPath
                        {
                            FilePath = _filepath,
                            Status = Status,
                            Msz = HeaderMsz
                        });
            Context.Response.Write(JsonConvert.SerializeObject(PurcExclPath));
        }

        public class PurchaseOrderDocID
        {
            public string PODOCID { get; set; }
        }
        public class PurchaseDocID
        {
            public List<PurchaseOrderDocID> bodyLine;
        }
        public class PurchaseOrderExcelPath
        {
            [DataMember]
            public string FilePath { get; set; }
            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string Msz { get; set; }

        }

        #endregion


        //#region "Purchase Order Details Excel Delete"
        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void DeletePurchaseOrderDetailExcelByPODocID()
        //{
        //    string str = "";
        //    string _PODocID = "";
        //    string HeaderMsz = string.Empty;
        //    string Status = "400";

        //    List<PurchaseOrderExcelDeleteMSG> PurcExclMsg = new List<PurchaseOrderExcelDeleteMSG>();
        //    try
        //    {
        //        var request = HttpContext.Current.Request;
        //        var input = new StreamReader(HttpContext.Current.Request.InputStream);
        //        input.BaseStream.Seek(0, SeekOrigin.Begin);
        //        var inputtext = input.ReadToEnd();
        //        var inputresponse = JsonConvert.DeserializeObject<PurcDocID>(inputtext);

        //        _PODocID = inputresponse.bodyLine[0].PODOCID;

        //        str = "select tpo.distid,tpo1.pordid, cast(TPO.VDate as date) as vdate from TransPurchOrder TPO left join TransPurchOrder1 TPO1 on TPO.PODocId=TPO1.PODocId  where  tpo.PODocId='" + _PODocID + "'";
        //        DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

        //        if (dtordr.Rows.Count > 0)
        //        {

        //            string fileName = "PO_" + dtordr.Rows[0]["distid"].ToString() + "_" + Convert.ToDateTime(dtordr.Rows[0]["vdate"]).ToString("yyyyMMdd") + "_" + dtordr.Rows[0]["pordid"].ToString() + ".csv";

        //            string filepath = string.Format("{0}/{1}", Server.MapPath("~/SalesInvoiceReport"), fileName);

        //            if (System.IO.File.Exists(filepath))
        //            {
        //                System.IO.File.Delete(filepath);

        //                HeaderMsz = "Successfully Deleted ";
        //                Status = "200";
        //            }
        //            else
        //            {
        //                HeaderMsz = "No file found for " + _PODocID + " DocId ";
        //                Status = "200";
        //            }

        //        }
        //        else
        //        {
        //            HeaderMsz = "No Record Found";
        //            Status = "200";
        //        }


        //    }

        //    catch (Exception ex)
        //    {
        //        Status = "400";
        //        HeaderMsz = ex.ToString();
        //    }

        //    PurcExclMsg.Add(
        //        new PurchaseOrderExcelDeleteMSG
        //        {

        //            Status = Status,
        //            Msz = HeaderMsz
        //        });

        //    Context.Response.Write(JsonConvert.SerializeObject(PurcExclMsg));

        //}

        //public class PurchaseOrdrDocID
        //{
        //    public string PODOCID { get; set; }
        //}
        //public class PurcDocID
        //{
        //    public List<PurchaseOrdrDocID> bodyLine;
        //}
        //public class PurchaseOrderExcelDeleteMSG
        //{

        //    [DataMember]
        //    public string Status { get; set; }
        //    [DataMember]
        //    public string Msz { get; set; }

        //}

        //#endregion

        // Optimization 17/04/2021
        #region "Purchase Order Details Excel Delete"
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void DeletePurchaseOrderDetailExcelByPODocID()
        {
            string str = "";
            string _PODocID = "";
            string HeaderMsz = string.Empty;
            string Status = "400";

            List<PurchaseOrderExcelDeleteMSG> PurcExclMsg = new List<PurchaseOrderExcelDeleteMSG>();
            try
            {
                var request = HttpContext.Current.Request;
                var input = new StreamReader(HttpContext.Current.Request.InputStream);
                input.BaseStream.Seek(0, SeekOrigin.Begin);
                var inputtext = input.ReadToEnd();
                var inputresponse = JsonConvert.DeserializeObject<PurcDocID>(inputtext);

                _PODocID = inputresponse.bodyLine[0].PODOCID;

                str = "select tpo.distid,tpo1.pordid, cast(TPO.VDate as date) as vdate from TransPurchOrder TPO left join TransPurchOrder1 TPO1 on TPO.PODocId=TPO1.PODocId  where  tpo.PODocId='" + _PODocID + "'";
                DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

                if (dtordr.Rows.Count > 0)
                {

                    string fileName = "PO_" + dtordr.Rows[0]["distid"].ToString() + "_" + Convert.ToDateTime(dtordr.Rows[0]["vdate"]).ToString("yyyyMMdd") + "_" + dtordr.Rows[0]["pordid"].ToString() + ".csv";

                    string filepath = string.Format("{0}/{1}", Server.MapPath("~/SalesInvoiceReport"), fileName);

                    if (System.IO.File.Exists(filepath))
                    {
                        System.IO.File.Delete(filepath);

                        HeaderMsz = "Successfully Deleted ";
                        Status = "200";
                    }
                    else
                    {
                        HeaderMsz = "No file found for " + _PODocID + " DocId ";
                        Status = "200";
                    }

                }
                else
                {
                    HeaderMsz = "No Record Found";
                    Status = "200";
                }

                dtordr.Dispose();
            }

            catch (Exception ex)
            {
                Status = "400";
                HeaderMsz = ex.ToString();
            }

            PurcExclMsg.Add(
                new PurchaseOrderExcelDeleteMSG
                {

                    Status = Status,
                    Msz = HeaderMsz
                });

            Context.Response.Write(JsonConvert.SerializeObject(PurcExclMsg));

        }

        public class PurchaseOrdrDocID
        {
            public string PODOCID { get; set; }
        }
        public class PurcDocID
        {
            public List<PurchaseOrdrDocID> bodyLine;
        }
        public class PurchaseOrderExcelDeleteMSG
        {

            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string Msz { get; set; }

        }

        #endregion

        private void pushnotificationforEndVisit(string smid, string visid)
        {
            try
            {
                string str = "";
                string _compcode, _msg = "";
                string retval = "";
                string pro_id = "ENDVISIT";
                string _SrSmid, _SMID = ""; string _FrTime = "", _toTime = ""; string _vdate = ""; string _SrMobile, _frMobile = ""; string _srUserid = ""; string _Smname = ""; string _FromUserId = "", _msgurl = "";
                DataTable dt;

                str = "select CompCode from MastEnviro";
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    _compcode = dt.Rows[0]["CompCode"].ToString();

                }
                else
                {
                    return;
                }

                str = "select SMId,frTime1,toTime1,VDate from transvisit where VisId=" + visid + " AND SMID=" + smid + "";
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    _SMID = dt.Rows[0]["SMId"].ToString();
                    _toTime = dt.Rows[0]["toTime1"].ToString();
                    _FrTime = dt.Rows[0]["frTime1"].ToString();
                    _vdate = Convert.ToDateTime(dt.Rows[0]["VDate"]).ToString("dd-MMM-yyyy");

                    str = "select ms.SMName,ms.Mobile,ms.UserId,mSenior.smid as SeniorSmid,mSenior.Mobile as SeniorMobile,mSenior.UserId as SeniorUserid from MastSalesRep ms left join MastSalesRep mSenior on ms.UnderId=mSenior.SMId where ms.smid=" + _SMID;
                    dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                    if (dt.Rows.Count > 0)
                    {
                        _frMobile = "  (" + dt.Rows[0]["Mobile"].ToString().Trim() + ")";
                        _Smname = dt.Rows[0]["SMName"].ToString().Trim();
                        _SrMobile = dt.Rows[0]["SeniorMobile"].ToString().Trim();
                        _srUserid = dt.Rows[0]["SeniorUserid"].ToString().Trim();
                        _SrSmid = dt.Rows[0]["SeniorSmid"].ToString().Trim();
                        _FromUserId = dt.Rows[0]["UserId"].ToString().Trim();

                        _msg = _Smname + _frMobile + "  has locked his DSR,last entry time is of  " + _vdate + " at " + _toTime;
                        _msgurl = "DSREntryForm.aspx?smid=" + _SMID + "&p_name=" + _Smname + "&fdate=" + _vdate;
                        str = " INSERT INTO TransNotification ([pro_id],[userid],[VDate],[msgURL],[displayTitle],[Status],[FromUserId],[SMId],[ToSMid]) output inserted.NotiId values ('" + pro_id + "'," + Convert.ToInt32(_srUserid) + ",getdate(),'" + _msgurl + "','" + _msg + "','" + 0 + "'," + Convert.ToInt32(_FromUserId) + "," + _SMID + "," + _SrSmid + ") ";
                        retval = DbConnectionDAL.GetStringScalarVal(str);
                        if (!string.IsNullOrEmpty(retval))
                        {
                            pushnotificationonEndVisit(_srUserid, _msg, _compcode, _SrMobile, "Regarding End Visit", _SMID, _Smname, "CRM MANAGER");
                        }


                    }
                }


            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }


        }


        public string pushnotificationonEndVisit(string userid, string msg, string compcode, string mobileno, string title, string createdbysmid, string smname, string ProductType)
        {
            var result = "-1";
            DataTable dt = new DataTable();
            string serverKey = "";
            string senderId = "";
            DataTable dtserverdetail = new DataTable();

            try
            {

                dtserverdetail = DbConnectionDAL.GetDataTable(CommandType.Text, "Select DistApp_FireBase_ServerKey,DistApp_FireBase_SenderID,ManagerApp_FireBase_ServerKey,ManagerApp_FireBase_SenderID from Mastenviro ");

                string regid_query = "select Reg_id  from LineMaster where  Upper(Product)='" + ProductType + "' and CompCode='" + compcode + "' and mobile='" + mobileno + "'";
                string constrDmLicense = "data source=103.231.40.154,1565; user id=dmlicense_user; pwd=SaG@e321; initial catalog=dmlicense;";
                string Query1 = "";

                SqlConnection cn = new SqlConnection(constrDmLicense);
                SqlCommand cmd = new SqlCommand(regid_query, cn);

                cmd.CommandType = CommandType.Text;

                cn.Open();
                string regId = cmd.ExecuteScalar() as string;

                // regId = "fO0VQXCZf1g:APA91bFmByRKmUxUD9Rjbo2Nfhu2L4X_rHTTr0jJUsG10R4KlK92HOIqyzmpGdNfK7kvcJbgtXP1CR2yz_aQtklujKAtlLrtWpPZ0ekOqfsp-R2kdtkSn9qJ3gQhtPyD7_3NbVxDwTwN"; 

                cn.Close();
                cmd = null;
                if (dtserverdetail.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(regId))
                    {

                        Query1 = "insert into TransPushNotification(smid,[Subject],Content,WebFlag) output inserted.id " +
                            "values (" + userid + ",'" + title + "','" + msg + "','Y')";
                        string Id = DbConnectionDAL.GetStringScalarVal(Query1);

                        if (ProductType == "GOLDIEE")
                        {
                            serverKey = dtserverdetail.Rows[0]["DistApp_FireBase_ServerKey"].ToString();
                            senderId = dtserverdetail.Rows[0]["DistApp_FireBase_SenderID"].ToString();
                        }
                        //else if (ProductType == "GOLDIEE SALES")
                        //{
                        //  serverKey = dtserverdetail.Rows[0]["MktApp_FireBase_ServerKey"].ToString();
                        //senderId = dtserverdetail.Rows[0]["MktApp_FireBase_SenderID"].ToString();
                        //}
                        else if (ProductType == "CRM MANAGER")
                        {
                            serverKey = dtserverdetail.Rows[0]["ManagerApp_FireBase_ServerKey"].ToString();
                            senderId = dtserverdetail.Rows[0]["ManagerApp_FireBase_SenderID"].ToString();
                        }



                        string webAddr = "https://fcm.googleapis.com/fcm/send";

                        var tRequest = (HttpWebRequest)WebRequest.Create(webAddr);
                        tRequest.ContentType = "application/json";
                        tRequest.Headers.Add(string.Format("Authorization: key={0}", serverKey));
                        tRequest.Headers.Add(string.Format("Sender: id={0}", senderId));

                        tRequest.Method = "POST";

                        var payload = new
                        {
                            to = regId,
                            priority = "high",
                            content_available = true,

                            data = new
                            {
                                body = msg,
                                title = title,
                                msg = msg,
                                smid = createdbysmid,
                                smname = smname
                            }
                        };



                        var serializer = new JavaScriptSerializer();
                        using (var streamWriter = new StreamWriter(tRequest.GetRequestStream()))
                        {
                            string json = serializer.Serialize(payload);
                            streamWriter.Write(json);
                            streamWriter.Flush();
                        }

                        var httpResponse = (HttpWebResponse)tRequest.GetResponse();
                        using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                        {
                            result = streamReader.ReadToEnd();

                            Query1 = "update TransPushNotification set serverresponse='" + result + "' where id=" + Id + "";
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                result = "N";
            }

            return result;
        }

        [DataContract]
        public class DistStockList
        {
            [DataMember]
            public string itemid { get; set; }
            [DataMember]
            public string availableQty { get; set; }
            [DataMember]
            public string MS { get; set; }

        }


        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void FFMSApp_GetDistributorStock()
        //{
        //    var httpRequest = HttpContext.Current.Request;
        //    var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
        //    DataTable DTadmin = new DataTable();
        //    bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //    var bodyText = bodyStream.ReadToEnd();
        //    //     string items = httpRequest.Params["orderdetail"].ToString();
        //    var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

        //    string minDate = objResponse.body[0].minDate;
        //    string DistId = objResponse.body[0].DistId;
        //    string FromDate = objResponse.body[0].FromDate;
        //    string ToDate = objResponse.body[0].ToDate;           

        //    double ticks = double.Parse(minDate);
        //    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //    DateTime startdate = new DateTime(1970, 1, 1) + time;
        //    string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");

        //    string MQry = "";
        //    Query = "select dataamt from mastenviro";
        //    int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
        //    if (Convert.ToInt64(minDate) > 0)
        //    { MQry = " where  T.[Milliseconds] >='" + minDate + "'"; }     

        //    Query = "Select  top " + NoOfRec + " ItemId, Qty,Created_Date, [Milliseconds] From (Select ItemId,Qty,Created_Date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date) AS [Milliseconds] from Temp_TransDistStock where DistId=" + DistId + " and vDate between '" + FromDate + "' and '" + ToDate + "' Union All Select ItemId,Qty,Created_Date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date) AS [Milliseconds] from TransDistStock where DistId=" + DistId + " and vDate between '" + FromDate + "' and '" + ToDate + "') As  T  " + MQry + "  order by T.Created_Date ";

        //    DataTable dt = new DataTable();
        //    dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
        //    List<DistStockList> rst = new List<DistStockList>();
        //    for (int i = 0; i <= (dt.Rows.Count - 1); i++)
        //    {
        //        rst.Add(
        //            new DistStockList
        //            {
        //                itemid = dt.Rows[i]["ItemId"].ToString(),
        //                availableQty = dt.Rows[i]["Qty"].ToString(),
        //                MS = dt.Rows[i]["Milliseconds"].ToString()
        //            }
        //        );
        //    }
        //    Context.Response.Write(JsonConvert.SerializeObject(rst));
        //}

        // Optimization 17/04/2021
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetDistributorStock()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = objResponse.body[0].minDate;
            string DistId = objResponse.body[0].DistId;
            string FromDate = objResponse.body[0].FromDate;
            string ToDate = objResponse.body[0].ToDate;

            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");

            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            { MQry = " where  T.[Milliseconds] >='" + minDate + "'"; }
            //Commented By AKANKSHA BAIS on 09-04-2021 for Optimization


            //Query = "Select  top " + NoOfRec + " ItemId, Qty,Created_Date, [Milliseconds] From (Select ItemId,Qty,Created_Date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date) AS [Milliseconds] from Temp_TransDistStock where DistId=" + DistId + " and vDate between '" + FromDate + "' and '" + ToDate + "' Union All Select ItemId,Qty,Created_Date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date) AS [Milliseconds] from TransDistStock where DistId=" + DistId + " and vDate between '" + FromDate + "' and '" + ToDate + "') As  T  " + MQry + "  order by T.Created_Date ";

            Query = "Select  top " + NoOfRec + " itemid, Qty as availableQty,Created_Date, [Milliseconds] as MS From (Select ItemId,Qty,Created_Date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date) AS [Milliseconds] from Temp_TransDistStock where DistId=" + DistId + " and vDate between '" + FromDate + "' and '" + ToDate + "' Union All Select ItemId,Qty,Created_Date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date) AS [Milliseconds] from TransDistStock where DistId=" + DistId + " and vDate between '" + FromDate + "' and '" + ToDate + "') As  T  " + MQry + "  order by T.Created_Date ";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();

            //Commented By AKANKSHA BAIS on 09-04-2021 for Optimization
            //List<DistStockList> rst = new List<DistStockList>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new DistStockList
            //        {
            //            itemid = dt.Rows[i]["ItemId"].ToString(),
            //            availableQty = dt.Rows[i]["Qty"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //Context.Response.Write(JsonConvert.SerializeObject(rst));
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetDistributorOrderDetailByPODocID(string docid)
        {
            string str = "";
            DataTable Dt = new DataTable();
            str = "SELECT Replace(Convert(VARCHAR,dispatchcanceldatetime,106),' ','/')+' '+LEFT(Convert(VARCHAR,dispatchcanceldatetime,108),5) As dispatchcanceldatetime, isnull(MP1.PartyName,'') As Distributor,Isnull(UN.Name,'') As Doneby, MP.PartyName AS PartyName,Isnull(MP.Address1,'')+' '+Isnull(MP.Address2,'') AS Address , mi.ItemId as ItemId,t1.PODocId as DocId,mi.ItemName as ItemName,t1.Qty as OrderQty,t1.rate AS  rate,t1.Qty*t1.rate as OrderAmount,t.remarks,Replace(Convert(VARCHAR,t.vdate,106),' ','/') AS vdate,Isnull(t1.DispatchQty,0) As DispatchQty, (CASE WHEN Isnull(t.orderType,'P')='P' THEN 'Pending' WHEN Isnull(t.orderType,'P')='C'    THEN 'Cancelled' ELSE 'Dispatched' END) AS Status,t.DispatchRemarks As dispatchcancelremark,md.Text as DistType FROM TransPurchOrder1 t1 left join TransPurchOrder t on t.PODocId=t1.PODocId left join MastParty MP on MP.PartyId=t.DistId left join mastdistributortype md on md.value=MP.disttype left join mastitem mi on t1.ItemId = mi.ItemId  Left join (SELECT PartyName AS Name,userid FROM mastparty WHERE Isnull(userid,0)<>0 UNION SELECT EmpName AS Name,userid FROM MastSalesRep WHERE  Isnull(userid,0)<>0) UN on UN.userid=t.DispatchCancel_smid Left join mastParty MP1 on  MP1.PartyId=t1.DistId where t1.PODocId = '" + docid.Replace("-", " ") + "'";
            Dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            return JsonConvert.SerializeObject(Dt);
        }

        //01-05-2021----------- anurag change return to Context.Response.Write
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void GetDistributorOrderBySdID_New(string SD_ID, string FDATE, string TODATE)
        {
            string str = "", _qry = "";
            string _SD_id, _FDate, _ToDate = "";
            string HeaderMsz = string.Empty;
            string Status = "400";
            DataTable Dt = new DataTable();
            //    List<DistributorResponse> dist = new List<DistributorResponse>();
            try
            {
                //   var request = HttpContext.Current.Request;
                //var input = new StreamReader(HttpContext.Current.Request.InputStream);
                //input.BaseStream.Seek(0, SeekOrigin.Begin);
                //var inputtext = input.ReadToEnd();
                //var INPUTRESPONSE = JsonConvert.DeserializeObject<SuperDist>(inputtext);

                //_SD_id = INPUTRESPONSE.BODYLINE[0].SD_ID;
                //_FDate = INPUTRESPONSE.BODYLINE[0].FDATE;
                //_ToDate = INPUTRESPONSE.BODYLINE[0].TODATE;

                str = "select mp.partyid from mastparty as mp  left join MastArea as ma on mp.CityId=ma.AreaId  where ISNULL(mp.partydist,0)=1 and ma.AreaType='CITY' and  isnull(mp.sd_id,0) =" + SD_ID + "";

                _qry = "select Max(TPO.vdate) vdate, Replace(Convert(VARCHAR,Max(TPO.dispatchcanceldatetime),106),' ','/')+' '+LEFT(Convert(VARCHAR,Max(TPO.dispatchcanceldatetime),108),5) As dispatchcanceldatetime, Replace(Convert(VARCHAR,Max(TPO.Createddate),106),' ','/')+' '+LEFT(Convert(VARCHAR,Max(TPO.Createddate),108),5) As createddatetime, case when isnull(Max(TPO.SMID),0)=0 then Max(mpDist.PartyName) else Max(mpSP.SMName) end as OrdrTakenBy,Replace(Convert(VARCHAR,Max(TPO.Createddate),106),' ','/') AS orderdate1,tpo.PODocId AS Docid, Max(mpDist.PartyName) AS PartyName,Max(mpDist.PartyId) PartyId,Isnull(Max(mpDist.Address1),'')+' '+Isnull(Max(mpDist.Address2),'') AS Address,Max(mpDist.Mobile) AS Mobile, Max(TPO.VDate) AS orderdate,Sum(TPO1.Qty) AS totalqty,Sum(TPO1.Qty*TPO1.Rate) AS totalamount,   Max(TPO.Distid) AS DistID ,Max(mpSP.SMID) SMID,Max(mpSP.SMName) SMName,Max(TPO.Remarks) Remarks,case when isnull(Max(TPO.orderType),'')='C' then 'Cancelled' when isnull(Max(TPO.orderType),'')='D' then 'Dispatched' else 'Pending' end as Status,isnull(Max(TPO.DispatchRemarks),'') as DispatchRemarks,Max(md.Text) as DistType  FROM TransPurchOrder as TPO LEFT JOIN TransPurchOrder1 TPO1 ON TPO1.PODocId=TPO.PODocId left join MastSalesRep mpSP on tpo.SMID=mpSP.SMID left join MastParty as mpDist on  tpo.DistId=mpDist.PartyId left join mastdistributortype md on md.value=mpDist.disttype  where tpo.DistId in (" + str + ")  and CAST(tpo.vdate as date) >= '" + Convert.ToDateTime(FDATE).ToString("yyyy-MM-dd") + "' and CAST(tpo.vdate as date) <= '" + Convert.ToDateTime(TODATE).ToString("yyyy-MM-dd") + "' GROUP BY TPO.PODocId";
                Dt = DbConnectionDAL.GetDataTable(CommandType.Text, _qry);
                //DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

                //for (int i = 0; i < dtordr.Rows.Count; i++)
                //{
                //    str = "select tpo.PODocId,tpo.vdate,case when isnull(TPO.SMID,0)=0 then mpDist.PartyName else mpSP.SMName end as OrdrTakenBy,case when isnull(TPO.orderType,'')='C' then 'Cancel' when isnull(TPO.orderType,'')='D' then 'Dispatch' else 'Pending' end as OrderStatus,isnull(TPO.DispatchRemarks,'') as DispatchRemarks  FROM TransPurchOrder as TPO left join MastSalesRep mpSP on tpo.SMID=mpSP.SMID left join MastParty as mpDist on  tpo.DistId=mpDist.PartyId where tpo.DistId=" + dtordr.Rows[i]["PartyId"].ToString() + "  and CAST(tpo.vdate as date) >= '" + Convert.ToDateTime(_FDate).ToString("yyyy-MM-dd") + "' and CAST(tpo.vdate as date) <= '" + Convert.ToDateTime(_ToDate).ToString("yyyy-MM-dd") + "' ";
                //    DataTable dtdistordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                //    if (dtdistordr.Rows.Count > 0)
                //    {
                //        HeaderMsz = "Successful";
                //        Status = "200";

                //        List<DistributorOrderDetailResponse> distOrder = new List<DistributorOrderDetailResponse>();

                //        for (int j = 0; j < dtdistordr.Rows.Count; j++)
                //        {

                //            distOrder.Add(
                //           new DistributorOrderDetailResponse
                //           {
                //               OrderDocId = dtdistordr.Rows[j]["PODocId"].ToString(),
                //               OrderDateTime = Convert.ToDateTime(dtdistordr.Rows[j]["vdate"]).ToString("yyyy-MM-dd"),
                //               OrderTakenBy = dtdistordr.Rows[j]["OrdrTakenBy"].ToString(),
                //               OrderStatus = dtdistordr.Rows[j]["OrderStatus"].ToString(),
                //               OrderRemark = dtdistordr.Rows[j]["DispatchRemarks"].ToString()

                //           });

                //        }

                //        dist.Add(
                //      new DistributorResponse
                //      {
                //          DistName = dtordr.Rows[i]["PartyName"].ToString(),
                //          Mobile = dtordr.Rows[i]["Mobile"].ToString(),
                //          City = dtordr.Rows[i]["AreaName"].ToString(),
                //          Status = Status,
                //          Msz = HeaderMsz,
                //          DistributorOrderDetailResponse = distOrder
                //      });
                //    }

                //}
            }
            catch (Exception ex)
            {
                //Status = "400";
                //HeaderMsz = ex.ToString();
                //dist.Add(
                //      new DistributorResponse
                //      {
                //          Status = Status,
                //          Msz = HeaderMsz
                //      });
            }
            //   return JsonConvert.SerializeObject(Dt);
            Context.Response.Write(JsonConvert.SerializeObject(Dt));

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetSuperDistributor(string SMID)
        {
            DataTable Dt = new DataTable();
            string str = "";
            string citystr = "";
            //string cityQry = @"  select AreaId from mastarea where AreaId in (select distinct underid from mastarea where AreaId in (select linkcode from mastlink where primtable='SALESPERSON' and LinkTable='AREA' and PrimCode in (SELECT SMID FROM MastSalesRep WHERE SMID IN (SELECT SMID FROM mastsalesrepgrp WHERE  maingrp IN (" + SMID + ")))) and Active=1 ) and areatype='City' and Active=1 order by AreaName";
            //DataTable dtCity = DbConnectionDAL.GetDataTable(CommandType.Text, cityQry);
            //for (int i = 0; i < dtCity.Rows.Count; i++)
            //{
            //    citystr += dtCity.Rows[i]["AreaId"] + ",";
            //}
            //citystr = citystr.TrimStart(',').TrimEnd(',');
            //string distqry = @"select * from MastParty where CityId in (" + citystr + ")  and PartyDist=1 and Active=1 order by PartyName";
            string distqry = @"select Partyid,PartyName from MastParty where disttype='SUPERDIST' and  AreaId in (select linkcode from mastlink where primtable='SALESPERSON' and LinkTable='AREA' and PrimCode in (SELECT SMID FROM MastSalesRep WHERE SMID IN (SELECT SMID FROM mastsalesrepgrp WHERE  maingrp IN (" + SMID + ")))) and Active=1   and PartyDist=1 order by PartyName";
            Dt = DbConnectionDAL.GetDataTable(CommandType.Text, distqry);
            Context.Response.Write(JsonConvert.SerializeObject(Dt));
            Dt.Dispose();
        }

        #region managerapp

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_JSGetPartyList_V2(string Btid, string pnme)
        {
            string str = "";

            if (pnme != "")
            {
                str = @"select PartyId PID,PartyName PName,Mobile Mob,Created_Date Cdate from [MastParty] where BeatId =" + Btid + " and   Isnull(AppStatus,'') IN('Approve','') and Isnull(AppBlockStatus,'')='Pending'   and PartyName like '%" + pnme + "%'";
            }
            else
            {
                str = @"select PartyId PID,PartyName PName,Mobile Mob,Created_Date Cdate from [MastParty] where BeatId =" + Btid + " and  Isnull(AppStatus,'') IN('Approve','') and Isnull(AppBlockStatus,'')='Pending' ";
            }

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_JSGetAllBeatUnderUser_V2(string Smid, string match)
        {

            string str = "";

            if (match != "")
            {
                str = @"SELECT Max(mp.BeatId) AS BtId,Max(mp.AreaId) AS ArId,Max(mp.CityId) AS CtId,
(Max(mr.AreaName)+'-'+Max(mar.AreaName)+'-'+Max(mstar.AreaName)) AS Name from [MastParty] mp 
LEFT JOIN Mastsalesrep MS1 ON MS1.UserId=mp.Created_User_id Left Join MastArea mar on mp.AreaId=mar.AreaId Left Join MastArea mr on mp.BeatId=mr.AreaId 
Left Join MastArea mstar on mp.CityId=mstar.AreaId where  mp.AreaId in (SELECT Linkcode FROM MastLink WHERE PrimCode IN (select distinct smid from MastSalesRepGrp where smid in (select smid from MastSalesRepGrp 
where MainGrp in (" + Smid + ")) and  level> (select distinct level from MastSalesRepGrp where MainGrp in (" + Smid + " ))) ) and mp.Partydist=0 AND Isnull(MP.AppStatus,'') In('Approve','') and Isnull(AppBlockStatus,'')='Pending'  AND (mr.AreaName LIKE '%" + match + "%' or mar.AreaName LIKE '%" + match + "%' OR mstar.AreaName LIKE '%" + match + "%') group by mp.BeatId";
            }
            else
            {
                str = @"SELECT Max(mp.BeatId) AS BtId,Max(mp.AreaId) AS ArId,Max(mp.CityId) AS CtId,
(Max(mr.AreaName)+'-'+Max(mar.AreaName)+'-'+Max(mstar.AreaName)) AS Name from [MastParty] mp 
LEFT JOIN Mastsalesrep MS1 ON MS1.UserId=mp.Created_User_id
Left Join MastArea mar on mp.AreaId=mar.AreaId Left Join MastArea mr on mp.BeatId=mr.AreaId 
Left Join MastArea mstar on mp.CityId=mstar.AreaId 
where  mp.AreaId in (SELECT Linkcode FROM MastLink WHERE PrimCode IN (select distinct smid from MastSalesRepGrp where smid in (select smid from MastSalesRepGrp 
where MainGrp in (" + Smid + ")) and  level> (select distinct level from MastSalesRepGrp where MainGrp in (" + Smid + " ))) ) and mp.Partydist=0 AND  Isnull(MP.AppStatus,'') In('Approve','')  and Isnull(AppBlockStatus,'')='Pending'   group by mp.BeatId";
            }

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_JSGetBlockPartyList_V2(string smid)
        {
            string str = "";
            str = "Select * from MastParty where Isnull(Active,0)=1 and Isnull(Isblock,0)=1 and (Created_User_id in (Select userid from MastSalesrep where smid=" + smid + ") OR AreaId IN (SELECT Linkcode FROM MastLink WHERE PrimCode IN(" + smid + ")))";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_JSGetPartyDetail_V2(string Partyid)
        {
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "", imgurl = "";
            string str = @"SELECT MA.AreaName AS Areaname,MB.AreaName AS BeatName,PT.PartyTypeName AS ParttypeName,MI.IndName AS IndName,MC.AreaName AS CityName, msr.smname as cb, 
isnull(p.android_id,p.partyid) as androidid,p.Created_User_Id,p.PartyId As Id,p.AreaId As Area_Id,p.BeatId As Beat_Id,p.PartyType As PartyType,
p.PartyName As Name,MD.PartyName As DistributorName,p.IndId As Industry_Id,p.UnderId as DistId,p.phone,p.PartyType As Type_Id,p.ContactPerson ,isnull(p.Address1,'') as Add1,isnull(p.Address2,'') as Add2,p.Pin AS Pin,
(select UnderId from MastArea where AreaId=p.AreaId) as CtyCodeP1,isnull(p.Mobile,'') as Mobile1,isnull(p.Email,'') as Email1,isnull(p.Potential,0) as Potential,
isnull(p.Active,'') as IsBlocked,isnull(p.CSTNo,'') as CST_No,isnull(p.VatTin,'') as VatTin_No,isnull(p.ServiceTax,'') as ServiceTaxReg_No,p.Created_Date,
(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(p.Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(p.Created_date AS date), p.Created_date) AS [Milliseconds],
isnull(p.BlockReason,'') as BlockedReason,isnull(Convert(varchar,p.[BlockDate],103),'') as Block_Date,isnull(p.BlockBy,'') as BlockedBy,p.Active,isnull(p.Remark,'') as Remark,
isnull(p.PANNo,'') as PANNo,isnull(p.Active,'') as Block,p.creditLimit,p.outstanding,replace(convert(NVARCHAR, p.DOA, 106), ' ', '/') AS DOA,
replace(convert(NVARCHAR, p.DOB, 106), ' ', '/') AS DOB,p.imgurl,isnull(p.GSTINNo,'') as GSTINNo,p.longitude,p.latitude,p.address,
(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(p.lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(p.lat_long_datetime AS date), p.lat_long_datetime) AS [lat_long_datetime],p.SyncId 
,Isnull(p.Isblock,0) AS Isblock,Isnull(p.AppBlockby,0) AS AppBlockby,Isnull(p.AppBlockRemark,'') AS AppBlockRemark,Isnull(p.AppBlockStatus,'') AS AppBlockStatus
,Isnull(p.Appbysmid,0) AS Appbysmid,Isnull(p.AppStatus,'') AS AppStatus,Isnull(p.AppRemark,'') AS AppRemark,Isnull(p.Appby,0) AS  Appby  from [MastParty]p left join mastsalesrep msr on p.Created_User_Id =msr.userid LEFT JOIN MastArea MA ON MA.AreaId=p.AreaId LEFT JOIN MastArea MC ON MC.AreaId=MA.UnderId
LEFT JOIN MastArea MB ON MB.AreaId=p.BeatId LEFT JOIN PartyType PT ON PT.PartyTypeId=p.PartyType LEFT JOIN MastIndustry MI ON MI.IndId=p.IndId
left join MastParty MD on MD.PartyId =p.UnderId 
where p.PartyDist=0  and p.PartyId=" + Partyid + "";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            xPartiesNewLatLong rst = new xPartiesNewLatLong();


            DataTable Dtimages = new DataTable();

            Dtimages = DbConnectionDAL.GetDataTable(CommandType.Text, "Select * from  MastPartyImage where PartyId='" + dt.Rows[0]["Id"].ToString() + "'");
            if (Dtimages.Rows.Count > 0)
            {
                for (int j = 0; j < Dtimages.Rows.Count; j++)
                {
                    if (Dtimages.Rows[j]["ImgUrl"].ToString() != "")
                    {
                        path = "http://" + host + (Dtimages.Rows[j]["imgurl"].ToString()).Replace(@"~", string.Empty);
                        //rstimges.Add(new xPartiesNewLatLongimages
                        //{
                        imgurl = imgurl + "&dataman&" + path;
                        //});
                    }

                }
            }

            char[] chr = { '&', 'd', 'a', 't', 'a', 'm', 'a', 'n', '&' };
            imgurl = imgurl.Trim(chr);


            rst.ID = dt.Rows[0]["Id"].ToString();
            rst.Ad = dt.Rows[0]["Area_Id"].ToString();
            rst.Bd = dt.Rows[0]["Beat_Id"].ToString();
            rst.PCd = dt.Rows[0]["PartyType"].ToString();
            rst.Nm = dt.Rows[0]["Name"].ToString();
            rst.Cp = dt.Rows[0]["ContactPerson"].ToString();
            rst.Ind = dt.Rows[0]["Industry_Id"].ToString();
            rst.DsId = dt.Rows[0]["DistId"].ToString();
            rst.Ad1 = dt.Rows[0]["Add1"].ToString();
            rst.Ad2 = dt.Rows[0]["Add2"].ToString();
            rst.Pi = dt.Rows[0]["Pin"].ToString();
            rst.Ct = dt.Rows[0]["CtyCodeP1"].ToString();
            rst.M = dt.Rows[0]["Mobile1"].ToString();
            rst.E = dt.Rows[0]["Email1"].ToString();
            rst.Pl = dt.Rows[0]["Potential"].ToString();
            rst.blk = dt.Rows[0]["IsBlocked"].ToString();
            rst.CST = dt.Rows[0]["GSTINNo"].ToString();
            rst.VTn = dt.Rows[0]["VatTin_No"].ToString();
            rst.STNo = dt.Rows[0]["ServiceTaxReg_No"].ToString();
            rst.Brzn = dt.Rows[0]["BlockedReason"].ToString();
            rst.Bdt = dt.Rows[0]["Block_Date"].ToString();
            rst.Bby = dt.Rows[0]["BlockedBy"].ToString();
            rst.At = dt.Rows[0]["Active"].ToString();
            rst.R = dt.Rows[0]["Remark"].ToString();
            rst.PAN = dt.Rows[0]["PANNo"].ToString();
            rst.phoneNo = dt.Rows[0]["phone"].ToString();
            rst.DA = dt.Rows[0]["DOA"].ToString();
            rst.DB = dt.Rows[0]["DOB"].ToString();
            rst.CreatedBy = dt.Rows[0]["cb"].ToString();
            rst.MS = dt.Rows[0]["Milliseconds"].ToString();
            rst.androidid = dt.Rows[0]["androidid"].ToString();
            rst.Longitude = dt.Rows[0]["longitude"].ToString();
            rst.Latitude = dt.Rows[0]["latitude"].ToString();
            rst.LatlngTime = dt.Rows[0]["lat_long_datetime"].ToString();
            rst.Creditlimit = dt.Rows[0]["Creditlimit"].ToString();
            rst.Outstanding = dt.Rows[0]["Outstanding"].ToString();
            rst.party_image = imgurl;
            rst.sync_id = dt.Rows[0]["SyncId"].ToString();
            rst.Createduserid = dt.Rows[0]["Created_User_Id"].ToString();


            rst.AreaName = dt.Rows[0]["Areaname"].ToString();
            rst.BeatName = dt.Rows[0]["BeatName"].ToString();
            rst.CityName = dt.Rows[0]["CityName"].ToString();
            rst.IndName = dt.Rows[0]["IndName"].ToString();
            rst.ParttypeName = dt.Rows[0]["ParttypeName"].ToString();
            rst.DistributorName = dt.Rows[0]["DistributorName"].ToString();


            rst.Isblock = Convert.ToBoolean(dt.Rows[0]["Isblock"].ToString());
            rst.AppBlockby = Convert.ToInt32(dt.Rows[0]["AppBlockby"].ToString());
            rst.AppBlockRemark = dt.Rows[0]["AppBlockRemark"].ToString();
            rst.AppBlockStatus = dt.Rows[0]["AppBlockStatus"].ToString();
            rst.Appbysmid = Convert.ToInt32(dt.Rows[0]["Appbysmid"].ToString());
            rst.AppStatus = dt.Rows[0]["AppStatus"].ToString();
            rst.AppRemark = dt.Rows[0]["AppRemark"].ToString();
            rst.Appby = Convert.ToInt32(dt.Rows[0]["Appby"].ToString());

            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_JSGetlistPendingParties_V2(string Smid)
        {
            string str = @"SELECT MS1.SMId AS SMId,MS1.smname AS SMName,MP.Partyid AS PartyId,MP.PartyName AS PartyName ,MP.AreaId AS AreaId,MA.AreaName AS Area,MP.BeatId AS BeatId,MB.AreaName AS Beat,MP.Mobile FROM MastParty MP LEFT JOIN MastArea MA ON MA.AreaId=MP.AreaId
LEFT JOIN MastArea MB ON MB.AreaId=MP.BeatId LEFT JOIN Mastsalesrep MS1 ON MS1.UserId=MP.Created_User_id 
WHERE MS1.smid=" + Smid + " AND MP.Partydist=0 AND MP.AppStatus='Pending' ";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_JSGetCountPendingParties_V2(string Smid)
        {
            string str = @"SELECT Max(MS1.SMId) AS SMId,Max(MS1.smname) AS SMName,Count(MP.Partyid) AS PartyCount 
FROM MastParty MP LEFT JOIN Mastsalesrep MS1 ON MS1.UserId=MP.Created_User_id  
WHERE MP.Created_User_id IN ( SELECT Userid FROM MastSalesRep ms  
WHERE ms.SMId IN (SELECT SMId FROM MastSalesRepGrp WHERE maingrp=" + Smid + " AND SMId !=" + Smid + "  ) )  AND MP.Partydist=0 AND MP.AppStatus='Pending' GROUP BY MP.Created_User_id";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        [DataContract]
        public class xPartiesNewLatLongimages
        {
            [DataMember]
            public string Imgurl { get; set; }
        }

        [DataContract]
        public class xPartiesNewLatLong
        {
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string ID { get; set; }
            [DataMember]
            public string Ad { get; set; }
            [DataMember]
            public string Bd { get; set; }
            [DataMember]
            public string PCd { get; set; }
            [DataMember]
            public string Cp { get; set; }
            [DataMember]
            public string Nm { get; set; }
            [DataMember]
            public string Ind { get; set; }
            [DataMember]
            public string DsId { get; set; }
            [DataMember]

            public string Ad1 { get; set; }
            [DataMember]
            public string Ad2 { get; set; }
            [DataMember]
            public string Pi { get; set; }
            [DataMember]
            public string Ct { get; set; }
            [DataMember]
            public string M { get; set; }
            [DataMember]
            public string E { get; set; }
            [DataMember]
            public string Pl { get; set; }
            [DataMember]
            public string blk { get; set; }
            [DataMember]
            public string CST { get; set; }
            [DataMember]
            public string VTn { get; set; }
            [DataMember]
            public string STNo { get; set; }
            [DataMember]
            public string Brzn { get; set; }
            [DataMember]
            public string Bdt { get; set; }
            [DataMember]
            public string Bby { get; set; }
            [DataMember]
            public string At { get; set; }
            [DataMember]
            public string R { get; set; }
            [DataMember]
            public string PAN { get; set; }
            [DataMember]
            public string phoneNo { get; set; }
            [DataMember]
            public string CreatedBy { get; set; }
            [DataMember]
            public string DA { get; set; }
            [DataMember]
            public string DB { get; set; }
            [DataMember]
            public string androidid { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string LatlngTime { get; set; }
            [DataMember]
            public string Creditlimit { get; set; }
            [DataMember]
            public string Outstanding { get; set; }
            [DataMember]
            public string party_image { get; set; }
            [DataMember]
            public string sync_id { get; set; }

            [DataMember]
            public string Createduserid { get; set; }


            [DataMember]
            public string AreaName { get; set; }


            [DataMember]
            public string BeatName { get; set; }


            [DataMember]
            public string CityName { get; set; }

            [DataMember]
            public string IndName { get; set; }

            [DataMember]
            public string ParttypeName { get; set; }


            [DataMember]
            public string DistributorName { get; set; }





            [DataMember]
            public bool Isblock { get; set; }

            [DataMember]
            public int AppBlockby { get; set; }
            [DataMember]
            public string AppBlockRemark { get; set; }
            [DataMember]
            public string AppBlockStatus { get; set; }
            [DataMember]
            public int Appbysmid { get; set; }
            [DataMember]
            public string AppStatus { get; set; }

            [DataMember]
            public string AppRemark { get; set; }
            [DataMember]
            public int Appby { get; set; }



            [DataMember]
            public string totalorderQty { get; set; }
            [DataMember]
            public string totalorderValue { get; set; }
            [DataMember]
            public string Avgorderqty { get; set; }
            [DataMember]
            public string Avgordervalue { get; set; }

            [DataMember]
            public string LastVisit { get; set; }
            [DataMember]
            public string LastProductivecall { get; set; }
            [DataMember]
            public string Linepercall { get; set; }
            [DataMember]
            public string PartyNote { get; set; }
            //[DataMember]
            //public List<xPartiesNewLatLongimages> imgpaths { get; set; }

        }

        public class disList
        {
            public List<Descdetail> bodyLine;
        }
        public class Descdetail
        {


            public int Userid { get; set; }
            public string VDate { get; set; }
            public string NextVisitDate { get; set; }
            public int smid { get; set; }
            public string frmtime1 { get; set; }
            public string toTime1 { get; set; }
            public int withuserid { get; set; }
            public string modeoftransport { get; set; }
            public string vehicleused { get; set; }
            public int Lock { get; set; }
            public int nwithuserid { get; set; }
            public string android_id { get; set; }
            public string cityids { get; set; }
            public string cityname { get; set; }
            public decimal orderamountmail { get; set; }
            public decimal orderamountphone { get; set; }
            public string visitcode { get; set; }
            public decimal Attendance { get; set; }
            public int Fromareacode { get; set; }
            public decimal OtherExpense { get; set; }
            public string AndroidAppRemark { get; set; }
            public int toareacode { get; set; }
            public int ncityid { get; set; }
            public string longitude { get; set; }
            public string latitude { get; set; }
            public string lat_long_dt { get; set; }
            public string mobile_created_date { get; set; }
            public string StockInv { get; set; }

            public string invoices { get; set; }
            public int VisId { get; set; }
            public int SMId { get; set; }
            public string Remarks { get; set; }
            public int ProductClassId { get; set; }
            public int ProductSegmentId { get; set; }
            public int ProductMatGrp { get; set; }
            public string Android_Id { get; set; }
            public string ImgUrl { get; set; }
            public string image1 { get; set; }

            public int A_OrderNo { get; set; }
            public int A_POrderNo { get; set; }
            public int A_DemoNo { get; set; }
            public int A_FailedVisitNo { get; set; }
            public int A_VisitNo { get; set; }
            public int A_CompetitorNo { get; set; }
            public int A_PartyNo { get; set; }
            public int A_DiscussionNo { get; set; }
            public int A_DistributorCollectionNo { get; set; }
            public int A_PartyCollectionNo { get; set; }
            public int A_POrder1No { get; set; }
            public int A_LeaveNo { get; set; }
            public int A_Order1No { get; set; }
            public int A_BeatPlanNo { get; set; }
            public int A_distStock_no { get; set; }
            public int A_SalesReturn_no { get; set; }
            public int A_SalesReturn1_no { get; set; }

            public int DistId { get; set; }
            public int ItemId { get; set; }
            public decimal Qty { get; set; }
            public decimal cases { get; set; }
            public decimal unit { get; set; }
            public string seqNo { get; set; }
            public decimal mrp { get; set; }

            public int Sno { get; set; }
            public int cityid { get; set; }
            public string remarkdist { get; set; }
            public string NextVisitTime { get; set; }
            public string SpentfrTime { get; set; }
            public string SpentToTime { get; set; }
            public decimal stock { get; set; }
            public string DSRType { get; set; }
            public string Mode { get; set; }
            public decimal Amount { get; set; }
            public string PaymentDate { get; set; }
            public string Cheque_DDNo { get; set; }
            public string Cheque_DD_Date { get; set; }
            public string Bank { get; set; }
            public string Branch { get; set; }
            public string status { get; set; }
            public string androidid { get; set; }
            public int visid { get; set; }
            public int UserID { get; set; }
            public string Nextvisit { get; set; }
            public int ReasonID { get; set; }
            public string VisitTime { get; set; }
            public string Item { get; set; }
            public decimal Rate { get; set; }
            public int SMID { get; set; }
            public string CompName { get; set; }
            public decimal Discount { get; set; }
            public string BrandActivity { get; set; }
            public string MeetActivity { get; set; }
            public string RoadShow { get; set; }
            public string Scheme { get; set; }
            public string OtherGeneralInfo { get; set; }
            public string OtherActivity { get; set; }
            public decimal OrderAmount { get; set; }


            public int OrdId { get; set; }
            public decimal amount { get; set; }
            public string Android_Id1 { get; set; }
            public int selectedDistId { get; set; }
            public decimal discount { get; set; }
            public string LastRecord { get; set; }
            public string modifiedorder { get; set; }

            public Int32 PartyId { get; set; }
            public string PartyName { get; set; }
            public string Address1 { get; set; }
            public string Address2 { get; set; }
            public Int32 CityId { get; set; }
            public Int32 AreaId { get; set; }
            public Int32 BeatId { get; set; }
            public Int32 UnderId { get; set; }
            public string Pin { get; set; }
            public string Mobile { get; set; }
            public string Phone { get; set; }
            public string Remark { get; set; }
            public string SyncId { get; set; }
            public string IndId { get; set; }
            public decimal Potential { get; set; }
            public bool Active { get; set; }
            public string BlockReason { get; set; }
            public int PartyType { get; set; }
            public string ContactPerson { get; set; }
            public string CSTNo { get; set; }
            public string VatTin { get; set; }
            public string ServiceTax { get; set; }
            public string PanNo { get; set; }
            public int UserId { get; set; }
            public string DOA { get; set; }
            public string DOB { get; set; }
            public string Email { get; set; }
            public string Longitude { get; set; }
            public string Latitude { get; set; }
            public string LatlngTime { get; set; }

            public string Smid { get; set; }
            public string Visid { get; set; }
            public string Vdate { get; set; }
            public string GSTINNo { get; set; }

            public string BaseUnit { get; set; }
            public decimal BaseUnitQty { get; set; }
            public string PrimaryUnit { get; set; }
            public decimal PrimaryUnitQty { get; set; }
            public string SecondaryUnit { get; set; }
            public decimal SecondaryUnitQty { get; set; }
            public decimal PrimaryUnitConversion { get; set; }
            public decimal SecondaryUnitConversion { get; set; }

            public string Createdbyuserid { get; set; }
            public string AppStatus { get; set; }
            public string Appbyuserid { get; set; }
            public string AppRemark { get; set; }
            public string Appbysmid { get; set; }

            public bool Isblock { get; set; }
            public string AppBlockby { get; set; }
            public string AppBlockRemark { get; set; }
            public string AppBlockStatus { get; set; }
            public string StartCall { get; set; }

            public string EndCall { get; set; }


            public string AndroidID { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_SaveParty_V2()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //  DataTable DTadmin = new DataTable();
            Common cls = new Common();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);
            string str = "";
            //Int32 PartyId = objResponse.bodyLine[0].PartyId;
            //string PartyName = objResponse.bodyLine[0].PartyName;
            //string Address1 = objResponse.bodyLine[0].Address1;
            //string Address2 = objResponse.bodyLine[0].Address2;
            //Int32 CityId = objResponse.bodyLine[0].CityId;
            //Int32 AreaId = objResponse.bodyLine[0].AreaId;
            //Int32 BeatId = objResponse.bodyLine[0].BeatId;
            //Int32 UnderId = objResponse.bodyLine[0].UnderId;
            //string Pin = objResponse.bodyLine[0].Pin;
            //string Mobile = objResponse.bodyLine[0].Mobile;
            //string Phone = objResponse.bodyLine[0].Phone;
            //string Remark = objResponse.bodyLine[0].Remark;
            //string SyncId = objResponse.bodyLine[0].SyncId;
            //string IndId = objResponse.bodyLine[0].IndId;
            //decimal Potential = objResponse.bodyLine[0].Potential;
            //bool Active = objResponse.bodyLine[0].Active;
            //string BlockReason = objResponse.bodyLine[0].BlockReason;
            //int PartyType = objResponse.bodyLine[0].PartyType;
            //string ContactPerson = objResponse.bodyLine[0].ContactPerson;
            //string CSTNo = objResponse.bodyLine[0].CSTNo;
            //string VatTin = objResponse.bodyLine[0].VatTin;
            //string ServiceTax = objResponse.bodyLine[0].ServiceTax;
            //string PanNo = objResponse.bodyLine[0].PanNo;
            //int UserId = objResponse.bodyLine[0].UserId;
            //string DOA = objResponse.bodyLine[0].DOA;
            //string DOB = objResponse.bodyLine[0].DOB;
            //string Email = objResponse.bodyLine[0].Email;
            //string androidid = objResponse.bodyLine[0].androidid;
            //string Longitude = objResponse.bodyLine[0].longitude;
            //string Latitude = objResponse.bodyLine[0].latitude;
            //string LatlngTime = objResponse.bodyLine[0].LatlngTime;
            //string ImgUrl = objResponse.bodyLine[0].ImgUrl;
            //string image1 = objResponse.bodyLine[0].image1;
            //string GSTINNo = objResponse.bodyLine[0].GSTINNo;


            //string AppStatus = objResponse.bodyLine[0].AppStatus;
            //string Appbyuserid = objResponse.bodyLine[0].Appbyuserid;
            //string AppRemark = objResponse.bodyLine[0].AppRemark;
            //string Appbysmid = objResponse.bodyLine[0].Appbysmid;



            //bool Isblock = objResponse.bodyLine[0].Isblock;
            //string AppBlockby = objResponse.bodyLine[0].AppBlockby;
            //string AppBlockRemark = objResponse.bodyLine[0].AppBlockRemark;
            //string AppBlockStatus = objResponse.bodyLine[0].AppBlockStatus;

            string Partytype_Name = "";

            Partytype_Name = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select PartyTypeName From PartyType where PartyTypeId=" + objResponse.bodyLine[0].PartyType + ""));
            bool RetailerCreationApproval = Convert.ToBoolean(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RetailerCreationApproval FROM MastEnviro"));
            if (RetailerCreationApproval == true)
            {
                if (Partytype_Name.ToUpper() != "INSTITUTIONAL" && objResponse.bodyLine[0].PartyId == 0)
                {
                    objResponse.bodyLine[0].Active = false;
                }
            }
            else
            {

            }
            string[] imgurls = new string[1];

            string chk = "0"; string checkmobileno = string.Empty, _partyId = "", _Query = "";
            DataTable mobileno = new DataTable();
            DataTable dtandridid = new DataTable();
            string qry = "", Millisecond = "";
            //double ticks = double.Parse(LatlngTime);
            //TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            //DateTime startdate = new DateTime(1970, 1, 1) + time;
            //string minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string minDate1 = "";
            if (!string.IsNullOrEmpty(objResponse.bodyLine[0].LatlngTime))
            {
                double ticks = double.Parse(objResponse.bodyLine[0].LatlngTime);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }
            else
            {
                minDate1 = DateTime.Now.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }
            // WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
            string Address = "", filename = "";

            //if (Latitude != "")
            //{
            //    Address = DMT.InsertAddress(Latitude, Longitude);
            //}

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;


            //if (image1.Contains("http://"))
            //{
            //    ImgUrl = image1.Replace(path, "~");
            //}
            //else

            if (objResponse.bodyLine[0].image1 != "N/A")
            {
                //  imgurls = image1.Split();
                string[] imges = objResponse.bodyLine[0].image1.Split(new string[] { "&dataman&" }, StringSplitOptions.None);
                imgurls = new string[imges.Length];
                for (int i = 0; i < imges.Length; i++)
                {

                    try
                    {


                        byte[] bytes = Convert.FromBase64String(imges[i]);

                        Image image;
                        using (MemoryStream ms = new MemoryStream(bytes))
                        {
                            image = Image.FromStream(ms);
                        }
                        string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                        if (!Directory.Exists(directoryPath))
                        {
                            Directory.CreateDirectory(directoryPath);
                        }
                        String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");


                        filename = Path.GetFileName(objResponse.bodyLine[0].SyncId + '-' + timeStamp);
                        {
                            //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                            //string filePath = Server.MapPath("~/DSRImages" + "/C_" + filename + ".png");
                            //File.WriteAllBytes(filePath, bytes);
                            //imgurls[i] = "~/DSRImages" + "/C_" + filename + ".png";


                            string filePath = Server.MapPath("~/DSRImages" + "/NewParty_" + filename + ".png");
                            File.WriteAllBytes(filePath, bytes);
                            imgurls[i] = "~/DSRImages" + "/NewParty_" + filename + ".png";
                        }
                    }
                    catch (Exception)
                    {
                        if (imges[i].Contains("http://"))
                        {
                            imgurls[i] = imges[i].Replace(path, "~");
                        }

                    }
                }
            }


            PartyBAL PB = new PartyBAL();
            int retval = 0;


            int smid = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT SMId FROM MastSalesRep WHERE UserId=" + objResponse.bodyLine[0].UserId + ""));

            int RoleId = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RoleId FROM MastRole WHERE RoleType='Distributor'"));
            string msz = "Record Inserted Successfully";
            if (objResponse.bodyLine[0].IndId == "")
            {
                objResponse.bodyLine[0].IndId = "0";
            }
            //   string partyoffline = DbConnectionDAL.GetStringScalarVal("select PartyOffLine from mastenviro").ToString();



            if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
            {


                retval = DB.UpdateDistributors(objResponse.bodyLine[0].PartyId, objResponse.bodyLine[0].PartyName, objResponse.bodyLine[0].Address1, objResponse.bodyLine[0].Address2, Convert.ToString(objResponse.bodyLine[0].CityId), objResponse.bodyLine[0].Pin, objResponse.bodyLine[0].Email, objResponse.bodyLine[0].Mobile, objResponse.bodyLine[0].Remark, objResponse.bodyLine[0].SyncId, objResponse.bodyLine[0].BlockReason, objResponse.bodyLine[0].Mobile, objResponse.bodyLine[0].Active, objResponse.bodyLine[0].Phone, RoleId, "", objResponse.bodyLine[0].CSTNo, objResponse.bodyLine[0].VatTin, objResponse.bodyLine[0].PanNo, 0, 0, 0, 0, objResponse.bodyLine[0].UserId, "", "", objResponse.bodyLine[0].PartyName, smid, objResponse.bodyLine[0].DOA, objResponse.bodyLine[0].DOB, objResponse.bodyLine[0].AreaId, "", "", objResponse.bodyLine[0].PartyType, objResponse.bodyLine[0].ServiceTax);
                if (objResponse.bodyLine[0].SyncId == "")
                {
                    string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
                }

            }
            else
            {
                if (Convert.ToInt32(objResponse.bodyLine[0].AppBlockby) != 0)
                {

                }
                else
                {
                    objResponse.bodyLine[0].AppBlockby = "0";
                }
                retval = PB.UpdatePartyMobileForApproval(objResponse.bodyLine[0].PartyId, objResponse.bodyLine[0].PartyName, objResponse.bodyLine[0].Address1, objResponse.bodyLine[0].Address2, objResponse.bodyLine[0].CityId, objResponse.bodyLine[0].AreaId, objResponse.bodyLine[0].BeatId, objResponse.bodyLine[0].UnderId, objResponse.bodyLine[0].Pin, objResponse.bodyLine[0].Mobile, objResponse.bodyLine[0].Phone, objResponse.bodyLine[0].Remark, objResponse.bodyLine[0].SyncId, objResponse.bodyLine[0].IndId,
                    objResponse.bodyLine[0].Potential, objResponse.bodyLine[0].Active, objResponse.bodyLine[0].BlockReason, objResponse.bodyLine[0].PartyType, objResponse.bodyLine[0].ContactPerson, objResponse.bodyLine[0].CSTNo, objResponse.bodyLine[0].VatTin, objResponse.bodyLine[0].ServiceTax, objResponse.bodyLine[0].PanNo, objResponse.bodyLine[0].UserId, objResponse.bodyLine[0].DOA, objResponse.bodyLine[0].DOB, objResponse.bodyLine[0].Email,
                    "", objResponse.bodyLine[0].GSTINNo, 0, objResponse.bodyLine[0].AppStatus, Convert.ToInt32(objResponse.bodyLine[0].Appbyuserid), objResponse.bodyLine[0].AppRemark, Convert.ToInt32(objResponse.bodyLine[0].Appbysmid), objResponse.bodyLine[0].Isblock, objResponse.bodyLine[0].AppBlockRemark, objResponse.bodyLine[0].AppBlockStatus, Convert.ToInt32(objResponse.bodyLine[0].AppBlockby));

            }


            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "Delete from MastPartyImage where PartyId=" + objResponse.bodyLine[0].PartyId + " ");
            for (int i = 0; i < imgurls.Length; i++)
            {
                str = "INSERT INTO dbo.MastPartyImage ( ImgUrl,PartyId) VALUES ('" + imgurls[i] + "'," + objResponse.bodyLine[0].PartyId + ")";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, str);

            }


            #region SentNotification
            try
            {

                if (RetailerCreationApproval == true && Partytype_Name.ToUpper() != "INSTITUTIONAL" && objResponse.bodyLine[0].AppBlockRemark == "")
                {
                    string displaytitle = ""; string title = "";
                    string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
                    string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from MastParty where Partyid=" + retval + ""));
                    DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID,mobile ,SMName ,userid from mastsalesrep where userid=" + objResponse.bodyLine[0].UserId + "");

                    DataTable dtappuser = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid from mastsalesrep where userid=" + objResponse.bodyLine[0].Appbyuserid + "");

                    if (dtgrpsmid.Rows.Count > 0)
                    {
                        string pro_id = "PARTYAPPROVED";
                        string sql_getsenior = "select smid,Mobile,userid from mastsalesrep where SMName<>'.'  and  smid in (select MainGrp from mastsalesrepgrp where smid=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " and Level<=(select level from mastsalesrepgrp where smid=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " and MainGrp=" + dtgrpsmid.Rows[0]["Smid"].ToString() + "))";
                        DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                        if (dt_getsenior.Rows.Count > 0)
                        {
                            //for (int k = 0; k < dt_getsenior.Rows.Count; k++)
                            //{

                            //if (PartyId != 0)
                            //{
                            //    displaytitle = PartyName + " -  Party Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                            //    title = " Party Modified";
                            //}
                            //else
                            //{
                            if (objResponse.bodyLine[0].AppStatus == "Approve")
                            {


                                displaytitle = objResponse.bodyLine[0].PartyName + " - Outlet approved by " + dtappuser.Rows[0]["SMName"].ToString() + "";
                                title = " Outlet Approved";
                            }
                            else
                            {
                                displaytitle = objResponse.bodyLine[0].PartyName + " - Outlet rejected by " + dtappuser.Rows[0]["SMName"].ToString() + "";
                                title = " Outlet Rejected";
                            }
                            //}


                            lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToDateTime(createdatetime)
                                , "PartyMasterAstral.aspx?PartyId=" + retval + "&REQ=PRA", displaytitle, 0,
                                Convert.ToInt32(dtappuser.Rows[0]["userid"].ToString()), Convert.ToInt32(dtappuser.Rows[0]["SMID"].ToString())
                                , Convert.ToInt32(dtgrpsmid.Rows[0]["smid"].ToString()));

                            if (!string.IsNullOrEmpty(dtgrpsmid.Rows[0]["mobile"].ToString()))
                            {
                                cls.pushnotificationforPartyCreation(displaytitle, compcode,
                                    dtgrpsmid.Rows[0]["mobile"].ToString(),
                                  title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                    dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS", retval.ToString());

                                //cls.pushnotificationforPartyCreation(displaytitle, compcode,
                                //   dt_getsenior.Rows[k]["mobile"].ToString(),
                                //  title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                //   dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER", retval.ToString());
                            }
                            //  }
                        }



                    }
                }
                else
                {

                    //Line file mismatch
                    //Status = "400";
                    // HeaderMsz = HeaderMsz + " - Line File Mismatch : Header Line Count: " + HeaderLineCOunt + " and LineFileCount: " + (Convert.ToInt32(Line_seqNo) + 1).ToString();
                }


            }
            catch (Exception ex)
            {
                //  Line_Status = "200"; // status is set 200 becoz order is saved but exception in sending notification.
                // LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();

                // Status = "400";
                // HeaderMsz = HeaderMsz + " : " + LineMsz;
            }

            #endregion

            #region SentNotificationFORBLOCK

            try
            {
                if (objResponse.bodyLine[0].AppBlockRemark == null)
                {
                    objResponse.bodyLine[0].AppBlockRemark = "";
                }

                if (RetailerCreationApproval == true && Partytype_Name.ToUpper() != "INSTITUTIONAL" && objResponse.bodyLine[0].AppBlockRemark != "")
                {


                    string displaytitle = ""; string title = "";
                    string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
                    string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from MastParty where Partyid=" + retval + ""));
                    //   DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName,mobile ,userid,UnderId from mastsalesrep where userid=" + UserId + "");


                    DataTable dtappuser = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid from mastsalesrep where userid=" + objResponse.bodyLine[0].Appbyuserid + "");

                    if (dtappuser.Rows.Count > 0)
                    {
                        string pro_id = "PARTYBAPPROVED";
                        //   string sql_getsenior = "select smid,Mobile,userid from mastsalesrep where smid in (select MainGrp from mastsalesrepgrp 
                        //where smid=" + dtappuser.Rows[0]["Smid"].ToString() + " and Level<=(select level from mastsalesrepgrp where smid=" + dtappuser.Rows[0]["Smid"].ToString() + " and MainGrp=" + dtappuser.Rows[0]["Smid"].ToString() + "))";

                        string sql_getsenior = @"select SMName, smid,Mobile,userid from mastsalesrep where smid in (select maingrp from mastsalesrepgrp where smid in (" + dtappuser.Rows[0]["Smid"].ToString() + ") union  SELECT smid FROM mastsalesrepgrp WHERE  maingrp in (" + dtappuser.Rows[0]["Smid"].ToString() + ")) and active=1 and SMName<>'.' ";
                        DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                        if (dt_getsenior.Rows.Count > 0)
                        {
                            for (int k = 0; k < dt_getsenior.Rows.Count; k++)
                            {


                                if (objResponse.bodyLine[0].AppBlockStatus == "Approve")
                                {


                                    displaytitle = objResponse.bodyLine[0].PartyName + " - Outlet Block approved by " + dtappuser.Rows[0]["SMName"].ToString() + "";
                                    title = " Outlet Block Approved";
                                }
                                else
                                {
                                    displaytitle = objResponse.bodyLine[0].PartyName + " - Outlet Block rejected by " + dtappuser.Rows[0]["SMName"].ToString() + "";
                                    title = " Outlet Block Rejected";
                                }
                                //}


                                lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()), Convert.ToDateTime(createdatetime)
                                    , "PartyMasterAstral.aspx?PartyId=" + retval + "&REQ=PRAB", displaytitle, 0,
                                    Convert.ToInt32(dtappuser.Rows[0]["userid"].ToString()), Convert.ToInt32(dtappuser.Rows[0]["SMID"].ToString())
                                    , Convert.ToInt32(dt_getsenior.Rows[k]["smid"].ToString()));

                                if (!string.IsNullOrEmpty(dt_getsenior.Rows[0]["mobile"].ToString()))
                                {
                                    cls.pushnotificationforPartyCreation(displaytitle, compcode,
                                        dt_getsenior.Rows[k]["mobile"].ToString(),
                                      title, dt_getsenior.Rows[k]["SMID"].ToString(),
                                        dt_getsenior.Rows[k]["SMName"].ToString(), "FFMS", retval.ToString());

                                    cls.pushnotificationforPartyCreation(displaytitle, compcode,
                                       dt_getsenior.Rows[k]["mobile"].ToString(),
                                      title, dt_getsenior.Rows[k]["SMID"].ToString(),
                                       dt_getsenior.Rows[k]["SMName"].ToString(), "CRM MANAGER", retval.ToString());
                                }
                            }
                        }



                    }



                    else
                    {


                    }
                }

            }
            catch (Exception ex)
            {
                //  Line_Status = "200"; // status is set 200 becoz order is saved but exception in sending notification.
                // LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();

                // Status = "400";
                // HeaderMsz = HeaderMsz + " : " + LineMsz;
            }
            #endregion

            if (retval == -1)
            { msz = "Duplicate Party Exists"; }
            else if (retval == -3)
            { msz = "Duplicate Mobile Exists"; }
            else if (retval == -4)
            {
                msz = "Duplicate GSTNo Exists";

            }
            else
            {
                string sqlupdate = "update mastparty set android_id='" + objResponse.bodyLine[0].androidid + "', Longitude = '" + objResponse.bodyLine[0].Longitude + "',Latitude='" + objResponse.bodyLine[0].Latitude + "',Address='" + Address + "',Lat_long_datetime = '" + minDate1 + "',ImgUrl='" + objResponse.bodyLine[0].ImgUrl + "',GSTINNo='" + objResponse.bodyLine[0].CSTNo + "' where partyid=" + objResponse.bodyLine[0].PartyId + " ";
                if (DbConnectionDAL.ExecuteQuery(sqlupdate) == 1)
                { chk = "2"; }
            }
            if (retval > 0)
            {
                if (chk == "1")
                { msz = "Record Inserted Successfully"; _partyId = retval.ToString(); }
                else if (chk == "2")
                { msz = "Record Updated Successfully"; _partyId = objResponse.bodyLine[0].PartyId.ToString(); }

                qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where android_id='" + objResponse.bodyLine[0].androidid + "' ";

                //Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();
            }
            else
            {
                qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where mobile='" + objResponse.bodyLine[0].Mobile + "' ";
            }
            Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();

            List<Party> rst = new List<Party>();
            {
                rst.Add(
                    new Party
                    {
                        //Id = retval.ToString(),
                        Id = _partyId,
                        Status = msz,
                        MS = Millisecond
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }



        #endregion

    }
}
