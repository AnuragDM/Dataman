using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Services;
using System.Web.Script.Serialization;
using System.Web.Script.Services;
using System.Web.Services.Protocols;
using BusinessLayer;
using System.Xml;
using System.Data;
using System.IO;
using DAL;
using System.Data.SqlClient;
using System.Configuration;
using System.Text;
using System.Net;
using System.Net.Mail;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.Collections;
using BAL;
using System.Globalization;
using System.IO.Compression;
using BAL.AdvanceReq;
using AstralFFMS.ServiceReferenceDMTracker;
using System.Net.Mime;
using System.Drawing;
using System.Diagnostics;
using System.Dynamic;
using AstralFFMS;
using Newtonsoft.Json.Linq;
//using AstralFFMS.SalesOrder;
//using AstralFFMS.Nav_SalesPrice_ItemDiscountReference;
using AstralFFMS.SaleOrderReference;
using System.Transactions;
using System.Net.Http;
using System.Net.Http.Headers;

namespace AstralFFMS
{
    /// <summary>
    /// Summary description for And_Sync
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    //  [System.ComponentModel.ToolboxItem(False)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    [System.Web.Script.Services.ScriptService]
    public class GrahaakWebserviceV1 : System.Web.Services.WebService
    {
        string Query = "";
        BAL.LeaveRequest.LeaveAll lvAll = new BAL.LeaveRequest.LeaveAll();
        BAL.ExpensesGroupBAL EXG = new ExpensesGroupBAL();
        BAL.AdvanceReq.AdvanceReqBAL obj = new BAL.AdvanceReq.AdvanceReqBAL();
        DistributorBAL DB = new DistributorBAL();
        MasterOperation _mo = new MasterOperation();
        SMSAdapter sms = new SMSAdapter();

        [WebMethod]
        public bool CheckWebServiceResponse()
        {
            System.Threading.Thread.Sleep(1000);
            return true;
        }

        #region PostService Import

        

        public class MISMenu_V2
        {
            public string ParentID { get; set; }

            public string SMID { get; set; }

            public string app { get; set; }



        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetUserDetailByPDAId_mobile()
        {
            string MQry = "";
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            Query = "SELECT * FROM (SELECT (SELECT ISNULL (COMPNAME,'') FROM MASTENVIRO ) COMPANYNAME,SM.SMID AS CONPERID,SM.[SMNAME] AS USER_NAME,UM.ID AS USERID, UM.[PWD] AS PASSWD,SM.[LVL] AS LEVEL,MSP.SMNAME AS REPORTINGPERSON,UM.[ROLEID],UM.DEPTID,UM.DESIGID ,SM.DEVICENO AS [PDA_ID],SM.[DSRALLOWDAYS],SM.EMAIL, UM.ACTIVE AS ACTIVEYN,UM.CREATEDDATE AS CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(UM.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(UM.CREATEDDATE AS DATE), UM.CREATEDDATE) AS MILLISECOND, ROLETYPE = (CASE WHEN MR.ROLETYPE ='AREAINCHARGE' THEN 'L1' WHEN MR.ROLETYPE IN ('CITYHEAD','DISTRICTHEAD') THEN 'L2' WHEN MR.ROLETYPE IN ('REGIONHEAD','STATEHEAD') THEN 'L3' ELSE '' END) FROM [MASTLOGIN] UM LEFT JOIN MASTSALESREP SM ON SM.USERID = UM.ID INNER JOIN MASTSALESREP MSP ON SM.UNDERID=MSP.SMID LEFT JOIN MASTROLE MR ON MR.ROLEID=UM.ROLEID WHERE MR.ROLETYPE IN ('AREAINCHARGE','CITYHEAD','DISTRICTHEAD','STATEHEAD') AND (SM.[DEVICENO] = '" + OBJRESPONSE.BODY[0].PDA_ID + "') AND UM.[ACTIVE] = '1'  AND SM.MOBILE='" + OBJRESPONSE.BODY[0].MOBILE + "') AS T " + MQry + "";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<UserDetailbyPDA_ID> rst = new List<UserDetailbyPDA_ID>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new UserDetailbyPDA_ID
            //        {
            //            ConPerId = dt.Rows[i]["ConPerId"].ToString(),
            //            User_Name = dt.Rows[i]["User_Name"].ToString(),
            //            UserId = dt.Rows[i]["UserId"].ToString(),
            //            PassWd = dt.Rows[i]["PassWd"].ToString(),
            //            Level = dt.Rows[i]["Level"].ToString(),
            //            ReportingPerson = dt.Rows[i]["ReportingPerson"].ToString(),
            //            RoleId = dt.Rows[i]["RoleId"].ToString(),
            //            DeptId = dt.Rows[i]["DeptId"].ToString(),
            //            DesigId = dt.Rows[i]["DesigId"].ToString(),
            //            PDA_Id = dt.Rows[i]["PDA_Id"].ToString(),
            //            DSRAllowDays = dt.Rows[i]["DSRAllowDays"].ToString(),
            //            Email = dt.Rows[i]["Email"].ToString(),
            //            ActiveYN = dt.Rows[i]["ActiveYN"].ToString(),
            //            CreatedDate = dt.Rows[i]["Createddate"].ToString(),
            //            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
            //            RoleType = dt.Rows[i]["RoleType"].ToString(),
            //            Companyname = dt.Rows[i]["company"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

       



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetAndroidEnviro()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            Query = "SELECT A_ORDERNO AORDNO,A_PORDERNO APORDNO,A_DEMONO ADEMONO,A_FAILEDVISITNO AFVNO,A_VISITNO AVISNO,A_COMPETITORNO ACMPNO,A_PARTYNO APTYNO,A_DISCUSSIONNO ADISCNO,A_DISTRIBUTORCOLLECTIONNO ADISCOLNO,A_PARTYCOLLECTIONNO APTYCOLNO,A_PORDER1NO APORD1NO,A_DISTSTOCK_NO ADISTSTOCKNO,A_ORDER1NO AORD1NO,A_SALESRETURN_NO A_SALESRETURN_NO,A_SALESRETURN1_NO A_SALESRETURN1_NO   FROM ANDROIDENVIRO WHERE SMID=" + OBJRESPONSE.BODY[0].SMID + "";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xAndroidEnviro> rst = new List<xAndroidEnviro>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xAndroidEnviro
            //        {
            //            AOrdNo = dt.Rows[i]["A_OrderNo"].ToString(),
            //            APOrdNo = dt.Rows[i]["A_POrderNo"].ToString(),
            //            ADemoNo = dt.Rows[i]["A_DemoNo"].ToString(),
            //            AFVNo = dt.Rows[i]["A_FailedVisitNo"].ToString(),
            //            AVisNo = dt.Rows[i]["A_VisitNo"].ToString(),
            //            ACmpNo = dt.Rows[i]["A_CompetitorNo"].ToString(),
            //            APtyNo = dt.Rows[i]["A_PartyNo"].ToString(),
            //            ADiscNo = dt.Rows[i]["A_DiscussionNo"].ToString(),
            //            ADisColNo = dt.Rows[i]["A_DistributorCollectionNo"].ToString(),
            //            APtyColNo = dt.Rows[i]["A_PartyCollectionNo"].ToString(),
            //            APOrd1No = dt.Rows[i]["A_POrder1No"].ToString(),
            //            AdistStockno = dt.Rows[i]["A_distStock_no"].ToString(),
            //            AOrd1No = dt.Rows[i]["A_Order1No"].ToString(),
            //            A_SalesReturn_no = dt.Rows[i]["A_SalesReturn_no"].ToString(),
            //            A_SalesReturn1_no = dt.Rows[i]["A_SalesReturn1_no"].ToString()
            //        }
            //    );
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetTransporter_TimeStampWise()
        {
            string MQry = "";
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //   DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE T.MILLISECONDS >'" + minDate + "'";
            }

            Query = "SELECT TOP " + NoOfRec + "  T.ID AS ID,T.NAME AS NM,ISNULL(T.MILLISECONDS,'')  AS MS  FROM (SELECT ID,NAME,SYNCID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE) AS [MILLISECONDS] FROM MASTTRANSPORTER WHERE 1=1 ) AS T " + MQry + " ";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xTransporter_TimeStamp> rst = new List<xTransporter_TimeStamp>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xTransporter_TimeStamp
            //        {
            //            Id = dt.Rows[i]["Id"].ToString(),
            //            Nm = dt.Rows[i]["Name"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            // dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetProjects_TimeStampWise()
        {

            string MQry = "";
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE  T.MILLISECONDS >'" + minDate + "'";
            }
            Query = "SELECT TOP " + NoOfRec + "  T.ID AS ID,T.NAME AS NM,ISNULL(T.MILLISECONDS,'')  AS MS,T.CREATEDDATE AS CREATEDDATE  FROM (SELECT ID,NAME,SYNCID,CREATEDDATE,ACTIVE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE) AS [MILLISECONDS] FROM MASTPROJECT WHERE 1=1 ) AS T " + MQry + " ORDER BY CREATEDDATE ";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xProjects_TimeStamp> rst = new List<xProjects_TimeStamp>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xProjects_TimeStamp
            //        {
            //            Id = dt.Rows[i]["Id"].ToString(),
            //            Nm = dt.Rows[i]["Name"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            bodyStream.Dispose();

            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetCountry_TimeStampWise()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //   DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE T.MILLISECONDS > '" + minDate + "'";
            }
            Query = "SELECT TOP " + NoOfRec + "  T.ID AS CID,T.DESCRIPTION AS NM,ISNULL(T.MILLISECONDS,'')  AS MS  FROM (SELECT AREAID AS ID,AREANAME AS [DESCRIPTION],SYNCID,ACTIVE,CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE) AS [MILLISECONDS] FROM MASTAREA WHERE AREATYPE='COUNTRY') AS T " + MQry + "";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xCountry_TimeStamp> rst = new List<xCountry_TimeStamp>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xCountry_TimeStamp
            //        {
            //            Cid = dt.Rows[i]["Id"].ToString(),
            //            NM = dt.Rows[i]["Description"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }


        [DataContract]
        public class xRegion_TimeStamp
        {
            [DataMember]
            public string Rid { get; set; }
            [DataMember]
            public string NM { get; set; }
            [DataMember]
            public string Cid { get; set; }
            [DataMember]
            public string MS { get; set; }

        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetRegions_TimeStampWise()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //  DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                //Query = "select T.Description As Nm,T.Id As Rid,T.CountryId As Cid,T.Milliseconds As MS  from (SELECT DISTINCT(VG.regionName) as Description,VG.regionId as Id,VG.CountryID, Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] FROM ViewGeo VG LEFT JOIN MastLink ML ON VG.areaId=ML.LinkCode Left Join MastArea Ma On Vg.regionId=Ma.AreaId WHERE ML.ECode='SA' AND vg.areaid=" + minDate + " ) As T ";

                Query = "SELECT T.DESCRIPTION AS NM,T.ID AS RID,T.COUNTRYID AS CID,ISNULL(T.MILLISECONDS,'')  AS MS  FROM (SELECT DISTINCT(REGION.AREANAME) AS DESCRIPTION,REGION.AREAID AS ID,COUNTRY.AREAID AS COUNTRYID, REGION.SYNCID,REGION.ACTIVE,REGION.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(REGION.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(REGION.CREATEDDATE AS DATE), REGION.CREATEDDATE) AS [MILLISECONDS] FROM   DBO.MASTAREA AS COUNTRY LEFT  JOIN      DBO.MASTAREA AS REGION ON COUNTRY.AREAID = REGION.UNDERID  LEFT  JOIN DBO.MASTAREA AS STATE ON REGION.AREAID =STATE.UNDERID LEFT  JOIN  DBO.MASTAREA AS DISTRICT ON STATE.AREAID = DISTRICT.UNDERID  LEFT  JOIN    DBO.MASTAREA AS CITY ON DISTRICT.AREAID = CITY.UNDERID LEFT  JOIN  DBO.MASTAREA AS AREA ON CITY.AREAID = AREA.UNDERID  LEFT JOIN MASTLINK ML ON AREA.AREAID=ML.LINKCODE WHERE ML.ECODE='SA' AND AREA.AREAID=" + minDate + " ) AS T ";
            }
            else
            {
                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                string MQry = "";
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                if (Convert.ToInt64(minDate) > 0)
                {
                    MQry = " WHERE T.MILLISECONDS >'" + minDate + "'";
                }

                //Query = "select top " + NoOfRec + " T.Description As Nm,T.Id As Rid,T.CountryId As Cid,T.Milliseconds As MS   from (SELECT DISTINCT(VG.regionName) as Description,VG.regionId as Id,VG.CountryID, Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] FROM ViewGeo VG LEFT JOIN MastLink ML ON VG.areaId=ML.LinkCode Left Join MastArea Ma On Vg.regionId=Ma.AreaId WHERE ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + " ) As T " + MQry + "";

                Query = "SELECT TOP " + NoOfRec + " T.DESCRIPTION AS NM,T.ID AS RID,T.COUNTRYID AS CID,ISNULL(T.MILLISECONDS,'') AS MS   FROM (SELECT DISTINCT(REGION.AREANAME) AS DESCRIPTION,REGION.AREAID AS ID,COUNTRY.AREAID AS COUNTRYID, REGION.SYNCID,REGION.ACTIVE,REGION.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(REGION.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(REGION.CREATEDDATE AS DATE), REGION.CREATEDDATE) AS [MILLISECONDS] FROM   DBO.MASTAREA AS COUNTRY LEFT  JOIN      DBO.MASTAREA AS REGION ON COUNTRY.AREAID = REGION.UNDERID  LEFT  JOIN DBO.MASTAREA AS STATE ON REGION.AREAID =STATE.UNDERID LEFT  JOIN  DBO.MASTAREA AS DISTRICT ON STATE.AREAID = DISTRICT.UNDERID  LEFT  JOIN    DBO.MASTAREA AS CITY ON DISTRICT.AREAID = CITY.UNDERID LEFT  JOIN  DBO.MASTAREA AS AREA ON CITY.AREAID = AREA.UNDERID  LEFT JOIN MASTLINK ML ON AREA.AREAID=ML.LINKCODE WHERE ML.ECODE='SA'  AND ML.PRIMCODE=" + ConPer_Id + " ) AS T " + MQry + "";

            }
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xRegion_TimeStamp> rst = new List<xRegion_TimeStamp>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xRegion_TimeStamp
            //        {
            //            NM = dt.Rows[i]["Nm"].ToString(),
            //            Rid = dt.Rows[i]["Rid"].ToString(),
            //            Cid = dt.Rows[i]["Cid"].ToString(),
            //            MS = dt.Rows[i]["MS"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetPartyType()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE T.MILLISECONDS>'" + minDate + "'";
            }

            Query = "SELECT T.ID AS ID,T.NAME AS NM,T.MILLISECONDS AS MS FROM (SELECT PARTYTYPEID AS ID,PARTYTYPENAME AS NAME,CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE) AS [MILLISECONDS] FROM PARTYTYPE) AS T " + MQry + "";
            //1970-01-01 05:30:00
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xPartytype> rst = new List<xPartytype>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xPartytype
            //        {
            //            Id = dt.Rows[i]["Id"].ToString(),
            //            Nm = dt.Rows[i]["Name"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetArea_TimeStampWise()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                //Query = "select Name, Id, Type_Id ,CityID,SyncId,Active,CreatedDate, Milliseconds from (SELECT DISTINCT  (VG.AreaName) As Name,VG.AreaId As Id,AreaType As [Type_Id],Vg.CityID,Ma.SyncId,Ma.Active,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds]  FROM MastLink ML INNER JOIN ViewGeo VG ON ML.LinkCode=VG.areaId Inner Join MastArea Ma On Vg.AreaId=Ma.AreaId WHERE vg.areaact=1 and ML.ECode='SA' AND vg.areaid=" + minDate + " ) as T order by CreatedDate ";

                Query = "SELECT NAME AS NM, ID AS ID, TYPE_ID ,CITYID AS CID,SYNCID,ACTIVE,CREATEDDATE, ISNULL(T.MILLISECONDS,'')  AS MS FROM (SELECT DISTINCT  (MA.AREANAME) AS NAME,MA.AREAID AS ID,MA.AREATYPE AS [TYPE_ID],MC.AREAID AS CITYID,MA.SYNCID,MA.ACTIVE,MA.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MA.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MA.CREATEDDATE AS DATE), MA.CREATEDDATE)  AS [MILLISECONDS]  FROM MASTLINK ML   LEFT JOIN MASTAREA MA ON ML.LINKCODE=MA.AREAID  LEFT JOIN MASTAREA MC ON MC.AREAID=MA.UNDERID   WHERE MA.ACTIVE=1 AND ML.ECODE='SA' AND MA.AREAID=" + minDate + " ) AS T ORDER BY CREATEDDATE ";
            }
            else
            {
                //DataAmt
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                string MQry = "";
                if (minDate == "-1")
                {

                }
                else if (Convert.ToInt64(minDate) > 0)
                {
                    MQry = " WHERE  T.[MILLISECONDS] > '" + minDate + "'";
                }
                //Query = "select top " + NoOfRec + " Name, Id, Type_Id ,CityID,SyncId,Active,CreatedDate, Milliseconds from (SELECT DISTINCT  (VG.AreaName) As Name,VG.AreaId As Id,AreaType As [Type_Id],Vg.CityID,Ma.SyncId,Ma.Active,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds]  FROM MastLink ML INNER JOIN ViewGeo VG ON ML.LinkCode=VG.areaId Inner Join MastArea Ma On Vg.AreaId=Ma.AreaId WHERE vg.areaact=1 and ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + " ) as T " + MQry + " order by CreatedDate ";


                Query = "SELECT TOP " + NoOfRec + " NAME AS NM, ID AS ID, TYPE_ID ,CITYID AS CID,SYNCID,ACTIVE,CREATEDDATE, MILLISECONDS AS MS FROM (SELECT DISTINCT  (MA.AREANAME) AS NAME,MA.AREAID AS ID,MA.AREATYPE AS [TYPE_ID],MC.AREAID AS CITYID,MA.SYNCID,MA.ACTIVE,MA.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MA.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MA.CREATEDDATE AS DATE), MA.CREATEDDATE)  AS [MILLISECONDS]  FROM MASTLINK ML   LEFT JOIN MASTAREA MA ON ML.LINKCODE=MA.AREAID  LEFT JOIN MASTAREA MC ON MC.AREAID=MA.UNDERID   WHERE MA.ACTIVE=1 AND ML.ECODE='SA'  AND ML.PRIMCODE=" + ConPer_Id + " ) AS T " + MQry + " ORDER BY CREATEDDATE ";

            }
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xArea> rst = new List<xArea>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xArea
            //        {
            //            Nm = dt.Rows[i]["Name"].ToString(),
            //            Id = dt.Rows[i]["Id"].ToString(),
            //            CID = dt.Rows[i]["CityID"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString(),
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();

        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetDistributors_TimeStampWise()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());


            string MQry = "";

            string query = "select * from mastenviro  ";
            DataTable dtenviro = DbConnectionDAL.GetDataTable(CommandType.Text, query);

            string flagdistributor = dtenviro.Rows[0]["areawisedistributor"].ToString();

            if (flagdistributor == "Y")
            {
                if (minDate.Contains("A"))
                {
                    minDate = minDate.TrimStart('A');
                    Query = "SELECT  PARTYID PID,PARTYNAME  + ' ( ' + DISTTYPE + ' ) ' as   PNM,ADDRESS1 ADD1, ADDRESS2 ADD2,PIN PIN,AREAID AID,EMAIL EM,MOBILE MO,INDID INDID,POTENTIAL,ACTIVE,BLOCKREASON,BLOCKDATE,BLOCKBY,REMARK RMK,PARTYDIST,LOGINCREATED,USERID,SYNCID SYNCID,LVL,UNDERID,CREATED_DATE,ISNULL(MILLISECONDS,'') MS,CREATED_USER_ID,DISPLAYNAME,BEATID,PARTYTYPE,CONTACTPERSON CTP,CSTNO CSTNO, VATTIN VATTIN,SERVICETAX SRTX,PANNO PANNO,CITYID CID,CREDITLIMIT CRLMT ,OUTSTANDING OS,PHONE PH,OPENORDER OPOR ,CREDITDAYS CRD,ANDROID_ID,SMID SMID, DISTRIBUTORNAME2, FAX,TELEX,DOA,DOB,CITYNAME,DISTTYPE,SD_ID FROM (SELECT MP.PARTYID,MP.PARTYNAME,MP.ADDRESS1,ISNULL(MP.ADDRESS2, '') AS ADDRESS2,ISNULL(MP.PIN, '') AS PIN,MP.AREAID,MP.EMAIL,MP.MOBILE,MP.INDID,MP.POTENTIAL,MP.ACTIVE,MP.BLOCKREASON,MP.BLOCKDATE,MP.BLOCKBY,ISNULL(MP.REMARK,'') AS REMARK,MP.PARTYDIST,MP.LOGINCREATED,MP.USERID,MP.SYNCID,MP.LVL,MP.UNDERID,MP.CREATED_DATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MP.CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MP.CREATED_DATE AS DATE), MP.CREATED_DATE) AS [MILLISECONDS],MP.CREATED_USER_ID,MP.DISPLAYNAME,MP.BEATID,MP.PARTYTYPE,ISNULL(MP.CONTACTPERSON,'' ) AS CONTACTPERSON,ISNULL(MP.CSTNO,'') AS CSTNO,ISNULL(MP.VATTIN,'') AS VATTIN, ISNULL(MP.SERVICETAX,'') AS SERVICETAX,ISNULL(MP.PANNO,'') AS PANNO,MP.CITYID,MP.CREDITLIMIT,MP.OUTSTANDING,MP.PHONE,MP.OPENORDER,MP.CREDITDAYS,MP.ANDROID_ID,MP.SMID,ISNULL(MP.DISTRIBUTORNAME2, '') AS DISTRIBUTORNAME2,ISNULL(MP.FAX,'') AS FAX,ISNULL(MP.TELEX,'') AS TELEX,MP.DOA,MP.DOB,MA.AREANAME AS CITYNAME,ISNULL(MD.TEXT,'') as DISTTYPE,(CASE WHEN ISNULL(MP.SD_ID,'') = -1 THEN '' ELSE ISNULL(MP.SD_ID,'') END ) AS SD_ID FROM MASTPARTY MP LEFT JOIN MASTDISTRIBUTORTYPE MD ON MD.VALUE=MP.DISTTYPE LEFT JOIN MASTAREA MA ON MP.CITYID=MA.AREAID  WHERE  MP.AREAID IN (SELECT LINKCODE FROM MASTLINK WHERE ECODE='SA' AND PRIMCODE=" + ConPer_Id + ") AND MP.PARTYDIST=1 AND MP.ACTIVE=1 AND MA.AREATYPE='CITY' ) AS T ORDER BY CREATED_DATE";
                }
                else
                {
                    double ticks = double.Parse(minDate);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    if (Convert.ToInt64(minDate) > 0)
                    {
                        MQry = " WHERE  T.[MILLISECONDS] > '" + minDate + "'";
                    }

                    Query = "SELECT TOP " + NoOfRec + " PARTYID PID,PARTYNAME  + ' ( ' + DISTTYPE + ' ) ' as   PNM,ADDRESS1 ADD1, ADDRESS2 ADD2,PIN PIN,AREAID AID,EMAIL EM,MOBILE MO,INDID INDID,POTENTIAL,ACTIVE,BLOCKREASON,BLOCKDATE,BLOCKBY,REMARK RMK,PARTYDIST,LOGINCREATED,USERID,SYNCID SYNCID,LVL,UNDERID,CREATED_DATE,ISNULL(MILLISECONDS,'')  MS,CREATED_USER_ID,DISPLAYNAME,BEATID,PARTYTYPE,CONTACTPERSON CTP,CSTNO CSTNO, VATTIN VATTIN,SERVICETAX SRTX,PANNO PANNO,CITYID CID,CREDITLIMIT CRLMT ,OUTSTANDING OS,PHONE PH,OPENORDER OPOR ,CREDITDAYS CRD,ANDROID_ID,SMID SMID, DISTRIBUTORNAME2, FAX,TELEX,DOA,DOB,CITYNAME,DISTTYPE,SD_ID FROM (SELECT MP.PARTYID,MP.PARTYNAME,MP.ADDRESS1,ISNULL(MP.ADDRESS2, '') AS ADDRESS2,ISNULL(MP.PIN, '') AS PIN,MP.AREAID,MP.EMAIL,MP.MOBILE,MP.INDID,MP.POTENTIAL,MP.ACTIVE,MP.BLOCKREASON,MP.BLOCKDATE,MP.BLOCKBY,ISNULL(MP.REMARK,'') AS REMARK,MP.PARTYDIST,MP.LOGINCREATED,MP.USERID,MP.SYNCID,MP.LVL,MP.UNDERID,MP.CREATED_DATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MP.CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MP.CREATED_DATE AS DATE), MP.CREATED_DATE) AS [MILLISECONDS],MP.CREATED_USER_ID,MP.DISPLAYNAME,MP.BEATID,MP.PARTYTYPE,ISNULL(MP.CONTACTPERSON,'' ) AS CONTACTPERSON,ISNULL(MP.CSTNO,'') AS CSTNO,ISNULL(MP.VATTIN,'') AS VATTIN, ISNULL(MP.SERVICETAX,'') AS SERVICETAX,ISNULL(MP.PANNO,'') AS PANNO,MP.CITYID,MP.CREDITLIMIT,MP.OUTSTANDING,MP.PHONE,MP.OPENORDER,MP.CREDITDAYS,MP.ANDROID_ID,MP.SMID,ISNULL(MP.DISTRIBUTORNAME2, '') AS DISTRIBUTORNAME2,ISNULL(MP.FAX,'') AS FAX,ISNULL(MP.TELEX,'') AS TELEX,MP.DOA,MP.DOB,MA.AREANAME AS CITYNAME,ISNULL(MD.TEXT,'') as DISTTYPE,(CASE WHEN ISNULL(MP.SD_ID,'') = -1 THEN '' ELSE ISNULL(MP.SD_ID,'') END ) AS SD_ID FROM MASTPARTY MP LEFT JOIN MASTDISTRIBUTORTYPE MD ON MD.VALUE=MP.DISTTYPE LEFT JOIN MASTAREA MA ON MP.CITYID=MA.AREAID  WHERE  MP.AREAID IN (SELECT LINKCODE FROM MASTLINK WHERE ECODE='SA' AND PRIMCODE=" + ConPer_Id + ") AND MP.PARTYDIST=1 AND MP.ACTIVE=1 AND MA.AREATYPE='CITY' ) AS T " + MQry + " ORDER BY CREATED_DATE";
                }
            }
            else
            {
                if (minDate.Contains("A"))
                {
                    minDate = minDate.TrimStart('A');
                    Query = "SELECT * FROM (SELECT MP.PARTYID PID  ,MP.PARTYNAME  + ' ( ' + DISTTYPE + ' ) ' as  PNM ,MP.ADDRESS1 ADD1 ,ISNULL(MP.ADDRESS2, '') AS ADD2,ISNULL(MP.PIN, '') AS PIN ,MP.AREAID AID ,MP.EMAIL EM ,MP.MOBILE MO ,MP.INDID INDID ,MP.POTENTIAL,MP.ACTIVE,MP.BLOCKREASON,MP.BLOCKDATE,MP.BLOCKBY,ISNULL(MP.REMARK,'') AS RMK ,MP.PARTYDIST,MP.LOGINCREATED,MP.USERID,MP.SYNCID SYNCID ,MP.LVL,MP.UNDERID,MP.CREATED_DATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MP.CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MP.CREATED_DATE AS DATE), MP.CREATED_DATE) AS MS ,MP.CREATED_USER_ID,MP.DISPLAYNAME,MP.BEATID,MP.PARTYTYPE,ISNULL(MP.CONTACTPERSON,'' ) AS CTP ,ISNULL(MP.CSTNO,'') AS CSTNO ,ISNULL(MP.VATTIN,'') AS VATTIN , ISNULL(MP.SERVICETAX,'') AS SRTX ,ISNULL(MP.PANNO,'') AS PANNO,MP.CITYID CID ,MP.CREDITLIMIT CRLMT ,MP.OUTSTANDING OS ,MP.PHONE PH ,MP.OPENORDER OPOR ,MP.CREDITDAYS CRD ,MP.ANDROID_ID,MP.SMID SMID ,ISNULL(MP.DISTRIBUTORNAME2, '') AS DISTRIBUTORNAME2,ISNULL(MP.FAX,'') AS FAX,ISNULL(MP.TELEX,'') AS TELEX,MP.DOA,MP.DOB,MA.AREANAME AS CITYNAME,ISNULL(MD.TEXT,'') as DISTTYPE,(CASE WHEN ISNULL(MP.SD_ID,'') = -1 THEN '' ELSE ISNULL(MP.SD_ID,'') END ) AS SD_ID   FROM MASTPARTY MP LEFT JOIN MASTDISTRIBUTORTYPE MD ON MD.VALUE=MP.DISTTYPE LEFT JOIN MASTAREA MA ON MP.CITYID=MA.AREAID  WHERE MP.CITYID IN (SELECT DISTINCT UNDERID FROM MASTAREA WHERE AREATYPE='AREA' AND  AREAID IN (" + minDate + ")) AND MP.PARTYDIST=1 AND MP.ACTIVE=1 AND MA.AREATYPE='CITY'  AND SMID IN ((SELECT MAINGRP FROM MASTSALESREPGRP WHERE SMID IN (" + ConPer_Id + ") UNION SELECT SMID FROM MASTSALESREPGRP WHERE  MAINGRP IN (" + ConPer_Id + ")))) AS T   ORDER BY T.CREATED_DATE ";
                }
                else
                {
                    double ticks = double.Parse(minDate);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    if (Convert.ToInt64(minDate) > 0)
                    {
                        MQry = " WHERE  T.MS > '" + minDate + "'";
                    }
                    //Query = "SELECT top " + NoOfRec + " * from (SELECT mp.Partyid,mp.PartyName,Mp.Address1,isnull(mp.Address2, '') as Address2,isnull(mp.Pin, '') as Pin,mp.Areaid,mp.Email,mp.Mobile,Mp.Indid,mp.Potential,mp.Active,mp.blockreason,mp.Blockdate,mp.BlockBy,isnull(Mp.Remark,'') as Remark,mp.Partydist,mp.Logincreated,mp.Userid,mp.SyncId,mp.Lvl,mp.Underid,mp.Created_date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(mp.Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(mp.Created_date AS date), mp.Created_date) AS [Milliseconds],mp.Created_User_id,mp.DisplayName,mp.beatid,mp.Partytype,isnull(mp.Contactperson,'' ) as Contactperson,isnull(mp.CSTNo,'') as CSTNo,isnull(mp.Vattin,'') as Vattin, isnull(mp.Servicetax,'') as Servicetax,isnull(mp.Panno,'') as Panno,mp.Cityid,mp.CreditLimit,mp.Outstanding,mp.Phone,mp.OpenOrder,mp.Creditdays,mp.Android_Id,mp.SMID,isnull(mp.DistributorName2, '') as DistributorName2,isnull(mp.Fax,'') as Fax,isnull(mp.telex,'') as telex,mp.DOA,mp.DOB,ma.AreaName as CityName FROM MastParty mp left join MastArea ma on mp.CityId=ma.AreaID  WHERE mp.CityId IN (SELECT DISTINCT UnderId FROM MastArea WHERE AreaType='Area' AND  AreaId IN (SELECT LinkCode FROM MastLink WHERE ECode='SA' AND PrimCode=" + ConPer_Id + ")) AND mp.partydist=1 and mp.Active=1 and ma.areatype='City'  and SMID in ((select maingrp from mastsalesrepgrp where SMID in (" + ConPer_Id + ") union SELECT SMID FROM mastsalesrepgrp WHERE  maingrp in (" + ConPer_Id + ")))) As T  " + MQry + " order by T.Created_date ";
                    Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT MP.PARTYID PID,MP.PARTYNAME  + ' ( ' + DISTTYPE + ' ) ' as   PNM,MP.ADDRESS1 ADD1,ISNULL(MP.ADDRESS2, '') AS ADD2,ISNULL(MP.PIN, '') AS PIN,MP.AREAID AS AID,MP.EMAIL EM,MP.MOBILE MO,MP.INDID INDID,MP.POTENTIAL,MP.ACTIVE,MP.BLOCKREASON,MP.BLOCKDATE,MP.BLOCKBY,ISNULL(MP.REMARK,'') AS RMK,MP.PARTYDIST,MP.LOGINCREATED,MP.USERID,MP.SYNCID SYNCID,MP.LVL,MP.UNDERID,MP.CREATED_DATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MP.CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MP.CREATED_DATE AS DATE), MP.CREATED_DATE) AS MS,MP.CREATED_USER_ID,MP.DISPLAYNAME,MP.BEATID,MP.PARTYTYPE,ISNULL(MP.CONTACTPERSON,'' ) AS CTP,ISNULL(MP.CSTNO,'') AS CSTNO,ISNULL(MP.VATTIN,'') AS VATTIN, ISNULL(MP.SERVICETAX,'') AS SRTX,ISNULL(MP.PANNO,'') AS PANNO,MP.CITYID CID,MP.CREDITLIMIT CRLMT,MP.OUTSTANDING OS,MP.PHONE PH,MP.OPENORDER OPOR,MP.CREDITDAYS CRD,MP.ANDROID_ID,MP.SMID SMID,ISNULL(MP.DISTRIBUTORNAME2, '') AS DISTRIBUTORNAME2,ISNULL(MP.FAX,'') AS FAX,ISNULL(MP.TELEX,'') AS TELEX,MP.DOA,MP.DOB,'' AS CITYNAME,ISNULL(MD.TEXT,'') as DISTTYPE,(CASE WHEN ISNULL(MP.SD_ID,'') = -1 THEN '' ELSE ISNULL(MP.SD_ID,'') END ) AS SD_ID FROM MASTPARTY MP LEFT JOIN MASTDISTRIBUTORTYPE MD ON MD.VALUE=MP.DISTTYPE WHERE MP.PARTYDIST=1 AND MP.ACTIVE=1 AND MP.SMID IN (SELECT SMID FROM MASTSALESREPGRP  WHERE MAINGRP=" + ConPer_Id + ") ) AS T  " + MQry + " ORDER BY T.CREATED_DATE ";
                }
            }

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xDistributor> rst = new List<xDistributor>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xDistributor
            //        {
            //            Pid = dt.Rows[i]["PartyId"].ToString(),
            //            Pnm = dt.Rows[i]["PartyName"].ToString(),
            //            Add1 = dt.Rows[i]["Address1"].ToString(),
            //            Add2 = dt.Rows[i]["Address2"].ToString(),
            //            Pin = dt.Rows[i]["Pin"].ToString(),
            //            Aid = dt.Rows[i]["AreaId"].ToString(),
            //            Em = dt.Rows[i]["Email"].ToString(),
            //            Mo = dt.Rows[i]["Mobile"].ToString(),
            //            Indid = dt.Rows[i]["Indid"].ToString(),
            //            Rmk = dt.Rows[i]["Remark"].ToString(),
            //            Ctp = dt.Rows[i]["ContactPerson"].ToString(),
            //            CSTNo = dt.Rows[i]["CSTNo"].ToString(),
            //            Vattin = dt.Rows[i]["Vattin"].ToString(),
            //            SrTx = dt.Rows[i]["ServiceTax"].ToString(),
            //            Panno = dt.Rows[i]["Panno"].ToString(),
            //            Cid = dt.Rows[i]["CityId"].ToString(),
            //            Crlmt = dt.Rows[i]["CreditLimit"].ToString(),
            //            OS = dt.Rows[i]["outstanding"].ToString(),
            //            Ph = dt.Rows[i]["Phone"].ToString(),
            //            Opor = dt.Rows[i]["OpenOrder"].ToString(),
            //            Crd = dt.Rows[i]["Creditdays"].ToString(),
            //            SMID = dt.Rows[i]["SMID"].ToString(),
            //            SyncId = dt.Rows[i]["SyncId"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString(),

            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }





        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetScheme_TimeStampWise()
        {
            string MQry = "";

            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE T.MS >'" + minDate + "'";
            }
            Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT ID ID,NAME NM,ACTIVE,SYNCID,CREATEDDATE,ISNULL((CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE),'') AS MS FROM MASTSCHEME ) AS T " + MQry + " ORDER BY T.CREATEDDATE";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xScheme_timeStamp> rst = new List<xScheme_timeStamp>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xScheme_timeStamp
            //        {
            //            Id = dt.Rows[i]["Id"].ToString(),
            //            Nm = dt.Rows[i]["Name"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }




        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetBeats_TimeStampWise()
        {
            //var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //   DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;


            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                Query = "SELECT DISTINCT  DESCRIPTION AS NM, ID AS BID,AREAID AS AID,SYNCID,ACTIVE,CREATEDDATE,ISNULL(T.MILLISECONDS,'')  AS MS  FROM (SELECT DISTINCT (VG.AREANAME) AS DESCRIPTION,VG.AREAID AS ID,AREA.AREAID,VG.SYNCID,VG.ACTIVE,VG.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(VG.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(VG.CREATEDDATE AS DATE), VG.CREATEDDATE) AS [MILLISECONDS] FROM MASTLINK ML LEFT  JOIN MASTAREA AS AREA ON ML.LINKCODE = AREA.AREAID AND AREA.AREATYPE = 'AREA' LEFT  JOIN MASTAREA AS VG ON AREA.AREAID = VG.UNDERID  WHERE VG.ACTIVE=1 AND ML.ECODE='SA' AND AREA.AREAID=" + Convert.ToInt32(minDate) + " ) AS T  order by Createddate";
            }
            else
            {
                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");

                string MQry = "";
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                if (Convert.ToInt64(minDate) > 0)
                {
                    MQry = " WHERE  T.[MILLISECONDS] > '" + minDate + "'";
                }
                Query = "SELECT DISTINCT TOP " + NoOfRec + " DESCRIPTION AS NM, ID AS BID,AREAID AS AID,SYNCID,ACTIVE,CREATEDDATE,ISNULL(T.MILLISECONDS,'')  AS MS FROM (SELECT DISTINCT (VG.AREANAME) AS DESCRIPTION,VG.AREAID AS ID,AREA.AREAID,VG.SYNCID,VG.ACTIVE,VG.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(VG.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(VG.CREATEDDATE AS DATE), VG.CREATEDDATE) AS [MILLISECONDS] FROM MASTLINK ML LEFT  JOIN MASTAREA AS AREA ON ML.LINKCODE = AREA.AREAID AND AREA.AREATYPE = 'AREA' LEFT  JOIN MASTAREA AS VG ON AREA.AREAID = VG.UNDERID  WHERE VG.ACTIVE=1 AND ML.ECODE='SA' AND ML.PRIMCODE=" + ConPer_Id + ") AS T " + MQry + " ORDER BY CREATEDDATE";
            }

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xBeats> rst = new List<xBeats>();
            //for (int i = 0; i < dt.Rows.Count; i++)
            //{
            //    rst.Add(
            //        new xBeats
            //        {
            //            NM = dt.Rows[i]["Description"].ToString(),
            //            BID = dt.Rows[i]["Id"].ToString(),
            //            AId = dt.Rows[i]["AreaId"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString(),
            //        }
            //    );
            //}
            bodyStream.Dispose();
            //dt.Dispose();
            //return new JavaScriptSerializer().Serialize(rst);
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetCities_TimeStampWise()
        {

            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            //string ConPer_Id = OBJRESPONSE.body[0].CONPER_ID;
            //string minDate = OBJRESPONSE.body[0].MINDATE;


            if (OBJRESPONSE.BODY[0].MINDATE.Contains("A"))
            {
                OBJRESPONSE.BODY[0].MINDATE = OBJRESPONSE.BODY[0].MINDATE.TrimStart('A');
                Query = "SELECT DISTINCT  DESCRIPTION NM, ID CID,STATEID SID,DISTRICTID DID,SYNCID,ACTIVE,CREATEDDATE,ISNULL(T.MILLISECONDS,'')  MS  FROM (SELECT DISTINCT (MC.AREANAME) AS DESCRIPTION,MC.AREAID  ID,MS.AREAID STATEID,MD.AREAID DISTRICTID,MC.SYNCID,MC.ACTIVE,MC.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MC.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MC.CREATEDDATE AS DATE), MC.CREATEDDATE) AS [MILLISECONDS] FROM  MASTAREA VG LEFT JOIN MASTLINK ML ON VG.AREAID=ML.LINKCODE   LEFT JOIN MASTAREA MC ON VG.UNDERID=MC.AREAID   LEFT JOIN MASTAREA MD ON MC.UNDERID=MD.AREAID     LEFT JOIN MASTAREA MS ON MD.UNDERID=MS.AREAID  WHERE MC.ACTIVE=1 AND ML.ECODE='SA' AND VG.AREAID=" + OBJRESPONSE.BODY[0].MINDATE + " ) AS T  ORDER BY CREATEDDATE ";
            }
            else
            {
                double ticks = double.Parse(OBJRESPONSE.BODY[0].MINDATE);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                string MQry = "";
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                if (Convert.ToInt64(OBJRESPONSE.BODY[0].MINDATE) > 0)
                {
                    MQry = " where  T.[Milliseconds] > '" + OBJRESPONSE.BODY[0].MINDATE + "'";
                }
                Query = "SELECT DISTINCT  TOP " + NoOfRec + " DESCRIPTION NM, ID CID,STATEID SID,DISTRICTID DID,SYNCID,ACTIVE,CREATEDDATE,ISNULL(T.MILLISECONDS,'')  MS FROM (SELECT DISTINCT (MC.AREANAME) AS DESCRIPTION,MC.AREAID  ID,MS.AREAID STATEID,MD.AREAID DISTRICTID,MC.SYNCID,MC.ACTIVE,MC.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MC.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MC.CREATEDDATE AS DATE), MC.CREATEDDATE) AS [MILLISECONDS] FROM  MASTAREA VG LEFT JOIN MASTLINK ML ON VG.AREAID=ML.LINKCODE   LEFT JOIN MASTAREA MC ON VG.UNDERID=MC.AREAID   LEFT JOIN MASTAREA MD ON MC.UNDERID=MD.AREAID     LEFT JOIN MASTAREA MS ON MD.UNDERID=MS.AREAID  WHERE MC.ACTIVE=1 AND ML.ECODE='SA' AND ML.PRIMCODE=" + OBJRESPONSE.BODY[0].CONPER_ID + ") As T " + MQry + " ORDER BY CREATEDDATE ";
            }
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xCities> rst = new List<xCities>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xCities
            //        {
            //            NM = dt.Rows[i]["Description"].ToString(),
            //            Cid = dt.Rows[i]["Id"].ToString(),
            //            Did = dt.Rows[i]["DistrictID"].ToString(),
            //            SId = dt.Rows[i]["stateid"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            bodyStream.Dispose();

            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();

        }
        //public class xFaildVisitRemark
        //{
        //    [DataMember]
        //    public string ID { get; set; }
        //    [DataMember]
        //    public string FvName { get; set; }
        //    [DataMember]
        //    public string MS { get; set; }

        //}

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetFaildVisitRemark_TimeStampWise()
        {

            string MQry = "";

            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //  DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = OBJRESPONSE.BODY[0].MINDATE;


            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where T.MS >'" + minDate + "'";
            }

            Query = "SELECT TOP " + NoOfRec + " * FROM ( SELECT FVID AS ID,FVNAME,ACTIVE,SYNCID,CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE) AS MS  FROM MASTFAILEDVISITREMARK WHERE ACTIVE=1 ) AS T " + MQry + "";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xFaildVisitRemark> rst = new List<xFaildVisitRemark>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xFaildVisitRemark
            //        {
            //            ID = dt.Rows[i]["ID"].ToString(),
            //            FvName = dt.Rows[i]["FvName"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }
        [DataContract]
        public class xPartiesNewLatLongimages
        {
            [DataMember]
            public string IMGURL { get; set; }
        }

        [DataContract]
        public class xPartiesNewLatLong
        {
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string ID { get; set; }
            [DataMember]
            public string Ad { get; set; }
            [DataMember]
            public string Bd { get; set; }
            [DataMember]
            public string PCd { get; set; }
            [DataMember]
            public string Cp { get; set; }
            [DataMember]
            public string Nm { get; set; }
            [DataMember]
            public string Ind { get; set; }
            [DataMember]
            public string DsId { get; set; }
            [DataMember]

            public string Ad1 { get; set; }
            [DataMember]
            public string Ad2 { get; set; }
            [DataMember]
            public string Pi { get; set; }
            [DataMember]
            public string Ct { get; set; }
            [DataMember]
            public string M { get; set; }
            [DataMember]
            public string E { get; set; }
            [DataMember]
            public string Pl { get; set; }
            [DataMember]
            public string blk { get; set; }
            [DataMember]
            public string CST { get; set; }
            [DataMember]
            public string VTn { get; set; }
            [DataMember]
            public string STNo { get; set; }
            [DataMember]
            public string Brzn { get; set; }
            [DataMember]
            public string Bdt { get; set; }
            [DataMember]
            public string Bby { get; set; }
            [DataMember]
            public string At { get; set; }
            [DataMember]
            public string R { get; set; }
            [DataMember]
            public string PAN { get; set; }
            [DataMember]
            public string phoneNo { get; set; }
            [DataMember]
            public string CreatedBy { get; set; }
            [DataMember]
            public string DA { get; set; }
            [DataMember]
            public string DB { get; set; }
            [DataMember]
            public string androidid { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string LatlngTime { get; set; }
            [DataMember]
            public string Creditlimit { get; set; }
            [DataMember]
            public string Outstanding { get; set; }
            [DataMember]
            public string party_image { get; set; }
            [DataMember]
            public string sync_id { get; set; }

            [DataMember]
            public string Createduserid { get; set; }


            [DataMember]
            public string AreaName { get; set; }


            [DataMember]
            public string BeatName { get; set; }


            [DataMember]
            public string CityName { get; set; }

            [DataMember]
            public string IndName { get; set; }

            [DataMember]
            public string ParttypeName { get; set; }


            [DataMember]
            public string DistributorName { get; set; }





            [DataMember]
            public bool Isblock { get; set; }

            [DataMember]
            public int AppBlockby { get; set; }
            [DataMember]
            public string AppBlockRemark { get; set; }
            [DataMember]
            public string AppBlockStatus { get; set; }
            [DataMember]
            public int Appbysmid { get; set; }
            [DataMember]
            public string AppStatus { get; set; }

            [DataMember]
            public string AppRemark { get; set; }
            [DataMember]
            public int Appby { get; set; }



            [DataMember]
            public string totalorderQty { get; set; }
            [DataMember]
            public string totalorderValue { get; set; }
            [DataMember]
            public string Avgorderqty { get; set; }
            [DataMember]
            public string Avgordervalue { get; set; }

            [DataMember]
            public string LastVisit { get; set; }
            [DataMember]
            public string LastProductivecall { get; set; }
            [DataMember]
            public string Linepercall { get; set; }
            [DataMember]
            public string PartyNote { get; set; }
            //[DataMember]
            //public List<xPartiesNewLatLongimages> imgpaths { get; set; }

        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JsDeletePartyImage(string id)
        {
            string msg = "";
            try
            {
                string qry = "delete from MastPartyImage where Id= " + id + "";
                if (DAL.DbConnectionDAL.ExecuteQuery(qry) > 0)
                {
                    //qry = "delete from TransComplaintimages  where docid= '" + docid + "'";
                    //DAL.DbConnectionDAL.ExecuteQuery(qry);
                    msg = "Record Deleted Successfully";
                }
                else
                {
                    msg = "Record Is Not Deleted";
                }

            }
            catch (Exception ex)
            {
                ex.ToString();
                msg = "Record Is Not Deleted";
            }

            finally
            {
                Context.Response.Write(JsonConvert.SerializeObject(msg));
            }
        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetParties_TimeStampWiseLatLongAdd()
        {
            string path = "";

            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;


            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();


            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                Query = "SELECT  *,MSR.SMNAME AS CB FROM(SELECT ISNULL(ANDROID_ID,PARTYID) AS ANDROIDID,CREATED_USER_ID,PARTYID AS ID,AREAID AS AD,BEATID AS BD,PARTYTYPE AS PCD,PARTYNAME AS NM,INDID AS IND,P.UNDERID AS DSID,PHONE PHONENO,PARTYTYPE AS TYPE_ID,CONTACTPERSON CP ,ISNULL(ADDRESS1,'') AS AD1,ISNULL(ADDRESS2,'') AS AD2,PIN PI,(SELECT UNDERID FROM MASTAREA WHERE AREAID=P.AREAID) AS CT,ISNULL(MOBILE,'') AS M,ISNULL(EMAIL,'') AS E,ISNULL(POTENTIAL,0) AS PL,(CASE WHEN ISNULL(ACTIVE,'') =1 THEN 'True' ELSE 'False' END) AS BLK,ISNULL(CSTNO,'') AS CST_NO,ISNULL(VATTIN,'') AS VTN,ISNULL(SERVICETAX,'') AS STNO,CREATED_DATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MS,ISNULL(BLOCKREASON,'') AS BRZN,ISNULL(CONVERT(VARCHAR,[BLOCKDATE],103),'') AS BDT,ISNULL(BLOCKBY,'') AS BBY,(CASE WHEN ISNULL(ACTIVE,'') =1 THEN 'True' ELSE 'False' END) AT,ISNULL(REMARK,'') AS R,ISNULL(PANNO,'') AS PAN,Isnull(CREDITLIMIT,0) CREDITLIMIT,Isnull(OUTSTANDING,0) OUTSTANDING,Isnull(REPLACE(CONVERT(NVARCHAR, DOA, 106), ' ', '/'),'') AS DA,Isnull(REPLACE(CONVERT(NVARCHAR, DOB, 106), ' ', '/'),'') AS DB,(CASE WHEN ISNULL(IMGURL,'')<>'' THEN 'HTTP://' + '" + host + "' + REPLACE(IMGURL,'~','') ELSE '' END)  AS   PARTY_IMAGE,ISNULL(GSTINNO,'') AS CST,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLNGTIME,Isnull(SYNCID,'') SYNC_ID  FROM [MASTPARTY]P WHERE PARTYDIST=0 AND ACTIVE=1 AND AREAID IN (" + minDate + ")) AS T  LEFT JOIN MASTSALESREP MSR ON T.CREATED_USER_ID =MSR.USERID ORDER BY T.CREATED_DATE ";
            }
            else
            {
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                string MQry = "";


                if (Convert.ToInt64(minDate) > 0)
                {
                    // MQry = " and Created_date >='" + minDate1 + "'";
                    MQry = " WHERE  T.MS >'" + minDate + "'";
                }

                Query = "SELECT TOP " + NoOfRec + " *,MSR.SMNAME AS CREATEDBY FROM(SELECT ISNULL(ANDROID_ID,PARTYID) AS ANDROIDID,CREATED_USER_ID,PARTYID AS ID,AREAID AS AD,BEATID AS BD,PARTYTYPE AS PCD,PARTYNAME AS NM,INDID AS IND,P.UNDERID AS DSID,PHONE PHONENO,PARTYTYPE AS TYPE_ID,CONTACTPERSON CP ,ISNULL(ADDRESS1,'') AS AD1,ISNULL(ADDRESS2,'') AS AD2,PIN PI,(SELECT UNDERID FROM MASTAREA WHERE AREAID=P.AREAID) AS CT,ISNULL(MOBILE,'') AS M,ISNULL(EMAIL,'') AS E,ISNULL(POTENTIAL,0) AS PL,(CASE WHEN ISNULL(ACTIVE,'') =1 THEN 'True' ELSE 'False' END) AS BLK,ISNULL(CSTNO,'') AS CST_NO,ISNULL(VATTIN,'') AS VTN,ISNULL(SERVICETAX,'') AS STNO,CREATED_DATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MS,ISNULL(BLOCKREASON,'') AS BRZN,ISNULL(CONVERT(VARCHAR,[BLOCKDATE],103),'') AS BDT,ISNULL(BLOCKBY,'') AS BBY,(CASE WHEN ISNULL(ACTIVE,'') =1 THEN 'True' ELSE 'False' END) AT,ISNULL(REMARK,'') AS R,ISNULL(PANNO,'') AS PAN,Isnull(CREDITLIMIT,0) CREDITLIMIT,Isnull(OUTSTANDING,0) OUTSTANDING,Isnull(REPLACE(CONVERT(NVARCHAR, DOA, 106), ' ', '/'),'') AS DA,Isnull(REPLACE(CONVERT(NVARCHAR, DOB, 106), ' ', '/'),'') AS DB,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) As   PARTY_IMAGE,ISNULL(GSTINNO,'') AS CST,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLNGTIME,Isnull(SYNCID,'') SYNC_ID FROM [MASTPARTY]P WHERE PARTYDIST=0 AND ACTIVE=1 AND AREAID IN (SELECT LINKCODE FROM MASTLINK WHERE PRIMCODE =" + ConPer_Id + " AND ECODE='SA')) AS T LEFT JOIN MASTSALESREP MSR ON T.CREATED_USER_ID =MSR.USERID  " + MQry + "  ORDER BY T.CREATED_DATE ";
            }

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xPartiesNewLatLong> rst = new List<xPartiesNewLatLong>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    string IMGURL = "";
            //    if (dt.Rows[i]["IMGURL"].ToString() != "")
            //    {
            //        IMGURL = "http://" + host + (dt.Rows[i]["IMGURL"].ToString()).Replace(@"~", string.Empty);
            //    }
            //    rst.Add(
            //        new xPartiesNewLatLong
            //        {
            //            ID = dt.Rows[i]["Id"].ToString(),
            //            Ad = dt.Rows[i]["Area_Id"].ToString(),
            //            Bd = dt.Rows[i]["Beat_Id"].ToString(),
            //            PCd = dt.Rows[i]["PartyType"].ToString(),
            //            Nm = dt.Rows[i]["Name"].ToString(),
            //            Cp = dt.Rows[i]["ContactPerson"].ToString(),
            //            Ind = dt.Rows[i]["Industry_Id"].ToString(),
            //            DsId = dt.Rows[i]["DistId"].ToString(),
            //            Ad1 = dt.Rows[i]["Add1"].ToString(),
            //            Ad2 = dt.Rows[i]["Add2"].ToString(),
            //            Pi = dt.Rows[i]["Pin"].ToString(),
            //            Ct = dt.Rows[i]["CtyCodeP1"].ToString(),
            //            M = dt.Rows[i]["Mobile1"].ToString(),
            //            E = dt.Rows[i]["Email1"].ToString(),
            //            Pl = dt.Rows[i]["Potential"].ToString(),
            //            blk = dt.Rows[i]["IsBlocked"].ToString(),
            //            CST = dt.Rows[i]["GSTINNo"].ToString(),
            //            VTn = dt.Rows[i]["VatTin_No"].ToString(),
            //            STNo = dt.Rows[i]["ServiceTaxReg_No"].ToString(),
            //            Brzn = dt.Rows[i]["BlockedReason"].ToString(),
            //            Bdt = dt.Rows[i]["Block_Date"].ToString(),
            //            Bby = dt.Rows[i]["BlockedBy"].ToString(),
            //            At = dt.Rows[i]["Active"].ToString(),
            //            R = dt.Rows[i]["Remark"].ToString(),
            //            PAN = dt.Rows[i]["PANNo"].ToString(),
            //            phoneNo = dt.Rows[i]["phone"].ToString(),
            //            DA = dt.Rows[i]["DOA"].ToString(),
            //            DB = dt.Rows[i]["DOB"].ToString(),
            //            CreatedBy = dt.Rows[i]["cb"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString(),
            //            androidid = dt.Rows[i]["androidid"].ToString(),
            //            Longitude = dt.Rows[i]["longitude"].ToString(),
            //            Latitude = dt.Rows[i]["latitude"].ToString(),
            //            LatlngTime = dt.Rows[i]["lat_long_datetime"].ToString(),
            //            Creditlimit = dt.Rows[i]["Creditlimit"].ToString(),
            //            Outstanding = dt.Rows[i]["Outstanding"].ToString(),
            //            party_image = IMGURL,
            //            sync_id = dt.Rows[i]["SyncId"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();

            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }








        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetIndustry_TimeStampWise()
        {
            //var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);


            string minDate = OBJRESPONSE.BODY[0].MINDATE;


            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");

            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE T.MS>'" + minDate + "'";
            }
            Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT INDID AS [ID],REPLACE(REPLACE(REPLACE([INDNAME],'&','AND'),'>',' '),'<',' ') AS NM,'' AS [INDUSTRYTYPE],SYNCID,ACTIVE,CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE) AS MS  FROM MASTINDUSTRY WHERE ACTIVE=1) AS T " + MQry + " ORDER BY T.CREATEDDATE ";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xIndustry> rst = new List<xIndustry>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xIndustry
            //        {
            //            Id = dt.Rows[i]["Id"].ToString(),
            //            Nm = dt.Rows[i]["Description"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSAppApp_GetProducts()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            //  string minDate = OBJRESPONSE.body[0].MINDATE;


            double ticks = double.Parse(OBJRESPONSE.BODY[0].MINDATE);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");

            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(OBJRESPONSE.BODY[0].MINDATE) > 0)
            { MQry = " WHERE  T.[MILLISECONDS] >='" + OBJRESPONSE.BODY[0].MINDATE + "'"; }

            Query = "SELECT  TOP " + NoOfRec + "  ITEMID ITEMID,REPLACE(REPLACE(REPLACE([ITEMNAME],'&','AND'),'>',' '),'<',' ') AS ITEMNAME,UNIT,(CASE WHEN ISNULL(ACTIVE,'') =1 THEN 'True' ELSE 'False' END) ACTIVE,ISNULL(STDPACK,0) STDPK,ISNULL(MRP,0) MRP,PRODUCTGROUPID,PRODUCTGROUPNAME,SEGMENTID,SEGMENTNAME,ISNULL(DIVISIONCODE,'') DIVISIONCODE,CREATEDDATE, ISNULL(MILLISECONDS,'')  MILISECOND,ISNULL(DP,0) DP,ISNULL(GST,0) GST ,ISNULL(DISCOUNT,0) DISCOUNT,ISNULL(RP,0) RP,ISNULL(CENTRALTAXPER,0) CGSTPER,ISNULL(STATETAXPER,0) SGSTPER,ISNULL(INTEGRATEDTAXPER,0) IGSTPER,ISNULL(PRIMARYUNIT,'') PRIMARYUNIT,ISNULL(SECONDARYUNIT,'') SECONDARYUNIT,ISNULL(PRIMARYUNITFACTOR,0) PRIMARYUNITFACTOR,ISNULL(SECONDARYUNITFACTOR,0) SECONADYUNITFACTOR,ISNULL(MOQ,0) MOQ,(CASE WHEN ISNULL(PROMOTED,'False') =1 THEN 'True' ELSE 'False' END) PROMOTED FROM (SELECT MI.ITEMID,REPLACE(REPLACE(REPLACE(MI.[ITEMNAME],'&','AND'),'>',' '),'<',' ') AS ITEMNAME,MI.UNIT, MI.ACTIVE,MI.STDPACK,MI.MRP,MI1.ITEMID AS PRODUCTGROUPID,MI1.ITEMNAME AS PRODUCTGROUPNAME,MS.ID AS SEGMENTID,MS.NAME AS SEGMENTNAME,MI.DIVISIONCODE,MI.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MI.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MI.CREATEDDATE AS DATE), MI.CREATEDDATE) AS[MILLISECONDS],MI.DP,MI.GST,MI.DISCOUNT,MI.RP,MI.CENTRALTAXPER, MI.STATETAXPER, MI.INTEGRATEDTAXPER, MI.PRIMARYUNIT, MI.SECONDARYUNIT, MI.PRIMARYUNITFACTOR, MI.SECONDARYUNITFACTOR, MI.MOQ, MI.PROMOTED FROM MASTITEM MI LEFT JOIN MASTITEM MI1 ON MI.UNDERID=MI1.ITEMID LEFT JOIN MASTITEMSEGMENT MS ON MS.ID=MI.SEGMENTID WHERE MI.ITEMTYPE='ITEM'  AND MI.ITEMNAME NOT LIKE '%*') AS T  " + MQry + "  ORDER BY T.CREATEDDATE ";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xProductsList> rst = new List<xProductsList>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xProductsList
            //        {
            //            itemid = dt.Rows[i]["ItemId"].ToString(),
            //            itemname = dt.Rows[i]["ItemName"].ToString(),
            //            Unit = dt.Rows[i]["Unit"].ToString(),
            //            StdPk = dt.Rows[i]["StdPack"].ToString(),
            //            MRP = dt.Rows[i]["MRP"].ToString(),
            //            productgroupid = dt.Rows[i]["PGroupId"].ToString(),
            //            productgroupname = dt.Rows[i]["PGroupName"].ToString(),
            //            SegmentId = dt.Rows[i]["SegmentId"].ToString(),
            //            segmentname = dt.Rows[i]["SegmentName"].ToString(),
            //            milisecond = dt.Rows[i]["Milliseconds"].ToString(),
            //            divisionCode = dt.Rows[i]["divisioncode"].ToString(),
            //            DP = dt.Rows[i]["DP"].ToString(),
            //            Discount = dt.Rows[i]["discount"].ToString(),
            //            GST = dt.Rows[i]["GST"].ToString(),
            //            Active = dt.Rows[i]["Active"].ToString(),
            //            RP = dt.Rows[i]["RP"].ToString(),
            //            Primaryunit = dt.Rows[i]["PrimaryUnit"].ToString(),
            //            Secondaryunit = dt.Rows[i]["SecondaryUnit"].ToString(),
            //            Primaryunitfactor = dt.Rows[i]["PrimaryUnitfactor"].ToString(),
            //            Seconadyunitfactor = dt.Rows[i]["SecondaryUnitfactor"].ToString(),
            //            MOQ = dt.Rows[i]["MOQ"].ToString(),
            //            Promoted = dt.Rows[i]["Promoted"].ToString(),
            //            CGSTPer = dt.Rows[i]["CentralTaxPer"].ToString(),
            //            SGSTPer = dt.Rows[i]["StateTaxPer"].ToString(),
            //            IGSTPer = dt.Rows[i]["IntegratedTaxPer"].ToString(),
            //        }
            //    );
            //}

            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }


        [DataContract]
        public class productlist
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string WefDate { get; set; }
            [DataMember]
            public string MRP { get; set; }
            [DataMember]
            public string DP { get; set; }
            [DataMember]
            public string RP { get; set; }
            [DataMember]
            public string SyncId { get; set; }
            [DataMember]
            public string ProdGrpId { get; set; }
            [DataMember]
            public string ProdId { get; set; }
            [DataMember]
            public string Createddate { get; set; }
            [DataMember]
            public string MS { get; set; }
        }

        [DataContract]
        public class Productimages
        {
            [DataMember]
            public string IMGURL { get; set; }

            [DataMember]
            public string THUMBNAILURL { get; set; }
            [DataMember]
            public string ID { get; set; }
            [DataMember]
            public string ITEMID { get; set; }
            [DataMember]
            public string MILISECOND { get; set; }

        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Getproductimages()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            //     string minDate = OBJRESPONSE.body[0].MINDATE;

            string MQry = "";
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(OBJRESPONSE.BODY[0].MINDATE) > 0)
            { MQry = " where  T.[Milliseconds] >'" + OBJRESPONSE.BODY[0].MINDATE + "'"; }
            string str = "Select * From(Select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS[Milliseconds] from ItemMastImage) As T " + MQry + "";
            DataTable ItemDt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            List<Productimages> rst1 = new List<Productimages>();
            if (ItemDt.Rows.Count > 0)
            {

                for (int j = 0; j < ItemDt.Rows.Count; j++)
                {
                    rst1.Add(new Productimages
                    {
                        IMGURL = "http://" + host + (ItemDt.Rows[j]["IMGURL"].ToString()).Replace(@"~", string.Empty),
                        THUMBNAILURL = "http://" + host + (ItemDt.Rows[j]["ThumbnailImgUrl"].ToString()).Replace(@"~", string.Empty),
                        ID = ItemDt.Rows[j]["Id"].ToString(),
                        ITEMID = ItemDt.Rows[j]["Itemid"].ToString(),
                        MILISECOND = ItemDt.Rows[j]["Milliseconds"].ToString()
                    });
                }

            }
            ItemDt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(rst1));

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Getdistributorwisepricelist()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            DataTable Dt = new DataTable();
            string SMID = OBJRESPONSE.BODY[0].SMID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            { MQry = " WHERE  T.[MILLISECONDS] >'" + minDate + "'"; }
            string str = "SELECT * FROM(SELECT ISNULL(MP.PARTYNAME,'') AS DISTRIBUTORNAME,ISNULL(MI.ITEMNAME,'') AS ITEMNAME,ISNULL(MID.DISTPRICE,0) AS DISTPRICE,MID.DISTID AS DISTID,MID.ITEMID AS ITEMID,MID.APPLICABLEDATE AS APPLICABLEDATE,MID.PRODGRPID AS PRODUCTGROUPID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MID.CREATEDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MID.CREATEDATE AS DATE), MID.CREATEDATE) AS [MILLISECONDS] FROM MASTITEMPRICEDISTWISE MID LEFT JOIN MASTPARTY MP ON MP.PARTYID=MID.DISTID LEFT JOIN MASTITEM MI ON MI.ITEMID=MID.ITEMID WHERE DISTID IN(SELECT PARTYID FROM MASTPARTY WHERE SMID=" + SMID + " AND ISNULL(PARTYDIST,0)=1)) AS T " + MQry + " ";

            Dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            Context.Response.Write(JsonConvert.SerializeObject(Dt));
            Dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetPriceList()
        {

            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string MQry = ""; Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE T.MS >'" + minDate + "'";
            }
            Query = "SELECT TOP " + NoOfRec + " * FROM  (SELECT P.ID ID, P.WEFDATE WEFDATE,P.MRP,P.DP,P.RP,ISNULL(P.SYNCID, '') AS SYNCID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(P.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(P.CREATEDDATE AS DATE), P.CREATEDDATE) AS MS,UNDERID AS PRODGRPID ,I.ITEMID AS PRODID FROM PRICELIST P LEFT JOIN MASTITEM I ON I.ITEMID=P.ITEMID WHERE WEFDATE <='" + BusinessLayer.Settings.GetUTCTime().ToString("dd/MMM/yyyy") + "' AND ISEFFECTED=1  ) AS T " + MQry + " ORDER BY T.WEFDATE DESC";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<productlist> rst = new List<productlist>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new productlist
            //        {
            //            Id = dt.Rows[i]["Id"].ToString(),
            //            WefDate = dt.Rows[i]["WefDate"].ToString(),
            //            ProdGrpId = dt.Rows[i]["ProdGrpId"].ToString(),
            //            ProdId = dt.Rows[i]["prodId"].ToString(),
            //            SyncId = dt.Rows[i]["SyncId"].ToString(),
            //            MRP = dt.Rows[i]["MRP"].ToString(),
            //            DP = dt.Rows[i]["DP"].ToString(),
            //            RP = dt.Rows[i]["RP"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()

            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }




        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetProductClass()
        {

            //var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string minDate = OBJRESPONSE.BODY[0].MINDATE;


            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE T.MS >'" + minDate + "'";
            }

            Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT  [ID] ID,NAME AS NM,SYNCCODE,ACTIVE AS ACTIVE,CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE) AS MS FROM MASTITEMCLASS WHERE ACTIVE=1 )  AS T " + MQry + "";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xProductClass> rst = new List<xProductClass>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xProductClass
            //        {
            //            NM = dt.Rows[i]["Description"].ToString(),
            //            Id = dt.Rows[i]["Id"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetSegment()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //   DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE T.MS >'" + minDate + "'";
            }
            //Query = "SELECT  [Id],Name as[Description],SyncCode,Active,createddate FROM MastItemSegment  " + MQry + "";
            //  Query = "SELECT  [Id],Name as[Description],SyncCode,Active,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds] FROM MastItemSegment where Active=1  " + MQry + "";

            Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT  [ID] ID,NAME AS NM,SYNCCODE,ACTIVE,CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE) AS MS FROM MASTITEMSEGMENT WHERE ACTIVE=1 ) AS T " + MQry + " ORDER BY MS ASC ";
            //1970-01-01 05:30:00
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xSegment> rst = new List<xSegment>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xSegment
            //        {
            //            Nm = dt.Rows[i]["Description"].ToString(),
            //            Id = dt.Rows[i]["Id"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Mast_ProductGroup()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE T.MS >'" + minDate + "'";
            }
            //Query = "select top " + NoOfRec + " * from (SELECT ItemId as [Id],Itemname as[Description],SyncId as [SyncId],Active,CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(CreatedDate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(CreatedDate AS date), CreatedDate) AS [Milliseconds] FROM MastItem where ItemType='MaterialGroup' AND Active=1 ) As T " + MQry + "";

            Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT MI.ITEMID AS ID,MI.ITEMNAME AS NM,MI.SYNCID AS [SYNCID],MI.ACTIVE, MS.ID AS SEGMENTID, MS.NAME AS SEGMENTNAME ,MI.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MI.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MI.CREATEDDATE AS DATE), MI.CREATEDDATE) AS MS FROM DBO.MASTITEMSEGMENT MS LEFT JOIN DBO.MASTITEM AS MASTITEM_1 ON MS.ID = MASTITEM_1.SEGMENTID LEFT JOIN DBO.MASTITEM MI ON MASTITEM_1.UNDERID = MI.ITEMID WHERE MI.ITEMTYPE='MATERIALGROUP' AND MI.ACTIVE=1 GROUP BY MI.ITEMID,MI.ITEMNAME, MASTITEM_1.SEGMENTID,MI.SYNCID,MI.ACTIVE, MS.ID, MS.NAME,MI.CREATEDDATE ) AS T " + MQry + "";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xProductGroupDetails> rst = new List<xProductGroupDetails>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xProductGroupDetails
            //        {
            //            Nm = dt.Rows[i]["productgroupname"].ToString(),
            //            Id = dt.Rows[i]["productgroupid"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString(),
            //            segmentid = dt.Rows[i]["segmentid"].ToString(),
            //            segmentname = dt.Rows[i]["segmentname"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetStates_TimeStampWise()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                //Query = "select * from (SELECT DISTINCT(VG.stateName)as Description,VG.stateid as Id,Vg.RegionId,Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] From ViewGeo VG inner JOIN MastLink ML ON VG.areaId=ML.LinkCode left Join MastArea Ma On Vg.StateId=Ma.AreaId WHERE ML.ECode='SA' AND vg.areaid=" + minDate + ") As T";


                Query = "SELECT    DESCRIPTION NM,ID SID,REGIONID RID,SYNCID,ACTIVE,CREATEDDATE,[MILLISECONDS] MS FROM (SELECT DISTINCT(VG.AREANAME)AS DESCRIPTION,VG.AREAID AS ID,MR.AREAID REGIONID,VG.SYNCID,VG.ACTIVE,VG.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(VG.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(VG.CREATEDDATE AS DATE), VG.CREATEDDATE) AS [MILLISECONDS] FROM  MASTAREA MA   LEFT JOIN MASTLINK ML ON MA.AREAID=ML.LINKCODE  LEFT JOIN MASTAREA MC ON MA.UNDERID=MC.AREAID  LEFT JOIN MASTAREA MD ON MC.UNDERID=MD.AREAID  LEFT JOIN MASTAREA VG ON MD.UNDERID=VG.AREAID    LEFT JOIN MASTAREA MR ON VG.UNDERID=MR.AREAID WHERE ML.ECODE='SA'  AND MA.AREAID=" + minDate + ") As T";
            }
            else
            {
                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");            
                // string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
                string MQry = "";
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                if (Convert.ToInt64(minDate) > 0)
                {
                    MQry = " WHERE T.MILLISECONDS >'" + minDate + "'";
                }
                //Query = "SELECT DISTINCT(VG.stateName)as Description,VG.stateid as Id,Vg.RegionId,Ma.SyncId,Ma.Active,Ma.createddate From ViewGeo VG inner JOIN MastLink ML ON VG.areaId=ML.LinkCode left Join MastArea Ma On Vg.StateId=Ma.AreaId WHERE ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + "";
                //  Query = "SELECT DISTINCT(VG.stateName)as Description,VG.stateid as Id,Vg.RegionId,Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] From ViewGeo VG inner JOIN MastLink ML ON VG.areaId=ML.LinkCode left Join MastArea Ma On Vg.StateId=Ma.AreaId WHERE ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + " " + MQry + "";

                //Query = "select DISTINCT top " + NoOfRec + " Description,Id,RegionId,SyncId,Active,CreatedDate,[Milliseconds] from (SELECT DISTINCT(VG.stateName)as Description,VG.stateid as Id,Vg.RegionId,Ma.SyncId,Ma.Active,MA.CreatedDate,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Ma.Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Ma.Createddate AS date), Ma.Createddate) AS [Milliseconds] From ViewGeo VG inner JOIN MastLink ML ON VG.areaId=ML.LinkCode left Join MastArea Ma On Vg.StateId=Ma.AreaId WHERE ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + ") As T " + MQry + " order by Createddate ";

                Query = "SELECT DISTINCT TOP " + NoOfRec + "  DESCRIPTION NM,ID SID,REGIONID RID,SYNCID,ACTIVE,CREATEDDATE,[MILLISECONDS] MS FROM (SELECT DISTINCT(VG.AREANAME)AS DESCRIPTION,VG.AREAID AS ID,MR.AREAID REGIONID,VG.SYNCID,VG.ACTIVE,VG.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(VG.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(VG.CREATEDDATE AS DATE), VG.CREATEDDATE) AS [MILLISECONDS] FROM  MASTAREA MA   LEFT JOIN MASTLINK ML ON MA.AREAID=ML.LINKCODE  LEFT JOIN MASTAREA MC ON MA.UNDERID=MC.AREAID  LEFT JOIN MASTAREA MD ON MC.UNDERID=MD.AREAID  LEFT JOIN MASTAREA VG ON MD.UNDERID=VG.AREAID    LEFT JOIN MASTAREA MR ON VG.UNDERID=MR.AREAID WHERE ML.ECODE='SA' AND ML.PRIMCODE=" + ConPer_Id + ") AS T " + MQry + " ORDER BY CREATEDDATE ";
            }
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xStates_TimeStamp> rst = new List<xStates_TimeStamp>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xStates_TimeStamp
            //        {
            //            NM = dt.Rows[i]["Description"].ToString(),
            //            Sid = dt.Rows[i]["Id"].ToString(),
            //            Rid = dt.Rows[i]["RegionId"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetSrep()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string userId = OBJRESPONSE.BODY[0].USERID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0) { MQry = " Where T.MS >'" + minDate + "'"; }
            // Query = "SELECT  SMID,SmName,DeviceNo,DSRAllowDays,Active,Roleid,UserId,LoginCreated,Lvl,UnderId,GradeId,EmpName,Createddate,(CAST(DATEDIFF(second, '1970-01-01', CAST(Createddate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Createddate AS date), Createddate) AS [Milliseconds] FROM MastSalesRep WHERE  smname!='.' and SMID IN (SELECT SMID FROM MastSalesRepGrp WHERE MainGrp=" + userId + " AND SMID <> " + userId + " union SELECT maingrp FROM MastSalesRepGrp WHERE SMID=" + userId + " ) " + MQry + "";
            Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT SMID SMID,SMNAME SMNM,DEVICENO,DSRALLOWDAYS,ACTIVE,ROLEID,USERID,LOGINCREATED,LVL LVL,UNDERID UID,GRADEID,EMPNAME,CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE) AS MS FROM MASTSALESREP WHERE  SMNAME!='.' AND SMID IN (SELECT SMID FROM MASTSALESREPGRP WHERE MAINGRP=" + userId + " AND SMID <> " + userId + " union SELECT maingrp FROM MastSalesRepGrp WHERE SMID=" + userId + " )) AS T " + MQry + "";
            //1970-01-01 05:30:00
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xSrep> rst = new List<xSrep>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xSrep
            //        {
            //            SMID = dt.Rows[i]["SMID"].ToString(),
            //            Smnm = dt.Rows[i]["SmName"].ToString(),
            //            Lvl = dt.Rows[i]["Lvl"].ToString(),
            //            Uid = dt.Rows[i]["UnderId"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetTransportVehicle_TimeStampWise()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //   DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string type = OBJRESPONSE.BODY[0].TYPE;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE  T.MS >'" + minDate + "'";
            }
            // string transport = "select top " + NoOfRec + " * from ModeOfTransport where Mode_Vechile='" + type + "'";
            string transport = "SELECT TOP " + NoOfRec + " * FROM (SELECT TRANSPORT TRPT,CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE) AS MS FROM MODEOFTRANSPORT WHERE 1=1 AND MODE_VECHILE='" + type + "' )T " + MQry + " ORDER BY CREATEDDATE ";
            DataTable dttransport = DbConnectionDAL.GetDataTable(CommandType.Text, transport);
            //List<xTransportVehicleused_TimeStamp> rst = new List<xTransportVehicleused_TimeStamp>();
            //if (dttransport.Rows.Count > 0)
            //{
            //    for (int i = 0; i <= (dttransport.Rows.Count - 1); i++)
            //    {
            //        rst.Add(
            //            new xTransportVehicleused_TimeStamp
            //            {
            //                Trpt = dttransport.Rows[i]["Transport"].ToString(),
            //                MS = dttransport.Rows[i]["Milliseconds"].ToString()
            //            }
            //        );
            //    }
            //}
            ////else
            ////{
            ////    rst.Add(
            ////       new xTransportVehicleused_TimeStamp
            ////       {
            ////           Trpt = "0" //null
            ////       }
            ////   );

            ////}
            //dttransport.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dttransport));
            dttransport.Dispose();
        }



        public void xJSGetOrderTemplate()
        {
            //   var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //  DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            {
                //MQry = " and MastItemTemplat.Createddate >='" + minDate1 + "'";
                MQry = " WHERE  T.[MILLISECONDS] >='" + minDate + "'";
            }

            System.IO.StreamWriter TextFileCID = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/OrderTemplateLog-" + ConPer_Id + ".txt"), true);
            TextFileCID.WriteLine("SMID:" + ConPer_Id + " , " + "TimeStamp:" + minDate + "," + "Date OF Timestamp:" + minDate1);
            TextFileCID.Close();

            //List<GetOrderTemplate> rst = new List<GetOrderTemplate>();
            //{
            string qry = "";

            qry = @"SELECT TOP " + NoOfRec + " *  FROM (SELECT  MASTITEMTEMPLAT.*,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE)   AS MS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATEDDATE AS DATE), CREATEDDATE)   AS DT  FROM MASTITEMTEMPLAT LEFT JOIN [MASTPARTY] ON MASTITEMTEMPLAT.PARTYID=[MASTPARTY].PARTYID   WHERE PARTYDIST=0 AND ACTIVE=1 AND AREAID IN   (SELECT LINKCODE FROM MASTLINK WHERE PRIMTABLE='SALESPERSON' AND  PRIMCODE=" + Convert.ToInt32(ConPer_Id) + "  and LinkTable='AREA' ) ) As T " + MQry + " ORDER BY CREATEDDATE";
            DataTable dtcheck = DbConnectionDAL.GetDataTable(CommandType.Text, qry);
            //if (dtcheck.Rows.Count > 0)
            //{
            //    for (int i = 0; i < dtcheck.Rows.Count; i++)
            //    {
            //        {
            //            rst.Add(
            //                new GetOrderTemplate
            //                {
            //                    PartyId = dtcheck.Rows[i]["partyid"].ToString(),
            //                    ItemId = dtcheck.Rows[i]["itemid"].ToString(),
            //                    Dt = dtcheck.Rows[i]["Milliseconds"].ToString(),
            //                    MS = dtcheck.Rows[i]["Milliseconds"].ToString()
            //                }
            //            );
            //        }
            //    }
            //}
            //dtcheck.Dispose();
            bodyStream.Dispose();


            Context.Response.Write(JsonConvert.SerializeObject(dtcheck));
            dtcheck.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetBeatPlan()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;


            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");

            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where T.MS>'" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            //  Query = "SELECT BeatPlanId,docid, UserId,replace(convert(NVARCHAR, PlannedDate, 106), ' ', '/') AS PlannedDate, areaId, AppStatus,AppBy,AppRemark,replace(convert(NVARCHAR, StartDate, 106), ' ', '/') AS StartDate,(CAST(DATEDIFF(second, '1970-01-01', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS [Milliseconds],Cityid,beatId,SMID,AppBySMid,isnull(Android_Id, '') as Android_Id FROM transbeatplan Where SMID =" + ConPer_Id + " " + MQry + "";

            Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT BEATPLANID BPLND,DOCID DCID, USERID UID,REPLACE(CONVERT(NVARCHAR, PLANNEDDATE, 106), ' ', '/') AS PDT, AREAID AID, APPSTATUS APPST,APPBY APPBY,APPREMARK APPRMK,REPLACE(CONVERT(NVARCHAR, STARTDATE, 106), ' ', '/') AS STDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MS,CITYID CTID,BEATID BID,SMID SMID,APPBYSMID APPBYSMID,ISNULL(ANDROID_ID, '') AS ANDID FROM TRANSBEATPLAN WHERE SMID =" + ConPer_Id + " ) AS T " + MQry + " ORDER BY T.MS ";
            //1970-01-01 05:30:00
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xBeatPlan> rst = new List<xBeatPlan>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xBeatPlan
            //        {
            //            Bplnd = dt.Rows[i]["BeatPlanId"].ToString(),
            //            Dcid = dt.Rows[i]["docid"].ToString(),
            //            Uid = dt.Rows[i]["UserId"].ToString(),
            //            Aid = dt.Rows[i]["areaId"].ToString(),
            //            AppSt = dt.Rows[i]["AppStatus"].ToString(),
            //            AppBy = dt.Rows[i]["AppBy"].ToString(),
            //            Apprmk = dt.Rows[i]["AppRemark"].ToString(),
            //            StDt = dt.Rows[i]["StartDate"].ToString(),
            //            Ctid = dt.Rows[i]["CityId"].ToString(),
            //            Bid = dt.Rows[i]["BeatId"].ToString(),
            //            SMID = dt.Rows[i]["SMID"].ToString(),
            //            AppBySMId = dt.Rows[i]["AppBySMId"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString(),
            //            Pdt = dt.Rows[i]["PlannedDate"].ToString(),
            //            Andid = dt.Rows[i]["Android_Id"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            //return new JavaScriptSerializer().Serialize(rst);
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetDistStock()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            string strstockqty = "", strMinusqty = "", strPlusqty = "", strtotalqty = "";
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            //List<GetDistributorStockList> rst = new List<GetDistributorStockList>();
            string MQry = "";

            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE A.MILLISECOND >'" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            DataTable dt = new DataTable();
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");

                //////////////// available qty


                /////////////stock qty


                //strstockqty = " SELECT STKDocId AS Docid,ItemId,Qty,DistId,0 AS minusqty,0 AS plusqty,Isnull(MRP,0) AS MRP FROM temp_TransDistStock TO2 ";
                //strstockqty = strstockqty + " WHERE   TO2.VDate< '" + vdate + "' and STKDocId in(SELECT  Min(STKDocid) AS Docid  From(SELECT STKDocid,Itemid,Distid,Isnull(MRP,0) AS MRP from temp_TransDistStock ";
                //strstockqty = strstockqty + " UNION ALL ";
                //strstockqty = strstockqty + " SELECT STKDocid,Itemid,Distid,Isnull(MRP,0) AS MRP from TransDistStock) AS T GROUP BY DistId,itemid,Mrp)  ";
                //strstockqty = strstockqty + " UNION all ";
                //strstockqty = strstockqty + " SELECT STKDocId AS Docid,ItemId,Qty,DistId ,0 AS minusqty,0 AS plusqty,Isnull(MRP,0) AS MRP FROM TransDistStock TO2 ";
                //strstockqty = strstockqty + " WHERE    TO2.VDate< '" + vdate + "' and STKDocId in(SELECT  Min(STKDocid) AS Docid From(SELECT STKDocid,Itemid,Distid,Isnull(MRP,0) AS MRP from temp_TransDistStock ";
                //strstockqty = strstockqty + " UNION all ";
                //strstockqty = strstockqty + " SELECT STKDocid,Itemid,Distid,Isnull(MRP,0) AS MRP from TransDistStock) ";
                //strstockqty = strstockqty + " AS T GROUP BY DistId,itemid,Mrp)   ";


                //////minus qty
                //strMinusqty = " SELECT TO2.OrdDocId As Docid,TO1.itemid as itemid,0 AS Qty,Isnull(TO1.DistID,0) AS DistId,(CASE WHEN isnull(TO2.DispatchCancelType,'')='D' THEN TO1.DispatchQty WHEN isnull(TO2.DispatchCancelType,'')='' THEN qty ELSE 0 end  ) AS minusqty,0 AS plusqty,MI.MRP AS MRP FROM TransOrder1 TO1 ";
                //strMinusqty = strMinusqty + "  LEFT JOIN Mastitem MI ON MI.ItemId=TO1.ItemId LEFT JOIN TransOrder TO2 ON TO2.OrdDocId=TO1.OrdDocId   where TO2.VDate<'" + vdate + "' ";
                //strMinusqty = strMinusqty + " UNION ALL ";
                //strMinusqty = strMinusqty + " SELECT TO2.OrdDocId As Docid,TO1.itemid as itemid,0 AS Qty,Isnull(TO1.DistID,0) AS DistId,(CASE WHEN isnull(TO2.DispatchCancelType,'')='D' THEN TO1.DispatchQty WHEN isnull(TO2.DispatchCancelType,'')='' THEN qty ELSE 0 end  ) AS minusqty,0 AS plusqty,MI.MRP AS MRP FROM Temp_TransOrder1 TO1 ";
                //strMinusqty = strMinusqty + " LEFT JOIN Mastitem MI ON MI.ItemId=TO1.ItemId  LEFT JOIN Temp_TransOrder TO2 ON TO2.OrdDocId=TO1.OrdDocId  where TO2.VDate<'" + vdate + "' ";

                //////plus qty

                //strPlusqty = " SELECT TO2.DistInvDocId As Docid,TO1.itemid as itemid,0 AS Qty,TO2.DistId AS DistId,0 AS minusqty,Qty AS plusqty ,MI.MRP AS MRP FROM TransDistInv1 TO1 ";
                //strPlusqty = strPlusqty + "  LEFT JOIN Mastitem MI ON MI.ItemId=TO1.ItemId LEFT JOIN TransDistInv TO2 ON TO2.DistInvDocId=TO1.DistInvDocId WHERE Isnull(TO1.ItemId,0)<>0    and TO2.VDate<'" + vdate + "' ";



                /////complete
                /////
                //strtotalqty = "SELECT Max(MI.ItemName) As ItemName,Max(MP.PartyName) As PartyName, Max(DistId) AS DistID,Max(T.Itemid) AS Itemid ,Sum(T.Qty)-Sum(T.minusqty)+Sum(T.plusqty) AS Totalqty,Max(T.MRP) AS MRP ";
                //strtotalqty = strtotalqty + " from(" + strstockqty + " ";
                //strtotalqty = strtotalqty + " Union all " + strPlusqty + "";
                //strtotalqty = strtotalqty + " Union all " + strMinusqty + "";
                //strtotalqty = strtotalqty + " ) AS T Left join MastParty MP on MP.PartyId = T.DistId ";
                //strtotalqty = strtotalqty + " Left join MastItem MI on MI.Itemid = T.itemid WHERE Isnull(T.DistId,0)<>0 and isnull(T.ItemId,0)<>0 and Isnull(MI.itemname,'')<>'' ";
                //strtotalqty = strtotalqty + " GROUP BY T.DistId,T.itemid,T.MRP order by Max(MP.PartyName) ";




                //////////////// availabl Qty











                Query = @"SELECT TOP " + NoOfRec + " * FROM (SELECT STKID,	VISID,	STKDOCID,	USERID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/')	VDATE,	SMID SMID,	DISTID PARTYID,	DISTCODE,	AREAID,	    ITEMID ITEM,	ISNULL(QTY,0) AS QTY,	CREATED_DATE,	UNIT UNIT,	CASES CASES,	ADDRESS,	Isnull(LATITUDE,'') LATITUDE,	Isnull(LONGITUDE,'') LONGITUDE,	(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00',  CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00',   CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MILLISECOND,ISNULL(ANDROID_ID,STKID) AS ANDROID_ID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL,ISNULL(MRP,0) AS RATE  FROM TRANSDISTSTOCK WHERE SMID IN (" + ConPer_Id + ")  and vdate='" + vdate + "' UNION SELECT	STKID,	VISID,	STKDOCID,	USERID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/')	VDATE,	SMID SMID,	DISTID PARTYID,	  DISTCODE,	AREAID,	ITEMID ITEM,	ISNULL(QTY,0) AS QTY,	CREATED_DATE,	UNIT UNIT,	CASES CASES,	ADDRESS,	Isnull(LATITUDE,'') LATITUDE,	Isnull(LONGITUDE,'') LONGITUDE,		(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00',     CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,      (CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE),CREATED_DATE) AS MILLISECOND,ISNULL(ANDROID_ID,STKID) AS ANDROID_ID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL,ISNULL(MRP,0) AS RATE  FROM TEMP_TRANSDISTSTOCK WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "' ) a " + MQry + " ORDER BY A.MILLISECOND";


                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    string path = "";
                //    if (dt.Rows[i]["IMGURL"].ToString() != "")
                //    {
                //        path = "http://" + host + (dt.Rows[i]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                //    }
                //    rst.Add(
                //        new GetDistributorStockList
                //        {
                //            STKDocId = dt.Rows[i]["STKDocId"].ToString(),
                //            AreaId = dt.Rows[i]["AreaId"].ToString(),
                //            Cases = dt.Rows[i]["cases"].ToString(),
                //            Unit = dt.Rows[i]["unit"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            VDate = Convert.ToDateTime(dt.Rows[i]["VDate"].ToString()).ToString("dd/MMM/yyyy"),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            Partyid = dt.Rows[i]["DistId"].ToString(),
                //            Item = dt.Rows[i]["ItemId"].ToString(),
                //            Qty = dt.Rows[i]["Qty"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_id"].ToString(),
                //            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString(),
                //            IMGURL = path,
                //            Rate = dt.Rows[i]["rate"].ToString()
                //        }
                //    );
                //}
                //dt.Dispose();
            }
            bodyStream.Dispose();
            dttopvisid.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        [DataContract]
        public class GetDistributorStockList_V1
        {
            [DataMember]
            public string STKDocId { get; set; }
            [DataMember]
            public string AreaId { get; set; }
            [DataMember]
            public string Cases { get; set; }
            [DataMember]
            public string Unit { get; set; }
            [DataMember]
            public string VisId { get; set; }
            [DataMember]
            public string UserId { get; set; }
            [DataMember]
            public string VDate { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string Partyid { get; set; }
            [DataMember]
            public string Item { get; set; }
            [DataMember]
            public string Rate { get; set; }
            [DataMember]
            public string Remarks { get; set; }
            [DataMember]
            public string amount { get; set; }
            [DataMember]
            public string Android_Id { get; set; }
            [DataMember]
            public string Millisecond { get; set; }
            [DataMember]
            public string Longitude { get; set; }
            [DataMember]
            public string Latitude { get; set; }
            [DataMember]
            public string latlongdt { get; set; }
            [DataMember]
            public string Qty { get; set; }
            [DataMember]
            public string mobile_created_date { get; set; }
            [DataMember]
            public string IMGURL { get; set; }
            [DataMember]
            public string BaseUnit { get; set; }
            [DataMember]
            public string BaseUnitQty { get; set; }
            [DataMember]
            public string PrimaryUnit { get; set; }
            [DataMember]
            public string PrimaryUnitQty { get; set; }
            [DataMember]
            public string SecondaryUnit { get; set; }
            [DataMember]
            public string SecondaryUnitQty { get; set; }
            [DataMember]
            public string PrimaryUnitConversion { get; set; }
            [DataMember]
            public string SecondaryUnitConversion { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetDistStock_V1()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            List<GetDistributorStockList_V1> rst = new List<GetDistributorStockList_V1>();
            string MQry = "";

            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " where a.Milliseconds >'" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = @"select top " + NoOfRec + " * from (SELECT STKId,	VisId,	STKDocId,	UserId,	VDate,	SMID,	DistId,	DistCode,	AreaId,	    ItemId,	Qty,	Created_date,	unit,	cases,	Address,	Latitude,	Longitude,	(CAST(DATEDIFF(second, '1970-01-01 05:30:00',  CAST(Lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Lat_long_datetime AS date), Lat_long_datetime) AS [Lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00',   CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS [Milliseconds],isnull(Android_Id,STKId) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],IMGURL,Isnull(mrp,0) As rate, IsNull(BaseUnit,'') as BaseUnit,IsNull(BaseUnitQty,0) as BaseUnitQty,IsNull(PrimaryUnit,'') as PrimaryUnit,IsNull(PrimaryUnitQty,0) as PrimaryUnitQty,IsNull(SecondaryUnit,'') as SecondaryUnit,IsNull(SecondaryUnitQty,0) as SecondaryUnitQty,IsNull(PrimaryUnitConversion,0) as PrimaryUnitConversion,IsNull(SecondaryUnitConversion,0) as SecondaryUnitConversion  FROM TransDistStock where SMID in (" + ConPer_Id + ")  and vdate='" + vdate + "' union SELECT	STKId,	VisId,	STKDocId,	UserId,	VDate,	SMID,	DistId,	  DistCode,	AreaId,	ItemId,	Qty,	Created_date,	unit,	cases,	Address,	Latitude,	Longitude,		(CAST(DATEDIFF(second, '1970-01-01 05:30:00',     CAST(Lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Lat_long_datetime AS date), Lat_long_datetime) AS [Lat_long_datetime],      (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date),Created_date) AS [Milliseconds],isnull(Android_Id,STKId) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],IMGURL,Isnull(mrp,0) As rate, IsNull(BaseUnit,'') as BaseUnit,IsNull(BaseUnitQty,0) as BaseUnitQty,IsNull(PrimaryUnit,'') as PrimaryUnit,IsNull(PrimaryUnitQty,0) as PrimaryUnitQty,IsNull(SecondaryUnit,'') as SecondaryUnit,IsNull(SecondaryUnitQty,0) as SecondaryUnitQty,IsNull(PrimaryUnitConversion,0) as PrimaryUnitConversion,IsNull(SecondaryUnitConversion,0) as SecondaryUnitConversion  FROM Temp_TransDistStock where SMID in (" + ConPer_Id + ") and vdate='" + vdate + "' ) a " + MQry + " order by a.Milliseconds";

                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                {
                    string path = "";
                    if (dt.Rows[i]["IMGURL"].ToString() != "")
                    {
                        path = "http://" + host + (dt.Rows[i]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                    }
                    rst.Add(
                        new GetDistributorStockList_V1
                        {
                            STKDocId = dt.Rows[i]["STKDocId"].ToString(),
                            AreaId = dt.Rows[i]["AreaId"].ToString(),
                            Cases = dt.Rows[i]["cases"].ToString(),
                            Unit = dt.Rows[i]["unit"].ToString(),
                            VisId = dt.Rows[i]["VisId"].ToString(),
                            UserId = dt.Rows[i]["UserId"].ToString(),
                            VDate = Convert.ToDateTime(dt.Rows[i]["VDate"].ToString()).ToString("dd/MMM/yyyy"),
                            SMID = dt.Rows[i]["SMID"].ToString(),
                            Partyid = dt.Rows[i]["DistId"].ToString(),
                            Item = dt.Rows[i]["ItemId"].ToString(),
                            Qty = dt.Rows[i]["Qty"].ToString(),
                            Android_Id = dt.Rows[i]["Android_id"].ToString(),
                            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                            Longitude = dt.Rows[i]["longitude"].ToString(),
                            Latitude = dt.Rows[i]["latitude"].ToString(),
                            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString(),
                            IMGURL = path,
                            Rate = dt.Rows[i]["rate"].ToString(),
                            BaseUnit = dt.Rows[i]["BaseUnit"].ToString(),
                            BaseUnitQty = dt.Rows[i]["BaseUnitQty"].ToString(),
                            PrimaryUnit = dt.Rows[i]["PrimaryUnit"].ToString(),
                            PrimaryUnitQty = dt.Rows[i]["PrimaryUnitQty"].ToString(),
                            SecondaryUnit = dt.Rows[i]["SecondaryUnit"].ToString(),
                            SecondaryUnitQty = dt.Rows[i]["SecondaryUnitQty"].ToString(),
                            PrimaryUnitConversion = dt.Rows[i]["PrimaryUnitConversion"].ToString(),
                            SecondaryUnitConversion = dt.Rows[i]["SecondaryUnitConversion"].ToString()
                        }
                    );
                }
                dt.Dispose();
            }
            bodyStream.Dispose();
            dttopvisid.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }



        [WebMethod]
        public void JSGetRetailerDiscussionWithImage()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = ""; string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " WHERE A.CREATEDDATE >'" + minDate + "'";
            }
            //List<RetailerDiscussion> rst = new List<RetailerDiscussion>();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            DataTable dt = new DataTable();
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT top " + NoOfRec + " * FROM (SELECT VISDISTID VISDISTID,VISID VISID,ISNULL(ANDROID_ID,VISDISTID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID SMID,CITYID CITYID,DISTID RETAILERID,REMARKDIST AS REMARK,REPLACE(CONVERT(NVARCHAR, NEXTVISITDATE, 106), ' ', '/') AS NEXTVISITDATE,NEXTVISITTIME NEXTVISITTIME,SPENTFRTIME AS SPENDFROMTIME,SPENTTOTIME AS SPENDTODATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS CREATEDDATE,STOCK STOCK,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,[DISCDOCID] DOCID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE FROM TRANSVISITDIST WHERE SMID IN (" + ConPer_Id + ") AND TYPE IS NULL AND DISTID IN (SELECT PARTYID FROM MASTPARTY WHERE PARTYDIST=0)  AND  VDATE='" + vdate + "'  UNION SELECT VISDISTID VISDISTID,VISID VISID,ISNULL(ANDROID_ID,VISDISTID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID SMID,CITYID CITYID,DISTID RETAILERID,REMARKDIST AS REMARK,REPLACE(CONVERT(NVARCHAR, NEXTVISITDATE, 106), ' ', '/') AS NEXTVISITDATE,NEXTVISITTIME NEXTVISITTIME,SPENTFRTIME AS SPENDFROMTIME,SPENTTOTIME AS SPENDTODATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS CREATEDDATE,STOCK STOCK,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,[DISCDOCID] DOCID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE FROM TEMP_TRANSVISITDIST WHERE SMID IN (" + ConPer_Id + ") AND TYPE IS NULL AND DISTID IN (SELECT PARTYID FROM MASTPARTY WHERE PARTYDIST=0)   AND VDATE='" + vdate + "'  ) a " + MQry + " ORDER BY A.CREATEDDATE";


                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    string path = "";
                //    if (dt.Rows[i]["IMGURL"].ToString() != "")
                //    {
                //        path = "http://" + host + (dt.Rows[i]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                //    }
                //    rst.Add(
                //        new RetailerDiscussion
                //        {
                //            Docid = dt.Rows[i]["DiscDocid"].ToString(),
                //            VisDistId = dt.Rows[i]["VisDistId"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                //            VDate = dt.Rows[i]["VDate"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            Cityid = dt.Rows[i]["CityId"].ToString(),
                //            RetailerId = dt.Rows[i]["DistId"].ToString(),
                //            Remark = dt.Rows[i]["Remark"].ToString(),
                //            NextVisitDate = dt.Rows[i]["NextVisitDate"].ToString(),
                //            NextVisitTime = dt.Rows[i]["nextVisitTime"].ToString(),
                //            SpendFromTime = dt.Rows[i]["SpendfromTime"].ToString(),
                //            SpendToDate = dt.Rows[i]["SpendToTime"].ToString(),
                //            CreatedDate = dt.Rows[i]["Milliseconds"].ToString(),
                //            Stock = dt.Rows[i]["stock"].ToString(),
                //            IMGURL = path,
                //            // IMGURL = dt.Rows[i]["IMGURL"].ToString(),
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()

                //        }
                //    );
                //}
                //dt.Dispose();
            }
            dttopvisid.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetDistricts_TimeStampWise()
        {
            //var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                Query = "SELECT DISTINCT  DESCRIPTION AS NM,ID AS DID,STATEID AS SID,SYNCID,ACTIVE,CREATEDDATE,[MILLISECONDS] AS MS FROM (SELECT DISTINCT (MD.AREANAME) AS DESCRIPTION,MD.AREAID AS ID,MS.AREAID AS STATEID,MD.SYNCID,MD.ACTIVE,MD.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MD.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MD.CREATEDDATE AS DATE), MD.CREATEDDATE) AS [MILLISECONDS] FROM MASTAREA   VG  LEFT JOIN MASTAREA MC ON VG.UNDERID=MC.AREAID   LEFT JOIN MASTAREA MD ON MC.UNDERID=MD.AREAID     LEFT JOIN MASTAREA MS ON MD.UNDERID=MS.AREAID LEFT JOIN MASTLINK ML ON VG.AREAID=ML.LINKCODE WHERE ML.ECODE='SA'  AND VG.AREAID=" + minDate + ") As T  order by Createddate ";
            }
            else
            {

                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                string MQry = "";
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                if (Convert.ToInt64(minDate) > 0)
                {
                    //MQry = " and Ma.Createddate  >='" + minDate1 + "'";
                    MQry = " WHERE  T.[MILLISECONDS] > '" + minDate + "'";
                }
                //Query = "SELECT DISTINCT(VG.DistrictName) as Description,VG.DistrictId As Id,VG.StateId,Ma.SyncId,Ma.Active,Ma.createddate FROM ViewGeo VG inner JOIN MastLink ML ON VG.areaId=ML.LinkCode left Join MastArea Ma On Vg.DistrictId=Ma.AreaId  WHERE ML.ECode='SA' AND ML.PrimCode=" + ConPer_Id + "";
                Query = "SELECT DISTINCT TOP " + NoOfRec + " DESCRIPTION AS NM,ID AS DID,STATEID AS SID,SYNCID,ACTIVE,CREATEDDATE,[MILLISECONDS] AS MS FROM (SELECT DISTINCT (MD.AREANAME) AS DESCRIPTION,MD.AREAID AS ID,MS.AREAID AS STATEID,MD.SYNCID,MD.ACTIVE,MD.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MD.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MD.CREATEDDATE AS DATE), MD.CREATEDDATE) AS [MILLISECONDS] FROM MASTAREA   VG  LEFT JOIN MASTAREA MC ON VG.UNDERID=MC.AREAID   LEFT JOIN MASTAREA MD ON MC.UNDERID=MD.AREAID     LEFT JOIN MASTAREA MS ON MD.UNDERID=MS.AREAID LEFT JOIN MASTLINK ML ON VG.AREAID=ML.LINKCODE WHERE ML.ECODE='SA' AND ML.PRIMCODE=" + ConPer_Id + ") As T " + MQry + " ORDER BY CREATEDDATE ";
            } DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<xDistricts> rst = new List<xDistricts>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new xDistricts
            //        {
            //            NM = dt.Rows[i]["Description"].ToString(),
            //            Did = dt.Rows[i]["Id"].ToString(),
            //            Sid = dt.Rows[i]["stateid"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dt.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
            //return DbConnectionDAL.getXML(Query, "District", "DistrictList");
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetDSR()
        {
            //   var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //   DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            // List<DSRList> rst = new List<DSRList>();
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                //MQry = " and created_date>='" + minDate1 + "'";
                MQry = " WHERE  T.MS> '" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            //Query = "select top " + NoOfRec + " * from (SELECT VisId,visitDocId,UserId,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,replace(Remark,'/n', '') as Remark,SMID,CityId,DistId,nCityId, replace(convert(NVARCHAR, NextVisitDate, 106), ' ', '/') as NextVisitDate,frTime1 AS FROMTime,toTime1 AS ToTime, WithUserId,ModeOfTransport,VehicleUsed,Industry, CASE appstatus WHEN 'Approve' THEN 1 WHEN 'Reject' THEN 1 ELSE lock END as Lock,nWithUserId,AppStatus,AppBy,AppRemark,AppBySMID,isnull(Android_Id,visitDocId) as Android_Id,cityIds,cityName,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS [Milliseconds],isnull(OrderAmountMail,0.00) as OrderAmountMail , visitcode,  Attendance,  Fromareacode,toareacode,OtherExpense, AndroidAppRemark,isnull(OrderAmountPhone,0.00) as OrderAmountPhone,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransVisit Where SMID IN (" + ConPer_Id + ") ) As T " + MQry + " order by  T.[Milliseconds]";
            Query = "select top 1 visid,vdate from TransVisit where SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            DataTable dt = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT VISID,VISITDOCID,USERID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,REPLACE(REMARK,'/N', '') AS REMARK,SMID,CITYID,DISTID,NCITYID, REPLACE(CONVERT(NVARCHAR, NEXTVISITDATE, 106), ' ', '/') AS NEXTVISITDATE,FRTIME1 AS FROMTIME,TOTIME1 AS TOTIME, WITHUSERID,MODEOFTRANSPORT,VEHICLEUSED,INDUSTRY, (CASE APPSTATUS WHEN 'Approve' THEN 1 WHEN 'Reject' THEN 1 ELSE LOCK END) AS LOCK,NWITHUSERID,APPSTATUS,APPBY,APPREMARK,APPBYSMID,ISNULL(ANDROID_ID,VISITDOCID) AS ANDROID_ID,CITYIDS,CITYNAME,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MS,ISNULL(ORDERAMOUNTMAIL,0.00) AS ORDERAMOUNTMAIL , VISITCODE,  ATTENDANCE,  FROMAREACODE,TOAREACODE TOAREACODE,OTHEREXPENSE, ANDROIDAPPREMARK ANDROIDAPPREMARK1,ISNULL(ORDERAMOUNTPHONE,0.00) AS ORDERAMOUNTPHONE,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS  MOBILE_CREATED_DATE  FROM TRANSVISIT WHERE SMID IN (" + ConPer_Id + ") AND VDATE= '" + vdate + "' ) AS T " + MQry + " ORDER BY  T.MS";

                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i < dt.Rows.Count; i++)
                //{
                //    rst.Add(
                //        new DSRList
                //        {
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            visitDocId = dt.Rows[i]["visitDocId"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            Vdate = dt.Rows[i]["Vdate"].ToString(),
                //            Remark = dt.Rows[i]["Remark"].ToString().Replace("\n", ""),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            CityId = dt.Rows[i]["CityId"].ToString(),
                //            DistId = dt.Rows[i]["DistId"].ToString(),
                //            nCityId = dt.Rows[i]["nCityId"].ToString(),
                //            NextVisitDate = dt.Rows[i]["NextVisitDate"].ToString(),
                //            FROMTime = dt.Rows[i]["FROMTime"].ToString(),
                //            ToTime = dt.Rows[i]["ToTime"].ToString(),
                //            WithUserId = dt.Rows[i]["WithUserId"].ToString(),
                //            ModeOfTransport = dt.Rows[i]["ModeOfTransport"].ToString(),
                //            VehicleUsed = dt.Rows[i]["VehicleUsed"].ToString(),
                //            Industry = dt.Rows[i]["Industry"].ToString(),
                //            Lock = dt.Rows[i]["Lock"].ToString(),
                //            nWithUserId = dt.Rows[i]["nWithUserId"].ToString(),
                //            AppStatus = dt.Rows[i]["AppStatus"].ToString(),
                //            AppBy = dt.Rows[i]["AppBy"].ToString(),
                //            AppRemark = dt.Rows[i]["AppRemark"].ToString(),
                //            AppBySMID = dt.Rows[i]["AppBySMID"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                //            cityIds = dt.Rows[i]["cityIds"].ToString(),
                //            cityName = dt.Rows[i]["cityName"].ToString(),
                //            MS = dt.Rows[i]["Milliseconds"].ToString(),
                //            OrderAmountMail = dt.Rows[i]["OrderAmountMail"].ToString(),
                //            OrderAmountPhone = dt.Rows[i]["OrderAmountPhone"].ToString(),
                //            visitcode = dt.Rows[i]["visitcode"].ToString(),
                //            Attendance = dt.Rows[i]["Attendance"].ToString(),
                //            Fromareacode = dt.Rows[i]["Fromareacode"].ToString(),
                //            OtherExpense = dt.Rows[i]["OtherExpense"].ToString(),
                //            ToAreacode = dt.Rows[i]["toareacode"].ToString(),
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            AndroidAppRemark1 = dt.Rows[i]["AndroidAppRemark"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()
                //        }
                //    );
                //}
                //dt.Dispose();
            }
            bodyStream.Dispose();
            dttopvisid.Dispose();
            //return new JavaScriptSerializer().Serialize(rst);
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetRetailerDemoWithImage()
        {
            //var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            DataTable dt = new DataTable();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = "";
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " WHERE A.MILLISECOND >'" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";

            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());

            //Query = "select top " + NoOfRec + " * from ( SELECT  DemoId,VisId,DemoDocId,isnull(Android_Id,demodocid) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,PartyId,AreaId,remarks,productClassid,productSegmentId,ProductMatgrp,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],IMGURL,longitude,latitude,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransDemo WHERE SMID IN (" + ConPer_Id + ") union SELECT DemoId,VisId,DemoDocId,isnull(Android_Id,demodocid) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,PartyId,AreaId,remarks,productClassid,productSegmentId,ProductMatgrp,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],IMGURL,longitude,latitude,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM temp_TransDemo WHERE SMID IN (" + ConPer_Id + ") ) a " + MQry + " order by a.Milliseconds";
            //  List<RetailerDemo> rst = new List<RetailerDemo>();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");


                //else
                //{
                //    vdate = DateTime.Now.ToString("yyyy-MM-dd");
                //}

                Query = "SELECT TOP " + NoOfRec + " * FROM ( SELECT  DEMOID,VISID,DEMODOCID,ISNULL(ANDROID_ID,DEMODOCID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,PARTYID PARTYID,AREAID,REMARKS REMARKS,PRODUCTCLASSID PRODUCTCLASSID,PRODUCTSEGMENTID PRODUCTSEGMENTID,PRODUCTMATGRP,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MILLISECOND,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE FROM TRANSDEMO WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "'  UNION SELECT DEMOID,VISID,DEMODOCID,ISNULL(ANDROID_ID,DEMODOCID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,PARTYID PARTYID,AREAID,REMARKS REMARKS,PRODUCTCLASSID PRODUCTCLASSID,PRODUCTSEGMENTID PRODUCTSEGMENTID,PRODUCTMATGRP,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MILLISECOND,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE FROM TEMP_TRANSDEMO WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "' ) a " + MQry + " ORDER BY A.MILLISECOND";


                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    string path = "";
                //    if (dt.Rows[i]["IMGURL"].ToString() != "")
                //    {
                //        path = "http://" + host + (dt.Rows[i]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                //    }
                //    rst.Add(
                //        new RetailerDemo
                //        {
                //            DemoId = dt.Rows[i]["DemoId"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            DemoDocId = dt.Rows[i]["DemoDocId"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                //            VDate = dt.Rows[i]["VDate"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            Partyid = dt.Rows[i]["Partyid"].ToString(),
                //            AreaId = dt.Rows[i]["AreaId"].ToString(),
                //            Remarks = dt.Rows[i]["Remarks"].ToString(),
                //            ProductClassId = dt.Rows[i]["productClassid"].ToString(),
                //            ProductSegmentId = dt.Rows[i]["productSegmentId"].ToString(),
                //            ProductMatgrp = dt.Rows[i]["ProductMatgrp"].ToString(),
                //            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                //            IMGURL = path,
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()
                //        }
                //    );
                //}
                //dt.Dispose();
            }
            bodyStream.Dispose();
            dttopvisid.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetRetailerOrder()
        {
            //var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            string MQry = "";
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE A.MILLISECOND > '" + minDate + "'";
            }
            //  List<GetOrderList> rst = new List<GetOrderList>();
            //Query = "select top " + NoOfRec + " * FROM (SELECT  OrdId,VisId,OrdDocid,isnull(android_id,OrdDocid) as Android_Id ,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,Partyid,Areaid, Remarks,orderAmount,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],[IMGURL] FROM TransOrder where SMID in (" + ConPer_Id + ")  union SELECT OrdId,VisId,OrdDocid,isnull(android_id,OrdDocid) as Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,Partyid,Areaid, Remarks,orderAmount,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Milliseconds],longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date],[IMGURL] FROM temp_TransOrder where SMID in (" + ConPer_Id + ")) a  " + MQry + " order by a.Milliseconds";
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            DataTable dt = new DataTable();
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");



                Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT  ORDID,VISID,ORDDOCID,ISNULL(ANDROID_ID,ORDDOCID) AS ANDROID_ID ,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,PARTYID,AREAID, REMARKS,ORDERAMOUNT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MILLISECOND,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL FROM TRANSORDER WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "' UNION SELECT ORDID,VISID,ORDDOCID,ISNULL(ANDROID_ID,ORDDOCID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,PARTYID,AREAID, REMARKS,ORDERAMOUNT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MILLISECOND,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL FROM TEMP_TRANSORDER WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "') a  " + MQry + " ORDER BY A.MILLISECOND";

                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    string path = "";
                //    if (dt.Rows[i]["IMGURL"].ToString() != "")
                //    {
                //        path = "http://" + host + (dt.Rows[i]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                //    }
                //    rst.Add(
                //        new GetOrderList
                //        {
                //            OrdId = dt.Rows[i]["OrdId"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            OrdDocId = dt.Rows[i]["OrdDocId"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                //            VDate = dt.Rows[i]["VDate"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            Partyid = dt.Rows[i]["Partyid"].ToString(),
                //            AreaId = dt.Rows[i]["AreaId"].ToString(),
                //            Remarks = dt.Rows[i]["Remarks"].ToString(),
                //            OrderAmount = dt.Rows[i]["OrderAmount"].ToString(),
                //            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString(),
                //            IMGURL = path

                //        }
                //    );
                //}
                //dt.Dispose();
            }
            dttopvisid.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetRetailerOrder1()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            //  List<RetailerOrder1> rst = new List<RetailerOrder1>();
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE A.MILLISECOND > '" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());

            //Query = "select top " + NoOfRec + " * from (SELECT  Ord1Id,OrdId,VisId,OrdDocid,Sno,UserId,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,SMID,Partyid,Areaid,ItemId,Qty,rate,Remarks,amount,isnull(android_id,OrdDocid) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Vdate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Vdate AS date), Vdate) AS [Milliseconds],isnull(Android_Id1,Ord1Id) as Android_Id1,cases,unit,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM TransOrder1 where SMID in (" + ConPer_Id + ") union SELECT Ord1Id,OrdId,VisId,OrdDocid,Sno,UserId,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,SMID,Partyid,Areaid,ItemId,Qty,rate,Remarks,amount,isnull(android_id,OrdDocid) as Android_id,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Vdate AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Vdate AS date), Vdate) AS [Milliseconds],isnull(Android_Id1,Ord1Id) as Android_Id1,cases,unit,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Mobile_Created_date AS date), Mobile_Created_date) AS [Mobile_Created_date] FROM temp_TransOrder1 where SMID in (" + ConPer_Id + ")) a  " + MQry + " order by a.Milliseconds ";
            DataTable dt = new DataTable();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT  ORD1ID,ORDID,VISID,ORDDOCID ORDDOCID,SNO,USERID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,SMID ,PARTYID,AREAID AREAID,ITEMID ITEM,ISNULL(QTY,0) QTY,ISNULL(RATE,0) RATE,REMARKS,ISNULL(AMOUNT,0) AMOUNT,ISNULL(ANDROID_ID,ORDDOCID) AS ANDROID_ID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(VDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(VDATE AS DATE), VDATE) AS MILLISECOND,ISNULL(ANDROID_ID1,ORD1ID) AS ANDROID_ID1,CASES CASES,UNIT UNIT,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE FROM TRANSORDER1 WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "'  UNION SELECT ORD1ID,ORDID,VISID,ORDDOCID ORDDOCID,SNO,USERID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,SMID,PARTYID,AREAID AREAID,ITEMID ITEM,ISNULL(QTY,0) QTY,ISNULL(RATE,0)  RATE,REMARKS,ISNULL(AMOUNT,0) AMOUNT,ISNULL(ANDROID_ID,ORDDOCID) AS ANDROID_ID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(VDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(VDATE AS DATE), VDATE) AS MILLISECOND,ISNULL(ANDROID_ID1,ORD1ID) AS ANDROID_ID1,CASES CASES,UNIT UNIT,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE, ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE FROM TEMP_TRANSORDER1 WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "' ) a  " + MQry + " ORDER BY A.MILLISECOND ";


                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    rst.Add(
                //        new RetailerOrder1
                //        {
                //            Cases = dt.Rows[i]["cases"].ToString(),
                //            Unit = dt.Rows[i]["unit"].ToString(),
                //            Ord1Id = dt.Rows[i]["Ord1Id"].ToString(),
                //            OrdId = dt.Rows[i]["OrdId"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            OrdDocId = dt.Rows[i]["OrdDocId"].ToString(),
                //            Sno = dt.Rows[i]["Sno"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            VDate = dt.Rows[i]["VDate"].ToString(),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            Partyid = dt.Rows[i]["Partyid"].ToString(),
                //            AreaId = dt.Rows[i]["AreaId"].ToString(),
                //            Item = dt.Rows[i]["ItemId"].ToString(),
                //            Qty = dt.Rows[i]["Qty"].ToString(),
                //            Rate = dt.Rows[i]["rate"].ToString(),
                //            Remarks = dt.Rows[i]["Remarks"].ToString(),
                //            amount = dt.Rows[i]["amount"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_id"].ToString(),
                //            Android_Id1 = dt.Rows[i]["Android_id1"].ToString(),
                //            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()
                //        }
                //    );
                //}
                //dt.Dispose();
            }
            dttopvisid.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetRetailerSample()
        {
            //var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            string MQry = "";
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE A.MILLISECOND > '" + minDate + "'";
            }
            //List<GetSampleList> rst = new List<GetSampleList>();
            DataTable dt = new DataTable();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");



                Query = "select top " + NoOfRec + " * FROM (SELECT  SAMPLEID,VISID,SAMPLEDOCID SAMPLEDOCID,ISNULL(ANDROID_ID,SAMPLEDOCID) AS ANDROID_ID ,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,PARTYID,AREAID AREAID, REMARKS,ISNULL(AMOUNT,0) AMOUNT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MILLISECOND,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end)  IMGURL FROM TRANSSAMPLE WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "' UNION SELECT SAMPLEID,VISID,SAMPLEDOCID SAMPLEDOCID,ISNULL(ANDROID_ID,SAMPLEDOCID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,PARTYID,AREAID AREAID, REMARKS,ISNULL(AMOUNT,0) AMOUNT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MILLISECOND,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end)  IMGURL FROM TEMP_TRANSSAMPLE WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "') a  " + MQry + " ORDER BY A.MILLISECOND";

                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    string path = "";
                //    if (dt.Rows[i]["IMGURL"].ToString() != "")
                //    {
                //        path = "http://" + host + (dt.Rows[i]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                //    }
                //    rst.Add(
                //        new GetSampleList
                //        {
                //            SampleId = dt.Rows[i]["SampleId"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            SampleDocId = dt.Rows[i]["SampleDocId"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                //            VDate = dt.Rows[i]["VDate"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            Partyid = dt.Rows[i]["Partyid"].ToString(),
                //            AreaId = dt.Rows[i]["AreaId"].ToString(),
                //            Remarks = dt.Rows[i]["Remarks"].ToString(),
                //            Amount = dt.Rows[i]["Amount"].ToString(),
                //            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString(),
                //            IMGURL = path

                //        }
                //    );
                //}
                //dt.Dispose();
            }
            dttopvisid.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetRetailerSample1()
        {
            //var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            //  List<RetailerSample1> rst = new List<RetailerSample1>();
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE A.MILLISECOND > '" + minDate + "'";
            }
            DataTable dt = new DataTable();
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT  SAMPLE1ID,SAMPLEID,VISID,SAMPLEDOCID,SNO,USERID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,SMID,PARTYID,AREAID AREAID,ITEMID ITEM,QTY,RATE RATE,REMARKS,ISNULL(AMOUNT,0) AMOUNT,ISNULL(ANDROID_ID,SAMPLEDOCID) AS ANDROID_ID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(VDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(VDATE AS DATE), VDATE) AS MILLISECOND,ISNULL(ANDROID_ID1,SAMPLE1ID) AS ANDROID_ID1,CASES CASES,UNIT UNIT,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE FROM TRANSSAMPLE1 WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "'  UNION SELECT SAMPLE1ID,SAMPLEID,VISID,SAMPLEDOCID,SNO,USERID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,SMID,PARTYID,AREAID AREAID,ITEMID ITEM,QTY,RATE RATE,REMARKS,ISNULL(AMOUNT,0) AMOUNT,ISNULL(ANDROID_ID,SAMPLEDOCID) AS ANDROID_ID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(VDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(VDATE AS DATE), VDATE) AS MILLISECOND,ISNULL(ANDROID_ID1,SAMPLE1ID) AS ANDROID_ID1,CASES CASES,UNIT UNIT,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE FROM TEMP_TRANSSAMPLE1 WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "' ) a  " + MQry + " ORDER BY A.MILLISECOND ";


                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    rst.Add(
                //        new RetailerSample1
                //        {
                //            Cases = dt.Rows[i]["cases"].ToString(),
                //            Unit = dt.Rows[i]["unit"].ToString(),
                //            Sample1Id = dt.Rows[i]["Sample1Id"].ToString(),
                //            SampleId = dt.Rows[i]["SampleId"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            SampleDocId = dt.Rows[i]["SampleDocId"].ToString(),
                //            Sno = dt.Rows[i]["Sno"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            VDate = dt.Rows[i]["VDate"].ToString(),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            Partyid = dt.Rows[i]["Partyid"].ToString(),
                //            AreaId = dt.Rows[i]["AreaId"].ToString(),
                //            Item = dt.Rows[i]["ItemId"].ToString(),
                //            Qty = dt.Rows[i]["Qty"].ToString(),
                //            Rate = dt.Rows[i]["rate"].ToString(),
                //            Remarks = dt.Rows[i]["Remarks"].ToString(),
                //            amount = dt.Rows[i]["amount"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_id"].ToString(),
                //            Android_Id1 = dt.Rows[i]["Android_id1"].ToString(),
                //            Millisecond = dt.Rows[i]["Milliseconds"].ToString(),
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()
                //        }
                //    );
                //}
                //dt.Dispose();
            }
            dttopvisid.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetFailedVisit()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = "";
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE A.MS>'" + minDate + "'";
            }
            //  List<GetFailedVisitList> rst = new List<GetFailedVisitList>();
            //Query = "select top " + NoOfRec + " * from (SELECT  FVId,VisId,FVDocId,isnull(tf.Android_Id,FVDocId) as Android_Id,mp.partydist,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,tf.UserId,tf.SMID,Distid = (CASE WHEN mp.partydist = 1 THEN tf.PartyId END),Partyid = (CASE WHEN mp.partydist = 0 THEN tf.PartyId END),tf.AreaId,remarks,replace(convert(NVARCHAR, NextVisit, 106), ' ', '/') as NextVisitDate,VisitTime,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.created_date AS date), tf.created_date) AS [Milliseconds],reasonid,tf.longitude,tf.latitude,tf.address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.lat_long_datetime AS date), tf.lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.Mobile_Created_date AS date), tf.Mobile_Created_date) AS [Mobile_Created_date],tf.IMGURL as [IMGURL] FROM TransFailedVisit tf LEFT JOIN mastparty mp ON tf.PartyId=mp.PartyId WHERE tf.SMID IN (" + ConPer_Id + ")  union SELECT FVId,VisId,FVDocId,isnull(tf.Android_Id,FVDocId) as Android_Id,mp.partydist,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,tf.UserId,tf.SMID,Distid = (CASE WHEN mp.partydist = 1 THEN tf.PartyId END),Partyid = (CASE WHEN mp.partydist = 0 THEN tf.PartyId END),tf.AreaId,remarks,replace(convert(NVARCHAR, NextVisit, 106), ' ', '/') as NextVisitDate,VisitTime,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.created_date AS date), tf.created_date) AS [Milliseconds],reasonid,tf.longitude,tf.latitude,tf.address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.lat_long_datetime AS date), tf.lat_long_datetime) AS [lat_long_datetime],(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(tf.Mobile_Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(tf.Mobile_Created_date AS date), tf.Mobile_Created_date) AS [Mobile_Created_date],tf.IMGURL as [IMGURL] FROM temp_TransFailedVisit tf LEFT JOIN mastparty mp ON tf.PartyId=mp.PartyId WHERE tf.SMID IN (" + ConPer_Id + ") ) a " + MQry + " order by a.Milliseconds";
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            DataTable dt = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT TOP " + NoOfRec + " * ,A.MS AS CREATEDDATE FROM (SELECT  FVID,VISID,FVDOCID,ISNULL(TF.ANDROID_ID,FVDOCID) AS ANDROID_ID,MP.PARTYDIST,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,TF.USERID,TF.SMID,DISTID = (CASE WHEN MP.PARTYDIST = 1 THEN TF.PARTYID END),PARTYID = (CASE WHEN MP.PARTYDIST = 0 THEN TF.PARTYID END),TF.AREAID,REMARKS REMARK,REPLACE(CONVERT(NVARCHAR, NEXTVISIT, 106), ' ', '/') AS NEXTVISITDATE,VISITTIME,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(TF.CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(TF.CREATED_DATE AS DATE), TF.CREATED_DATE) AS MS,REASONID REASONID,Isnull(TF.LONGITUDE,'') LONGITUDE,Isnull(TF.LATITUDE,'') LATITUDE,TF.ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(TF.LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(TF.LAT_LONG_DATETIME AS DATE), TF.LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(TF.MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(TF.MOBILE_CREATED_DATE AS DATE), TF.MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE,(Case when Isnull(tf.IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(tf.IMGURL,'~','') else '' end) as [IMGURL] FROM TRANSFAILEDVISIT TF LEFT JOIN MASTPARTY MP ON TF.PARTYID=MP.PARTYID WHERE TF.SMID IN (" + ConPer_Id + ") and vdate='" + vdate + "'  UNION SELECT FVID,VISID,FVDOCID,ISNULL(TF.ANDROID_ID,FVDOCID) AS ANDROID_ID,MP.PARTYDIST,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,TF.USERID,TF.SMID,DISTID = (CASE WHEN MP.PARTYDIST = 1 THEN TF.PARTYID END),PARTYID = (CASE WHEN MP.PARTYDIST = 0 THEN TF.PARTYID END),TF.AREAID,REMARKS REMARK,REPLACE(CONVERT(NVARCHAR, NEXTVISIT, 106), ' ', '/') AS NEXTVISITDATE,VISITTIME,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(TF.CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(TF.CREATED_DATE AS DATE), TF.CREATED_DATE) AS MS,REASONID REASONID,Isnull(TF.LONGITUDE,'') LONGITUDE,Isnull(TF.LATITUDE,'') LATITUDE,TF.ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(TF.LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(TF.LAT_LONG_DATETIME AS DATE), TF.LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(TF.MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(TF.MOBILE_CREATED_DATE AS DATE), TF.MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE,(Case when Isnull(tf.IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(tf.IMGURL,'~','') else '' end)  AS [IMGURL] FROM TEMP_TRANSFAILEDVISIT TF LEFT JOIN MASTPARTY MP ON TF.PARTYID=MP.PARTYID WHERE TF.SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "' ) A " + MQry + " ORDER BY A.MS";

                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    string path = "";
                //    if (dt.Rows[i]["IMGURL"].ToString() != "")
                //    {
                //        path = "http://" + host + (dt.Rows[i]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                //    }
                //    rst.Add(
                //        new GetFailedVisitList
                //        {
                //            FVId = dt.Rows[i]["FVId"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            FVDocId = dt.Rows[i]["FVDocId"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                //            VDate = dt.Rows[i]["Vdate"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            DistId = dt.Rows[i]["DistId"].ToString(),
                //            AreaId = dt.Rows[i]["AreaId"].ToString(),
                //            Remark = dt.Rows[i]["remarks"].ToString(),
                //            NextVisitDate = dt.Rows[i]["NextVisitDate"].ToString(),
                //            VisitTime = dt.Rows[i]["VisitTime"].ToString(),
                //            CreatedDate = dt.Rows[i]["Milliseconds"].ToString(),
                //            reasonId = dt.Rows[i]["reasonid"].ToString(),
                //            MS = dt.Rows[i]["Milliseconds"].ToString(),
                //            PartyID = dt.Rows[i]["Partyid"].ToString(),
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString(),
                //            IMGURL = path
                //        }
                //    );
                //}
                //dt.Dispose();
            }
            dttopvisid.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetPartyCollection()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //   DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;

            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = "";
            DataTable dt = new DataTable();
            // List<PartyCollection> rst = new List<PartyCollection>();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " WHERE A.CREATEDDATE > '" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT COLLID,VISID,COLLDOCID,ISNULL(ANDROID_ID,COLLDOCID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,PARTYID PARTYID,AREAID,MODE,AMOUNT,REPLACE(CONVERT(NVARCHAR, PAYMENTDATE, 106), ' ', '/') AS [PAYMENTDATE],CHEQUE_DDNO CHEQUE_DD_NO,REPLACE(CONVERT(NVARCHAR, CHEQUE_DD_DATE, 106), ' ', '/') AS CHEQUE_DD_DATE,BANK,BRANCH,REMARKS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS CREATEDDATE,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE FROM TRANSCOLLECTION WHERE SMID IN (" + ConPer_Id + ") AND      VDATE='" + vdate + "'  UNION ALL SELECT COLLID,VISID,COLLDOCID,ISNULL(ANDROID_ID,COLLDOCID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,PARTYID PARTYID,AREAID,MODE,AMOUNT,REPLACE(CONVERT(NVARCHAR, PAYMENTDATE, 106), ' ', '/') AS [PAYMENTDATE],CHEQUE_DDNO CHEQUE_DD_NO,REPLACE(CONVERT(NVARCHAR, CHEQUE_DD_DATE, 106), ' ', '/') AS CHEQUE_DD_DATE,BANK,BRANCH,REMARKS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS CREATEDDATE,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE FROM TEMP_TRANSCOLLECTION WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "' ) A " + MQry + " ORDER BY A.CREATEDDATE";


                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    rst.Add(
                //        new PartyCollection
                //        {
                //            CollId = dt.Rows[i]["CollId"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            CollDocId = dt.Rows[i]["CollDocId"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                //            VDate = dt.Rows[i]["VDate"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            Partyid = dt.Rows[i]["Partyid"].ToString(),
                //            AreaId = dt.Rows[i]["AreaId"].ToString(),
                //            Mode = dt.Rows[i]["Mode"].ToString(),
                //            Amount = dt.Rows[i]["Amount"].ToString(),
                //            PaymentDate = dt.Rows[i]["PaymentDate"].ToString(),
                //            Cheque_DD_No = dt.Rows[i]["Cheque_DDNo"].ToString(),
                //            Cheque_DD_Date = dt.Rows[i]["Cheque_DD_Date"].ToString(),
                //            Bank = dt.Rows[i]["Bank"].ToString(),
                //            Branch = dt.Rows[i]["Branch"].ToString(),
                //            Remarks = dt.Rows[i]["Remarks"].ToString(),
                //            CreatedDate = dt.Rows[i]["Milliseconds"].ToString(),
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()

                //        }
                //    );
                //}
                //dt.Dispose();
            }
            dttopvisid.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetRetailerCompetitorWithImage()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = ""; string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " WHERE T.MS > '" + minDate + "'";
            }
            DataTable dt = new DataTable();
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            //List<RetailerCompetitor> rst = new List<RetailerCompetitor>();
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT COMPTID,VISID,DOCID,ISNULL(ANDROID_ID,DOCID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,PARTYID PARTYID,ITEM,QTY,RATE, (CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)  AS MS,REMARKS,COMPNAME,ISNULL(DISCOUNT,0.00) AS DISCOUNT,BRANDACTIVITY,MEETACTIVITY MEETCTIVITY,ROADSHOW,[SCHEME/OFFERS] SCHEME,OTHERGENERALINFO OTHERGERNRALINFO,(CASE WHEN ISNULL(OTHERACTIVITY,'') =1 THEN 'True' ELSE 'False' END) OTHERACTIVITY,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS [MOBILE_CREATED_DATE] FROM TRANSCOMPETITOR WHERE SMID IN (" + ConPer_Id + ") and vdate='" + vdate + "' ) AS T " + MQry + " UNION SELECT * FROM (SELECT COMPTID,VISID,DOCID,ISNULL(ANDROID_ID,DOCID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,PARTYID PARTYID,ITEM,QTY,RATE, (CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)  AS MS,REMARKS,COMPNAME,ISNULL(DISCOUNT,0.00) AS DISCOUNT,BRANDACTIVITY,MEETACTIVITY MEETCTIVITY,ROADSHOW,[SCHEME/OFFERS] SCHEME,OTHERGENERALINFO OTHERGERNRALINFO,(CASE WHEN ISNULL(OTHERACTIVITY,'') =1 THEN 'True' ELSE 'False' END) OTHERACTIVITY, (Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS [MOBILE_CREATED_DATE] FROM TEMP_TRANSCOMPETITOR WHERE SMID IN (" + ConPer_Id + ")  AND VDATE='" + vdate + "' ) AS T " + MQry + " ORDER BY MS";


                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    string path = "";
                //    if (dt.Rows[i]["IMGURL"].ToString() != "")
                //    {
                //        path = "http://" + host + (dt.Rows[i]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                //    }
                //    rst.Add(
                //        new RetailerCompetitor
                //        {
                //            ComptId = dt.Rows[i]["ComptId"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            DocId = dt.Rows[i]["DocId"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                //            VDate = dt.Rows[i]["VDate"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            Partyid = dt.Rows[i]["Partyid"].ToString(),
                //            Item = dt.Rows[i]["Item"].ToString(),
                //            Qty = dt.Rows[i]["Qty"].ToString(),
                //            Rate = dt.Rows[i]["Rate"].ToString(),
                //            MS = dt.Rows[i]["Milliseconds"].ToString(),
                //            Remarks = dt.Rows[i]["Remarks"].ToString(),
                //            CompName = dt.Rows[i]["CompName"].ToString(),
                //            Discount = dt.Rows[i]["Discount"].ToString(),
                //            BrandActivity = dt.Rows[i]["BrandActivity"].ToString(),
                //            MeetCtivity = dt.Rows[i]["MeetActivity"].ToString(),
                //            RoadShow = dt.Rows[i]["RoadShow"].ToString(),
                //            Scheme = dt.Rows[i]["Scheme/offers"].ToString(),
                //            OthergernralInfo = dt.Rows[i]["OtherGeneralInfo"].ToString(),
                //            OtherActivity = dt.Rows[i]["OtherActivity"].ToString(),
                //            IMGURL = path,
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()
                //        }
                //    );
                //}
                //dt.Dispose();
            }
            dttopvisid.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetDistributorCollection()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = "";
            //  List<DistributorCollection> rst = new List<DistributorCollection>();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " WHERE A.MS > '" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            //  Query = "SELECT CollId,VisId,CollDocId,ISNULL(Android_Id,CollDocId) AS Android_Id,replace(convert(NVARCHAR, Vdate, 106), ' ', '/') AS Vdate,UserId,SMID,DistId,Mode,Amount,replace(convert(NVARCHAR, paymentDate, 106), ' ', '/') as [paymentDate],Cheque_DDNo,replace(convert(NVARCHAR, Cheque_DD_Date, 106), ' ', '/') as [Cheque_DD_Date],Bank,Branch,Remarks,(CAST(DATEDIFF(second, '1970-01-01', CAST(created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(created_date AS date), created_date) AS [Createddate] FROM DistributerCollection WHERE SMID IN (" + ConPer_Id + ") " + MQry + "";
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            DataTable dt = new DataTable();
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT top " + NoOfRec + " *,A.MS AS CREATEDDATE,'' AS AREAID FROM (SELECT COLLID,VISID,COLLDOCID,ISNULL(ANDROID_ID,COLLDOCID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,DISTID PARTYID,MODE,AMOUNT,REPLACE(CONVERT(NVARCHAR, PAYMENTDATE, 106), ' ', '/') AS [PAYMENTDATE],CHEQUE_DDNO CHEQUE_DD_NO,REPLACE(CONVERT(NVARCHAR, CHEQUE_DD_DATE, 106), ' ', '/') AS [CHEQUE_DD_DATE],BANK,BRANCH,REMARKS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MS,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS [LATLONGDT],(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS [MOBILE_CREATED_DATE] FROM DISTRIBUTERCOLLECTION WHERE SMID IN (" + ConPer_Id + ") and vdate='" + vdate + "'  ) A " + MQry + " ORDER BY A.MS";


                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    rst.Add(
                //        new DistributorCollection
                //        {
                //            CollId = dt.Rows[i]["CollId"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            CollDocId = dt.Rows[i]["CollDocId"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                //            VDate = dt.Rows[i]["VDate"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            Partyid = dt.Rows[i]["DistId"].ToString(),
                //            Mode = dt.Rows[i]["Mode"].ToString(),
                //            Amount = dt.Rows[i]["Amount"].ToString(),
                //            PaymentDate = dt.Rows[i]["PaymentDate"].ToString(),
                //            Cheque_DD_No = dt.Rows[i]["Cheque_DDNo"].ToString(),
                //            Cheque_DD_Date = dt.Rows[i]["Cheque_DD_Date"].ToString(),
                //            Bank = dt.Rows[i]["Bank"].ToString(),
                //            Branch = dt.Rows[i]["Branch"].ToString(),
                //            Remarks = dt.Rows[i]["Remarks"].ToString(),
                //            CreatedDate = dt.Rows[i]["Milliseconds"].ToString(),
                //            MS = dt.Rows[i]["Milliseconds"].ToString(),
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()
                //        }
                //    );
                //}
                //dt.Dispose();
            }
            dttopvisid.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }




        [WebMethod]
        public void JSGetDistributorDiscussionWithImage()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = ""; string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " WHERE A.CREATEDDATE >'" + minDate + "'";
            }
            DataTable dt = new DataTable();
            //List<DistributorDiscussion> rst = new List<DistributorDiscussion>();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT top " + NoOfRec + " *,'' AS TYPE FROM (SELECT VISDISTID,VISID,ISNULL(ANDROID_ID,VISDISTID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,CITYID CITYID,DISTID,REMARKDIST AS REMARK,REPLACE(CONVERT(NVARCHAR, NEXTVISITDATE, 106), ' ', '/') AS NEXTVISITDATE,NEXTVISITTIME NEXTVISITTIME,SPENTFRTIME AS SPENDFROMTIME,SPENTTOTIME AS SPENDTODATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS CREATEDDATE,STOCK STOCK,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,[DISCDOCID] DOCID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE FROM TRANSVISITDIST WHERE SMID IN (" + ConPer_Id + ") AND TYPE IS NULL  AND  VDATE='" + vdate + "'  UNION SELECT VISDISTID,VISID,ISNULL(ANDROID_ID,VISDISTID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,CITYID CITYID,DISTID,REMARKDIST AS REMARK,REPLACE(CONVERT(NVARCHAR, NEXTVISITDATE, 106), ' ', '/') AS NEXTVISITDATE,NEXTVISITTIME NEXTVISITTIME,SPENTFRTIME AS SPENDFROMTIME,SPENTTOTIME AS SPENDTODATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS CREATEDDATE,STOCK STOCK,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,[DISCDOCID] DOCID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE FROM TEMP_TRANSVISITDIST WHERE SMID IN (" + ConPer_Id + ") AND TYPE IS NULL    AND VDATE='" + vdate + "'  ) A " + MQry + " ORDER BY A.CREATEDDATE";


                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    string path = "";
                //    if (dt.Rows[i]["IMGURL"].ToString() != "")
                //    {
                //        path = "http://" + host + (dt.Rows[i]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                //    }
                //    rst.Add(
                //        new DistributorDiscussion
                //        {
                //            Docid = dt.Rows[i]["DiscDocid"].ToString(),
                //            VisDistId = dt.Rows[i]["VisDistId"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                //            VDate = dt.Rows[i]["VDate"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            Cityid = dt.Rows[i]["CityId"].ToString(),
                //            DistId = dt.Rows[i]["DistId"].ToString(),
                //            Remark = dt.Rows[i]["Remark"].ToString(),
                //            NextVisitDate = dt.Rows[i]["NextVisitDate"].ToString(),
                //            NextVisitTime = dt.Rows[i]["nextVisitTime"].ToString(),
                //            SpendFromTime = dt.Rows[i]["SpendfromTime"].ToString(),
                //            SpendToDate = dt.Rows[i]["SpendToTime"].ToString(),
                //            CreatedDate = dt.Rows[i]["Milliseconds"].ToString(),
                //            Stock = dt.Rows[i]["stock"].ToString(),
                //            IMGURL = path,
                //            // IMGURL = dt.Rows[i]["IMGURL"].ToString(),
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString()

                //        }
                //    );
                //}
                //dt.Dispose();
            }
            dttopvisid.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }


        [WebMethod]
        public void JSGetOtherDiscussionWithImage()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            Query = "select dataamt from mastenviro";
            //  List<DistributorDiscussion> rst = new List<DistributorDiscussion>();
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = ""; string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " WHERE A.CREATEDDATE >'" + minDate + "'";
            }
            DataTable dt = new DataTable();
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and SMID=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT VISDISTID,VISID,ISNULL(ANDROID_ID,VISDISTID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,CITYID CITYID,DISTID,REMARKDIST AS REMARK,ISNULL(REPLACE(CONVERT(NVARCHAR, NEXTVISITDATE, 106), ' ', '/'),'') AS NEXTVISITDATE,ISNULL(NEXTVISITTIME,'') NEXTVISITTIME,ISNULL(SPENTFRTIME,'') AS SPENDFROMTIME,ISNULL(SPENTTOTIME,'') AS SPENDTODATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS CREATEDDATE,STOCK STOCK,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,[DISCDOCID] DOCID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS [MOBILE_CREATED_DATE],[TYPE] FROM TRANSVISITDIST WHERE SMID IN (" + ConPer_Id + ") AND TYPE IS NOT NULL AND  VDATE='" + vdate + "'  UNION SELECT VISDISTID,VISID,ISNULL(ANDROID_ID,VISDISTID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID,SMID,CITYID CITYID,DISTID,REMARKDIST AS REMARK,ISNULL(REPLACE(CONVERT(NVARCHAR, NEXTVISITDATE, 106), ' ', '/'),'') AS NEXTVISITDATE,ISNULL(NEXTVISITTIME,'') NEXTVISITTIME,ISNULL(SPENTFRTIME,'') AS SPENDFROMTIME,ISNULL(SPENTTOTIME,'') AS SPENDTODATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS CREATEDDATE,STOCK STOCK,(Case when Isnull(IMGURL,'')<>'' then 'http://' + '" + host + "' + Replace(IMGURL,'~','') else '' end) IMGURL,Isnull(LONGITUDE,'') LONGITUDE,Isnull(LATITUDE,'') LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,[DISCDOCID] DOCID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS [MOBILE_CREATED_DATE],[TYPE] FROM TEMP_TRANSVISITDIST WHERE SMID IN (" + ConPer_Id + ") AND TYPE IS NOT NULL   AND VDATE='" + vdate + "'    ) A " + MQry + " ORDER BY A.CREATEDDATE";


                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    string path = "";
                //    if (dt.Rows[i]["IMGURL"].ToString() != "")
                //    {
                //        path = "http://" + host + (dt.Rows[i]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                //    }
                //    rst.Add(
                //        new DistributorDiscussion
                //        {
                //            Docid = dt.Rows[i]["DiscDocid"].ToString(),
                //            VisDistId = dt.Rows[i]["VisDistId"].ToString(),
                //            VisId = dt.Rows[i]["VisId"].ToString(),
                //            Android_Id = dt.Rows[i]["Android_Id"].ToString(),
                //            VDate = dt.Rows[i]["VDate"].ToString(),
                //            UserId = dt.Rows[i]["UserId"].ToString(),
                //            SMID = dt.Rows[i]["SMID"].ToString(),
                //            Cityid = dt.Rows[i]["CityId"].ToString(),
                //            DistId = dt.Rows[i]["DistId"].ToString(),
                //            Remark = dt.Rows[i]["Remark"].ToString(),
                //            NextVisitDate = dt.Rows[i]["NextVisitDate"].ToString(),
                //            NextVisitTime = dt.Rows[i]["nextVisitTime"].ToString(),
                //            SpendFromTime = dt.Rows[i]["SpendfromTime"].ToString(),
                //            SpendToDate = dt.Rows[i]["SpendToTime"].ToString(),
                //            CreatedDate = dt.Rows[i]["Milliseconds"].ToString(),
                //            Stock = dt.Rows[i]["stock"].ToString(),
                //            IMGURL = path,
                //            // IMGURL = dt.Rows[i]["IMGURL"].ToString(),
                //            Longitude = dt.Rows[i]["longitude"].ToString(),
                //            Latitude = dt.Rows[i]["latitude"].ToString(),
                //            latlongdt = dt.Rows[i]["lat_long_datetime"].ToString(),
                //            mobile_created_date = dt.Rows[i]["Mobile_Created_date"].ToString(),
                //            Type = dt.Rows[i]["Type"].ToString()

                //        }
                //    );
                //}
                //dt.Dispose();
            }
            dttopvisid.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
            // dt.Dispose();
        }

        [DataContract]
        public class VisitCode
        {
            [DataMember]
            public string C { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetVisitcode()
        {
            string str = "SELECT code  C  FROM visitcode";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            //List<VisitCode> rst = new List<VisitCode>();
            //for (int i = 0; i < dt.Rows.Count; i++)
            //{
            //    {
            //        rst.Add(
            //            new VisitCode
            //            {
            //                C = dt.Rows[i]["code"].ToString()
            //            }
            //        );
            //    }
            //}
            //dt.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetDynamicMenu()
        {
            //   var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string SMID = OBJRESPONSE.BODY[0].SMID;

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string Query = "select roleid from MastSalesRep where SMID=" + SMID + "";
            int role_id = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            // Query = @"select * from MastRolePermission_android mra left join mastpage mp on mp.pageid=mra.PageId  where mp.android='Y' and mra.roleid=" + role_id + "";
            //            Query = @"select mp.*,mra.* ,case when mra.ViewP is null then 'True' else mra.ViewP end as viewPer from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId where mp.android='Y' and mp.level_idx=1 and mp.PageId in (select distinct mp.Parent_Id
            //                    from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId where mp.android='Y'  and mra.roleid=" + role_id + " and viewp>0 ) union select mp.*,mra.*,case when mra.ViewP is null then 'True' else mra.ViewP end as viewPer from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId  where mp.android='Y' and mra.roleid=" + role_id + " and viewp>0";

            Query = "SELECT (Case when Isnull(menuicon,'')<>'' then 'http://' + '" + host + "' + Replace(menuicon,'~','') else '' end)  ICON,MP.PAGEID,PAGENAME,ADDP,EDITP,DELETEP,PARENT_ID PARENTID,ANDROID_FORM FORM_FILTER,DISPLAYNAME,LEVEL_IDX,IDX ,CASE WHEN MRA.VIEWP IS NULL THEN 'True' ELSE MRA.VIEWP END AS VIEWP FROM MASTPAGE MP  LEFT JOIN MASTROLEPERMISSION_ANDROID MRA ON MP.PAGEID=MRA.PAGEID WHERE MP.ANDROID='Y' AND MP.LEVEL_IDX=1 AND MP.PAGEID IN (SELECT DISTINCT MP.PARENT_ID   FROM MASTPAGE MP LEFT JOIN MASTROLEPERMISSION_ANDROID MRA ON MP.PAGEID=MRA.PAGEID  WHERE MP.ANDROID='Y'   AND MRA.ROLEID=" + role_id + " AND VIEWP>0 ) UNION SELECT (Case when Isnull(menuicon,'')<>'' then 'http://' + '" + host + "' + Replace(menuicon,'~','') else '' end)  ICON,MP.PAGEID,PAGENAME,ADDP,EDITP,DELETEP,PARENT_ID PARENTID,ANDROID_FORM FORM_FILTER,DISPLAYNAME,LEVEL_IDX,IDX ,CASE WHEN MRA.VIEWP IS NULL THEN 'True' ELSE MRA.VIEWP END AS VIEWP	FROM MASTPAGE MP LEFT JOIN MASTROLEPERMISSION_ANDROID MRA ON MP.PAGEID=MRA.PAGEID  WHERE MP.ANDROID='Y'  AND MRA.ROLEID=" + role_id + " AND VIEWP>0 ";
            DataTable dtcheck = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<GetDynamicmenu> rst = new List<GetDynamicmenu>();
            //{
            //  );
            //    if (dtcheck.Rows.Count > 0)
            //    {
            //        for (int i = 0; i < dtcheck.Rows.Count; i++)
            //        {
            //            string path = "";

            //            if (dtcheck.Rows[i]["menuicon"].ToString() != "")
            //            {
            //                path = "http://" + host + (dtcheck.Rows[i]["menuicon"].ToString()).Replace(@"~", string.Empty);
            //            }
            //            {
            //                rst.Add(
            //                    new GetDynamicmenu
            //                    {
            //                        pageid = dtcheck.Rows[i]["pageid"].ToString(),
            //                        pagename = dtcheck.Rows[i]["pagename"].ToString(),
            //                        viewp = dtcheck.Rows[i]["viewPer"].ToString(),
            //                        addp = dtcheck.Rows[i]["addp"].ToString(),
            //                        editp = dtcheck.Rows[i]["editp"].ToString(),
            //                        deletep = dtcheck.Rows[i]["deletep"].ToString(),
            //                        parentid = dtcheck.Rows[i]["parent_id"].ToString(),
            //                        displayname = dtcheck.Rows[i]["displayname"].ToString(),
            //                        level_idx = dtcheck.Rows[i]["level_idx"].ToString(),
            //                        idx = dtcheck.Rows[i]["idx"].ToString(),
            //                        Form_Filter = dtcheck.Rows[i]["android_form"].ToString(),
            //                        Icon = path,
            //                    }
            //                );
            //            }
            //        }
            //    }
            dtcheck.Dispose();
            bodyStream.Dispose();
            // }
            Context.Response.Write(JsonConvert.SerializeObject(dtcheck));
            dtcheck.Dispose();
        }
        //        [WebMethod]
        //        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //        public void xjsgetmenuforpocketMis_V2()
        //        {
        //            var httpRequest = HttpContext.Current.Request;
        //            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
        //            DataTable DTadmin = new DataTable();
        //            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //            var bodyText = bodyStream.ReadToEnd();
        //            //     string items = httpRequest.Params["orderdetail"].ToString();
        //            var OBJRESPONSE = JsonConvert.DeserializeObject<MISMenu_V2>(bodyText);
        //            string SMID = OBJRESPONSE.SMID;
        //            string app = OBJRESPONSE.app;
        //            string Parentid = OBJRESPONSE.ParentID;
        //            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
        //            string Query = "select roleid from MastSalesRep where SMID=" + SMID + "";
        //            int role_id = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
        //            // Query = @"select * from MastRolePermission_android mra left join mastpage mp on mp.pageid=mra.PageId  where mp.android='Y' and mra.roleid=" + role_id + "";
        //            Query = @"   select mp.*,mra.*,case when mra.ViewP is null then 'True' else mra.ViewP end as viewPer
        //                       from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId 
        //                       LEFT JOIN Mastpage Mp1 ON mp.Parent_Id=Mp1.PageId
        //                     where mp.android='Y' and mra.roleid=" + role_id + " and viewp>0 and mra.app='" + app + "' AND mp.Parent_Id=" + Parentid + " ";
        //            List<GetDynamicmenu> rst = new List<GetDynamicmenu>();
        //            {
        //                DataTable dtcheck = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
        //                if (dtcheck.Rows.Count > 0)
        //                {
        //                    for (int i = 0; i < dtcheck.Rows.Count; i++)
        //                    {
        //                        string path = "";
        //                        if (dtcheck.Rows[i]["menuicon"].ToString() != "")
        //                        {
        //                            path = "http://" + host + (dtcheck.Rows[i]["menuicon"].ToString()).Replace(@"~", string.Empty);
        //                        }
        //                        {
        //                            rst.Add(
        //                                new GetDynamicmenu
        //                                {
        //                                    pageid = dtcheck.Rows[i]["pageid"].ToString(),
        //                                    pagename = dtcheck.Rows[i]["pagename"].ToString(),
        //                                    viewp = dtcheck.Rows[i]["viewPer"].ToString(),
        //                                    addp = dtcheck.Rows[i]["addp"].ToString(),
        //                                    editp = dtcheck.Rows[i]["editp"].ToString(),
        //                                    deletep = dtcheck.Rows[i]["deletep"].ToString(),
        //                                    parentid = dtcheck.Rows[i]["parent_id"].ToString(),
        //                                    displayname = dtcheck.Rows[i]["displayname"].ToString(),
        //                                    level_idx = dtcheck.Rows[i]["level_idx"].ToString(),
        //                                    idx = dtcheck.Rows[i]["idx"].ToString(),
        //                                    Form_Filter = dtcheck.Rows[i]["android_form"].ToString(),
        //                                    Icon = path,
        //                                }
        //                            );
        //                        }
        //                    }
        //                }


        //            }
        //            Context.Response.Write(JsonConvert.SerializeObject(rst));
        //        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetDynamicMenuAppwise()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //   DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string SMID = OBJRESPONSE.BODY[0].SMID;
            string app = OBJRESPONSE.BODY[0].APP;

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string Query = "select roleid from MastSalesRep where SMID=" + SMID + "";
            int role_id = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            // Query = @"select * from MastRolePermission_android mra left join mastpage mp on mp.pageid=mra.PageId  where mp.android='Y' and mra.roleid=" + role_id + "";

            //"select (Case when Isnull(menuicon,'')<>'' then 'http://' + '" + host + "' + Replace(menuicon,'~','') else '' end)  Icon,mp.pageid,pagename,addp,editp,deletep,parent_id parentid,android_form Form_Filter,displayname,level_idx,idx ,case when mra.ViewP is null then 'True' else mra.ViewP end as viewp from mastpage mp  left join MastRolePermission_android mra on mp.pageid=mra.PageId where mp.android='Y' and mp.level_idx=1 and mp.PageId in (select distinct mp.Parent_Id   from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId  where mp.android='Y'   and mra.roleid=" + role_id + " and viewp>0 ) union select (Case when Isnull(menuicon,'')<>'' then 'http://' + '" + host + "' + Replace(menuicon,'~','') else '' end)  Icon,mp.pageid,pagename,addp,editp,deletep,parent_id parentid,android_form Form_Filter,displayname,level_idx,idx ,case when mra.ViewP is null then 'True' else mra.ViewP end as viewp	from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId  where mp.android='Y'  and mra.roleid=" + role_id + " and viewp>0 ";

            Query = @"SELECT (Case when Isnull(menuicon,'')<>'' then 'http://' + '" + host + "' + Replace(menuicon,'~','') else '' end)  ICON,MP.PAGEID,PAGENAME,ADDP,EDITP,DELETEP,PARENT_ID PARENTID,ANDROID_FORM FORM_FILTER,DISPLAYNAME,LEVEL_IDX,IDX ,CASE WHEN MRA.VIEWP IS NULL THEN 'True' ELSE MRA.VIEWP END AS VIEWP FROM MASTPAGE MP LEFT JOIN MASTROLEPERMISSION_ANDROID MRA ON MP.PAGEID=MRA.PAGEID WHERE MP.ANDROID='Y' AND MP.LEVEL_IDX=1 AND MP.PAGEID IN (SELECT DISTINCT MP.PARENT_ID                     FROM MASTPAGE MP LEFT JOIN MASTROLEPERMISSION_ANDROID MRA ON MP.PAGEID=MRA.PAGEID WHERE MP.ANDROID='Y'  AND MRA.ROLEID=" + role_id + " AND VIEWP>0 AND MRA.APP='" + app + "' )   UNION SELECT (Case when Isnull(menuicon,'')<>'' then 'http://' + '" + host + "' + Replace(menuicon,'~','') else '' end)  ICON,MP.PAGEID,PAGENAME,ADDP,EDITP,DELETEP,PARENT_ID PARENTID,ANDROID_FORM FORM_FILTER,DISPLAYNAME,LEVEL_IDX,IDX ,CASE WHEN MRA.VIEWP IS NULL THEN 'True' ELSE MRA.VIEWP END AS VIEWP FROM MASTPAGE MP LEFT JOIN MASTROLEPERMISSION_ANDROID MRA ON MP.PAGEID=MRA.PAGEID  WHERE MP.ANDROID='Y' AND MRA.ROLEID=" + role_id + " AND VIEWP>0 AND MRA.APP='" + app + "'";
            //List<GetDynamicmenu> rst = new List<GetDynamicmenu>();
            //{
            DataTable dtcheck = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //if (dtcheck.Rows.Count > 0)
            //{
            //    for (int i = 0; i < dtcheck.Rows.Count; i++)
            //    {
            //        string path = "";
            //        if (dtcheck.Rows[i]["menuicon"].ToString() != "")
            //        {
            //            path = "http://" + host + (dtcheck.Rows[i]["menuicon"].ToString()).Replace(@"~", string.Empty);
            //        }
            //        {
            //            rst.Add(
            //                new GetDynamicmenu
            //                {
            //                    pageid = dtcheck.Rows[i]["pageid"].ToString(),
            //                    pagename = dtcheck.Rows[i]["pagename"].ToString(),
            //                    viewp = dtcheck.Rows[i]["viewPer"].ToString(),
            //                    addp = dtcheck.Rows[i]["addp"].ToString(),
            //                    editp = dtcheck.Rows[i]["editp"].ToString(),
            //                    deletep = dtcheck.Rows[i]["deletep"].ToString(),
            //                    parentid = dtcheck.Rows[i]["parent_id"].ToString(),
            //                    displayname = dtcheck.Rows[i]["displayname"].ToString(),
            //                    level_idx = dtcheck.Rows[i]["level_idx"].ToString(),
            //                    idx = dtcheck.Rows[i]["idx"].ToString(),
            //                    Form_Filter = dtcheck.Rows[i]["android_form"].ToString(),
            //                    Icon = path,
            //                }
            //            );
            //        }
            //    }
            //}

            //dtcheck.Dispose();
            // }
            bodyStream.Dispose();

            Context.Response.Write(JsonConvert.SerializeObject(dtcheck));
            dtcheck.Dispose();
        }

        [DataContract]
        public class DSRValidate
        {
            [DataMember]
            public string MSG { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetDSRValidate()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //  DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string SMID = OBJRESPONSE.BODY[0].SMID;
            string Visitdate = OBJRESPONSE.BODY[0].VISITDATE;
            string androidid = OBJRESPONSE.BODY[0].ANDROIDID;
            bodyStream.Dispose();
            //string Send = "";
            List<DSRValidate> rst = new List<DSRValidate>();
            //string str = "select count(*) as vcount from TransVisit  where VDate='" + Visitdate + "' and SMID='" + SMID + "' and (appstatus != 'Reject' or appstatus is null)  and Lock=1";
            //int exists = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, str));
            //if (exists == 0)
            //{
            //    Send = "No";
            //}
            //else
            //{
            //    str = "select count(*) as vcount from TransVisit  where VDate='" + Visitdate + "' and SMID='" + SMID + "' and android_id='" + androidid + "' and (appstatus != 'Reject' or appstatus is null)  and Lock=1";
            //    int exists_and = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, str));
            //    if (exists_and > 0)
            //    {
            //        Send = "Via Android";
            //    }
            //    else
            //    {
            //        Send = "Via Web";
            //    }
            //}

            rst.Add(
                new DSRValidate
                {
                    MSG = "No"

                }
            );

            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }



        #endregion

        #region PostService Export





        //[DataContract]
        //public class Visit
        //{
        //    [DataMember]
        //    public string Id { get; set; }
        //    [DataMember]
        //    public string DocumentId { get; set; }
        //    [DataMember]
        //    public string MS { get; set; }
        //    [DataMember]
        //    public string Modifyord { get; set; }

        //}

        //15-06-2021-------- add log in every step---- anurag
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransVisit()
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();

            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

            //int Userid = OBJRESPONSE.BODYLINE[0].USERID;
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //string NextVisitDate = OBJRESPONSE.BODYLINE[0].NEXTVISITDATE;
            //string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //string frmtime1 = OBJRESPONSE.BODYLINE[0].frmtime1;
            //string toTime1 = OBJRESPONSE.BODYLINE[0].toTime1;
            //int withuserid = OBJRESPONSE.BODYLINE[0].withuserid;
            //string modeoftransport = OBJRESPONSE.BODYLINE[0].modeoftransport;
            //string vehicleused = OBJRESPONSE.BODYLINE[0].vehicleused;
            //int Lock = OBJRESPONSE.BODYLINE[0].LOCK;
            //int nwithuserid = OBJRESPONSE.BODYLINE[0].nwithuserid;
            //string android_id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            //string cityids = OBJRESPONSE.BODYLINE[0].cityids;
            //string cityname = OBJRESPONSE.BODYLINE[0].cityname;
            //decimal orderamountmail = OBJRESPONSE.BODYLINE[0].orderamountmail;
            //decimal orderamountphone = OBJRESPONSE.BODYLINE[0].orderamountphone;
            //string visitcode = OBJRESPONSE.BODYLINE[0].visitcode;
            //decimal Attendance = OBJRESPONSE.BODYLINE[0].Attendance;
            //int Fromareacode = OBJRESPONSE.BODYLINE[0].Fromareacode;
            //decimal OtherExpense = OBJRESPONSE.BODYLINE[0].OtherExpense;
            //string AndroidAppRemark = OBJRESPONSE.BODYLINE[0].AndroidAppRemark;
            //int toareacode = OBJRESPONSE.BODYLINE[0].toareacode;
            //int ncityid = OBJRESPONSE.BODYLINE[0].ncityid;
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;


            createText += "" + OBJRESPONSE.BODYLINE[0].USERID + "," + OBJRESPONSE.BODYLINE[0].VDATE + "," + OBJRESPONSE.BODYLINE[0].NEXTVISITDATE + "," + OBJRESPONSE.BODYLINE[0].REMARKS + "," + OBJRESPONSE.BODYLINE[0].SMID + "," + OBJRESPONSE.BODYLINE[0].FRMTIME1 + "," + OBJRESPONSE.BODYLINE[0].TOTIME1 + "," + OBJRESPONSE.BODYLINE[0].WITHUSERID + "," + OBJRESPONSE.BODYLINE[0].MODEOFTRANSPORT + "," + OBJRESPONSE.BODYLINE[0].VEHICLEUSED + "," + OBJRESPONSE.BODYLINE[0].LOCK + "," + OBJRESPONSE.BODYLINE[0].NWITHUSERID + "," + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "," + OBJRESPONSE.BODYLINE[0].CITYIDS + "," + OBJRESPONSE.BODYLINE[0].CITYNAME + ", " + OBJRESPONSE.BODYLINE[0].ORDERAMOUNTMAIL + "," + OBJRESPONSE.BODYLINE[0].ORDERAMOUNTPHONE + "," + OBJRESPONSE.BODYLINE[0].VISITCODE + "," + OBJRESPONSE.BODYLINE[0].ATTENDANCE + ", " + OBJRESPONSE.BODYLINE[0].FROMAREACODE + ", " + OBJRESPONSE.BODYLINE[0].OTHEREXPENSE + ", " + OBJRESPONSE.BODYLINE[0].ANDROIDAPPREMARK + ", " + OBJRESPONSE.BODYLINE[0].TOAREACODE + ", " + OBJRESPONSE.BODYLINE[0].NCITYID + ", " + OBJRESPONSE.BODYLINE[0].LONGITUDE + ", " + OBJRESPONSE.BODYLINE[0].LATITUDE + ", " + OBJRESPONSE.BODYLINE[0].LAT_LONG_DT + ", " + OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE + "" + Environment.NewLine;



            //int Userid = 468;
            //string VDate = "2020-08-20";
            //string NextVisitDate = "2020-08-20";
            //string Remarks = "";
            //int SMID = 1245;
            //string frmtime1 = "11:13";
            //string toTime1 = "18:30";
            //int withuserid = 0;
            //string modeoftransport = "2 WHEELER";
            //string vehicleused = "Own";
            //int Lock = 0;
            //int nwithuserid = 0;
            //string android_id = "242  00000054";
            //string cityids = "6515,6581,7344";
            //string cityname = "AGRA,KANPUR,KANPUR DIHAT";
            //decimal orderamountmail = 0.00M;
            //decimal orderamountphone = 0.00M;
            //string visitcode = "";
            //decimal Attendance = 0;
            //int Fromareacode = 0;
            //decimal OtherExpense = 0;
            //string AndroidAppRemark = "";
            //int toareacode = 0;
            //int ncityid = 6515;
            //string longitude = "-122.0840661";
            //string latitude = "37.4220132";
            //string lat_long_dt = "1592458537073";
            //string mobile_created_date = "1592459156569";
            DataTable dtvisit = new DataTable();
            try
            {
                int exists = 0;
                string minDate1 = "", mobiletime = "";
                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
                {
                    double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
                {
                    double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                    TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                    DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                    mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");

                }


                //string id = "0";
                string documentid = "0";
                //string Millisecond = "";

                //  WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                //if (OBJRESPONSE.BODYLINE[0].LATITUDE != "")
                //{
                //    Address = DMT.InsertAddress(OBJRESPONSE.BODYLINE[0].LATITUDE, OBJRESPONSE.BODYLINE[0].LONGITUDE);
                //}


                //Query = "select *  from TransVisit  where VDate='" + VDate + "' and SMID=" + SMID + " ";
                Query = "select visid,VisitDocId,cityids,cityname,appstatus from TransVisit  where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " ";
                createText += " @@@@@@  Select to table   @@@@@" + Query + "" + Environment.NewLine;
                DataTable dtdsr = DbConnectionDAL.getFromDataTable(Query);
                if (dtdsr.Rows.Count > 0)
                {
                    try
                    {
                        exists = Convert.ToInt32(dtdsr.Rows[0]["visid"].ToString());
                        if (exists > 0)
                        {
                            string appstat = ""; string getcityidsfromweb = ""; string getcitynamessfromweb = "";

                            documentid = dtdsr.Rows[0]["VisitDocId"].ToString(); getcityidsfromweb = dtdsr.Rows[0]["cityids"].ToString();
                            getcitynamessfromweb = dtdsr.Rows[0]["cityname"].ToString();
                            string[] cityidchk = OBJRESPONSE.BODYLINE[0].CITYIDS.Split(','); string[] cityinamechk = OBJRESPONSE.BODYLINE[0].CITYNAME.Split(',');
                            for (int i = 0; i < cityidchk.Length; i++)
                            {
                                if (!getcityidsfromweb.Contains(cityidchk[i]))
                                {
                                    getcityidsfromweb = getcityidsfromweb + "," + cityidchk[i];
                                    getcitynamessfromweb = getcitynamessfromweb + "," + cityinamechk[i];
                                }

                            }
                            //if (dtdsr.Rows[0]["appstatus"].ToString() == "Reject")
                            //{
                            //    appstat = ",appstatus=null,appby=null,appremark=null,appbysmid=null";
                            //}


                            //Lock = 0;

                            //Query = @"UPDATE TRANSVISIT SET   VISITDOCID='" + documentid + "',USERID=" + OBJRESPONSE.BODYLINE[0].USERID + ",CREATED_DATE=DATEADD(MINUTE,330,GETUTCDATE()),VDATE='" + OBJRESPONSE.BODYLINE[0].VDATE + "',NEXTVISITDATE='" + OBJRESPONSE.BODYLINE[0].NEXTVISITDATE + "', REMARK='" + OBJRESPONSE.BODYLINE[0].REMARKS + "',SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " , NCITYID=" + OBJRESPONSE.BODYLINE[0].NCITYID + ", WITHUSERID=" + OBJRESPONSE.BODYLINE[0].WITHUSERID + ",MODEOFTRANSPORT='" + OBJRESPONSE.BODYLINE[0].MODEOFTRANSPORT + "', VEHICLEUSED='" + OBJRESPONSE.BODYLINE[0].VEHICLEUSED + "', NWITHUSERID=" + OBJRESPONSE.BODYLINE[0].NWITHUSERID + ", ANDROID_ID='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', CITYIDS='" + getcityidsfromweb + "', CITYNAME='" + getcitynamessfromweb + "', ORDERAMOUNTMAIL= " + OBJRESPONSE.BODYLINE[0].ORDERAMOUNTMAIL + ", ORDERAMOUNTPHONE=" + OBJRESPONSE.BODYLINE[0].ORDERAMOUNTPHONE + " ,VISITCODE='" + OBJRESPONSE.BODYLINE[0].VISITCODE + "',ATTENDANCE=" + OBJRESPONSE.BODYLINE[0].ATTENDANCE + ", TOAREACODE=" + OBJRESPONSE.BODYLINE[0].TOAREACODE + ",FROMAREACODE=" + OBJRESPONSE.BODYLINE[0].FROMAREACODE + ",OTHEREXPENSE=" + OBJRESPONSE.BODYLINE[0].OTHEREXPENSE + ",ANDROIDAPPREMARK='" + OBJRESPONSE.BODYLINE[0].ANDROIDAPPREMARK + "',LATITUDE='" + OBJRESPONSE.BODYLINE[0].LATITUDE + "',LONGITUDE='" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "',ADDRESS='" + Address + "' ,LAT_LONG_DATETIME='" + minDate1 + "' " + appstat + " WHERE VDATE='" + OBJRESPONSE.BODYLINE[0].VDATE + "' AND SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " ";

                            // Nishu 14/05/2021  appstat varable remove

                            Query = @"UPDATE TRANSVISIT SET   VISITDOCID='" + documentid + "',USERID=" + OBJRESPONSE.BODYLINE[0].USERID + ",CREATED_DATE=DATEADD(MINUTE,330,GETUTCDATE()),VDATE='" + OBJRESPONSE.BODYLINE[0].VDATE + "',NEXTVISITDATE='" + OBJRESPONSE.BODYLINE[0].NEXTVISITDATE + "', REMARK='" + OBJRESPONSE.BODYLINE[0].REMARKS + "',SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " , NCITYID=" + OBJRESPONSE.BODYLINE[0].NCITYID + ", WITHUSERID=" + OBJRESPONSE.BODYLINE[0].WITHUSERID + ",MODEOFTRANSPORT='" + OBJRESPONSE.BODYLINE[0].MODEOFTRANSPORT + "', VEHICLEUSED='" + OBJRESPONSE.BODYLINE[0].VEHICLEUSED + "', NWITHUSERID=" + OBJRESPONSE.BODYLINE[0].NWITHUSERID + ", ANDROID_ID='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', CITYIDS='" + getcityidsfromweb + "', CITYNAME='" + getcitynamessfromweb + "', ORDERAMOUNTMAIL= " + OBJRESPONSE.BODYLINE[0].ORDERAMOUNTMAIL + ", ORDERAMOUNTPHONE=" + OBJRESPONSE.BODYLINE[0].ORDERAMOUNTPHONE + " ,VISITCODE='" + OBJRESPONSE.BODYLINE[0].VISITCODE + "',ATTENDANCE=" + OBJRESPONSE.BODYLINE[0].ATTENDANCE + ", TOAREACODE=" + OBJRESPONSE.BODYLINE[0].TOAREACODE + ",FROMAREACODE=" + OBJRESPONSE.BODYLINE[0].FROMAREACODE + ",OTHEREXPENSE=" + OBJRESPONSE.BODYLINE[0].OTHEREXPENSE + ",ANDROIDAPPREMARK='" + OBJRESPONSE.BODYLINE[0].ANDROIDAPPREMARK + "',LATITUDE='" + OBJRESPONSE.BODYLINE[0].LATITUDE + "',LONGITUDE='" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "',ADDRESS='" + Address + "' ,LAT_LONG_DATETIME='" + minDate1 + "' WHERE VDATE='" + OBJRESPONSE.BODYLINE[0].VDATE + "' AND SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " ";


                            createText += " @@@@@@  Update to table   @@@@@" + Query + "" + Environment.NewLine;
                            exists = Convert.ToInt32(DbConnectionDAL.ExecuteQuery(Query));
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@  Exception Generated  @@@@@" + ex.ToString() + "" + Environment.NewLine;
                        //using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_JInsertTransVisit_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                        //{
                        //    file2.WriteLine(createText);
                        //    file2.Close();
                        //}
                    }
                }
                else
                {
                    try
                    {
                        documentid = Settings.GetDocID("VISSN", DateTime.Now);
                        Settings.SetDocID("VISSN", documentid);
                        Query = "INSERT INTO dbo.TransVisit (VisitDocId, UserId, VDate, NextVisitDate, Remark, SMID, WithUserId, ModeOfTransport, VehicleUsed, Lock, nWithUserId, Android_Id, cityIdS, cityName, OrderAmountMail, OrderAmountPhone,visitcode,Attendance,Fromareacode,OtherExpense,AndroidAppRemark,toareacode,ncityid,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
                      " VALUES ('" + documentid + "', " + OBJRESPONSE.BODYLINE[0].USERID + ", '" + OBJRESPONSE.BODYLINE[0].VDATE + "', '" + OBJRESPONSE.BODYLINE[0].NEXTVISITDATE + "', '" + OBJRESPONSE.BODYLINE[0].REMARKS + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , " + OBJRESPONSE.BODYLINE[0].WITHUSERID + ", '" + OBJRESPONSE.BODYLINE[0].MODEOFTRANSPORT + "', '" + OBJRESPONSE.BODYLINE[0].VEHICLEUSED + "', " + OBJRESPONSE.BODYLINE[0].LOCK + ", " + OBJRESPONSE.BODYLINE[0].NWITHUSERID + ", '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', '" + OBJRESPONSE.BODYLINE[0].CITYIDS + "', '" + OBJRESPONSE.BODYLINE[0].CITYNAME + "', " + OBJRESPONSE.BODYLINE[0].ORDERAMOUNTMAIL + ", " + OBJRESPONSE.BODYLINE[0].ORDERAMOUNTPHONE + ",'" + OBJRESPONSE.BODYLINE[0].VISITCODE + "'," + OBJRESPONSE.BODYLINE[0].ATTENDANCE + "," + OBJRESPONSE.BODYLINE[0].FROMAREACODE + "," + OBJRESPONSE.BODYLINE[0].OTHEREXPENSE + ",'" + OBJRESPONSE.BODYLINE[0].ANDROIDAPPREMARK + "'," + OBJRESPONSE.BODYLINE[0].TOAREACODE + "," + OBJRESPONSE.BODYLINE[0].NCITYID + ",DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";
                        createText += " @@@@@@  Insert to table   @@@@@" + Query + "" + Environment.NewLine;
                        exists = Convert.ToInt32(DbConnectionDAL.ExecuteQuery(Query));
                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@  Exception Generated  @@@@@" + ex.ToString() + "" + Environment.NewLine;
                        //using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_JInsertTransVisit_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                        //{
                        //    file2.WriteLine(createText);
                        //    file2.Close();
                        //}
                    }

                }
                dtdsr.Dispose();
                if (exists > 0)
                {
                    //Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS Milliseconds  from Transvisit where Visitdocid='" + documentid + "'";


                    Query = "SELECT VISID AS ID,	VISITDOCID AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)   AS MS  FROM TRANSVISIT WHERE VISITDOCID='" + documentid + "'";
                    createText += "" + Query + "" + Environment.NewLine;
                    dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                    //if (dtvisit.Rows.Count > 0)
                    //{
                    //    id = dtvisit.Rows[0]["VisId"].ToString();
                    //    documentid = dtvisit.Rows[0]["VisitDocId"].ToString();
                    //    Millisecond = dtvisit.Rows[0]["Milliseconds"].ToString();
                    //}
                    //dtvisit.Dispose();
                }

                createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["Id"].ToString() + ", " + dtvisit.Rows[0]["DocumentId"].ToString() + ", " + dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;
                createText += " @@@@@@   Providing Response To Android  @@@@@" + JsonConvert.SerializeObject(dtvisit) + "" + Environment.NewLine;
            }
            catch (Exception ex)
            {
                createText += " @@@@@@  Exception Generated  @@@@@" + ex.ToString() + "" + Environment.NewLine;
                //using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_JInsertTransVisit_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                //{
                //    file2.WriteLine(createText);
                //    file2.Close();
                //}
            }
            finally
            {
                bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_JInsertTransVisit_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        //15-06-2021-------- add log in every step---- anurag
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransDemoWithImage()
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            string Query = ""; string Query1 = ""; string filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);
            //int VisId = OBJRESPONSE.BODYLINE[0].VISID;
            //int UserId = OBJRESPONSE.BODYLINE[0].USERID;
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //int PartyId = OBJRESPONSE.BODYLINE[0].PARTYID;
            //string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
            //int AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
            //int ProductClassId = OBJRESPONSE.BODYLINE[0].ProductClassId;
            //int ProductSegmentId = OBJRESPONSE.BODYLINE[0].ProductSegmentId;
            //int ProductMatGrp = OBJRESPONSE.BODYLINE[0].ProductMatGrp;
            //string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            //string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;
            DataTable dtvisit = new DataTable();
            if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE = "0";
            }

            if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
            {
                double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            try
            {
                string docID = Settings.GetDocID("DEMSN", DateTime.Now);
                Settings.SetDocID("DEMSN", docID);
                string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
                createText += "" + "" + host + "" + Environment.NewLine;
                string path = "http://" + host;
                if (OBJRESPONSE.BODYLINE[0].IMAGE1.Contains("http://"))
                {
                    OBJRESPONSE.BODYLINE[0].IMGURL = OBJRESPONSE.BODYLINE[0].IMAGE1.Replace(path, "~");
                }
                else if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
                {
                    byte[] bytes = Convert.FromBase64String(OBJRESPONSE.BODYLINE[0].IMAGE1);

                    Image image;
                    using (MemoryStream ms = new MemoryStream(bytes))
                    {
                        image = Image.FromStream(ms);
                    }
                    string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }
                    string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SMID + '-' + timeStamp);
                    {
                        //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                        string filePath = Server.MapPath("~/DSRImages" + "/D_" + filename + ".png");
                        File.WriteAllBytes(filePath, bytes);
                        OBJRESPONSE.BODYLINE[0].IMGURL = "~/DSRImages" + "/D_" + filename + ".png";
                    }

                }
                var frtime = "0";
                var totime = "0";
                string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
                string dtSuppliedDate = Convert.ToDateTime(OBJRESPONSE.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

                if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                {
                    try
                    {
                        if (mobiletimehm != "00:00")
                        {
                            string strchk = "SELECT ISNULL(FRTIME1,'00:00') AS FRTIME1,ISNULL(TOTIME1,'00:00') AS TOTIME1 FROM TRANSVISIT  WHERE VISID=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            createText += "" + "" + strchk + "" + Environment.NewLine;
                            DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                            if (dtfr.Rows.Count > 0)
                            {
                                TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                                TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                                TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                                if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "" + "" + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                                    {
                                        frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "" + "" + strfr + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                    }
                                }
                                if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "" + "" + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                                    {
                                        totime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "" + "" + strto + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                                    }
                                }
                            }
                            dtfr.Dispose();
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception in Update date in TransVisit @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
                    }
                }

                string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].VISID) + "").ToString();
                if (ChkLock == "True")
                {
                    try
                    {
                        string insertfromtemp = @"INSERT INTO TransDemo ([VisId],[DemoDocId],[UserId],[VDate],[SMID],[PartyId],[Remarks],[AreaId],[CompleteAppDetail],[AvailablityShop],[IsPartyConverted],[NewAppArea],[TechAdvantage],[TechSuggestion],[NewApp],[OrderType],[ProductClassId],[ProductSegmentId],[ProductMatGrp],[ItemId],[IMGURL],created_date,android_id,Mobile_Created_date)
                                         SELECT [VisId] ,[DemoDocId] ,[UserId] ,[VDate] ,[SMID] ,[PartyId] ,[Remarks] ,[AreaId] ,[CompleteAppDetail] ,[AvailablityShop]  ,[IsPartyConverted],[NewAppArea],[TechAdvantage],[TechSuggestion],[NewApp],[OrderType],[ProductClassId],[ProductSegmentId],[ProductMatGrp],[ItemId],[IMGURL],created_date,android_id,Mobile_Created_date FROM Temp_TransDemo where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' AND SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                        createText += "" + "" + insertfromtemp + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
                        string updatevisid = "UPDATE TRANSDEMO SET VISID=" + OBJRESPONSE.BODYLINE[0].VISID + " WHERE VDATE='" + OBJRESPONSE.BODYLINE[0].VDATE + "' AND SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                        createText += "" + "" + updatevisid + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                        string deletefromtemp = "DELETE FROM  TEMP_TRANSDEMO  WHERE VDATE='" + OBJRESPONSE.BODYLINE[0].VDATE + "' AND SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                        createText += "" + "" + deletefromtemp + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                        //Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS Milliseconds   from Transdemo where DemoDocId='" + docID + "'";




                        //Query = "select DemoId As DemoId,DemoDocId As DemoDocId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date) AS Milliseconds from Transdemo where DemoDocId='" + docID + "'";
                        Query = "SELECT DEMOID AS ID,DEMODOCID AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MS FROM TRANSDEMO WHERE DEMODOCID='" + docID + "'";
                        createText += "" + "" + Query + "" + Environment.NewLine;
                        //Query1 = "select * from Transdemo where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";

                        Query1 = "select DemoDocId from Transdemo where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                        createText += "" + "" + Query1 + "" + Environment.NewLine;
                        DataTable dt = DbConnectionDAL.getFromDataTable(Query1);
                        if (dt.Rows.Count > 0)
                        {
                            Query1 = "delete from Transdemo where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                            createText += "" + "" + Query1 + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                        //  WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        //if (OBJRESPONSE.BODYLINE[0].LATITUDE != "")
                        //{
                        //    Address = DMT.InsertAddress(OBJRESPONSE.BODYLINE[0].LATITUDE, OBJRESPONSE.BODYLINE[0].LONGITUDE);
                        //}
                        // string Address = DMT.InsertAddress(latitude, longitude);
                        string str = "INSERT INTO dbo.Transdemo (VisId,DemoDocId, UserId,VDate,SMID, PartyId,Remarks,AreaId,ProductClassId,ProductSegmentId,ProductMatGrp,Android_Id,IMGURL,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
                        " VALUES ('" + OBJRESPONSE.BODYLINE[0].VISID + "', '" + docID + "', '" + OBJRESPONSE.BODYLINE[0].USERID + "', '" + OBJRESPONSE.BODYLINE[0].VDATE + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , '" + OBJRESPONSE.BODYLINE[0].PARTYID + "','" + OBJRESPONSE.BODYLINE[0].REMARKS + "', " + OBJRESPONSE.BODYLINE[0].AREAID + ", " + OBJRESPONSE.BODYLINE[0].PRODUCTCLASSID + ", " + OBJRESPONSE.BODYLINE[0].PRODUCTSEGMENTID + ", " + OBJRESPONSE.BODYLINE[0].PRODUCTMATGRP + ", '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', '" + OBJRESPONSE.BODYLINE[0].IMGURL + "',DATEADD(MINUTE,330,GETUTCDATE()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";
                        createText += "" + "" + str + "" + Environment.NewLine;
                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception while Insert data from Temp_TransDemo to TransDemo @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
                    }
                }
                else if (ChkLock == "False")
                {
                    try
                    {
                        //Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date) AS Milliseconds from Temp_Transdemo where DemoDocId='" + docID + "'";
                        Query = "SELECT DEMOID AS ID,DEMODOCID AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MS FROM TEMP_TRANSDEMO WHERE DEMODOCID='" + docID + "'";
                        createText += "" + "" + Query + "" + Environment.NewLine;
                        //Query1 = "select * from Temp_Transdemo where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";

                        Query1 = "select DemoDocId from Temp_Transdemo where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                        createText += "" + "" + Query1 + "" + Environment.NewLine;
                        DataTable dt = DbConnectionDAL.getFromDataTable(Query1);
                        if (dt.Rows.Count > 0)
                        {
                            Query1 = "delete from Temp_Transdemo where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                            createText += "" + "" + Query1 + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                        //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        //if (OBJRESPONSE.BODYLINE[0].LATITUDE != "")
                        //{
                        //    Address = DMT.InsertAddress(OBJRESPONSE.BODYLINE[0].LATITUDE, OBJRESPONSE.BODYLINE[0].LONGITUDE);
                        //}
                        //  string Address = DMT.InsertAddress(latitude, longitude);
                        string str = "INSERT INTO dbo.Temp_Transdemo (VisId,DemoDocId, UserId,VDate,SMID, PartyId,Remarks,AreaId,ProductClassId,ProductSegmentId,ProductMatGrp,Android_Id,IMGURL,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
                        " VALUES ('" + OBJRESPONSE.BODYLINE[0].VISID + "', '" + docID + "', '" + OBJRESPONSE.BODYLINE[0].USERID + "', '" + OBJRESPONSE.BODYLINE[0].VDATE + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , '" + OBJRESPONSE.BODYLINE[0].PARTYID + "','" + OBJRESPONSE.BODYLINE[0].REMARKS + "', " + OBJRESPONSE.BODYLINE[0].AREAID + ", " + OBJRESPONSE.BODYLINE[0].PRODUCTCLASSID + ", " + OBJRESPONSE.BODYLINE[0].PRODUCTSEGMENTID + ", " + OBJRESPONSE.BODYLINE[0].PRODUCTMATGRP + ", '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', '" + OBJRESPONSE.BODYLINE[0].IMGURL + "',DATEADD(MINUTE,330,GETUTCDATE()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";
                        dt.Dispose();
                        createText += "" + "" + str + "" + Environment.NewLine;
                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception while Insert data from TransDemo to Temp_TransDemo @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
                    }
                }

                dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["ID"].ToString() + ", " + dtvisit.Rows[0]["DOCUMENTID"].ToString() + ", " + dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;
            }
            catch (Exception ex)
            {
                createText += "@@@Exception in _JSInsertTransDemoWithImage_ @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
            }
            finally
            {
                bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_JSInsertTransDemoWithImage_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }
            //bodyStream.Dispose();

            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        //        [WebMethod]
        //        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //        public void JSInsertTransDemoWithImage()
        //        {
        //            string Query = ""; string Query1 = ""; string filename = "";
        //            string minDate1 = "", mobiletime = "", mobiletimehm = "";

        //            var httpRequest = HttpContext.Current.Request;
        //            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
        //            DataTable DTadmin = new DataTable();
        //            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //            var bodyText = bodyStream.ReadToEnd();
        //            //     string items = httpRequest.Params["orderdetail"].ToString();
        //            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);
        //            int VisId = OBJRESPONSE.BODYLINE[0].VISID;
        //            int UserId = OBJRESPONSE.BODYLINE[0].USERID;
        //            string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
        //            int SMID = OBJRESPONSE.BODYLINE[0].SMID;
        //            int PartyId = OBJRESPONSE.BODYLINE[0].PARTYID;
        //            string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
        //            int AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
        //            int ProductClassId = OBJRESPONSE.BODYLINE[0].ProductClassId;
        //            int ProductSegmentId = OBJRESPONSE.BODYLINE[0].ProductSegmentId;
        //            int ProductMatGrp = OBJRESPONSE.BODYLINE[0].ProductMatGrp;
        //            string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
        //            string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
        //            string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
        //            string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
        //            string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
        //            string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
        //            string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;

        //            if (string.IsNullOrEmpty(mobile_created_date))
        //            {
        //                mobile_created_date = "0";
        //            }

        //            if (!string.IsNullOrEmpty(lat_long_dt))
        //            {
        //                double ticks = double.Parse(lat_long_dt);
        //                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //                DateTime startdate = new DateTime(1970, 1, 1) + time;
        //                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //            }

        //            if (!string.IsNullOrEmpty(mobile_created_date))
        //            {
        //                double ticks1 = double.Parse(mobile_created_date);
        //                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
        //                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
        //                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
        //            }

        //            string docID = Settings.GetDocID("DEMSN", DateTime.Now);
        //            Settings.SetDocID("DEMSN", docID);
        //            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
        //            string path = "http://" + host;
        //            if (IMAGE1.Contains("http://"))
        //            {
        //                IMGURL = IMAGE1.Replace(path, "~");
        //            }
        //            else if (IMAGE1 != "N/A")
        //            {
        //                byte[] bytes = Convert.FromBase64String(IMAGE1);

        //                Image image;
        //                using (MemoryStream ms = new MemoryStream(bytes))
        //                {
        //                    image = Image.FromStream(ms);
        //                }
        //                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
        //                if (!Directory.Exists(directoryPath))
        //                {
        //                    Directory.CreateDirectory(directoryPath);
        //                }
        //                string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
        //                filename = Path.GetFileName(SMID + '-' + timeStamp);
        //                {
        //                    //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
        //                    string filePath = Server.MapPath("~/DSRImages" + "/D_" + filename + ".png");
        //                    File.WriteAllBytes(filePath, bytes);
        //                    IMGURL = "~/DSRImages" + "/D_" + filename + ".png";
        //                }

        //            }
        //            var frtime = "0";
        //            var totime = "0";
        //            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
        //            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

        //            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
        //            {
        //                if (mobiletimehm != "00:00")
        //                {
        //                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
        //                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
        //                    if (dtfr.Rows.Count > 0)
        //                    {
        //                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
        //                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
        //                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

        //                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
        //                        {
        //                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
        //                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
        //                        }
        //                        else
        //                        {
        //                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
        //                            {
        //                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
        //                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
        //                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
        //                            }
        //                        }
        //                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
        //                        {
        //                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
        //                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
        //                        }
        //                        else
        //                        {
        //                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
        //                            {
        //                                totime = tsmobiletimehm.ToString(@"hh\:mm");
        //                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
        //                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
        //                            }
        //                        }
        //                    }
        //                }
        //            }

        //            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
        //            if (ChkLock == "True")
        //            {
        //                string insertfromtemp = @"INSERT INTO TransDemo ([VisId],[DemoDocId],[UserId],[VDate],[SMID],[PartyId],[Remarks],[AreaId],[CompleteAppDetail],[AvailablityShop],[IsPartyConverted],[NewAppArea],[TechAdvantage],[TechSuggestion],[NewApp],[OrderType],[ProductClassId],[ProductSegmentId],[ProductMatGrp],[ItemId],[IMGURL],created_date,android_id,Mobile_Created_date)
        //                                         SELECT [VisId] ,[DemoDocId] ,[UserId] ,[VDate] ,[SMID] ,[PartyId] ,[Remarks] ,[AreaId] ,[CompleteAppDetail] ,[AvailablityShop]  ,[IsPartyConverted],[NewAppArea],[TechAdvantage],[TechSuggestion],[NewApp],[OrderType],[ProductClassId],[ProductSegmentId],[ProductMatGrp],[ItemId],[IMGURL],created_date,android_id,Mobile_Created_date FROM Temp_TransDemo where VDate='" + VDate + "' and SMID=" + SMID + "";
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
        //                string updatevisid = "update TransDemo set visid=" + VisId + " where VDate='" + VDate + "' and SMID=" + SMID + "";
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
        //                string deletefromtemp = "delete from  Temp_TransDemo  where VDate='" + VDate + "' and SMID=" + SMID + "";
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
        //                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS Milliseconds   from Transdemo where DemoDocId='" + docID + "'";


        //                Query1 = "select * from Transdemo where Android_Id='" + Android_Id + "'";
        //                DataTable dt = DbConnectionDAL.getFromDataTable(Query1);
        //                if (dt.Rows.Count > 0)
        //                {
        //                    Query1 = "delete from Transdemo where Android_Id='" + Android_Id + "'";
        //                    DbConnectionDAL.ExecuteQuery(Query1);
        //                }
        //                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
        //                string Address = "";
        //                if (latitude != "")
        //                {
        //                    Address = DMT.InsertAddress(latitude, longitude);
        //                }
        //                // string Address = DMT.InsertAddress(latitude, longitude);
        //                string str = "INSERT INTO dbo.Transdemo (VisId,DemoDocId, UserId,VDate,SMID, PartyId,Remarks,AreaId,ProductClassId,ProductSegmentId,ProductMatGrp,Android_Id,IMGURL,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
        //                " VALUES ('" + VisId + "', '" + docID + "', '" + UserId + "', '" + VDate + "', " + SMID + " , '" + PartyId + "','" + Remarks + "', " + AreaId + ", " + ProductClassId + ", " + ProductSegmentId + ", " + ProductMatGrp + ", '" + Android_Id + "', '" + IMGURL + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";

        //                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
        //                { }
        //            }
        //            else if (ChkLock == "False")
        //            {
        //                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date) AS Milliseconds from Temp_Transdemo where DemoDocId='" + docID + "'";


        //                Query1 = "select * from Temp_Transdemo where Android_Id='" + Android_Id + "'";
        //                DataTable dt = DbConnectionDAL.getFromDataTable(Query1);
        //                if (dt.Rows.Count > 0)
        //                {
        //                    Query1 = "delete from Temp_Transdemo where Android_Id='" + Android_Id + "'";
        //                    DbConnectionDAL.ExecuteQuery(Query1);
        //                }
        //                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
        //                string Address = "";
        //                if (latitude != "")
        //                {
        //                    Address = DMT.InsertAddress(latitude, longitude);
        //                }
        //                //  string Address = DMT.InsertAddress(latitude, longitude);
        //                string str = "INSERT INTO dbo.Temp_Transdemo (VisId,DemoDocId, UserId,VDate,SMID, PartyId,Remarks,AreaId,ProductClassId,ProductSegmentId,ProductMatGrp,Android_Id,IMGURL,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
        //                " VALUES ('" + VisId + "', '" + docID + "', '" + UserId + "', '" + VDate + "', " + SMID + " , '" + PartyId + "','" + Remarks + "', " + AreaId + ", " + ProductClassId + ", " + ProductSegmentId + ", " + ProductMatGrp + ", '" + Android_Id + "', '" + IMGURL + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";

        //                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
        //                { }
        //            }
        //            DataTable dtvisit = new DataTable();
        //            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
        //            List<Visit> rst = new List<Visit>();
        //            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
        //            {
        //                rst.Add(
        //                    new Visit
        //                    {
        //                        Id = dtvisit.Rows[i]["DemoId"].ToString(),
        //                        DocumentId = dtvisit.Rows[i]["DemoDocId"].ToString(),
        //                        MS = dtvisit.Rows[i]["Milliseconds"].ToString()
        //                    }
        //                );
        //            }
        //            Context.Response.Write(JsonConvert.SerializeObject(rst));
        //        }

        [DataContract]
        public class DuplicateMobile
        {
            [DataMember]
            public string MSG { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertAndroidEnviro()
        {

            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //int A_OrderNo = OBJRESPONSE.BODYLINE[0].A_OrderNo;
            //int A_POrderNo = OBJRESPONSE.BODYLINE[0].A_POrderNo;
            //int A_DemoNo = OBJRESPONSE.BODYLINE[0].A_DemoNo;
            //int A_FailedVisitNo = OBJRESPONSE.BODYLINE[0].A_FailedVisitNo;
            //int A_VisitNo = OBJRESPONSE.BODYLINE[0].A_VisitNo;
            //int A_CompetitorNo = OBJRESPONSE.BODYLINE[0].A_CompetitorNo;
            //int A_PartyNo = OBJRESPONSE.BODYLINE[0].A_PartyNo;
            //int A_DiscussionNo = OBJRESPONSE.BODYLINE[0].A_DiscussionNo;
            //int A_DistributorCollectionNo = OBJRESPONSE.BODYLINE[0].A_DistributorCollectionNo;
            //int A_PartyCollectionNo = OBJRESPONSE.BODYLINE[0].A_PartyCollectionNo;
            //int A_POrder1No = OBJRESPONSE.BODYLINE[0].A_POrder1No;
            //int A_LeaveNo = OBJRESPONSE.BODYLINE[0].A_LeaveNo;
            //int A_Order1No = OBJRESPONSE.BODYLINE[0].A_Order1No;
            //int A_BeatPlanNo = OBJRESPONSE.BODYLINE[0].A_BeatPlanNo;
            //int A_distStock_no = OBJRESPONSE.BODYLINE[0].A_distStock_no;
            //int A_SalesReturn_no = OBJRESPONSE.BODYLINE[0].A_SalesReturn_no;
            //int A_SalesReturn1_no = OBJRESPONSE.BODYLINE[0].A_SalesReturn1_no;

            string msg1 = "";
            string Query = "Delete  from AndroidEnviro where SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
            if (DbConnectionDAL.GetScalarValue(CommandType.Text, Query) != "0")
            { }
            string str = "INSERT INTO dbo.AndroidEnviro (SMID,A_OrderNo, A_POrderNo, A_DemoNo,A_FailedVisitNo,A_VisitNo, A_CompetitorNo,A_PartyNo,A_DiscussionNo,A_DistributorCollectionNo,A_PartyCollectionNo,A_POrder1No,A_LeaveNo,A_Order1No,A_BeatPlanNo,A_distStock_no,A_SalesReturn_no,A_SalesReturn1_no) " +
            " VALUES (" + OBJRESPONSE.BODYLINE[0].SMID + ", " + OBJRESPONSE.BODYLINE[0].A_ORDERNO + ", " + OBJRESPONSE.BODYLINE[0].A_PORDERNO + ", " + OBJRESPONSE.BODYLINE[0].A_DEMONO + ", " + OBJRESPONSE.BODYLINE[0].A_FAILEDVISITNO + ", " + OBJRESPONSE.BODYLINE[0].A_VISITNO + " , " + OBJRESPONSE.BODYLINE[0].A_COMPETITORNO + ", " + OBJRESPONSE.BODYLINE[0].A_PARTYNO + ", " + OBJRESPONSE.BODYLINE[0].A_DISCUSSIONNO + ", " + OBJRESPONSE.BODYLINE[0].A_DISTRIBUTORCOLLECTIONNO + ", " + OBJRESPONSE.BODYLINE[0].A_PARTYCOLLECTIONNO + ", " + OBJRESPONSE.BODYLINE[0].A_PORDER1NO + ", " + OBJRESPONSE.BODYLINE[0].A_LEAVENO + ", " + OBJRESPONSE.BODYLINE[0].A_ORDER1NO + ", " + OBJRESPONSE.BODYLINE[0].A_BEATPLANNO + "," + OBJRESPONSE.BODYLINE[0].A_DISTSTOCK_NO + "," + OBJRESPONSE.BODYLINE[0].A_SALESRETURN_NO + "," + OBJRESPONSE.BODYLINE[0].A_SALESRETURN1_NO + ")";

            if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
            { msg1 = "Data Inserted"; }
            else
            { msg1 = "Data Not Inserted"; }
            List<DuplicateMobile> rst = new List<DuplicateMobile>();

            rst.Add(
                   new DuplicateMobile
                   {
                       MSG = msg1
                   }
               );
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class modaldiststk
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string DocumentId { get; set; }
            [DataMember]
            public string MS { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SaveDistStockDeleteInsert1()
        {

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

            //int VisId = OBJRESPONSE.BODYLINE[0].VISID;
            //int UserId = OBJRESPONSE.BODYLINE[0].USERID;
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //int DistId = OBJRESPONSE.BODYLINE[0].DISTID;
            //int AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
            //int ItemId = OBJRESPONSE.BODYLINE[0].ITEMID;
            //decimal Qty = OBJRESPONSE.BODYLINE[0].QTY;
            //string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            //decimal cases = OBJRESPONSE.BODYLINE[0].CASES;
            //decimal unit = OBJRESPONSE.BODYLINE[0].UNIT;
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;
            //string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
            //string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
            //string seqNo = OBJRESPONSE.BODYLINE[0].SEQNO;
            //decimal mrp = OBJRESPONSE.BODYLINE[0].MRP;


            string str = string.Empty; string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE = "0";
            }
            if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
            {
                double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;
            if (OBJRESPONSE.BODYLINE[0].IMAGE1.Contains("http://"))
            {
                OBJRESPONSE.BODYLINE[0].IMGURL = OBJRESPONSE.BODYLINE[0].IMAGE1.Replace(path, "~");
            }
            else if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(OBJRESPONSE.BODYLINE[0].IMAGE1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SMID + '-' + timeStamp);
                {
                    //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                    string filePath = Server.MapPath("~/DSRImages" + "/DistStock_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    OBJRESPONSE.BODYLINE[0].IMGURL = "~/DSRImages" + "/DistStock_" + filename + ".png";
                }

            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(OBJRESPONSE.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

            //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            //{
            //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
            //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
            //    if (dtfr.Rows.Count > 0)
            //    {
            //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
            //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
            //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

            //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
            //        {
            //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
            //        }
            //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
            //        {
            //            totime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
            //        }
            //    }
            //}

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                    dtfr.Dispose();
                }
            }

            string docID = Settings.GetDocID("DIS", DateTime.Now);
            Settings.SetDocID("DIS", docID);
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].VISID) + "").ToString();
            string distsynccode = DbConnectionDAL.GetScalarValue(CommandType.Text, "select SyncId from Mastparty where Partyid=" + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].DISTID) + "").ToString();
            if (ChkLock == "True")
            {
                if (OBJRESPONSE.BODYLINE[0].SEQNO == "0")
                {
                    string deleteoldstock = "delete from  TransDistStock  where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " and distid=" + OBJRESPONSE.BODYLINE[0].DISTID + "";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deleteoldstock);
                }
                string insertfromtemp = @"INSERT INTO TransDistStock (VisId,STKDocId,UserId,VDate,SMID,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,IMGURL)
                             SELECT VisId,STKDocId,UserId,VDate,SMID,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,IMGURL
                            FROM temp_TransDistStock where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);

                string updatevisid = "update TransDistStock set visid=" + OBJRESPONSE.BODYLINE[0].VISID + " where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);

                string deletefromtemp = "delete from  temp_TransDistStock  where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                //   Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from TransOrder where OrdDocId='" + OrdDocId + "'";

                str = "select STKDocId from TransDistStock where  android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    str = "delete from TransDistStock where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                    DbConnectionDAL.ExecuteQuery(str);
                }
                dt.Dispose();
                //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                //if (latitude != "")
                //{
                //    Address = DMT.InsertAddress(latitude, longitude);
                //}
                // string Address = DMT.InsertAddress(latitude, longitude);
                str = @"INSERT INTO TransDistStock(VisId,STKDocId,	UserId,	VDate,SMID,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,IMGURL) VALUES  ( " + OBJRESPONSE.BODYLINE[0].VISID + ",'" + docID + "'," + OBJRESPONSE.BODYLINE[0].USERID + ",'" + OBJRESPONSE.BODYLINE[0].VDATE + "',	" + OBJRESPONSE.BODYLINE[0].SMID + "," + OBJRESPONSE.BODYLINE[0].DISTID + ",'" + distsynccode + "' , " + OBJRESPONSE.BODYLINE[0].AREAID + "," + OBJRESPONSE.BODYLINE[0].ITEMID + "," + OBJRESPONSE.BODYLINE[0].QTY + ",'" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "',DateAdd(minute,330,getutcdate())," + OBJRESPONSE.BODYLINE[0].UNIT + "," + OBJRESPONSE.BODYLINE[0].CASES + ",'" + Address + "','" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + minDate1 + "','" + mobiletime + "','" + OBJRESPONSE.BODYLINE[0].IMGURL + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }

                //Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from TransDistStock where VisId=" + OBJRESPONSE.BODYLINE[0].VISID + "";


                //Query = "select stkid As stkid,STKDocId As STKDocId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from TransDistStock where VisId=" + OBJRESPONSE.BODYLINE[0].VISID + "";

                Query = "SELECT STKID AS ID,STKDOCID AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)   AS MS FROM TRANSDISTSTOCK WHERE VISID=" + OBJRESPONSE.BODYLINE[0].VISID + "";
            }
            else if (ChkLock == "False")
            {
                //  Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + OrdDocId + "'";

                if (OBJRESPONSE.BODYLINE[0].SEQNO == "0")
                {
                    string deleteoldstocktemp = "delete from  temp_TransDistStock  where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " and distid=" + OBJRESPONSE.BODYLINE[0].DISTID + "";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deleteoldstocktemp);
                }
                str = "select STKDocId from temp_TransDistStock where  android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    str = "delete from temp_TransDistStock where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                    DbConnectionDAL.ExecuteQuery(str);
                }
                dt.Dispose();
                //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                //if (latitude != "")
                //{
                //    Address = DMT.InsertAddress(latitude, longitude);
                //}
                // string Address = DMT.InsertAddress(latitude, longitude);
                str = @"INSERT INTO temp_TransDistStock(VisId,	STKDocId,	UserId,	VDate,	SMID,DistId,DistCode,AreaId,ItemId,	Qty,Android_Id,	Created_date,unit,	cases,	Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,IMGURL,MRP) VALUES  ( " + OBJRESPONSE.BODYLINE[0].VISID + ",'" + docID + "'," + OBJRESPONSE.BODYLINE[0].USERID + ",'" + OBJRESPONSE.BODYLINE[0].VDATE + "',	" + OBJRESPONSE.BODYLINE[0].SMID + "," + OBJRESPONSE.BODYLINE[0].DISTID + ",'" + distsynccode + "'," + OBJRESPONSE.BODYLINE[0].AREAID + " ," + OBJRESPONSE.BODYLINE[0].ITEMID + "," + OBJRESPONSE.BODYLINE[0].QTY + ",'" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "',DateAdd(minute,330,getutcdate())," + OBJRESPONSE.BODYLINE[0].UNIT + "," + OBJRESPONSE.BODYLINE[0].CASES + ",'" + Address + "','" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + minDate1 + "','" + mobiletime + "','" + OBJRESPONSE.BODYLINE[0].IMGURL + "'," + OBJRESPONSE.BODYLINE[0].MRP + ")";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }

                //Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from temp_TransDistStock where VisId=" + OBJRESPONSE.BODYLINE[0].VISID + "";


                Query = "SELECT STKID AS ID,STKDOCID AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)   AS MS FROM TEMP_TRANSDISTSTOCK WHERE VISID=" + OBJRESPONSE.BODYLINE[0].VISID + "";
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<modaldiststk> rst = new List<modaldiststk>();
            //for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new modaldiststk
            //        {
            //            Id = dtvisit.Rows[i]["stkid"].ToString(),
            //            DocumentId = dtvisit.Rows[i]["STKDocId"].ToString(),
            //            MS = dtvisit.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dtvisit.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }




        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SaveDistStockDeleteInsert1_New()
        {

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

            //int VisId = OBJRESPONSE.BODYLINE[0].VISID;
            //int UserId = OBJRESPONSE.BODYLINE[0].USERID;
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //int DistId = OBJRESPONSE.BODYLINE[0].DISTID;
            //int AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
            //int ItemId = OBJRESPONSE.BODYLINE[0].ITEMID;
            //decimal Qty = OBJRESPONSE.BODYLINE[0].QTY;
            //string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            //decimal cases = OBJRESPONSE.BODYLINE[0].CASES;
            //decimal unit = OBJRESPONSE.BODYLINE[0].UNIT;
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;
            //string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
            //string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
            //string seqNo = OBJRESPONSE.BODYLINE[0].SEQNO;
            //decimal mrp = OBJRESPONSE.BODYLINE[0].MRP;


            string str = string.Empty; string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE = "0";
            }
            if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
            {
                double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;
            if (OBJRESPONSE.BODYLINE[0].IMAGE1.Contains("http://"))
            {
                OBJRESPONSE.BODYLINE[0].IMGURL = OBJRESPONSE.BODYLINE[0].IMAGE1.Replace(path, "~");
            }
            else if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(OBJRESPONSE.BODYLINE[0].IMAGE1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SMID + '-' + timeStamp);
                {
                    //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                    string filePath = Server.MapPath("~/DSRImages" + "/DistStock_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    OBJRESPONSE.BODYLINE[0].IMGURL = "~/DSRImages" + "/DistStock_" + filename + ".png";
                }

            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(OBJRESPONSE.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

            //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            //{
            //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
            //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
            //    if (dtfr.Rows.Count > 0)
            //    {
            //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
            //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
            //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

            //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
            //        {
            //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
            //        }
            //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
            //        {
            //            totime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
            //        }
            //    }
            //}

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                    dtfr.Dispose();
                }
            }

            string docID = Settings.GetDocID("DIS", DateTime.Now);
            Settings.SetDocID("DIS", docID);
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].VISID) + "").ToString();
            string distsynccode = DbConnectionDAL.GetScalarValue(CommandType.Text, "select SyncId from Mastparty where Partyid=" + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].DISTID) + "").ToString();
            if (ChkLock == "True")
            {
                //                if (OBJRESPONSE.BODYLINE[0].SEQNO == "0")
                //                {
                //                    string deleteoldstock = "delete from  TransDistStock  where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " and distid=" + OBJRESPONSE.BODYLINE[0].DISTID + "";
                //                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deleteoldstock);
                //                }
                //                string insertfromtemp = @"INSERT INTO TransDistStock (VisId,STKDocId,UserId,VDate,SMID,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,IMGURL)
                //                             SELECT VisId,STKDocId,UserId,VDate,SMID,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,IMGURL
                //                            FROM temp_TransDistStock where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);

                //                string updatevisid = "update TransDistStock set visid=" + OBJRESPONSE.BODYLINE[0].VISID + " where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);

                //                string deletefromtemp = "delete from  temp_TransDistStock  where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                //                //   Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from TransOrder where OrdDocId='" + OrdDocId + "'";

                //                str = "select STKDocId from TransDistStock where  android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                //                DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                //                if (dt.Rows.Count > 0)
                //                {
                //                    str = "delete from TransDistStock where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                //                    DbConnectionDAL.ExecuteQuery(str);
                //                }
                //                dt.Dispose();
                //                //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                //                string Address = "";
                //                //if (latitude != "")
                //                //{
                //                //    Address = DMT.InsertAddress(latitude, longitude);
                //                //}
                //                // string Address = DMT.InsertAddress(latitude, longitude);
                //                str = @"INSERT INTO TransDistStock(VisId,STKDocId,	UserId,	VDate,SMID,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,IMGURL) VALUES  ( " + OBJRESPONSE.BODYLINE[0].VISID + ",'" + docID + "'," + OBJRESPONSE.BODYLINE[0].USERID + ",'" + OBJRESPONSE.BODYLINE[0].VDATE + "',	" + OBJRESPONSE.BODYLINE[0].SMID + "," + OBJRESPONSE.BODYLINE[0].DISTID + ",'" + distsynccode + "' , " + OBJRESPONSE.BODYLINE[0].AREAID + "," + OBJRESPONSE.BODYLINE[0].ITEMID + "," + OBJRESPONSE.BODYLINE[0].QTY + ",'" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "',DateAdd(minute,330,getutcdate())," + OBJRESPONSE.BODYLINE[0].UNIT + "," + OBJRESPONSE.BODYLINE[0].CASES + ",'" + Address + "','" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + minDate1 + "','" + mobiletime + "','" + OBJRESPONSE.BODYLINE[0].IMGURL + "')";

                //                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                //                { }

                //                //Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from TransDistStock where VisId=" + OBJRESPONSE.BODYLINE[0].VISID + "";


                //                //Query = "select stkid As stkid,STKDocId As STKDocId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from TransDistStock where VisId=" + OBJRESPONSE.BODYLINE[0].VISID + "";

                //                Query = "SELECT STKID AS ID,STKDOCID AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)   AS MS FROM TRANSDISTSTOCK WHERE VISID=" + OBJRESPONSE.BODYLINE[0].VISID + "";
            }
            else if (ChkLock == "False")
            {
                //  Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + OrdDocId + "'";

                if (OBJRESPONSE.BODYLINE[0].SEQNO == "0")
                {
                    string deleteoldstocktemp = "delete from  temp_TransDistStock  where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " and distid=" + OBJRESPONSE.BODYLINE[0].DISTID + "";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deleteoldstocktemp);
                }
                str = "select STKDocId from temp_TransDistStock where  android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    str = "delete from temp_TransDistStock where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                    DbConnectionDAL.ExecuteQuery(str);
                }
                dt.Dispose();
                //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                //if (latitude != "")
                //{
                //    Address = DMT.InsertAddress(latitude, longitude);
                //}
                // string Address = DMT.InsertAddress(latitude, longitude);
                str = @"INSERT INTO temp_TransDistStock(VisId,	STKDocId,	UserId,	VDate,	SMID,DistId,DistCode,AreaId,ItemId,	Qty,Android_Id,	Created_date,unit,	cases,	Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,IMGURL,MRP,BaseUnit, BaseUnitQty, PrimaryUnit, PrimaryUnitQty, SecondaryUnit, SecondaryUnitQty, PrimaryUnitConversion, SecondaryUnitConversion,Batchno,Expirydate) VALUES  ( " + OBJRESPONSE.BODYLINE[0].VISID + ",'" + docID + "'," + OBJRESPONSE.BODYLINE[0].USERID + ",'" + OBJRESPONSE.BODYLINE[0].VDATE + "',	" + OBJRESPONSE.BODYLINE[0].SMID + "," + OBJRESPONSE.BODYLINE[0].DISTID + ",'" + distsynccode + "'," + OBJRESPONSE.BODYLINE[0].AREAID + " ," + OBJRESPONSE.BODYLINE[0].ITEMID + "," + OBJRESPONSE.BODYLINE[0].QTY + ",'" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "',DateAdd(minute,330,getutcdate())," + OBJRESPONSE.BODYLINE[0].UNIT + "," + OBJRESPONSE.BODYLINE[0].CASES + ",'" + Address + "','" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + minDate1 + "','" + mobiletime + "','" + OBJRESPONSE.BODYLINE[0].IMGURL + "'," + OBJRESPONSE.BODYLINE[0].MRP + ",'" + OBJRESPONSE.BODYLINE[0].BASEUNIT + "'," + OBJRESPONSE.BODYLINE[0].BASEUNITQTY + ",'" + OBJRESPONSE.BODYLINE[0].PRIMARYUNIT + "'," + OBJRESPONSE.BODYLINE[0].PRIMARYUNITQTY + ",'" + OBJRESPONSE.BODYLINE[0].SECONDARYUNIT + "'," + OBJRESPONSE.BODYLINE[0].SECONDARYUNITQTY + "," + OBJRESPONSE.BODYLINE[0].PRIMARYUNITCONVERSION + "," + OBJRESPONSE.BODYLINE[0].SECONDARYUNITCONVERSION + ",'" + OBJRESPONSE.BODYLINE[0].BATCHNO + "','" + OBJRESPONSE.BODYLINE[0].EXPIRYDATE + "')";

                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }

                //Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from temp_TransDistStock where VisId=" + OBJRESPONSE.BODYLINE[0].VISID + "";


                Query = "SELECT STKID AS ID,STKDOCID AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)   AS MS FROM TEMP_TRANSDISTSTOCK WHERE VISID=" + OBJRESPONSE.BODYLINE[0].VISID + "";
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<modaldiststk> rst = new List<modaldiststk>();
            //for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new modaldiststk
            //        {
            //            Id = dtvisit.Rows[i]["stkid"].ToString(),
            //            DocumentId = dtvisit.Rows[i]["STKDocId"].ToString(),
            //            MS = dtvisit.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dtvisit.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }


        //15-06-2021------ add log in every step---- anurag
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SaveDistStockDeleteInsert1_V1()
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            List<modaldiststk> rst = new List<modaldiststk>();
            DataTable dtvisit = new DataTable();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

            int VisId = OBJRESPONSE.BODYLINE[0].VISID;
            int UserId = OBJRESPONSE.BODYLINE[0].USERID;
            string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            int DistId = OBJRESPONSE.BODYLINE[0].DISTID;
            int AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
            int ItemId = OBJRESPONSE.BODYLINE[0].ITEMID;
            decimal Qty = OBJRESPONSE.BODYLINE[0].QTY;
            string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            decimal cases = OBJRESPONSE.BODYLINE[0].CASES;
            decimal unit = OBJRESPONSE.BODYLINE[0].UNIT;
            string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;
            string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
            string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
            string seqNo = OBJRESPONSE.BODYLINE[0].SEQNO;
            decimal mrp = OBJRESPONSE.BODYLINE[0].MRP;
            string BaseUnit = OBJRESPONSE.BODYLINE[0].BASEUNIT;
            decimal BaseUnitQty = OBJRESPONSE.BODYLINE[0].BASEUNITQTY;
            string PrimaryUnit = OBJRESPONSE.BODYLINE[0].PRIMARYUNIT;
            decimal PrimaryUnitQty = OBJRESPONSE.BODYLINE[0].PRIMARYUNITQTY;
            string SecondaryUnit = OBJRESPONSE.BODYLINE[0].SECONDARYUNIT;
            decimal SecondaryUnitQty = OBJRESPONSE.BODYLINE[0].SECONDARYUNITQTY;
            decimal PrimaryUnitConversion = OBJRESPONSE.BODYLINE[0].PRIMARYUNITCONVERSION;
            decimal SecondaryUnitConversion = OBJRESPONSE.BODYLINE[0].SECONDARYUNITCONVERSION;


            string str = string.Empty; string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";
            try
            {
                if (string.IsNullOrEmpty(mobile_created_date))
                {
                    mobile_created_date = "0";
                }
                if (!string.IsNullOrEmpty(lat_long_dt))
                {
                    double ticks = double.Parse(lat_long_dt);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

                if (!string.IsNullOrEmpty(mobile_created_date))
                {
                    double ticks1 = double.Parse(mobile_created_date);
                    TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                    DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                    mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                }

                string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
                createText += "" + "" + host + "" + Environment.NewLine;
                string path = "http://" + host;
                if (IMAGE1.Contains("http://"))
                {
                    IMGURL = IMAGE1.Replace(path, "~");
                }
                else if (IMAGE1 != "N/A")
                {
                    byte[] bytes = Convert.FromBase64String(IMAGE1);

                    Image image;
                    using (MemoryStream ms = new MemoryStream(bytes))
                    {
                        image = Image.FromStream(ms);
                    }
                    string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }
                    string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    filename = Path.GetFileName(SMID + '-' + timeStamp);
                    {
                        //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                        string filePath = Server.MapPath("~/DSRImages" + "/DistStock_" + filename + ".png");
                        File.WriteAllBytes(filePath, bytes);
                        IMGURL = "~/DSRImages" + "/DistStock_" + filename + ".png";
                    }

                }

                var frtime = "0";
                var totime = "0";
                string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
                string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

                //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                //{
                //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
                //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                //    if (dtfr.Rows.Count > 0)
                //    {
                //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                //        {
                //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
                //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                //        }
                //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                //        {
                //            totime = tsmobiletimehm.ToString(@"hh\:mm");
                //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                //        }
                //    }
                //}

                if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                {
                    try
                    {
                        if (mobiletimehm != "00:00")
                        {
                            string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                            createText += "" + "" + strchk + "" + Environment.NewLine;
                            DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                            if (dtfr.Rows.Count > 0)
                            {
                                TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                                TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                                TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                                if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                                    createText += "" + "" + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                                    {
                                        frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                        createText += "" + "" + strfr + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                    }
                                }
                                if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                                    createText += "" + "" + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                                    {
                                        totime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                        createText += "" + "" + strto + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception in update date in TransVisit @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
                    }
                }

                string docID = Settings.GetDocID("DIS", DateTime.Now);
                Settings.SetDocID("DIS", docID);
                string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
                string distsynccode = DbConnectionDAL.GetScalarValue(CommandType.Text, "select SyncId from Mastparty where Partyid=" + Convert.ToInt32(DistId) + "").ToString();

                if (ChkLock == "True")
                {
                    try
                    {
                        if (seqNo == "0")
                        {
                            string deleteoldstock = "delete from  TransDistStock  where VDate='" + VDate + "' and SMID=" + SMID + " and distid=" + DistId + "";
                            createText += "" + "" + deleteoldstock + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deleteoldstock);
                        }
                        string insertfromtemp = @"INSERT INTO TransDistStock (VisId,STKDocId,UserId,VDate,SMID,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,IMGURL)
                             SELECT VisId,STKDocId,UserId,VDate,SMID,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,IMGURL
                            FROM temp_TransDistStock where VDate='" + VDate + "' and SMID=" + SMID + "";
                        createText += "" + "" + insertfromtemp + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);

                        string updatevisid = "update TransDistStock set visid=" + VisId + " where VDate='" + VDate + "' and SMID=" + SMID + "";
                        createText += "" + "" + updatevisid + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);

                        string deletefromtemp = "delete from  temp_TransDistStock  where VDate='" + VDate + "' and SMID=" + SMID + "";
                        createText += "" + "" + deletefromtemp + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                        //   Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from TransOrder where OrdDocId='" + OrdDocId + "'";

                        str = "select * from TransDistStock where  android_id='" + Android_Id + "'";
                        createText += "" + "" + str + "" + Environment.NewLine;
                        DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                        if (dt.Rows.Count > 0)
                        {
                            str = "delete from TransDistStock where android_id='" + Android_Id + "'";
                            createText += "" + "" + str + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(str);
                        }

                        WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        if (latitude != "")
                        {
                            Address = DMT.InsertAddress(latitude, longitude);
                        }
                        // string Address = DMT.InsertAddress(latitude, longitude);
                        str = @"INSERT INTO TransDistStock(VisId,STKDocId,	UserId,	VDate,SMID,DistId,DistCode,AreaId,ItemId,Qty,Android_Id,Created_date,unit,cases,Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,IMGURL) VALUES  ( " + VisId + ",'" + docID + "'," + UserId + ",'" + VDate + "',	" + SMID + "," + DistId + ",'" + distsynccode + "' , " + AreaId + "," + ItemId + "," + Qty + ",'" + Android_Id + "',DateAdd(minute,330,getutcdate())," + unit + "," + cases + ",'" + Address + "','" + latitude + "','" + longitude + "','" + minDate1 + "','" + mobiletime + "','" + IMGURL + "')";
                        createText += "" + "" + str + "" + Environment.NewLine;
                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }

                        Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from TransDistStock where VisId=" + VisId + "";
                        createText += "" + "" + Query + "" + Environment.NewLine;

                        dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                        for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
                        {
                            rst.Add(
                                new modaldiststk
                                {
                                    Id = dtvisit.Rows[i]["stkid"].ToString(),
                                    DocumentId = dtvisit.Rows[i]["STKDocId"].ToString(),
                                    MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                                }
                            );
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception in Insert in TransDistStock from temp_TransDistStock @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
                    }
                }
                else if (ChkLock == "False")
                {
                    try
                    {
                        //  Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + OrdDocId + "'";

                        if (seqNo == "0")
                        {
                            string deleteoldstocktemp = "delete from  temp_TransDistStock  where VDate='" + VDate + "' and SMID=" + SMID + " and distid=" + DistId + "";
                            createText += "" + "" + deleteoldstocktemp + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deleteoldstocktemp);
                        }
                        str = "select * from temp_TransDistStock where  android_id='" + Android_Id + "'";
                        createText += "" + "" + str + "" + Environment.NewLine;
                        DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                        if (dt.Rows.Count > 0)
                        {
                            str = "delete from temp_TransDistStock where android_id='" + Android_Id + "'";
                            createText += "" + "" + str + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(str);
                        }
                        WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        if (latitude != "")
                        {
                            Address = DMT.InsertAddress(latitude, longitude);
                        }
                        // string Address = DMT.InsertAddress(latitude, longitude);
                        str = @"INSERT INTO Temp_TransDistStock(VisId,	STKDocId,	UserId,	VDate,	SMID,DistId,DistCode,AreaId,ItemId,	Qty,Android_Id,	Created_date,unit,	cases,	Address,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,IMGURL,MRP,BaseUnit,BaseUnitQty,PrimaryUnit,PrimaryUnitQty,SecondaryUnit,SecondaryUnitQty,PrimaryUnitConversion,SecondaryUnitConversion) VALUES  ( " + VisId + ",'" + docID + "'," + UserId + ",'" + VDate + "',	" + SMID + "," + DistId + ",'" + distsynccode + "'," + AreaId + " ," + ItemId + "," + Qty + ",'" + Android_Id + "',DateAdd(minute,330,getutcdate())," + unit + "," + cases + ",'" + Address + "','" + latitude + "','" + longitude + "','" + minDate1 + "','" + mobiletime + "','" + IMGURL + "'," + mrp + ",'" + BaseUnit + "'," + BaseUnitQty + ",'" + PrimaryUnit + "', " + PrimaryUnitQty + ", '" + SecondaryUnit + "', " + SecondaryUnitQty + ", " + PrimaryUnitConversion + ", " + SecondaryUnitConversion + ")";
                        createText += "" + "" + str + "" + Environment.NewLine;
                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }

                        Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from temp_TransDistStock where VisId=" + VisId + "";
                        createText += "" + "" + Query + "" + Environment.NewLine;

                        dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                        for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
                        {
                            rst.Add(
                                new modaldiststk
                                {
                                    Id = dtvisit.Rows[i]["stkid"].ToString(),
                                    DocumentId = dtvisit.Rows[i]["STKDocId"].ToString(),
                                    MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                                }
                            );
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception in Insert in Temp_TransDistStock from TransDistStock @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
                    }
                }
            }
            catch (Exception ex)
            {
                createText += "@@@Exception in _FFMSApp_SaveDistStockDeleteInsert1_V1_ @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
            }
            finally
            {
                bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_FFMSApp_SaveDistStockDeleteInsert1_V1_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }

            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [DataContract]
        public class VisitDist
        {
            [DataMember]
            public string ID { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string DOCUMENTID { get; set; }

        }

        //15-06-2021------ add log in every step---- anurag
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertDSROtherActivity()
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

            //int Userid = OBJRESPONSE.BODYLINE[0].USERID;
            //int VisId = OBJRESPONSE.BODYLINE[0].VISID;
            //int Sno = OBJRESPONSE.BODYLINE[0].SNO;
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //int cityid = OBJRESPONSE.BODYLINE[0].CITYID;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //int DistId = OBJRESPONSE.BODYLINE[0].DISTID;
            //string remarkdist = OBJRESPONSE.BODYLINE[0].REMARKDIST;
            //string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            //string NextVisitDate = OBJRESPONSE.BODYLINE[0].NEXTVISITDATE;
            //string NextVisitTime = OBJRESPONSE.BODYLINE[0].NEXTVISITTIME;
            //string SpentfrTime = OBJRESPONSE.BODYLINE[0].SPENTFRTIME;
            //string SpentToTime = OBJRESPONSE.BODYLINE[0].SPENTTOTIME;
            //string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
            //decimal stock = OBJRESPONSE.BODYLINE[0].STOCK;
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
            //string DSRType = OBJRESPONSE.BODYLINE[0].DSRTYPE;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;

            string Query = ""; string Query1 = ""; string filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";


            DataTable dtvisit = new DataTable();
            try
            {
                if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
                {
                    OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE = "0";
                }

                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
                {
                    double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
                {
                    double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                    TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                    DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                    mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                }

                string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
                createText += "" + "" + host + "" + Environment.NewLine;
                string path = "http://" + host;
                if (OBJRESPONSE.BODYLINE[0].IMAGE1.Contains("http://"))
                {
                    OBJRESPONSE.BODYLINE[0].IMGURL = OBJRESPONSE.BODYLINE[0].IMAGE1.Replace(path, "~");
                }
                else if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
                {
                    byte[] bytes = Convert.FromBase64String(OBJRESPONSE.BODYLINE[0].IMAGE1);

                    Image image;
                    using (MemoryStream ms = new MemoryStream(bytes))
                    {
                        image = Image.FromStream(ms);
                    }
                    string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }
                    string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SMID + '-' + timeStamp);
                    {
                        string filePath = Server.MapPath("~/DSRImages" + "/DistDisc_" + filename + ".png");
                        File.WriteAllBytes(filePath, bytes);
                        OBJRESPONSE.BODYLINE[0].IMGURL = "~/DSRImages" + "/DistDisc_" + filename + ".png";
                    }

                }

                var frtime = "0";
                var totime = "0";
                string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
                string dtSuppliedDate = Convert.ToDateTime(OBJRESPONSE.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

                if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                {
                    try
                    {
                        if (mobiletimehm != "00:00")
                        {
                            string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            createText += "" + "" + strchk + "" + Environment.NewLine;
                            DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                            if (dtfr.Rows.Count > 0)
                            {
                                TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                                TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                                TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                                if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "" + "" + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                                    {
                                        frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "" + "" + strfr + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                    }
                                }
                                if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "" + "" + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                                    {
                                        totime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "" + "" + strto + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                                    }
                                }

                            }
                            dtfr.Dispose();
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@   Exception in Update date in TransVisit @@@@@" + ex.Message + "" + Environment.NewLine;
                    }
                }

                string docID = Settings.GetDocID("DDISC", DateTime.Now);
                Settings.SetDocID("DDISC", docID);
                string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].VISID) + "").ToString();
                if (ChkLock == "True")
                {
                    try
                    {
                        string insertfromtemp = @"INSERT INTO [TransVisitDist] ([UserId],[VisId] ,[Sno] ,[VDate] ,[cityId] ,[SMID] ,[DistId] ,[areaId] ,[remarkDist],[remarkArea],[remarkL1] ,[L1UserId],[DissType],[NextVisitDate],[NextVisitTime],[SpentfrTime],[SpentToTime],[IMGURL],[created_date],[android_id],[DiscDocid],[Type],[Mobile_Created_date])
                                        SELECT [UserId],[VisId] ,[Sno] ,[VDate] ,[cityId] ,[SMID] ,[DistId] ,[areaId] ,[remarkDist] ,[remarkArea]  ,[remarkL1] ,[L1UserId],[DissType],[NextVisitDate],[NextVisitTime],[SpentfrTime],[SpentToTime],[IMGURL],[created_date],[android_id],[DiscDocid],[Type],[Mobile_Created_date] FROM [Temp_TransVisitDist] where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " and type in ('Head Office','Depo','Meet (Dealer/Counter/Umbrella)')";
                        createText += "" + "" + insertfromtemp + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);

                        string updatevisid = "update TransVisitDist set visid=" + OBJRESPONSE.BODYLINE[0].VISID + " where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                        createText += "" + "" + updatevisid + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);

                        string deletefromtemp = "delete from  Temp_TransVisitDist  where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                        createText += "" + "" + deletefromtemp + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);

                        Query1 = "select visdistid from TransVisitDist where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                        createText += "" + "" + Query1 + "" + Environment.NewLine;
                        string visdistid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                        if (!string.IsNullOrEmpty(visdistid))
                        {
                            Query1 = "delete from TransVisitDist where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                            createText += "" + "" + Query1 + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                        //  WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        //if (latitude != "")
                        //{
                        //    Address = DMT.InsertAddress(latitude, longitude);
                        //}
                        // string Address = DMT.InsertAddress(latitude, longitude);
                        string str = "INSERT INTO dbo.TransVisitDist ([UserId],[VisId],[Sno], [VDate], [cityId],[SMID],[DistId],[remarkdist],[Android_Id],[SpentfrTime], [SpentToTime], [IMGURL],[stock],[Created_date],[Latitude],[Longitude],[Address],[Lat_long_datetime],[DiscDocid],[Type],[Mobile_Created_date]) " +
                        " VALUES ('" + OBJRESPONSE.BODYLINE[0].USERID + "', " + OBJRESPONSE.BODYLINE[0].VISID + ", '" + OBJRESPONSE.BODYLINE[0].SNO + "', '" + OBJRESPONSE.BODYLINE[0].VDATE + "', '" + OBJRESPONSE.BODYLINE[0].CITYID + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , " + OBJRESPONSE.BODYLINE[0].DISTID + ", '" + OBJRESPONSE.BODYLINE[0].REMARKDIST + "', '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', '" + OBJRESPONSE.BODYLINE[0].SPENTFRTIME + "', '" + OBJRESPONSE.BODYLINE[0].SPENTTOTIME + "', '" + OBJRESPONSE.BODYLINE[0].IMGURL + "'," + OBJRESPONSE.BODYLINE[0].STOCK + ",DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + docID + "','" + OBJRESPONSE.BODYLINE[0].DSRTYPE + "','" + mobiletime + "')";
                        createText += "" + "" + str + "" + Environment.NewLine;
                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }
                        Query = "select max(VisDistId) as VisDistId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Max(Created_date) AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Max(Created_date) AS date), Max(Created_date))   AS Milliseconds   from transvisitdist where Visid='" + OBJRESPONSE.BODYLINE[0].VISID + "'";
                        createText += "" + "" + Query + "" + Environment.NewLine;
                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@   Exception in insert data in transvisitdist from temp_transvisitdist @@@@@" + ex.Message + "" + Environment.NewLine;
                    }
                }
                else if (ChkLock == "False")
                {
                    try
                    {
                        Query1 = "select visdistid from temp_TransVisitDist where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                        createText += "" + "" + Query1 + "" + Environment.NewLine;
                        string visdistid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                        if (!string.IsNullOrEmpty(visdistid))
                        {
                            Query1 = "delete from temp_TransVisitDist where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                            createText += "" + "" + Query1 + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                        // WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        //if (latitude != "")
                        //{
                        //    Address = DMT.InsertAddress(latitude, longitude);
                        //}
                        //  string Address = DMT.InsertAddress(latitude, longitude);
                        string str = "INSERT INTO dbo.temp_TransVisitDist ([UserId],[VisId],[Sno],[VDate],[cityId],[SMID],[DistId],[remarkdist],[Android_Id],[SpentfrTime],[SpentToTime],[IMGURL],[stock],[Created_date],[Latitude],[Longitude],[Address],[Lat_long_datetime],[DiscDocid],[Type],[Mobile_Created_date]) " +
                        " VALUES ('" + OBJRESPONSE.BODYLINE[0].USERID + "', " + OBJRESPONSE.BODYLINE[0].VISID + ", '" + OBJRESPONSE.BODYLINE[0].SNO + "', '" + OBJRESPONSE.BODYLINE[0].VDATE + "', '" + OBJRESPONSE.BODYLINE[0].CITYID + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , " + OBJRESPONSE.BODYLINE[0].DISTID + ", '" + OBJRESPONSE.BODYLINE[0].REMARKDIST + "', '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', '" + OBJRESPONSE.BODYLINE[0].SPENTFRTIME + "', '" + OBJRESPONSE.BODYLINE[0].SPENTTOTIME + "', '" + OBJRESPONSE.BODYLINE[0].IMGURL + "'," + OBJRESPONSE.BODYLINE[0].STOCK + ",DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + docID + "','" + OBJRESPONSE.BODYLINE[0].DSRTYPE + "','" + mobiletime + "')";

                        createText += "" + str + "" + Environment.NewLine;

                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }
                        Query = "SELECT  MAX(VISDISTID) AS ID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MAX(CREATED_DATE) AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MAX(CREATED_DATE) AS DATE), MAX(CREATED_DATE)) AS MS,'" + docID + "' DOCUMENTID FROM TEMP_TRANSVISITDIST WHERE VISID='" + OBJRESPONSE.BODYLINE[0].VISID + "'";

                        createText += " @@@@@@   Query To find response for mobile @@@@@" + Query + "" + Environment.NewLine;
                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@   Exception in insert data in temp_transvisitdist from transvisitdist @@@@@" + ex.Message + "" + Environment.NewLine;
                    }
                }

                dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

                createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["ID"].ToString() + ", " + dtvisit.Rows[0]["DOCUMENTID"].ToString() + ", " + dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;

                //createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                //using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_DSROTHERACTIVITY_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                //{
                //    file2.WriteLine(createText);
                //    file2.Close();
                //}
                //List<VisitDist> rst = new List<VisitDist>();
                //for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
                //{
                //    rst.Add(
                //        new VisitDist
                //        {
                //            ID = dtvisit.Rows[i]["VisDistId"].ToString(),
                //            MS = dtvisit.Rows[i]["Milliseconds"].ToString(),
                //            DOCUMENTID = docID
                //        }
                //    );
                //}
                //dtvisit.Dispose();
            }
            catch (Exception ex)
            {
                createText += "@@@Exception in _JSInsertDSROtherActivity_ @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
            }
            finally
            {
                bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_JSInsertDSROtherActivity_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        //        [WebMethod]
        //        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //        public void JSInsertDSROtherActivity()
        //        {

        //            var httpRequest = HttpContext.Current.Request;
        //            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
        //            DataTable DTadmin = new DataTable();
        //            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //            var bodyText = bodyStream.ReadToEnd();
        //            //     string items = httpRequest.Params["orderdetail"].ToString();
        //            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

        //            int Userid = OBJRESPONSE.BODYLINE[0].USERID;
        //            int VisId = OBJRESPONSE.BODYLINE[0].VISID;
        //            int Sno = OBJRESPONSE.BODYLINE[0].SNO;
        //            string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
        //            int cityid = OBJRESPONSE.BODYLINE[0].CITYID;
        //            int SMID = OBJRESPONSE.BODYLINE[0].SMID;
        //            int DistId = OBJRESPONSE.BODYLINE[0].DISTID;
        //            string remarkdist = OBJRESPONSE.BODYLINE[0].REMARKDIST;
        //            string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
        //            string NextVisitDate = OBJRESPONSE.BODYLINE[0].NEXTVISITDATE;
        //            string NextVisitTime = OBJRESPONSE.BODYLINE[0].NEXTVISITTIME;
        //            string SpentfrTime = OBJRESPONSE.BODYLINE[0].SPENTFRTIME;
        //            string SpentToTime = OBJRESPONSE.BODYLINE[0].SPENTTOTIME;
        //            string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
        //            decimal stock = OBJRESPONSE.BODYLINE[0].STOCK;
        //            string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
        //            string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
        //            string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
        //            string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
        //            string DSRType = OBJRESPONSE.BODYLINE[0].DSRTYPE;
        //            string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;

        //            string Query = ""; string Query1 = ""; string filename = "";
        //            string minDate1 = "", mobiletime = "", mobiletimehm = "";


        //            if (string.IsNullOrEmpty(mobile_created_date))
        //            {
        //                mobile_created_date = "0";
        //            }

        //            if (!string.IsNullOrEmpty(lat_long_dt))
        //            {
        //                double ticks = double.Parse(lat_long_dt);
        //                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //                DateTime startdate = new DateTime(1970, 1, 1) + time;
        //                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //            }

        //            if (!string.IsNullOrEmpty(mobile_created_date))
        //            {
        //                double ticks1 = double.Parse(mobile_created_date);
        //                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
        //                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
        //                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
        //            }

        //            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
        //            string path = "http://" + host;
        //            if (IMAGE1.Contains("http://"))
        //            {
        //                IMGURL = IMAGE1.Replace(path, "~");
        //            }
        //            else if (IMAGE1 != "N/A")
        //            {
        //                byte[] bytes = Convert.FromBase64String(IMAGE1);

        //                Image image;
        //                using (MemoryStream ms = new MemoryStream(bytes))
        //                {
        //                    image = Image.FromStream(ms);
        //                }
        //                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
        //                if (!Directory.Exists(directoryPath))
        //                {
        //                    Directory.CreateDirectory(directoryPath);
        //                }
        //                string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
        //                filename = Path.GetFileName(SMID + '-' + timeStamp);
        //                {
        //                    string filePath = Server.MapPath("~/DSRImages" + "/DistDisc_" + filename + ".png");
        //                    File.WriteAllBytes(filePath, bytes);
        //                    IMGURL = "~/DSRImages" + "/DistDisc_" + filename + ".png";
        //                }

        //            }

        //            var frtime = "0";
        //            var totime = "0";
        //            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
        //            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");

        //            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
        //            {
        //                if (mobiletimehm != "00:00")
        //                {
        //                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
        //                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
        //                    if (dtfr.Rows.Count > 0)
        //                    {
        //                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
        //                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
        //                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

        //                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
        //                        {
        //                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
        //                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
        //                        }
        //                        else
        //                        {
        //                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
        //                            {
        //                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
        //                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
        //                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
        //                            }
        //                        }
        //                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
        //                        {
        //                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
        //                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
        //                        }
        //                        else
        //                        {
        //                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
        //                            {
        //                                totime = tsmobiletimehm.ToString(@"hh\:mm");
        //                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
        //                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
        //                            }
        //                        }
        //                    }
        //                }
        //            }

        //            string docID = Settings.GetDocID("DDISC", DateTime.Now);
        //            Settings.SetDocID("DDISC", docID);
        //            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
        //            if (ChkLock == "True")
        //            {
        //                string insertfromtemp = @"INSERT INTO [TransVisitDist] ([UserId],[VisId] ,[Sno] ,[VDate] ,[cityId] ,[SMID] ,[DistId] ,[areaId] ,[remarkDist],[remarkArea],[remarkL1] ,[L1UserId],[DissType],[NextVisitDate],[NextVisitTime],[SpentfrTime],[SpentToTime],[IMGURL],[created_date],[android_id],[DiscDocid],[Type],[Mobile_Created_date])
        //                                        SELECT [UserId],[VisId] ,[Sno] ,[VDate] ,[cityId] ,[SMID] ,[DistId] ,[areaId] ,[remarkDist] ,[remarkArea]  ,[remarkL1] ,[L1UserId],[DissType],[NextVisitDate],[NextVisitTime],[SpentfrTime],[SpentToTime],[IMGURL],[created_date],[android_id],[DiscDocid],[Type],[Mobile_Created_date] FROM [Temp_TransVisitDist] where VDate='" + VDate + "' and SMID=" + SMID + " and type in ('Head Office','Depo','Meet (Dealer/Counter/Umbrella)')";
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
        //                string updatevisid = "update TransVisitDist set visid=" + VisId + " where VDate='" + VDate + "' and SMID=" + SMID + "";
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
        //                string deletefromtemp = "delete from  Temp_TransVisitDist  where VDate='" + VDate + "' and SMID=" + SMID + "";
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
        //                Query1 = "select visdistid from TransVisitDist where Android_Id='" + Android_Id + "'";
        //                string visdistid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
        //                if (!string.IsNullOrEmpty(visdistid))
        //                {
        //                    Query1 = "delete from TransVisitDist where Android_Id='" + Android_Id + "'";
        //                    DbConnectionDAL.ExecuteQuery(Query1);
        //                }
        //                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
        //                string Address = "";
        //                if (latitude != "")
        //                {
        //                    Address = DMT.InsertAddress(latitude, longitude);
        //                }
        //                // string Address = DMT.InsertAddress(latitude, longitude);
        //                string str = "INSERT INTO dbo.TransVisitDist ([UserId],[VisId],[Sno], [VDate], [cityId],[SMID],[DistId],[remarkdist],[Android_Id],[SpentfrTime], [SpentToTime], [IMGURL],[stock],[Created_date],[Latitude],[Longitude],[Address],[Lat_long_datetime],[DiscDocid],[Type],[Mobile_Created_date]) " +
        //                " VALUES ('" + Userid + "', " + VisId + ", '" + Sno + "', '" + VDate + "', '" + cityid + "', " + SMID + " , " + DistId + ", '" + remarkdist + "', '" + Android_Id + "', '" + SpentfrTime + "', '" + SpentToTime + "', '" + IMGURL + "'," + stock + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + docID + "','" + DSRType + "','" + mobiletime + "')";

        //                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
        //                { }
        //                Query = "select max(VisDistId) as VisDistId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Max(Created_date) AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Max(Created_date) AS date), Max(Created_date))   AS Milliseconds   from transvisitdist where Visid='" + VisId + "'";
        //            }
        //            else if (ChkLock == "False")
        //            {
        //                Query1 = "select visdistid from temp_TransVisitDist where Android_Id='" + Android_Id + "'";
        //                string visdistid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
        //                if (!string.IsNullOrEmpty(visdistid))
        //                {
        //                    Query1 = "delete from temp_TransVisitDist where Android_Id='" + Android_Id + "'";
        //                    DbConnectionDAL.ExecuteQuery(Query1);
        //                }
        //                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
        //                string Address = "";
        //                if (latitude != "")
        //                {
        //                    Address = DMT.InsertAddress(latitude, longitude);
        //                }
        //                //  string Address = DMT.InsertAddress(latitude, longitude);
        //                string str = "INSERT INTO dbo.temp_TransVisitDist ([UserId],[VisId],[Sno],[VDate],[cityId],[SMID],[DistId],[remarkdist],[Android_Id],[SpentfrTime],[SpentToTime],[IMGURL],[stock],[Created_date],[Latitude],[Longitude],[Address],[Lat_long_datetime],[DiscDocid],[Type],[Mobile_Created_date]) " +
        //                " VALUES ('" + Userid + "', " + VisId + ", '" + Sno + "', '" + VDate + "', '" + cityid + "', " + SMID + " , " + DistId + ", '" + remarkdist + "', '" + Android_Id + "', '" + SpentfrTime + "', '" + SpentToTime + "', '" + IMGURL + "'," + stock + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + docID + "','" + DSRType + "','" + mobiletime + "')";

        //                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
        //                { }
        //                Query = "select max(VisDistId) as VisDistId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Max(Created_date) AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Max(Created_date) AS date), Max(Created_date)) AS Milliseconds from temp_TransVisitDist where Visid='" + VisId + "'";
        //            }
        //            DataTable dtvisit = new DataTable();
        //            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
        //            List<VisitDist> rst = new List<VisitDist>();
        //            for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
        //            {
        //                rst.Add(
        //                    new VisitDist
        //                    {
        //                        Id = dtvisit.Rows[i]["VisDistId"].ToString(),
        //                        MS = dtvisit.Rows[i]["Milliseconds"].ToString(),
        //                        DocumentId = docID
        //                    }
        //                );
        //            }
        //            Context.Response.Write(JsonConvert.SerializeObject(rst));
        //        }


        //15-06-2021-------- add log in evry step---------- anurag        
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransCollection()
        {
            string createText = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

            //int UserId = OBJRESPONSE.BODYLINE[0].USERID;
            //int DistId = OBJRESPONSE.BODYLINE[0].DISTID;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //string Mode = OBJRESPONSE.BODYLINE[0].MODE;
            //decimal Amount = OBJRESPONSE.BODYLINE[0].AMOUNT;
            //string PaymentDate = OBJRESPONSE.BODYLINE[0].PAYMENTDATE;
            //string Cheque_DDNo = OBJRESPONSE.BODYLINE[0].CHEQUE_DDNO;
            //string Cheque_DD_Date = OBJRESPONSE.BODYLINE[0].CHEQUE_DD_DATE;
            //string Bank = OBJRESPONSE.BODYLINE[0].BANK;
            //string Branch = OBJRESPONSE.BODYLINE[0].BRANCH;
            //string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
            //string VisId = OBJRESPONSE.BODYLINE[0].VISID.ToString();
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //int AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
            //string status = OBJRESPONSE.BODYLINE[0].STATUS;
            //string androidid = OBJRESPONSE.BODYLINE[0].ANDROIDID;
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            createText += "" + OBJRESPONSE.BODYLINE[0].USERID + "," + OBJRESPONSE.BODYLINE[0].DISTID + "," + OBJRESPONSE.BODYLINE[0].SMID + "," + OBJRESPONSE.BODYLINE[0].MODE + "," + OBJRESPONSE.BODYLINE[0].AMOUNT + "," + OBJRESPONSE.BODYLINE[0].PAYMENTDATE + "," + OBJRESPONSE.BODYLINE[0].CHEQUE_DDNO + "," + OBJRESPONSE.BODYLINE[0].CHEQUE_DD_DATE + "," + OBJRESPONSE.BODYLINE[0].BANK + "," + OBJRESPONSE.BODYLINE[0].BRANCH + "," + OBJRESPONSE.BODYLINE[0].REMARKS + "," + OBJRESPONSE.BODYLINE[0].VISID + "," + OBJRESPONSE.BODYLINE[0].VDATE + "," + OBJRESPONSE.BODYLINE[0].AREAID + "," + OBJRESPONSE.BODYLINE[0].STATUS + ", " + OBJRESPONSE.BODYLINE[0].ANDROIDID + "," + OBJRESPONSE.BODYLINE[0].LONGITUDE + "," + OBJRESPONSE.BODYLINE[0].LATITUDE + "," + OBJRESPONSE.BODYLINE[0].LAT_LONG_DT + ", " + OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE + "" + Environment.NewLine;

            string Query = ""; string Query1 = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";
            DataTable dtvisit = new DataTable();
            if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE = "0";
            }
            try
            {
                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
                {
                    double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
                {
                    double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                    TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                    DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                    mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                }

                var frtime = "0";
                var totime = "0";
                string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
                string dtSuppliedDate = Convert.ToDateTime(OBJRESPONSE.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

                if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                {
                    try
                    {
                        if (mobiletimehm != "00:00")
                        {
                            string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + strchk + "" + Environment.NewLine;
                            DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                            if (dtfr.Rows.Count > 0)
                            {
                                TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                                TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                                TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                                if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                                    {
                                        frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + strfr + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                    }
                                }
                                if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                                    {
                                        totime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + strto + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                                    }
                                }
                            }
                            dtfr.Dispose();
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@ Exception in Update date in TransVisit @@@@@" + "" + ex.Message + " @@@@@@  " + Environment.NewLine;
                    }
                }

                string CollDocId = Settings.GetDocID("PACOL ", DateTime.Now);
                string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].VISID) + "").ToString();

                if (ChkLock == "True")
                {
                    try
                    {
                        string insertfromtemp = @"INSERT INTO TransCollection([VisId] ,[CollDocId] ,[UserId] ,[VDate] ,[PartyId] ,[SMID] ,[AreaId] ,[ItemId] ,[Mode] ,[Amount] , [PaymentDate] ,[Cheque_DDNo],[Cheque_DD_Date] ,[Bank] ,[Branch]  ,[Remarks],created_date,android_id,Mobile_Created_date)
	                                   SELECT [VisId] ,[CollDocId]  ,[UserId]   ,[VDate]  ,[PartyId]   ,[SMID]   ,[AreaId]  ,[ItemId]  ,[Mode]  ,[Amount]
                                      ,[PaymentDate] ,[Cheque_DDNo] ,[Cheque_DD_Date] ,[Bank] ,[Branch] ,[Remarks],created_date,android_id,Mobile_Created_date
	                                   from [Temp_TransCollection] where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                        createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + insertfromtemp + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);

                        string updatevisid = "update TransCollection set visid=" + OBJRESPONSE.BODYLINE[0].VISID + " where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                        createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + updatevisid + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);

                        string deletefromtemp = "delete from  Temp_TransCollection  where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                        createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + deletefromtemp + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);

                        Query1 = "select CollDocId from TransCollection where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "'";
                        createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + Query1 + "" + Environment.NewLine;
                        string colldocid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                        if (!string.IsNullOrEmpty(colldocid))
                        {
                            Query1 = "delete from TransCollection where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "'";
                            createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + Query1 + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                        //  WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        //if (latitude != "")
                        //{
                        //    Address = DMT.InsertAddress(latitude, longitude);
                        //}
                        // string Address = DMT.InsertAddress(latitude, longitude);
                        string str = "INSERT INTO TransCollection([VisId] ,[CollDocId] ,[UserId] ,[VDate] ,[PartyId] ,[SMID] ,[AreaId] ,[Mode] ,[Amount] ,[PaymentDate] ,[Cheque_DDNo] ,[Cheque_DD_Date] ,[Bank] ,[Branch]  ,[Remarks],Android_Id,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
                        " values (" + OBJRESPONSE.BODYLINE[0].VISID + ",'" + CollDocId + "'," + OBJRESPONSE.BODYLINE[0].USERID + ",'" + OBJRESPONSE.BODYLINE[0].VDATE + "'," + OBJRESPONSE.BODYLINE[0].DISTID + "," + OBJRESPONSE.BODYLINE[0].SMID + "," + OBJRESPONSE.BODYLINE[0].AREAID + ",'" + OBJRESPONSE.BODYLINE[0].MODE + "'," + OBJRESPONSE.BODYLINE[0].AMOUNT + ",'" + OBJRESPONSE.BODYLINE[0].PAYMENTDATE + "','" + OBJRESPONSE.BODYLINE[0].CHEQUE_DDNO + "','" + OBJRESPONSE.BODYLINE[0].CHEQUE_DD_DATE + "','" + OBJRESPONSE.BODYLINE[0].BANK + "','" + OBJRESPONSE.BODYLINE[0].BRANCH + "','" + OBJRESPONSE.BODYLINE[0].REMARKS + "','" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "',DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";

                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }

                        createText += "" + str + "" + Environment.NewLine;

                        //Query = "select CollId As CollId,CollDocId As CollDocId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from TransCollection where CollDocId='" + CollDocId + "'";
                        Query = "SELECT COLLID AS ID,COLLDOCID AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MS FROM TRANSCOLLECTION WHERE COLLDOCID='" + CollDocId + "'";
                        createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + Query + "" + Environment.NewLine;
                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@ Exception in Insert data from Temp_TRANSCOLLECTION to TRANSCOLLECTION @@@@@" + "" + ex.Message + " @@@@@@  " + Environment.NewLine;
                    }
                }
                else if (ChkLock == "False")
                {
                    try
                    {
                        Query1 = "select CollDocId from Temp_transCollection where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "'";
                        createText += " @@@@@@   Query To Check Duplicasy On behalf Of Android_id @@@@@" + Query1 + "" + Environment.NewLine;
                        string colldocid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                        if (!string.IsNullOrEmpty(colldocid))
                        {
                            createText += " @@@@@@   Duplicate Exist @@@@@" + colldocid + "" + Environment.NewLine;
                            Query1 = "delete from Temp_transCollection where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "'";
                            createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + Query1 + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(Query1);
                            createText += " @@@@@@   Query To Delete Duplicate Data @@@@@" + Query1 + "" + Environment.NewLine;
                        }
                        else
                        {
                            createText += " @@@@@@  No  Duplicate Exist @@@@@" + "" + Environment.NewLine;
                        }
                        //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        //if (latitude != "")
                        //{
                        //    Address = DMT.InsertAddress(latitude, longitude);
                        //}
                        // string Address = DMT.InsertAddress(latitude, longitude);
                        string str = "INSERT INTO Temp_transCollection ([VisId] ,[CollDocId] ,[UserId] ,[VDate] ,[PartyId] ,[SMID] ,[AreaId] ,[Mode] ,[Amount] ,[PaymentDate] ,[Cheque_DDNo] ,[Cheque_DD_Date] ,[Bank] ,[Branch]  ,[Remarks],Android_Id,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
                        " values (" + OBJRESPONSE.BODYLINE[0].VISID + ",'" + CollDocId + "'," + OBJRESPONSE.BODYLINE[0].USERID + ",'" + OBJRESPONSE.BODYLINE[0].VDATE + "'," + OBJRESPONSE.BODYLINE[0].DISTID + "," + OBJRESPONSE.BODYLINE[0].SMID + "," + OBJRESPONSE.BODYLINE[0].AREAID + ",'" + OBJRESPONSE.BODYLINE[0].MODE + "'," + OBJRESPONSE.BODYLINE[0].AMOUNT + ",'" + OBJRESPONSE.BODYLINE[0].PAYMENTDATE + "','" + OBJRESPONSE.BODYLINE[0].CHEQUE_DDNO + "','" + OBJRESPONSE.BODYLINE[0].CHEQUE_DD_DATE + "','" + OBJRESPONSE.BODYLINE[0].BANK + "','" + OBJRESPONSE.BODYLINE[0].BRANCH + "','" + OBJRESPONSE.BODYLINE[0].REMARKS + "','" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "',DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";
                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }

                        createText += " @@@@@@  Insert to table   @@@@@" + str + "" + Environment.NewLine;

                        Query = "SELECT COLLID AS ID,COLLDOCID AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MS FROM TEMP_TRANSCOLLECTION WHERE COLLDOCID='" + CollDocId + "'";

                        createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + Query + "" + Environment.NewLine;
                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@ Exception in Insert data from TRANSCOLLECTION to Temp_TRANSCOLLECTION @@@@@" + "" + ex.Message + " @@@@@@  " + Environment.NewLine;
                    }
                }

                dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                //List<Visit> rst = new List<Visit>();
                //Query = @"Select smskey From MastEnviro";
                //string _smsKey = DbConnectionDAL.GetStringScalarVal(Query);
                //Query = @"select Mobile from MastSalesRep where SMID=" + SMID + "";
                //string _Mob = DbConnectionDAL.GetStringScalarVal(Query);
                //sendSmsbyTable(_smsKey, _Mob, "Dear ");

                // for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
                // {
                //     rst.Add(
                //    new Visit
                //    {
                //        Id = dtvisit.Rows[i]["CollId"].ToString(),
                //        DocumentId = dtvisit.Rows[i]["CollDocId"].ToString(),
                //        MS = dtvisit.Rows[i]["Milliseconds"].ToString()


                //    }
                //);
                createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["Id"].ToString() + ", " + dtvisit.Rows[0]["DocumentId"].ToString() + ", " + dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;

                //createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

                ////createText += " @@@@@@   Providing Response To Android  @@@@@" + rst.ToString() + "" + Environment.NewLine;
                ////   }
                //bodyStream.Dispose();
                //using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_RetailerCollection_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                //{
                //    file2.WriteLine(createText);
                //    file2.Close();
                //}
            }
            catch (Exception ex)
            {
                createText += "@@@Exception in _JSInsertTransCollection_ @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
            }
            finally
            {
                bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_JSInsertTransCollection_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        //15-06-2021-------- add log in evry step---------- anurag    
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertDistributerCollection()
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);
            DataTable dtvisit = new DataTable();
            //int VisId = OBJRESPONSE.BODYLINE[0].VISID;
            //int UserId = OBJRESPONSE.BODYLINE[0].USERID;
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //int DistId = OBJRESPONSE.BODYLINE[0].DISTID;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //string Mode = OBJRESPONSE.BODYLINE[0].MODE;
            //decimal Amount = OBJRESPONSE.BODYLINE[0].AMOUNT;
            //string PaymentDate = OBJRESPONSE.BODYLINE[0].PAYMENTDATE;
            //string Cheque_DDNo = OBJRESPONSE.BODYLINE[0].CHEQUE_DDNO;
            //string Cheque_DD_Date = OBJRESPONSE.BODYLINE[0].CHEQUE_DD_DATE;
            //string Bank = OBJRESPONSE.BODYLINE[0].BANK;
            //string Branch = OBJRESPONSE.BODYLINE[0].BRANCH;
            //string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
            //string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;
            try
            {
                string minDate1 = "", mobiletime = "", mobiletimehm = "";

                if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
                {
                    OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE = "0";
                }

                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
                {
                    double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
                {
                    double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                    TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                    DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                    mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                }

                var frtime = "0";
                var totime = "0";
                string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
                string dtSuppliedDate = Convert.ToDateTime(OBJRESPONSE.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

                //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                //{
                //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
                //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                //    if (dtfr.Rows.Count > 0)
                //    {
                //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                //        {
                //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
                //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                //        }
                //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                //        {
                //            totime = tsmobiletimehm.ToString(@"hh\:mm");
                //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                //        }
                //    }
                //}

                if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                {
                    try
                    {
                        if (mobiletimehm != "00:00")
                        {
                            string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                            if (dtfr.Rows.Count > 0)
                            {
                                TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                                TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                                TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                                if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                                    {
                                        frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                    }
                                }
                                if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                                    {
                                        totime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                                    }
                                }
                            }
                            dtfr.Dispose();
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@ Exception in update date in TransVisit @@@@@" + "" + ex.Message + " @@@@@@  " + Environment.NewLine;
                    }
                }

                string Query = ""; string Query1 = "";
                string CollDocId = Settings.GetDocID("DISTP ", DateTime.Now);
                Settings.SetDocID("DISTP", CollDocId);
                string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].VISID) + "").ToString();
                //  if (ChkLock == "True")
                {
                    try
                    {

                        Query = "SELECT COLLID AS ID, COLLDOCID AS DOCUMENTID , (CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS MS FROM DISTRIBUTERCOLLECTION WHERE COLLDOCID='" + CollDocId + "'";
                        Query1 = "select colldocid from DistributerCollection where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                        string colldocid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                        if (!string.IsNullOrEmpty(colldocid))
                        {
                            Query1 = "delete from DistributerCollection where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                        //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        //if (latitude != "")
                        //{
                        //    Address = DMT.InsertAddress(latitude, longitude);
                        //}
                        //  string Address = DMT.InsertAddress(latitude, longitude);
                        string str = "INSERT INTO dbo.DistributerCollection (VisId,CollDocId, UserId, VDate,DistId,SMID, Mode,Amount,PaymentDate,Cheque_DDNo, Cheque_DD_Date, Bank,Branch,Remarks,Android_Id,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) " +
                        " VALUES ('" + OBJRESPONSE.BODYLINE[0].VISID + "', '" + CollDocId + "', " + OBJRESPONSE.BODYLINE[0].USERID + ", '" + OBJRESPONSE.BODYLINE[0].VDATE + "', " + OBJRESPONSE.BODYLINE[0].DISTID + ", " + OBJRESPONSE.BODYLINE[0].SMID + " , '" + OBJRESPONSE.BODYLINE[0].MODE + "', " + OBJRESPONSE.BODYLINE[0].AMOUNT + ", '" + OBJRESPONSE.BODYLINE[0].PAYMENTDATE + "', '" + OBJRESPONSE.BODYLINE[0].CHEQUE_DDNO + "', '" + OBJRESPONSE.BODYLINE[0].CHEQUE_DD_DATE + "', '" + OBJRESPONSE.BODYLINE[0].BANK + "', '" + OBJRESPONSE.BODYLINE[0].BRANCH + "','" + OBJRESPONSE.BODYLINE[0].REMARKS + "','" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "',DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";

                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }
                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@ Exception in insert in DistributerCollection @@@@@" + "" + ex.Message + " @@@@@@  " + Environment.NewLine;
                    }
                }
                //else if (ChkLock == "False")
                //{
                //    Query = "select * , (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_DistributerCollection where CollDocId='" + CollDocId + "'";
                //    Query1 = "select colldocid from temp_DistributerCollection where Android_Id='" + Android_Id + "'";
                //    string colldocid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                //    if (!string.IsNullOrEmpty(colldocid))
                //    {
                //        Query1 = "delete from temp_DistributerCollection where Android_Id='" + Android_Id + "'";
                //        DbConnectionDAL.ExecuteQuery(Query1);
                //    }
                //    WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                //    string Address = DMT.InsertAddress(latitude, longitude);
                //    string str = "INSERT INTO dbo.temp_DistributerCollection (VisId,CollDocId, UserId, VDate,DistId,SMID, Mode,Amount,PaymentDate,Cheque_DDNo, Cheque_DD_Date, Bank,Branch,Remarks,Android_Id,Created_date,Latitude,Longitude,Address,Lat_long_datetime) " +
                //    " VALUES ('" + VisId + "', '" + CollDocId + "', " + UserId + ", '" + VDate + "', " + DistId + ", " + SMID + " , '" + Mode + "', " + Amount + ", '" + PaymentDate + "', '" + Cheque_DDNo + "', '" + Cheque_DD_Date + "', '" + Bank + "', '" + Branch + "','" + Remarks + "','" + Android_Id + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "')";

                //    if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                //    { }
                //}

                dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                //List<Visit> rst = new List<Visit>();
                //for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
                //{
                //    rst.Add(
                //        new Visit
                //        {
                //            Id = dtvisit.Rows[i]["CollId"].ToString(),
                //            DocumentId = dtvisit.Rows[i]["CollDocId"].ToString(),
                //            MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                //        }
                //    );
                //}
                //dtvisit.Dispose();
            }
            catch (Exception ex)
            {
                createText += "@@@Exception in _JSInsertDistributerCollection_ @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
            }
            finally
            {
                bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_JSInsertDistributerCollection_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }


        //15-06-2021-------- add log in evry step---------- anurag   
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SaveFailedVisit()
        {
            string createText = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

            //int visid = OBJRESPONSE.BODYLINE[0].VISID;
            //string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //int UserID = OBJRESPONSE.BODYLINE[0].USERID;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //int PartyId = OBJRESPONSE.BODYLINE[0].PARTYID;
            //string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
            //int AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
            //string Nextvisit = OBJRESPONSE.BODYLINE[0].NEXTVISIT;
            //int ReasonID = OBJRESPONSE.BODYLINE[0].REASONID;
            //string VisitTime = OBJRESPONSE.BODYLINE[0].VISITTIME;
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;
            //string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
            //string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;

            //int visid = 120501;
            //string Android_Id = "1258 00000002";
            //string VDate = "20/Nov/2020";
            //int UserID = 3512;
            //int SMID = 1258;
            //int PartyId = 3028;
            //string Remarks = "test";
            //int AreaId = 0;
            //string Nextvisit = "27/Nov/2020";
            //int ReasonID = 3;
            //string VisitTime = "11:00";
            //string longitude = "-122.0840359";
            //string latitude = "37.4219632";
            //string lat_long_dt = "1605853089785";
            //string mobile_created_date = "1605853847365";
            //string IMGURL = "";
            //string IMAGE1 = "N/A";

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            createText += "" + OBJRESPONSE.BODYLINE[0].VISID + "," + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "," + OBJRESPONSE.BODYLINE[0].VDATE + "," + OBJRESPONSE.BODYLINE[0].USERID + "," + OBJRESPONSE.BODYLINE[0].SMID + "," + OBJRESPONSE.BODYLINE[0].PARTYID + "," + OBJRESPONSE.BODYLINE[0].REMARKS + "," + OBJRESPONSE.BODYLINE[0].AREAID + "," + OBJRESPONSE.BODYLINE[0].NEXTVISIT + "," + OBJRESPONSE.BODYLINE[0].REASONID + "," + OBJRESPONSE.BODYLINE[0].VISITTIME + "," + OBJRESPONSE.BODYLINE[0].LONGITUDE + "," + OBJRESPONSE.BODYLINE[0].LATITUDE + "," + OBJRESPONSE.BODYLINE[0].LAT_LONG_DT + "," + OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE + ", " + OBJRESPONSE.BODYLINE[0].IMGURL + "," + OBJRESPONSE.BODYLINE[0].IMAGE1 + "" + Environment.NewLine;

            string Query = "", Query1 = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";
            if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE = "0";
            }

            if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
            {
                double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }
            DataTable dtvisit = new DataTable();
            string dtSuppliedDate = "";
            try
            {
                string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
                createText += " " + "" + host + " " + Environment.NewLine;
                string path = "http://" + host;
                if (OBJRESPONSE.BODYLINE[0].IMAGE1.Contains("http://"))
                {
                    OBJRESPONSE.BODYLINE[0].IMGURL = OBJRESPONSE.BODYLINE[0].IMAGE1.Replace(path, "~");
                }
                else if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
                {
                    byte[] bytes = Convert.FromBase64String(OBJRESPONSE.BODYLINE[0].IMAGE1);

                    Image image;
                    using (MemoryStream ms = new MemoryStream(bytes))
                    {
                        image = Image.FromStream(ms);
                    }
                    string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }
                    string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SMID + '-' + timeStamp);
                    {
                        //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                        string filePath = Server.MapPath("~/DSRImages" + "/F_" + filename + ".png");
                        File.WriteAllBytes(filePath, bytes);
                        OBJRESPONSE.BODYLINE[0].IMGURL = "~/DSRImages" + "/F_" + filename + ".png";
                    }

                }

                var frtime = "00:00";
                var totime = "00:00";
                string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
                dtSuppliedDate = Convert.ToDateTime(OBJRESPONSE.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

                if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                {
                    try
                    {
                        if (mobiletimehm != "00:00")
                        {
                            string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            createText += "@@@Execute Query" + "" + strchk + " " + Environment.NewLine;
                            DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                            if (dtfr.Rows.Count > 0)
                            {
                                TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                                TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                                TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                                if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "@@@Execute Query" + "" + strfr + " " + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                                    {
                                        frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "@@@Execute Query" + "" + strfr + " " + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                    }
                                }
                                if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "@@@Execute Query" + "" + strfr + " " + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                                    {
                                        totime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "@@@Execute Query" + "" + strto + " " + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                                    }
                                }
                            }
                            dtfr.Dispose();
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception in update date in Transvisit" + "" + ex.Message + " " + Environment.NewLine;
                    }
                }

                string FVDocId = Settings.GetDocID("FAILV ", DateTime.Now);
                Settings.SetDocID("VISSN", FVDocId);
                string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + OBJRESPONSE.BODYLINE[0].VISID + "").ToString();
                if (ChkLock == "True")
                {

                    //                string insertfromtemp = @"INSERT INTO [TransFailedVisit] ([VisId] ,[FVDocId] ,[VDate]  ,[UserID]  ,[SMID] ,[PartyId]  ,[Remarks]
                    //                                        ,[AreaId]   ,[Nextvisit]   ,[ReasonID],[VisitTime],[created_date],[android_id],[Mobile_Created_date],[IMGURL] )
                    //                                        SELECT [VisId]  ,[FVDocId]   ,[VDate]   ,[UserID]   ,[SMID]   ,[PartyId]   ,[Remarks]   ,[AreaId]   ,[Nextvisit]   ,[ReasonID],[VisitTime],[created_date],[android_id],[Mobile_Created_date],[IMGURL] FROM [Temp_TransFailedVisit] where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                    //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
                    //                string updatevisid = "update TransFailedVisit set visid=" + OBJRESPONSE.BODYLINE[0].VISID + " where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                    //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                    //                string deletefromtemp = "delete from  Temp_TransFailedVisit  where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                    //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                    //                Query = "select FVId As Id,FVDocId  As DocumentId, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS MS   from TransFailedVisit where FVDocId='" + FVDocId + "'";

                    //                Query1 = "select FVDocId from TransFailedVisit where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                    //                DataTable dt = DbConnectionDAL.getFromDataTable(Query1);
                    //                if (dt.Rows.Count > 0)
                    //                {
                    //                    Query1 = "delete from TransFailedVisit where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                    //                    DbConnectionDAL.ExecuteQuery(Query1);
                    //                }
                    //                dt.Dispose();

                    //                string Address = "";

                    //                string str = "INSERT INTO dbo.TransFailedVisit (VisId,FVDocId, Android_Id, VDate,UserID,SMID, PartyId,Remarks,AreaId,Nextvisit, ReasonID, VisitTime,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,IMGURL) " +
                    //                " VALUES ('" + OBJRESPONSE.BODYLINE[0].VISID + "', '" + FVDocId + "', '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', '" + OBJRESPONSE.BODYLINE[0].VDATE + "', '" + OBJRESPONSE.BODYLINE[0].USERID + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , '" + OBJRESPONSE.BODYLINE[0].PARTYID + "', '" + OBJRESPONSE.BODYLINE[0].REMARKS + "', " + OBJRESPONSE.BODYLINE[0].AREAID + ", '" + OBJRESPONSE.BODYLINE[0].NEXTVISIT + "', " + OBJRESPONSE.BODYLINE[0].REASONID + ", '" + OBJRESPONSE.BODYLINE[0].VISITTIME + "',DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + OBJRESPONSE.BODYLINE[0].IMGURL + "')";

                    //                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                    //                { }
                }
                else if (ChkLock == "False")
                {

                    try
                    {
                        //Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS Milliseconds   from temp_TransFailedVisit where FVDocId='" + FVDocId + "'";
                        Query = "SELECT FVID AS ID,FVDOCID  AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)   AS MS   FROM TEMP_TRANSFAILEDVISIT WHERE FVDOCID='" + FVDocId + "'";
                        createText += "@@@Execute Query" + "" + Query + " " + Environment.NewLine;

                        Query1 = "select FVDocId from temp_TransFailedVisit where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                        createText += "@@@Execute Query" + "" + Query1 + " " + Environment.NewLine;
                        DataTable dt = DbConnectionDAL.getFromDataTable(Query1);
                        if (dt.Rows.Count > 0)
                        {
                            Query1 = "delete from temp_TransFailedVisit where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                            createText += "@@@Execute Query" + "" + Query1 + " " + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                        //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        //if (latitude != "")
                        //{
                        //    Address = DMT.InsertAddress(latitude, longitude);
                        //}
                        // string Address = DMT.InsertAddress(latitude, longitude);
                        string str = "INSERT INTO dbo.temp_TransFailedVisit (VisId,FVDocId, Android_Id, VDate,UserID,SMID, PartyId,Remarks,AreaId,Nextvisit, ReasonID, VisitTime,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,IMGURL) " +
                        " VALUES ('" + OBJRESPONSE.BODYLINE[0].VISID + "', '" + FVDocId + "', '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', '" + OBJRESPONSE.BODYLINE[0].VDATE + "', '" + OBJRESPONSE.BODYLINE[0].USERID + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , '" + OBJRESPONSE.BODYLINE[0].PARTYID + "', '" + OBJRESPONSE.BODYLINE[0].REMARKS + "', " + OBJRESPONSE.BODYLINE[0].AREAID + ", '" + OBJRESPONSE.BODYLINE[0].NEXTVISIT + "', " + OBJRESPONSE.BODYLINE[0].REASONID + ", '" + OBJRESPONSE.BODYLINE[0].VISITTIME + "',DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + OBJRESPONSE.BODYLINE[0].IMGURL + "')";
                        createText += "@@@Execute Query" + "" + str + " " + Environment.NewLine;
                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }
                        dt.Dispose();
                        createText += "" + str + "" + Environment.NewLine;
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception in Insert data in temp_TransFailedVisit" + "" + ex.Message + " " + Environment.NewLine;
                    }
                }

                dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                //List<Visit> rst = new List<Visit>();
                //for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
                //{
                //    rst.Add(
                //        new Visit
                //        {
                //            Id = dtvisit.Rows[i]["FVId"].ToString(),
                //            DocumentId = dtvisit.Rows[i]["FVDocId"].ToString(),
                //            MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                //        }
                //    );

                //    createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[i]["FVId"].ToString() + ", " + dtvisit.Rows[i]["FVDocId"].ToString() + ", " + dtvisit.Rows[i]["Milliseconds"].ToString() + "" + Environment.NewLine;

                //    createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

                //}
                //dtvisit.Dispose();

                createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["Id"].ToString() + ", " + dtvisit.Rows[0]["DocumentId"].ToString() + ", " + dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;


            }
            catch (Exception ex)
            {
                createText += "@@@Exception in _FFMSApp_SaveFailedVisit_ @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
            }
            finally
            {
                bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                bodyStream.Dispose();
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_FFMSApp_SaveFailedVisit_" + dtSuppliedDate + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }

            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        //15-05-2021------------ add log in every step---- anurag
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransCompetitorWithimage()
        {
            string createText = "";
            decimal Qty = 0;
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

            //int VisId = OBJRESPONSE.BODYLINE[0].VISID;
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //int UserId = OBJRESPONSE.BODYLINE[0].USERID;
            //int PartyId = OBJRESPONSE.BODYLINE[0].PARTYID;
            //string Item = OBJRESPONSE.BODYLINE[0].ITEM;
            if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].QTY.ToString()))
            {
                Qty = 0.00M;
            }
            else
            {
                Qty = OBJRESPONSE.BODYLINE[0].QTY;
            }
            //decimal Rate = OBJRESPONSE.BODYLINE[0].RATE;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            //string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
            //string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
            //string CompName = OBJRESPONSE.BODYLINE[0].COMPNAME;
            //decimal Discount = OBJRESPONSE.BODYLINE[0].DISCOUNT;
            //string BrandActivity = OBJRESPONSE.BODYLINE[0].BRANDACTIVITY;
            //string MeetActivity = OBJRESPONSE.BODYLINE[0].MEETACTIVITY;
            //string RoadShow = OBJRESPONSE.BODYLINE[0].ROADSHOW;
            //string Scheme = OBJRESPONSE.BODYLINE[0].SCHEME;
            //string OtherGeneralInfo = OBJRESPONSE.BODYLINE[0].OTHERGENERALINFO;
            //string OtherActivity = OBJRESPONSE.BODYLINE[0].OTHERACTIVITY;
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            createText += "" + OBJRESPONSE.BODYLINE[0].VISID + "," + OBJRESPONSE.BODYLINE[0].VDATE + "," + OBJRESPONSE.BODYLINE[0].USERID + "," + OBJRESPONSE.BODYLINE[0].PARTYID + "," + OBJRESPONSE.BODYLINE[0].ITEM + "," + Qty + "," + OBJRESPONSE.BODYLINE[0].RATE + "," + OBJRESPONSE.BODYLINE[0].SMID + "," + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "," + OBJRESPONSE.BODYLINE[0].IMGURL + "," + OBJRESPONSE.BODYLINE[0].REMARKS + "," + OBJRESPONSE.BODYLINE[0].COMPNAME + "," + OBJRESPONSE.BODYLINE[0].DISCOUNT + "," + OBJRESPONSE.BODYLINE[0].BRANDACTIVITY + "," + OBJRESPONSE.BODYLINE[0].MEETACTIVITY + ", " + OBJRESPONSE.BODYLINE[0].ROADSHOW + "," + OBJRESPONSE.BODYLINE[0].SCHEME + "," + OBJRESPONSE.BODYLINE[0].OTHERGENERALINFO + "," + OBJRESPONSE.BODYLINE[0].OTHERACTIVITY + "," + OBJRESPONSE.BODYLINE[0].LONGITUDE + "," + OBJRESPONSE.BODYLINE[0].LATITUDE + "," + OBJRESPONSE.BODYLINE[0].LAT_LONG_DT + "," + OBJRESPONSE.BODYLINE[0].IMAGE1 + ", " + OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE + "" + Environment.NewLine;

            string Query = ""; string Query1 = ""; string filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";
            string[] imgurls = new string[1];
            int compid = 0;
            // string[] th = IMAGE1.Split();
            DataTable dtvisit = new DataTable();
            string dtSuppliedDate = "";
            try
            {
                if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
                {
                    OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE = "0";
                }

                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
                {
                    double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
                {
                    double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                    TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                    DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                    mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                }

                string docID = Settings.GetDocID("COMPT", DateTime.Now);
                Settings.SetDocID("COMPT", docID);
                string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
                createText += "" + "" + host + "" + Environment.NewLine;
                string path = "http://" + host;

                if (OBJRESPONSE.BODYLINE[0].IMAGE1.Contains("http://"))
                {
                    OBJRESPONSE.BODYLINE[0].IMGURL = OBJRESPONSE.BODYLINE[0].IMAGE1.Replace(path, "~");
                }
                else if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
                {
                    string[] imges = OBJRESPONSE.BODYLINE[0].IMAGE1.Split(new string[] { "&dataman&" }, StringSplitOptions.None);
                    imgurls = new string[imges.Length];
                    for (int i = 0; i < imges.Length; i++)
                    {
                        byte[] bytes = Convert.FromBase64String(imges[i]);

                        Image image;
                        using (MemoryStream ms = new MemoryStream(bytes))
                        {
                            image = Image.FromStream(ms);
                        }
                        string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                        if (!Directory.Exists(directoryPath))
                        {
                            Directory.CreateDirectory(directoryPath);
                        }
                        string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SMID + "_" + docID.Replace(" ", "") + "_" + i + "_" + timeStamp);
                        {
                            //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                            string filePath = Server.MapPath("~/DSRImages" + "/C_" + filename + ".png");
                            File.WriteAllBytes(filePath, bytes);
                            imgurls[i] = "~/DSRImages" + "/C_" + filename + ".png";
                        }
                    }
                }

                var frtime = "0";
                var totime = "0";
                string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
                dtSuppliedDate = Convert.ToDateTime(OBJRESPONSE.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

                //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                //{
                //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
                //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                //    if (dtfr.Rows.Count > 0)
                //    {
                //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                //        {
                //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
                //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                //        }
                //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                //        {
                //            totime = tsmobiletimehm.ToString(@"hh\:mm");
                //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                //        }
                //    }
                //}
                try
                {
                    if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                    {
                        if (mobiletimehm != "00:00")
                        {
                            string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            createText += "@@@ Execute Query@@@@" + "" + strchk + "" + Environment.NewLine;
                            DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                            if (dtfr.Rows.Count > 0)
                            {
                                TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                                TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                                TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                                if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "@@@ Execute Query@@@@" + "" + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                                    {
                                        frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "@@@ Execute Query@@@@" + "" + strfr + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                    }
                                }
                                if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "@@@ Execute Query@@@@" + "" + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                                    {
                                        totime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "@@@ Execute Query@@@@" + "" + strto + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                                    }
                                }
                            }
                            dtfr.Dispose();
                        }
                    }
                }
                catch (Exception ex)
                {
                    createText += " @@@@@@ Response for Update date in TransVisit @@@@@" + "" + ex.Message + " @@@@@@  " + Environment.NewLine;
                }

                string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].VISID) + "").ToString();
                if (ChkLock == "True")
                {
                    //                string insertfromtemp = @" INSERT INTO [TransCompetitor] ([VisId] ,[DocId]  ,[VDate] ,[UserId] ,[PartyId]  ,[Item]  ,[Qty]  ,[Rate],[SMID],[CompName],[IMGURL], [Remarks],[Discount],[BrandActivity],[MeetActivity],[RoadShow],[Scheme/offers],[OtherGeneralInfo],[OtherActivity],created_date,android_id,Mobile_Created_date) OUTPUT INSERTED.ComptId
                    //                                SELECT [VisId] ,[DocId]  ,[VDate] ,[UserId] ,[PartyId]  ,[Item]  ,[Qty]  ,[Rate],[SMID],[CompName],[IMGURL],[Remarks],[Discount],[BrandActivity],[MeetActivity],[RoadShow],[Scheme/offers],[OtherGeneralInfo],[OtherActivity],created_date,android_id,Mobile_Created_date FROM [Temp_TransCompetitor] where VDate='" + VDate + "' and SMID=" + SMID + "";
                    //                compid = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, insertfromtemp));
                    //                for (int i = 0; i < imgurls.Length; i++)
                    //                {


                    //                }

                    //                string updatevisid = "update TransCompetitor set visid=" + VisId + " where VDate='" + VDate + "' and SMID=" + SMID + "";
                    //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                    //                string deletefromtemp = "delete from  Temp_TransCompetitor  where VDate='" + VDate + "' and SMID=" + SMID + "";
                    //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                    //                Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from TransCompetitor where DocId='" + docID + "'";
                    //                Query1 = "select docid from TransCompetitor where Android_Id='" + Android_Id + "'";
                    //                string docid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                    //                if (!string.IsNullOrEmpty(docid))
                    //                {
                    //                    Query1 = "delete from TransCompetitor where Android_Id='" + Android_Id + "'";
                    //                    DbConnectionDAL.ExecuteQuery(Query1);


                    //                    Query1 = "delete from TransCompetitorImage where Android_Id='" + Android_Id + "'";
                    //                    DbConnectionDAL.ExecuteQuery(Query1);


                    //                }
                    //                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                    //                string Address = "";
                    //                if (latitude != "")
                    //                {
                    //                    Address = DMT.InsertAddress(latitude, longitude);
                    //                }
                    //                //  string Address = DMT.InsertAddress(latitude, longitude);
                    //                string str = "INSERT INTO dbo.TransCompetitor (VisId,DocId,UserId, VDate,PartyId,Item,Qty,Rate,SMID,Android_Id,IMGURL,Remarks,CompName,Discount,BrandActivity,MeetActivity,RoadShow,[Scheme/offers],OtherGeneralInfo,OtherActivity,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date)  OUTPUT INSERTED.ComptId " +
                    //                " VALUES ('" + VisId + "', '" + docID + "', '" + UserId + "', '" + VDate + "' , '" + PartyId + "','" + Item + "', " + Qty + ", " + Rate + ", " + SMID + ", '" + Android_Id + "', '" + IMGURL + "', '" + Remarks + "', '" + CompName + "', " + Discount + ", '" + BrandActivity + "', '" + MeetActivity + "', '" + RoadShow + "', '" + Scheme + "', '" + OtherGeneralInfo + "', '" + OtherActivity + "',DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";

                    //                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                    //                { }
                }
                else if (ChkLock == "False")
                {
                    try
                    {
                        Query = "SELECT COMPTID AS ID, DOCID AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)   AS MS   FROM TEMP_TRANSCOMPETITOR WHERE DOCID='" + docID + "'";
                        createText += "@@@ Execute Query@@@@" + "" + Query + "" + Environment.NewLine;
                        Query1 = "select docid from Temp_TransCompetitor where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                        createText += "@@@ Execute Query@@@@" + "" + Query1 + "" + Environment.NewLine;
                        string docid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                        if (!string.IsNullOrEmpty(docid))
                        {
                            Query1 = "delete from Temp_TransCompetitor where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                            createText += "" + Query1 + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(Query1);

                            Query1 = "delete from Temp_TransCompetitorImage where DocId='" + docid + "'";
                            createText += "" + Query1 + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(Query1);

                        }
                        //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";

                        string str = "INSERT INTO dbo.Temp_TransCompetitor (VisId,DocId,UserId, VDate,PartyId,Item,Qty,Rate,SMID,Android_Id,IMGURL,Remarks,CompName,Discount,BrandActivity,MeetActivity,RoadShow,[Scheme/offers],OtherGeneralInfo,OtherActivity,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date) OUTPUT INSERTED.ComptId " +
                        " VALUES ('" + OBJRESPONSE.BODYLINE[0].VISID + "', '" + docID + "', '" + OBJRESPONSE.BODYLINE[0].USERID + "', '" + OBJRESPONSE.BODYLINE[0].VDATE + "' , '" + OBJRESPONSE.BODYLINE[0].PARTYID + "','" + OBJRESPONSE.BODYLINE[0].ITEM + "', " + Qty + ", " + OBJRESPONSE.BODYLINE[0].RATE + ", " + OBJRESPONSE.BODYLINE[0].SMID + ", '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', '" + OBJRESPONSE.BODYLINE[0].IMGURL + "', '" + OBJRESPONSE.BODYLINE[0].REMARKS + "', '" + OBJRESPONSE.BODYLINE[0].COMPNAME + "', " + OBJRESPONSE.BODYLINE[0].DISCOUNT + ", '" + OBJRESPONSE.BODYLINE[0].BRANDACTIVITY + "', '" + OBJRESPONSE.BODYLINE[0].MEETACTIVITY + "', '" + OBJRESPONSE.BODYLINE[0].ROADSHOW + "', '" + OBJRESPONSE.BODYLINE[0].SCHEME + "', '" + OBJRESPONSE.BODYLINE[0].OTHERGENERALINFO + "', '" + OBJRESPONSE.BODYLINE[0].OTHERACTIVITY + "',DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "')";
                        compid = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, str));

                        createText += "" + str + "" + Environment.NewLine;

                        if (compid > 0)
                        {
                            for (int i = 0; i < imgurls.Length; i++)
                            {
                                str = "INSERT INTO dbo.Temp_TransCompetitorImage (DocId, IMGURL,Visid) VALUES ('" + docID + "', '" + imgurls[i] + "'," + OBJRESPONSE.BODYLINE[0].VISID + ")";
                                createText += "" + str + "" + Environment.NewLine;

                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, str);
                            }
                        }
                        //if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        //{ }


                        dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                        //List<Visit> rst = new List<Visit>();
                        //for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
                        //{
                        //    rst.Add(
                        //        new Visit
                        //        {
                        //            Id = dtvisit.Rows[i]["ComptId"].ToString(),
                        //            DocumentId = dtvisit.Rows[i]["DocId"].ToString(),
                        //            MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                        //        }
                        //    );
                        //    createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[i]["ComptId"].ToString() + ", " + dtvisit.Rows[i]["DocId"].ToString() + ", " + dtvisit.Rows[i]["Milliseconds"].ToString() + "" + Environment.NewLine;

                        //    createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

                        //}
                        //dtvisit.Dispose();

                        createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["Id"].ToString() + ", " + dtvisit.Rows[0]["DocumentId"].ToString() + ", " + dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;
                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@ Response for Insert Data in TransCompetitor/Temp_TransCompetitor @@@@@" + "" + ex.Message + " @@@@@@  " + Environment.NewLine;
                    }
                }
            }
            catch (Exception ex)
            {
                createText += "@@@Exception in _TransCompetitor_ @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
            }
            finally
            {
                bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                bodyStream.Dispose();
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_TransCompetitor_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }


            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        //15-05-2021------------ add log in every step---- anurag
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransVisitDistWithImage()
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);
            DataTable dtvisit = new DataTable();
            //int Userid = OBJRESPONSE.BODYLINE[0].USERID;
            //int VisId = OBJRESPONSE.BODYLINE[0].VISID;
            //int Sno = OBJRESPONSE.BODYLINE[0].SNO;
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //int cityid = OBJRESPONSE.BODYLINE[0].CITYID;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //int DistId = OBJRESPONSE.BODYLINE[0].DISTID;
            //string remarkdist = OBJRESPONSE.BODYLINE[0].REMARKDIST;
            //string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            //string NextVisitDate = OBJRESPONSE.BODYLINE[0].NEXTVISITDATE;
            //string NextVisitTime = OBJRESPONSE.BODYLINE[0].NEXTVISITTIME;
            //string SpentfrTime = OBJRESPONSE.BODYLINE[0].SPENTFRTIME;
            //string SpentToTime = OBJRESPONSE.BODYLINE[0].SPENTTOTIME;
            //string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
            //decimal stock = OBJRESPONSE.BODYLINE[0].STOCK;
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;

            string Query = ""; string Query1 = ""; string filename = "";

            try
            {
                string minDate1 = "", mobiletime = "", mobiletimehm = "";

                if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
                {
                    OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE = "0";
                }

                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
                {
                    double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
                {
                    double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                    TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                    DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                    mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                }

                string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
                createText += "" + "" + host + "" + Environment.NewLine;
                string path = "http://" + host;

                if (OBJRESPONSE.BODYLINE[0].IMAGE1.Contains("http://"))
                {
                    OBJRESPONSE.BODYLINE[0].IMGURL = OBJRESPONSE.BODYLINE[0].IMAGE1.Replace(path, "~");
                }
                else if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
                {
                    byte[] bytes = Convert.FromBase64String(OBJRESPONSE.BODYLINE[0].IMAGE1);

                    Image image;
                    using (MemoryStream ms = new MemoryStream(bytes))
                    {
                        image = Image.FromStream(ms);
                    }
                    string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }
                    string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SMID + '-' + timeStamp);
                    {
                        string filePath = Server.MapPath("~/DSRImages" + "/DistDisc_" + filename + ".png");
                        File.WriteAllBytes(filePath, bytes);
                        OBJRESPONSE.BODYLINE[0].IMGURL = "~/DSRImages" + "/DistDisc_" + filename + ".png";
                    }

                }

                var frtime = "0";
                var totime = "0";
                string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
                string dtSuppliedDate = Convert.ToDateTime(OBJRESPONSE.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

                //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                //{
                //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
                //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                //    if (dtfr.Rows.Count > 0)
                //    {
                //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                //        {
                //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
                //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                //        }
                //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                //        {
                //            totime = tsmobiletimehm.ToString(@"hh\:mm");
                //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                //        }
                //    }
                //}

                if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                {
                    try
                    {

                        if (mobiletimehm != "00:00")
                        {
                            string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            createText += "" + "" + strchk + "" + Environment.NewLine;
                            DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                            if (dtfr.Rows.Count > 0)
                            {
                                TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                                TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                                TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                                if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "" + "" + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                                    {
                                        frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "" + "" + strfr + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                    }
                                }
                                if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "" + "" + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                                    {
                                        totime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "" + "" + strto + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                                    }
                                }
                            }
                            dtfr.Dispose();
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@ Exception in update date in TransVisit" + "" + ex.Message + "" + Environment.NewLine;
                    }
                }


                string docID = Settings.GetDocID("DDISC", DateTime.Now);
                Settings.SetDocID("DDISC", docID);
                string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].VISID) + "").ToString();
                if (ChkLock == "True")
                {

                    //                string insertfromtemp = @"INSERT INTO [TransVisitDist] ([UserId],[VisId] ,[Sno] ,[VDate] ,[cityId] ,[SMID] ,[DistId] ,[areaId] ,[remarkDist] ,[remarkArea]  ,[remarkL1] ,[L1UserId],[DissType],[NextVisitDate],[NextVisitTime],[SpentfrTime],[SpentToTime],[IMGURL],created_date,android_id,DiscDocid,Mobile_Created_date,[type])
                    //                                        SELECT [UserId],[VisId] ,[Sno] ,[VDate] ,[cityId] ,[SMID] ,[DistId] ,[areaId] ,[remarkDist] ,[remarkArea]  ,[remarkL1] ,[L1UserId],[DissType],[NextVisitDate],[NextVisitTime],[SpentfrTime],[SpentToTime],[IMGURL],created_date,android_id,DiscDocid,Mobile_Created_date,type FROM [Temp_TransVisitDist] where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " and type IS NULL";
                    //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
                    //                string updatevisid = "update TransVisitDist set visid=" + OBJRESPONSE.BODYLINE[0].VISID + " where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                    //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                    //                string deletefromtemp = "delete from  Temp_TransVisitDist  where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "";
                    //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                    //                Query1 = "select visdistid from TransVisitDist where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                    //                string visdistid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                    //                if (!string.IsNullOrEmpty(visdistid))
                    //                {
                    //                    Query1 = "delete from TransVisitDist where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                    //                    DbConnectionDAL.ExecuteQuery(Query1);
                    //                }

                    //                string Address = "";

                    //                string str = "INSERT INTO dbo.TransVisitDist (UserId,VisId,Sno, VDate, cityId,SMID,DistId,remarkdist,Android_Id,NextVisitDate,NextVisitTime, SpentfrTime, SpentToTime, IMGURL,stock,Created_date,Latitude,Longitude,Address,Lat_long_datetime,DiscDocid,Mobile_Created_date) " +
                    //                " VALUES ('" + OBJRESPONSE.BODYLINE[0].USERID + "', " + OBJRESPONSE.BODYLINE[0].VISID + ", '" + OBJRESPONSE.BODYLINE[0].SNO + "', '" + OBJRESPONSE.BODYLINE[0].VDATE + "', '" + OBJRESPONSE.BODYLINE[0].CITYID + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , " + OBJRESPONSE.BODYLINE[0].DISTID + ", '" + OBJRESPONSE.BODYLINE[0].REMARKDIST + "', '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', '" + OBJRESPONSE.BODYLINE[0].NEXTVISITDATE + "', '" + OBJRESPONSE.BODYLINE[0].NEXTVISITTIME + "', '" + OBJRESPONSE.BODYLINE[0].SPENTFRTIME + "', '" + OBJRESPONSE.BODYLINE[0].SPENTTOTIME + "', '" + OBJRESPONSE.BODYLINE[0].IMGURL + "'," + OBJRESPONSE.BODYLINE[0].STOCK + ",DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + docID + "','" + mobiletime + "')";

                    //                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                    //                { }
                    //                Query = "select max(VisDistId) as VisDistId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Max(Created_date) AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Max(Created_date) AS date), Max(Created_date))   AS Milliseconds   from transvisitdist where Visid='" + OBJRESPONSE.BODYLINE[0].VISID + "'";
                }
                else if (ChkLock == "False")
                {
                    try
                    {
                        Query1 = "select visdistid from temp_TransVisitDist where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                        createText += "" + "" + Query1 + "" + Environment.NewLine;
                        string visdistid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                        if (!string.IsNullOrEmpty(visdistid))
                        {
                            Query1 = "delete from temp_TransVisitDist where Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                            createText += "" + "" + Query1 + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                        //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        //if (latitude != "")
                        //{
                        //    Address = DMT.InsertAddress(latitude, longitude);
                        //}
                        //  string Address = DMT.InsertAddress(latitude, longitude);
                        string str = "INSERT INTO dbo.temp_TransVisitDist (UserId,VisId,Sno, VDate, cityId,SMID,DistId,remarkdist,Android_Id,NextVisitDate,NextVisitTime, SpentfrTime, SpentToTime, IMGURL,stock,Created_date,Latitude,Longitude,Address,Lat_long_datetime,DiscDocid,Mobile_Created_date) " +
                        " VALUES ('" + OBJRESPONSE.BODYLINE[0].USERID + "', " + OBJRESPONSE.BODYLINE[0].VISID + ", '" + OBJRESPONSE.BODYLINE[0].SNO + "', '" + OBJRESPONSE.BODYLINE[0].VDATE + "', '" + OBJRESPONSE.BODYLINE[0].CITYID + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , " + OBJRESPONSE.BODYLINE[0].DISTID + ", '" + OBJRESPONSE.BODYLINE[0].REMARKDIST + "', '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', '" + OBJRESPONSE.BODYLINE[0].NEXTVISITDATE + "', '" + OBJRESPONSE.BODYLINE[0].NEXTVISITTIME + "', '" + OBJRESPONSE.BODYLINE[0].SPENTFRTIME + "', '" + OBJRESPONSE.BODYLINE[0].SPENTTOTIME + "', '" + OBJRESPONSE.BODYLINE[0].IMGURL + "'," + OBJRESPONSE.BODYLINE[0].STOCK + ",DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + docID + "','" + mobiletime + "')";
                        createText += "" + "" + str + "" + Environment.NewLine;
                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }
                        Query = "SELECT '" + docID + "' AS DOCUMENTID, MAX(VISDISTID) AS ID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MAX(CREATED_DATE) AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MAX(CREATED_DATE) AS DATE), MAX(CREATED_DATE))   AS MS   FROM TEMP_TRANSVISITDIST WHERE VISID='" + OBJRESPONSE.BODYLINE[0].VISID + "'";
                        createText += "" + "" + Query + "" + Environment.NewLine;
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@ Exception in insert from TRANSVISITDIST to TEMP_TRANSVISITDIST" + "" + ex.Message + "" + Environment.NewLine;
                    }
                }

                dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                //List<VisitDist> rst = new List<VisitDist>();
                //for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
                //{
                //    rst.Add(
                //        new VisitDist
                //        {
                //            Id = dtvisit.Rows[i]["VisDistId"].ToString(),
                //            MS = dtvisit.Rows[i]["Milliseconds"].ToString(),
                //            DocumentId = docID
                //        }
                //    );
                //}
                //dtvisit.Dispose();
            }
            catch (Exception ex)
            {
                createText += "@@@Exception in _JSInsertTransVisitDistWithImage_ @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
            }
            finally
            {
                bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                bodyStream.Dispose();
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_JSInsertTransVisitDistWithImage_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SaveOrderDeleteInsert()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

            //int VisId = OBJRESPONSE.BODYLINE[0].VISID;
            //string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            //int UserId = OBJRESPONSE.BODYLINE[0].USERID;
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //int PartyId = OBJRESPONSE.BODYLINE[0].PARTYID;
            //int AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
            //string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
            //decimal OrderAmount = OBJRESPONSE.BODYLINE[0].ORDERAMOUNT;
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;
            //string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
            //string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;

            //int VisId = 20267;
            //string Android_Id = "242  00000059";
            //int UserId = 468;
            //string VDate = "2020-04-06";
            //int SMID = 242;
            //int PartyId = 3023;
            //int AreaId = 7034;
            //string Remarks = "r";
            //decimal OrderAmount = 6500.00M;
            //string longitude = "-122.084";
            //string latitude = "37.421998";
            //string lat_long_dt = "1586162671681";
            //string mobile_created_date = "1586163208725";
            //string IMGURL = "";
            //string IMAGE1 = "N/A";


            string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE = "0";
            }

            if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
            {
                double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;

            if (OBJRESPONSE.BODYLINE[0].IMAGE1.Contains("http://"))
            {
                OBJRESPONSE.BODYLINE[0].IMGURL = OBJRESPONSE.BODYLINE[0].IMAGE1.Replace(path, "~");
            }
            else if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(OBJRESPONSE.BODYLINE[0].IMAGE1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SMID + '-' + timeStamp);
                {
                    //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                    string filePath = Server.MapPath("~/DSRImages" + "/O_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    OBJRESPONSE.BODYLINE[0].IMGURL = "~/DSRImages" + "/O_" + filename + ".png";
                }

            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(OBJRESPONSE.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

            //if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            //{
            //    string strchk = "select frTime1,toTime1 from TransVisit  where Visid=" + VisId + "";
            //    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
            //    if (dtfr.Rows.Count > 0)
            //    {
            //        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
            //        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
            //        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

            //        if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
            //        {
            //            frtime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
            //        }
            //        if (tsmobiletimehm.CompareTo(tstotimes) > 0)
            //        {
            //            totime = tsmobiletimehm.ToString(@"hh\:mm");
            //            string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
            //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
            //        }
            //    }
            //}

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                    dtfr.Dispose();
                }
            }
            string olddocid = "";
            string modifyorder = "N";
            //string OrdDocId = Settings.GetDocID("ORDSN", DateTime.Now); 
            string str = string.Empty;
            //Settings.SetDocID("ORDSN", OrdDocId);
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].VISID) + "").ToString();
            if (ChkLock == "True")
            {
                //                str = "delete from transorder where  partyid=" + PartyId + " and VisId=" + VisId + "";
                //                DbConnectionDAL.ExecuteQuery(str);
                //                string insertfromtemp = @"INSERT INTO TransOrder (VisId,OrdDocId,UserId,VDate,SMID,PartyId,AreaId,Remarks,OrderAmount,OrderStatus,MeetFlag,MeetDocId,OrderType,created_date,android_id,Mobile_Created_date,[IMGURL])
                //                             SELECT VisId,OrdDocId,UserId,VDate,SMID,PartyId,AreaId,Remarks,OrderAmount,OrderStatus,MeetFlag,MeetDocId,OrderType,created_date,android_id,Mobile_Created_date,[IMGURL]
                //                            FROM Temp_TransOrder where VDate='" + VDate + "' and SMID=" + SMID + "";
                //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
                //                string updatevisid = "update TransOrder set visid=" + VisId + " where VDate='" + VDate + "' and SMID=" + SMID + "";
                //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                //                string deletefromtemp = "delete from  Temp_TransOrder  where VDate='" + VDate + "' and SMID=" + SMID + "";
                //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                //                Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from TransOrder where OrdDocId='" + OrdDocId + "'";
                //                //Created_date
                //                str = "select * from transorder where  android_id='" + Android_Id + "'";
                //                DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                //                if (dt.Rows.Count > 0)
                //                {
                //                    str = "delete from transorder where android_id='" + Android_Id + "'";
                //                    DbConnectionDAL.ExecuteQuery(str);
                //                }
                //                WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                //                string Address = "";
                //                if (latitude != "")
                //                {
                //                    Address = DMT.InsertAddress(latitude, longitude);
                //                }
                //                // string Address = DMT.InsertAddress(latitude, longitude);
                //                str = "INSERT INTO dbo.TransOrder (VisId,OrdDocId, Android_Id, UserId,VDate,SMID, PartyId,AreaId,Remarks,OrderAmount,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,[IMGURL]) " +
                //               " VALUES ('" + VisId + "', '" + OrdDocId + "', '" + Android_Id + "', " + UserId + ", '" + VDate + "', " + SMID + " , '" + PartyId + "', '" + AreaId + "', '" + Remarks + "', " + OrderAmount + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + IMGURL + "')";

                //                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                //                { }
            }

            else if (ChkLock == "False")
            {

                //olddocid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select OrdDocId from temp_TransOrder where partyid=" + PartyId + " and VisId=" + VisId + ""));

                //str = "delete from temp_TransOrder where partyid=" + PartyId + " and VisId=" + VisId + "";
                //DbConnectionDAL.ExecuteQuery(str);

                string OrdDocId = "";


                if (olddocid == "")
                {
                    OrdDocId = Settings.GetDocID("ORDSN", DateTime.Now);

                    Settings.SetDocID("ORDSN", OrdDocId);

                }
                /////////



                ///////////////////

                if (olddocid == "")
                {
                    //Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + OrdDocId + "'";
                    Query = "SELECT ORDID AS ID,ORDDOCID AS DOCUMENTID, (CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)   AS MS,'" + modifyorder + "' AS MODIFYORD   FROM TEMP_TRANSORDER WHERE ORDDOCID='" + OrdDocId + "'";
                    modifyorder = "N";
                }
                //else
                //{
                //    Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + olddocid + "'";
                //    modifyorder = "Y";
                //}


                //Created_date
                str = "select OrdDocId from temp_TransOrder where  android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    str = "delete from transorder where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "'";
                    DbConnectionDAL.ExecuteQuery(str);
                }
                dt.Dispose();
                // WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";
                //if (latitude != "")
                //{
                //    Address = DMT.InsertAddress(latitude, longitude);
                //}
                //  string Address = DMT.InsertAddress(latitude, longitude);
                if (olddocid == "")
                {
                    str = "INSERT INTO dbo.temp_TransOrder (VisId,OrdDocId, Android_Id, UserId,VDate,SMID, PartyId,AreaId,Remarks,OrderAmount,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,[IMGURL]) " +
                   " VALUES ('" + OBJRESPONSE.BODYLINE[0].VISID + "', '" + OrdDocId + "', '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', " + OBJRESPONSE.BODYLINE[0].USERID + ", '" + OBJRESPONSE.BODYLINE[0].VDATE + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , '" + OBJRESPONSE.BODYLINE[0].PARTYID + "', '" + OBJRESPONSE.BODYLINE[0].AREAID + "', '" + OBJRESPONSE.BODYLINE[0].REMARKS + "', " + OBJRESPONSE.BODYLINE[0].ORDERAMOUNT + ",DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + OBJRESPONSE.BODYLINE[0].IMGURL + "')";
                }

                //else
                //{
                //    str = "INSERT INTO dbo.temp_TransOrder (VisId,OrdDocId, Android_Id, UserId,VDate,SMID, PartyId,AreaId,Remarks,OrderAmount,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,[IMGURL]) " +
                // " VALUES ('" + VisId + "', '" + olddocid + "', '" + Android_Id + "', " + UserId + ", '" + VDate + "', " + SMID + " , '" + PartyId + "', '" + AreaId + "', '" + Remarks + "', " + OrderAmount + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + IMGURL + "')";
                //}
                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<Visit> rst = new List<Visit>();
            //for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new Visit
            //        {
            //            Id = dtvisit.Rows[i]["OrdId"].ToString(),
            //            DocumentId = dtvisit.Rows[i]["OrdDocId"].ToString(),
            //            MS = dtvisit.Rows[i]["Milliseconds"].ToString(),
            //            Modifyord = modifyorder
            //        }
            //    );
            //}
            //dtvisit.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        [DataContract]
        public class Visit1
        {
            [DataMember]
            public string Id { get; set; }
            [DataMember]
            public string DocumentId { get; set; }
            [DataMember]
            public string OrderId { get; set; }
            [DataMember]
            public string MS { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransOrder1DeleteInsert_Service_New1()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

            //int OrdId = OBJRESPONSE.BODYLINE[0].ORDID;
            //int VisId = OBJRESPONSE.BODYLINE[0].VISID;
            //string Sno = OBJRESPONSE.BODYLINE[0].SNO.ToString();
            //int UserId = OBJRESPONSE.BODYLINE[0].USERID;
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //string PartyId = OBJRESPONSE.BODYLINE[0].PARTYID.ToString();
            //int AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
            //int ItemId = OBJRESPONSE.BODYLINE[0].ITEMID;
            //decimal Qty = OBJRESPONSE.BODYLINE[0].QTY;
            //decimal Rate = OBJRESPONSE.BODYLINE[0].RATE;
            //string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
            //decimal amount = OBJRESPONSE.BODYLINE[0].AMOUNT;
            //string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            //string Android_Id1 = OBJRESPONSE.BODYLINE[0].ANDROID_ID1;
            //string cases = OBJRESPONSE.BODYLINE[0].CASES.ToString();
            //string unit = OBJRESPONSE.BODYLINE[0].UNIT.ToString();
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;
            //string seqNo = OBJRESPONSE.BODYLINE[0].SEQNO;
            //int selectedDistId = OBJRESPONSE.BODYLINE[0].SELECTEDDISTID;
            //decimal discount = OBJRESPONSE.BODYLINE[0].DISCOUNT;
            //string LastRecord = OBJRESPONSE.BODYLINE[0].LASTRECORD;
            //string modifiedorder = OBJRESPONSE.BODYLINE[0].MODIFIEDORDER;

            //int OrdId = 20055;
            //int VisId = 20267;
            //string Sno = "1";
            //int UserId = 468;
            //string VDate = "2020-04-28";
            //int SMID = 242;
            //string PartyId = "3023";
            //int AreaId = 10706;
            //int ItemId = 433;
            //decimal Qty = 8;
            //decimal Rate = 96;
            //string Remarks = "NA";
            //decimal amount = 768.00M;
            //string Android_Id = "242  00000059";
            //string Android_Id1 = "242  00000059 1";
            //string cases = "0";
            //string unit = "8";
            //string longitude = "-122.0840122";
            //string latitude = "37.4219905";
            //string lat_long_dt = "1588072071684";
            //string mobile_created_date = "1588072483460";
            //string seqNo = "0";
            //int selectedDistId = 1055;
            //decimal discount = 0.00M;
            //string LastRecord = "N";
            //string modifiedorder = "Y";

            string Query = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].SELECTEDDISTID.ToString()))
            {
                OBJRESPONSE.BODYLINE[0].SELECTEDDISTID = 0;
            }

            if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].DISCOUNT.ToString()))
            {
                OBJRESPONSE.BODYLINE[0].DISCOUNT = 0;
            }

            if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE = "0";
            }

            if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
            {
                double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(OBJRESPONSE.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }

            string str = string.Empty; //List<Visit1> rst = new List<Visit1>();
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].VISID) + "").ToString();
            if (ChkLock == "True")
            {

            }
            else if (ChkLock == "False")
            {
                if (OBJRESPONSE.BODYLINE[0].SEQNO == "0")
                {
                    str = "delete from temp_transorder1 where partyid=" + OBJRESPONSE.BODYLINE[0].PARTYID + " and visid=" + OBJRESPONSE.BODYLINE[0].VISID + " ";
                    DbConnectionDAL.ExecuteQuery(str);
                }

                string docid = "";

                //str = "select orddocid from temp_transorder where OrdId=" + OrdId + "";             

                //string docid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, str));


                str = "select OrdId,orddocid from temp_transorder where SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " and vdate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and partyid=" + OBJRESPONSE.BODYLINE[0].PARTYID + " and visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                DataTable dtchk = DbConnectionDAL.getFromDataTable(str);
                if (dtchk.Rows.Count > 0)
                {
                    OBJRESPONSE.BODYLINE[0].ORDID = Convert.ToInt32(dtchk.Rows[0]["OrdId"]);
                    docid = dtchk.Rows[0]["orddocid"].ToString();
                }

                try
                {
                    if (string.IsNullOrEmpty(docid))
                    {
                        System.IO.StreamWriter TextFileCID = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/docidblank-" + OBJRESPONSE.BODYLINE[0].VISID + "-.txt"), true);
                        TextFileCID.WriteLine("Query  :-" + str);
                        TextFileCID.Close();
                    }
                }
                catch (Exception ex)
                { ex.ToString(); }

                //string _OrdId = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, str));
                //if (!string.IsNullOrEmpty(_OrdId))
                //{
                //    OrdId = Convert.ToInt32(_OrdId);
                //}
                //else
                //{
                //    //OrdId = 0;
                //    OrdId = 9999999;
                //}


                //if (string.IsNullOrEmpty(docid))
                //{
                //    str = "select orddocid from temp_transorder where SMID=" + SMID + " and vdate='" + VDate + "' and partyid=" + PartyId + "";

                //    docid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, str));
                //}


                //if (!string.IsNullOrEmpty(docid))   freely insert to db
                {
                    str = "select * from temp_transorder1 where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "' and android_id1='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID1 + "'";
                    DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                    if (dt.Rows.Count > 0)
                    {
                        try
                        {
                            string strinsert = "Insert Into [Temp_TransOrder1_Temp] select * from temp_transorder1 where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "' and android_id1='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID1 + "' ";
                            DbConnectionDAL.ExecuteQuery(strinsert);
                        }
                        catch (Exception ex)
                        {

                        }

                        str = "delete from TEMP_transorder1 where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "' and android_id1='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID1 + "'";
                        DbConnectionDAL.ExecuteQuery(str);
                    }
                    //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                    string Address = "";
                    //if (latitude != "")
                    //{
                    //    Address = DMT.InsertAddress(latitude, longitude);
                    //}
                    //  string Address = DMT.InsertAddress(latitude, longitude);
                    str = "INSERT INTO dbo.temp_TransOrder1 (OrdId,VisId,OrdDocId, Sno, UserId,VDate,SMID, PartyId,AreaId,ItemId,Qty,Rate,Remarks,amount,Android_Id,android_id1,Created_date,cases,unit,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,DistId,Discount)  OUTPUT INSERTED.Ord1Id  " +
                    " VALUES (" + OBJRESPONSE.BODYLINE[0].ORDID + ", '" + OBJRESPONSE.BODYLINE[0].VISID + "', '" + docid + "', '" + OBJRESPONSE.BODYLINE[0].SNO + "', '" + OBJRESPONSE.BODYLINE[0].USERID + "', '" + OBJRESPONSE.BODYLINE[0].VDATE + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , '" + OBJRESPONSE.BODYLINE[0].PARTYID + "', '" + OBJRESPONSE.BODYLINE[0].AREAID + "', " + OBJRESPONSE.BODYLINE[0].ITEMID + ", " + OBJRESPONSE.BODYLINE[0].QTY + ", " + OBJRESPONSE.BODYLINE[0].RATE + ",'" + OBJRESPONSE.BODYLINE[0].REMARKS + "', " + OBJRESPONSE.BODYLINE[0].AMOUNT + ", '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID1 + "',DateAdd(minute,330,getutcdate())," + Convert.ToDecimal(OBJRESPONSE.BODYLINE[0].CASES) + "," + Convert.ToDecimal(OBJRESPONSE.BODYLINE[0].UNIT) + ",'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "'," + OBJRESPONSE.BODYLINE[0].SELECTEDDISTID + "," + OBJRESPONSE.BODYLINE[0].DISCOUNT + ")";
                    //System.IO.StreamWriter TextFileCID = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/AppLogFile-" + SMID + "-.txt"), True);

                    //TextFileCID.WriteLine("UnlockInsertQuery  :-" + str);
                    //TextFileCID.Close();
                    string compcode = "";
                    DataTable dtgrpsmid = new DataTable();
                    DataTable dtdist = new DataTable();
                    string pro_id = "";
                    string displaytitle = "";
                    string title = "";
                    string createdatetime = "";
                    string partyname = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Partyname From MastParty where PartyId=" + OBJRESPONSE.BODYLINE[0].PARTYID + ""));
                    if (Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, str)) > 0)
                    {
                        if (OBJRESPONSE.BODYLINE[0].LASTRECORD.ToUpper() == "Y")
                        {
                            compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
                            createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from temp_TransOrder1 where OrdId=" + OBJRESPONSE.BODYLINE[0].ORDID + ""));
                            dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid from mastsalesrep where SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "");
                            if (dtgrpsmid.Rows.Count > 0)
                            {

                            }
                            else
                            {
                                dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName,userid from mastsalesrep where SMID==" + OBJRESPONSE.BODYLINE[0].SMID + "");
                            }

                            if (dtgrpsmid.Rows.Count > 0)
                            {
                                pro_id = "RETORDDISCAN";
                                string sql_getsenior = "select SMID,Mobile,userid from mastsalesrep where SMID in (select MainGrp from mastsalesrepgrp where SMID=" + dtgrpsmid.Rows[0]["SMID"].ToString() + " and Level<=(select level from mastsalesrepgrp where SMID=" + dtgrpsmid.Rows[0]["SMID"].ToString() + " and MainGrp=" + dtgrpsmid.Rows[0]["SMID"].ToString() + "))";
                                DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                                if (dt_getsenior.Rows.Count > 0)
                                {
                                    for (int i = 0; i < dt_getsenior.Rows.Count; i++)
                                    {

                                        if (OBJRESPONSE.BODYLINE[0].MODIFIEDORDER == "Y")
                                        {
                                            displaytitle = docid.Replace("-", " ") + " -  Order Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                            title = " Order Modified";
                                        }
                                        else
                                        {
                                            displaytitle = docid.Replace("-", " ") + " - New Order created by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                            title = " New Order Created";
                                        }


                                        lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[i]["userid"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + docid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), Convert.ToInt32(dt_getsenior.Rows[i]["SMID"].ToString()));

                                        if (!string.IsNullOrEmpty(dt_getsenior.Rows[i]["mobile"].ToString()))
                                        {
                                            pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                                dt_getsenior.Rows[i]["mobile"].ToString(),


                                              title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                                dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS");

                                            pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                               dt_getsenior.Rows[i]["mobile"].ToString(),
                                              title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                               dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER");
                                        }
                                    }
                                }

                                dtdist = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT Mobile,  UserId FROM MastParty WHERE PartyId=" + OBJRESPONSE.BODYLINE[0].SELECTEDDISTID + "");
                                if (dtdist.Rows.Count > 0)
                                {
                                    lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dtdist.Rows[0]["UserId"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + docid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), 0);

                                    if (!string.IsNullOrEmpty(dtdist.Rows[0]["mobile"].ToString()))
                                    {
                                        pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                           dtdist.Rows[0]["mobile"].ToString(),
                                            "New Order Created", dtgrpsmid.Rows[0]["SMID"].ToString(),
                                            dtgrpsmid.Rows[0]["SMName"].ToString(), "GOLDIEE", docid, partyname);
                                    }
                                }




                            }
                        }



                    }

                    Query = "SELECT ORD1ID AS ID,ORDID AS ORDERID,ORDDOCID AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)   AS MS FROM TEMP_TRANSORDER1 WHERE ORDDOCID='" + docid + "'";

                }
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new Visit1
            //        {
            //            Id = dtvisit.Rows[i]["Ord1Id"].ToString(),
            //            OrderId = dtvisit.Rows[i]["OrdId"].ToString(),
            //            DocumentId = dtvisit.Rows[i]["OrdDocId"].ToString(),
            //            MS = dtvisit.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            //dtvisit.Dispose();
            bodyStream.Dispose();

            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        public class Party
        {
            [DataMember]
            public string ID { get; set; }
            [DataMember]
            public string STATUS { get; set; }
            [DataMember]
            public string MS { get; set; }

        }

        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void FFMSApp_SaveParty()
        //{
        //   // var httpRequest = HttpContext.Current.Request;
        //    var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
        //   // DataTable DTadmin = new DataTable();
        //    bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //    var bodyText = bodyStream.ReadToEnd();
        //    //     string items = httpRequest.Params["orderdetail"].ToString();
        //    var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

        //    //Int32 PartyId = OBJRESPONSE.BODYLINE[0].PARTYID;
        //    //string PartyName = OBJRESPONSE.BODYLINE[0].PARTYNAME;
        //    //string Address1 = OBJRESPONSE.BODYLINE[0].ADDRESS1;
        //    //string Address2 = OBJRESPONSE.BODYLINE[0].ADDRESS2;
        //    //Int32 CityId = OBJRESPONSE.BODYLINE[0].CITYID;
        //    //Int32 AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
        //    //Int32 BeatId = OBJRESPONSE.BODYLINE[0].BEATID;
        //    //Int32 UnderId = OBJRESPONSE.BODYLINE[0].UNDERID;
        //    //string Pin = OBJRESPONSE.BODYLINE[0].PIN;
        //    //string Mobile = OBJRESPONSE.BODYLINE[0].MOBILE;
        //    //string Phone = OBJRESPONSE.BODYLINE[0].PHONE;
        //    //string Remark = OBJRESPONSE.BODYLINE[0].REMARK;
        //    //string SyncId = OBJRESPONSE.BODYLINE[0].SYNCID;
        //    //string IndId = OBJRESPONSE.BODYLINE[0].INDID;
        //    //decimal Potential = OBJRESPONSE.BODYLINE[0].POTENTIAL;
        //    //bool Active = OBJRESPONSE.BODYLINE[0].ACTIVE;
        //    //string BlockReason = OBJRESPONSE.BODYLINE[0].BLOCKREASON;
        //    //int PartyType = OBJRESPONSE.BODYLINE[0].PARTYTYPE;
        //    //string ContactPerson = OBJRESPONSE.BODYLINE[0].CONTACTPERSON;
        //    //string CSTNo = OBJRESPONSE.BODYLINE[0].CSTNO;
        //    //string VatTin = OBJRESPONSE.BODYLINE[0].VATTIN;
        //    //string ServiceTax = OBJRESPONSE.BODYLINE[0].SERVICETAX;
        //    //string PanNo = OBJRESPONSE.BODYLINE[0].PANNO;
        //    //int UserId = OBJRESPONSE.BODYLINE[0].USERID;
        //    //string DOA = OBJRESPONSE.BODYLINE[0].DOA;
        //    //string DOB = OBJRESPONSE.BODYLINE[0].DOB;
        //    //string Email = OBJRESPONSE.BODYLINE[0].EMAIL;
        //    //string androidid = OBJRESPONSE.BODYLINE[0].ANDROIDID;
        //    //string Longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
        //    //string Latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
        //    //string LatlngTime = OBJRESPONSE.BODYLINE[0].LATLNGTIME;
        //    //string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
        //    //string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
        //    //string GSTINNo = OBJRESPONSE.BODYLINE[0].GSTINNO;
        //    //Int32 PartyId = 0;
        //    //string PartyName = "Outlet One Manmohan";
        //    //string Address1 = "Ajmer palace ";
        //    //string Address2 = "";
        //    //Int32 CityId = 6493;
        //    //Int32 AreaId = 7573;
        //    //Int32 BeatId = 7574;
        //    //Int32 UnderId = 0;
        //    //string Pin = "979779";
        //    //string Mobile = "2580085225";
        //    //string Phone = "";
        //    //string Remark = "";
        //    //string SyncId = "";
        //    //string IndId = "26";
        //    //decimal Potential = 0;
        //    //bool Active = True;
        //    //string BlockReason = "";
        //    //int PartyType = 16;
        //    //string ContactPerson = "";
        //    //string CSTNo = "22AAAAA0000A1Z5";
        //    //string VatTin = "";
        //    //string ServiceTax = "";
        //    //string PanNo = "QWERTY6776AB";
        //    //int UserId = 4543;
        //    //string DOA = "";
        //    //string DOB = "";
        //    //string Email = "";
        //    //string androidid = "2269  00000001";
        //    //string Longitude = "80.3443667";
        //    //string Latitude = "26.4825932";
        //    //string LatlngTime = "1597152413781";
        //    //string IMGURL = "";
        //    //string IMAGE1 = "N/A";



        //    string chk = "0"; string checkmobileno = string.Empty, _partyId = "", _Query = "";
        //    DataTable mobileno = new DataTable();
        //    DataTable dtandridid = new DataTable();
        //    string qry = "", Millisecond = "";
        //    //double ticks = double.Parse(LatlngTime);
        //    //TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //    //DateTime startdate = new DateTime(1970, 1, 1) + time;
        //    //string minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    string minDate1 = "";
        //    if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LATLNGTIME))
        //    {
        //        double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LATLNGTIME);
        //        TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //        DateTime startdate = new DateTime(1970, 1, 1) + time;
        //        minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }
        //    else
        //    {
        //        minDate1 = DateTime.Now.ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }
        //   // WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
        //    string Address = "", filename = "";

        //    //if (OBJRESPONSE.BODYLINE[0].LATITUDE != "")
        //    //{
        //    //    Address = DMT.InsertAddress(OBJRESPONSE.BODYLINE[0].LATITUDE, OBJRESPONSE.BODYLINE[0].LONGITUDE);
        //    //}

        //    string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
        //    string path = "http://" + host;
        //    if (OBJRESPONSE.BODYLINE[0].IMAGE1.Contains("http://"))
        //    {
        //        OBJRESPONSE.BODYLINE[0].IMGURL = OBJRESPONSE.BODYLINE[0].IMAGE1.Replace(path, "~");
        //    }
        //    else if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
        //    {
        //        byte[] bytes = Convert.FromBase64String(OBJRESPONSE.BODYLINE[0].IMAGE1);

        //        Image image;
        //        using (MemoryStream ms = new MemoryStream(bytes))
        //        {
        //            image = Image.FromStream(ms);
        //        }
        //        string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
        //        if (!Directory.Exists(directoryPath))
        //        {
        //            Directory.CreateDirectory(directoryPath);
        //        }
        //        string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
        //        filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SYNCID + '-' + timeStamp);
        //        {
        //            string filePath = Server.MapPath("~/DSRImages" + "/NewParty_" + filename + ".png");
        //            File.WriteAllBytes(filePath, bytes);
        //            OBJRESPONSE.BODYLINE[0].IMGURL = "~/DSRImages" + "/NewParty_" + filename + ".png";
        //        }
        //    }

        //    PartyBAL PB = new PartyBAL();
        //    int retval = 0;
        //    string Partytype_Name = "";

        //    Partytype_Name = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select PartyTypeName From PartyType where PartyTypeId=" + OBJRESPONSE.BODYLINE[0].PARTYTYPE + ""));
        //    int SMID = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT SMID FROM MastSalesRep WHERE UserId=" + OBJRESPONSE.BODYLINE[0].USERID + ""));

        //    int RoleId = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RoleId FROM MastRole WHERE RoleType='Distributor'"));
        //    string msz = "Record Inserted Successfully";
        //    if (OBJRESPONSE.BODYLINE[0].INDID == "")
        //    {
        //        OBJRESPONSE.BODYLINE[0].INDID = "0";
        //    }
        //    //   string partyoffline = DbConnectionDAL.GetStringScalarVal("select PartyOffLine from mastenviro").ToString();

        //    if (OBJRESPONSE.BODYLINE[0].PARTYID == 0)
        //    {
        //        if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
        //        {


        //            retval = DB.InsertDistributors(OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, Convert.ToString(OBJRESPONSE.BODYLINE[0].CITYID), OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].EMAIL, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].REMARK,
        //                OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].BLOCKREASON, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].PHONE, RoleId, OBJRESPONSE.BODYLINE[0].CONTACTPERSON, OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN,
        //                OBJRESPONSE.BODYLINE[0].SERVICETAX, OBJRESPONSE.BODYLINE[0].PANNO, 0, 0, 0, 0, OBJRESPONSE.BODYLINE[0].USERID, "", "", OBJRESPONSE.BODYLINE[0].PARTYNAME, SMID, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB,
        //                OBJRESPONSE.BODYLINE[0].AREAID, "", "", OBJRESPONSE.BODYLINE[0].PARTYTYPE);
        //            if (OBJRESPONSE.BODYLINE[0].SYNCID == "")
        //            {
        //                string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
        //            }

        //        }
        //        else
        //        {
        //            retval = PB.InsertPartyFromMobile(OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, OBJRESPONSE.BODYLINE[0].CITYID, OBJRESPONSE.BODYLINE[0].AREAID, OBJRESPONSE.BODYLINE[0].BEATID, OBJRESPONSE.BODYLINE[0].UNDERID, OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].PHONE, OBJRESPONSE.BODYLINE[0].REMARK,
        //                OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].INDID,
        //            OBJRESPONSE.BODYLINE[0].POTENTIAL, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].BLOCKREASON, Convert.ToInt32(OBJRESPONSE.BODYLINE[0].PARTYTYPE), OBJRESPONSE.BODYLINE[0].CONTACTPERSON, OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN, OBJRESPONSE.BODYLINE[0].SERVICETAX,
        //            OBJRESPONSE.BODYLINE[0].PANNO, OBJRESPONSE.BODYLINE[0].USERID, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB, OBJRESPONSE.BODYLINE[0].EMAIL, "", OBJRESPONSE.BODYLINE[0].GSTINNO);
        //        }


        //        if (retval == -1)
        //        { msz = "Duplicate Party Exists"; }
        //        else if (retval == -3)
        //        {
        //            msz = "Duplicate Mobile Exists";
        //            _Query = @"select PartyId from MastParty Where Mobile='" + OBJRESPONSE.BODYLINE[0].MOBILE + "'";
        //            _partyId = DbConnectionDAL.GetStringScalarVal(_Query);
        //        }

        //        else if (retval == -4)
        //        {
        //            msz = "Duplicate GSTNo Exists";
        //            _Query = @"select PartyId from MastParty Where GSTINNo='" + OBJRESPONSE.BODYLINE[0].GSTINNO + "'";
        //            _partyId = DbConnectionDAL.GetStringScalarVal(_Query);
        //        }
        //        else
        //        {
        //            string sql = "update mastparty set android_id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "', Longitude = '" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "',Latitude='" + OBJRESPONSE.BODYLINE[0].LATITUDE + "', Address='" + Address + "',Lat_long_datetime = '" + minDate1 + "',IMGURL='" + OBJRESPONSE.BODYLINE[0].IMGURL + "',GSTINNo='" + OBJRESPONSE.BODYLINE[0].CSTNO + "' where partyid=" + retval + " ";
        //            if (DbConnectionDAL.ExecuteQuery(sql) == 1)
        //            { chk = "1"; }
        //        }
        //    }
        //    else
        //    {

        //        if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
        //        {


        //            retval = DB.UpdateDistributors(OBJRESPONSE.BODYLINE[0].PARTYID, OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, Convert.ToString(OBJRESPONSE.BODYLINE[0].CITYID), OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].EMAIL, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].REMARK, OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].BLOCKREASON, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].PHONE, RoleId, "", OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN, OBJRESPONSE.BODYLINE[0].SERVICETAX, OBJRESPONSE.BODYLINE[0].PANNO, 0, 0, 0, 0, OBJRESPONSE.BODYLINE[0].USERID, "", "", OBJRESPONSE.BODYLINE[0].PARTYNAME, SMID, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB, OBJRESPONSE.BODYLINE[0].AREAID, "", "", OBJRESPONSE.BODYLINE[0].PARTYTYPE);
        //            if (OBJRESPONSE.BODYLINE[0].SYNCID == "")
        //            {
        //                string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
        //            }

        //        }
        //        else
        //        {

        //            retval = PB.UpdatePartyFromMobile(OBJRESPONSE.BODYLINE[0].PARTYID, OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, OBJRESPONSE.BODYLINE[0].CITYID, OBJRESPONSE.BODYLINE[0].AREAID, OBJRESPONSE.BODYLINE[0].BEATID, OBJRESPONSE.BODYLINE[0].UNDERID, OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].PHONE, OBJRESPONSE.BODYLINE[0].REMARK, OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].INDID, OBJRESPONSE.BODYLINE[0].POTENTIAL, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].BLOCKREASON, OBJRESPONSE.BODYLINE[0].PARTYTYPE, OBJRESPONSE.BODYLINE[0].CONTACTPERSON, OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN, OBJRESPONSE.BODYLINE[0].SERVICETAX, OBJRESPONSE.BODYLINE[0].PANNO, OBJRESPONSE.BODYLINE[0].USERID, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB, OBJRESPONSE.BODYLINE[0].EMAIL, "", OBJRESPONSE.BODYLINE[0].GSTINNO);

        //        }
        //    }

        //    if (retval == -1)
        //    { msz = "Duplicate Party Exists"; }
        //    else if (retval == -3)
        //    { msz = "Duplicate Mobile Exists"; }
        //    else if (retval == -4)
        //    {
        //        msz = "Duplicate GSTNo Exists";

        //    }
        //    else
        //    {
        //        string sqlupdate = "update mastparty set android_id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "', Longitude = '" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "',Latitude='" + OBJRESPONSE.BODYLINE[0].LATITUDE + "',Address='" + Address + "',Lat_long_datetime = '" + minDate1 + "',IMGURL='" + OBJRESPONSE.BODYLINE[0].IMGURL + "',GSTINNo='" + OBJRESPONSE.BODYLINE[0].CSTNO + "' where partyid=" + OBJRESPONSE.BODYLINE[0].PARTYID + " ";
        //        if (DbConnectionDAL.ExecuteQuery(sqlupdate) == 1)
        //        { chk = "2"; }
        //    }
        //    if (retval > 0)
        //    {
        //        if (chk == "1")
        //        { msz = "Record Inserted Successfully"; _partyId = retval.ToString(); }
        //        else if (chk == "2")
        //        { msz = "Record Updated Successfully"; _partyId = OBJRESPONSE.BODYLINE[0].PARTYID.ToString(); }

        //        qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "' ";

        //        //Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();
        //    }
        //    else
        //    {
        //        qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where mobile='" + OBJRESPONSE.BODYLINE[0].MOBILE + "' ";
        //    }
        //    Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();
        //    bodyStream.Dispose();
        //    List<Party> rst = new List<Party>();
        //    {
        //        rst.Add(
        //            new Party
        //            {
        //                //Id = retval.ToString(),
        //                ID = _partyId,
        //                STATUS = msz,
        //                MS = Millisecond
        //            }
        //        );
        //    }
        //    Context.Response.Write(JsonConvert.SerializeObject(rst));
        //}


        //10-06-2021---------- anurag create log for Insert/Update Party
        //10-06-2021---------- anurag create log for Insert/Update Party
        //22-06-2021------------ anurag add finally at last
        //23-06-2021------------- change file name path in finally
        //16-07-2021------------- column place change according to bal
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SaveParty()
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //   DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

            string chk = "0"; string checkmobileno = string.Empty, _partyId = "", _Query = "";
            DataTable mobileno = new DataTable();
            DataTable dtandridid = new DataTable();
            string qry = "", Millisecond = "";
            //double ticks = double.Parse(LatlngTime);
            //TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            //DateTime startdate = new DateTime(1970, 1, 1) + time;
            //string minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string minDate1 = "";
            int retval = 0;
            string msz = "";
            try
            {
                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LATLNGTIME))
                {
                    double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LATLNGTIME);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }
                else
                {
                    minDate1 = DateTime.Now.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

                string Address = "", filename = "";

                string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
                createText += "" + "" + host + "" + Environment.NewLine;
                string path = "http://" + host;
                if (OBJRESPONSE.BODYLINE[0].IMAGE1.Contains("http://"))
                {
                    OBJRESPONSE.BODYLINE[0].IMGURL = OBJRESPONSE.BODYLINE[0].IMAGE1.Replace(path, "~");
                }
                else if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
                {
                    byte[] bytes = Convert.FromBase64String(OBJRESPONSE.BODYLINE[0].IMAGE1);

                    Image image;
                    using (MemoryStream ms = new MemoryStream(bytes))
                    {
                        image = Image.FromStream(ms);
                    }
                    string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }
                    String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SYNCID + '-' + timeStamp);
                    {
                        string filePath = Server.MapPath("~/DSRImages" + "/NewParty_" + filename + ".png");
                        File.WriteAllBytes(filePath, bytes);
                        OBJRESPONSE.BODYLINE[0].IMGURL = "~/DSRImages" + "/NewParty_" + filename + ".png";
                    }
                }

                PartyBAL PB = new PartyBAL();

                string Partytype_Name = "";

                Partytype_Name = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select PartyTypeName From PartyType where PartyTypeId=" + OBJRESPONSE.BODYLINE[0].PARTYTYPE + ""));

                createText += "" + "Select PartyTypeName From PartyType where PartyTypeId=" + OBJRESPONSE.BODYLINE[0].PARTYTYPE + "" + Environment.NewLine;
                int smid = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT SMId FROM MastSalesRep WHERE UserId=" + OBJRESPONSE.BODYLINE[0].USERID + ""));

                createText += "" + "SELECT SMId FROM MastSalesRep WHERE UserId=" + OBJRESPONSE.BODYLINE[0].USERID + "" + Environment.NewLine;

                int RoleId = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RoleId FROM MastRole WHERE RoleType='Distributor'"));

                createText += "" + "SELECT RoleId FROM MastRole WHERE RoleType='Distributor'" + "" + Environment.NewLine;
                msz = "Record Inserted Successfully";
                if (OBJRESPONSE.BODYLINE[0].INDID == "")
                {
                    OBJRESPONSE.BODYLINE[0].INDID = "0";
                }
                //   string partyoffline = DbConnectionDAL.GetStringScalarVal("select PartyOffLine from mastenviro").ToString();

                if (OBJRESPONSE.BODYLINE[0].PARTYID == 0)
                {
                    if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
                    {
                        createText += "@@@PARTYID == 0 &&& @@@@Partytype_Name.ToUpper() == INSTITUTIONAL" + OBJRESPONSE.BODYLINE[0].PARTYNAME + "," + OBJRESPONSE.BODYLINE[0].ADDRESS1 + "," + OBJRESPONSE.BODYLINE[0].ADDRESS2 + "," + Convert.ToString(OBJRESPONSE.BODYLINE[0].CITYID) + "," + OBJRESPONSE.BODYLINE[0].PIN + "," + OBJRESPONSE.BODYLINE[0].EMAIL + "," + OBJRESPONSE.BODYLINE[0].MOBILE + "," + OBJRESPONSE.BODYLINE[0].REMARK + "," + OBJRESPONSE.BODYLINE[0].SYNCID + "," + OBJRESPONSE.BODYLINE[0].BLOCKREASON + "," + OBJRESPONSE.BODYLINE[0].MOBILE + "," + OBJRESPONSE.BODYLINE[0].ACTIVE + "," + OBJRESPONSE.BODYLINE[0].PHONE + "," + RoleId + "," + OBJRESPONSE.BODYLINE[0].CONTACTPERSON + "," + OBJRESPONSE.BODYLINE[0].CSTNO + "," + OBJRESPONSE.BODYLINE[0].VATTIN + "," +
                            OBJRESPONSE.BODYLINE[0].SERVICETAX + "," + OBJRESPONSE.BODYLINE[0].PANNO + "," + 0 + "," + 0 + "," + 0 + "," + 0 + "," + OBJRESPONSE.BODYLINE[0].USERID + "," + "," + "," + OBJRESPONSE.BODYLINE[0].PARTYNAME + "," + smid + "," + OBJRESPONSE.BODYLINE[0].DOA + "," + OBJRESPONSE.BODYLINE[0].DOB + "," + OBJRESPONSE.BODYLINE[0].AREAID + "," + "" + "," + "" + "," + OBJRESPONSE.BODYLINE[0].PARTYTYPE + "" + Environment.NewLine;

                        retval = DB.InsertDistributors(OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, Convert.ToString(OBJRESPONSE.BODYLINE[0].CITYID), OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].EMAIL, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].REMARK,
                            OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].BLOCKREASON, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].PHONE, RoleId, OBJRESPONSE.BODYLINE[0].CONTACTPERSON, OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN, OBJRESPONSE.BODYLINE[0].PANNO, 0, 0, 0, 0, OBJRESPONSE.BODYLINE[0].USERID, "", "", OBJRESPONSE.BODYLINE[0].PARTYNAME, smid, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB,
                            OBJRESPONSE.BODYLINE[0].AREAID, "", "", OBJRESPONSE.BODYLINE[0].PARTYTYPE,
                            OBJRESPONSE.BODYLINE[0].SERVICETAX);
                        if (OBJRESPONSE.BODYLINE[0].SYNCID == "")
                        {
                            string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
                            createText += "" + "" + syncid + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
                        }

                    }
                    else
                    {
                        createText += "@@@PARTYID == 0 &&& @@@@ELSE" + OBJRESPONSE.BODYLINE[0].PARTYNAME + "," + OBJRESPONSE.BODYLINE[0].ADDRESS1 + "," + OBJRESPONSE.BODYLINE[0].ADDRESS2 + "," + OBJRESPONSE.BODYLINE[0].CITYID + "," + OBJRESPONSE.BODYLINE[0].AREAID + "," + OBJRESPONSE.BODYLINE[0].BEATID + "," + OBJRESPONSE.BODYLINE[0].UNDERID + "," + OBJRESPONSE.BODYLINE[0].PIN + "," + OBJRESPONSE.BODYLINE[0].MOBILE + "," + OBJRESPONSE.BODYLINE[0].PHONE + "," + OBJRESPONSE.BODYLINE[0].REMARK + "," + OBJRESPONSE.BODYLINE[0].SYNCID + "," + OBJRESPONSE.BODYLINE[0].INDID + "," + OBJRESPONSE.BODYLINE[0].POTENTIAL + "," + OBJRESPONSE.BODYLINE[0].ACTIVE + "," + OBJRESPONSE.BODYLINE[0].BLOCKREASON + "," + Convert.ToInt32(OBJRESPONSE.BODYLINE[0].PARTYTYPE) + "," + OBJRESPONSE.BODYLINE[0].CONTACTPERSON + "," + OBJRESPONSE.BODYLINE[0].CSTNO + "," + OBJRESPONSE.BODYLINE[0].VATTIN + "," + OBJRESPONSE.BODYLINE[0].SERVICETAX + "," + OBJRESPONSE.BODYLINE[0].PANNO + "," + OBJRESPONSE.BODYLINE[0].USERID + "," + OBJRESPONSE.BODYLINE[0].DOA + "," + OBJRESPONSE.BODYLINE[0].DOB + "," + OBJRESPONSE.BODYLINE[0].EMAIL + "," + "" + "," + OBJRESPONSE.BODYLINE[0].GSTINNO + "," + OBJRESPONSE.BODYLINE[0].ANDROIDID + "" + Environment.NewLine;

                        retval = PB.InsertPartyFromMobile(OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, OBJRESPONSE.BODYLINE[0].CITYID, OBJRESPONSE.BODYLINE[0].AREAID, OBJRESPONSE.BODYLINE[0].BEATID, OBJRESPONSE.BODYLINE[0].UNDERID, OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].PHONE, OBJRESPONSE.BODYLINE[0].REMARK,
                            OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].INDID,
                        OBJRESPONSE.BODYLINE[0].POTENTIAL, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].BLOCKREASON, Convert.ToInt32(OBJRESPONSE.BODYLINE[0].PARTYTYPE), OBJRESPONSE.BODYLINE[0].CONTACTPERSON, OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN, OBJRESPONSE.BODYLINE[0].SERVICETAX,
                        OBJRESPONSE.BODYLINE[0].PANNO, OBJRESPONSE.BODYLINE[0].USERID, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB, OBJRESPONSE.BODYLINE[0].EMAIL, "", OBJRESPONSE.BODYLINE[0].GSTINNO, OBJRESPONSE.BODYLINE[0].ANDROIDID);
                    }


                    if (retval == -1)
                    { msz = "Duplicate Party Exists"; }
                    else if (retval == -3)
                    {
                        msz = "Duplicate Mobile Exists";
                        _Query = @"select PartyId from MastParty Where Mobile='" + OBJRESPONSE.BODYLINE[0].MOBILE + "'";
                        createText += "" + "" + _Query + "" + Environment.NewLine;
                        _partyId = DbConnectionDAL.GetStringScalarVal(_Query);
                    }
                    else if (retval == -4)
                    {
                        msz = "Duplicate GSTNo Exists";
                        _Query = @"select PartyId from MastParty Where GSTINNo='" + OBJRESPONSE.BODYLINE[0].GSTINNO + "'";
                        createText += "" + "" + _Query + "" + Environment.NewLine;
                        _partyId = DbConnectionDAL.GetStringScalarVal(_Query);
                    }
                    else if (retval == -5)
                    {
                        msz = "Duplicate AndroidId Exists";
                        _Query = @"select PartyId from MastParty Where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "'";
                        createText += "" + "" + _Query + "" + Environment.NewLine;
                        _partyId = DbConnectionDAL.GetStringScalarVal(_Query);
                    }
                    else
                    {
                        string sql = "UPDATE MASTPARTY SET ANDROID_ID='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "', LONGITUDE = '" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "',LATITUDE='" + OBJRESPONSE.BODYLINE[0].LATITUDE + "', ADDRESS='" + Address + "',LAT_LONG_DATETIME = '" + minDate1 + "',IMGURL='" + OBJRESPONSE.BODYLINE[0].IMGURL + "',GSTINNO='" + OBJRESPONSE.BODYLINE[0].CSTNO + "' WHERE PARTYID=" + retval + " ";
                        createText += "" + "" + sql + "" + Environment.NewLine;
                        if (DbConnectionDAL.ExecuteQuery(sql) == 1)
                        { chk = "1"; }
                    }
                }
                else
                {

                    if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
                    {
                        createText += "@@@PARTYID == 1 &&& @@@@Partytype_Name.ToUpper() == INSTITUTIONAL" + OBJRESPONSE.BODYLINE[0].PARTYID + "," + OBJRESPONSE.BODYLINE[0].PARTYNAME + "," + OBJRESPONSE.BODYLINE[0].ADDRESS1 + "," + OBJRESPONSE.BODYLINE[0].ADDRESS2 + "," + Convert.ToString(OBJRESPONSE.BODYLINE[0].CITYID) + "," + OBJRESPONSE.BODYLINE[0].PIN + "," + OBJRESPONSE.BODYLINE[0].EMAIL + "," + OBJRESPONSE.BODYLINE[0].MOBILE + "," + OBJRESPONSE.BODYLINE[0].REMARK + "," + OBJRESPONSE.BODYLINE[0].SYNCID + "," + OBJRESPONSE.BODYLINE[0].BLOCKREASON + "," + OBJRESPONSE.BODYLINE[0].MOBILE + "," + OBJRESPONSE.BODYLINE[0].ACTIVE + "," + OBJRESPONSE.BODYLINE[0].PHONE + "," + RoleId + "," + "" + "," + OBJRESPONSE.BODYLINE[0].CSTNO + "," + OBJRESPONSE.BODYLINE[0].VATTIN + "," + OBJRESPONSE.BODYLINE[0].SERVICETAX + "," + OBJRESPONSE.BODYLINE[0].PANNO + "," + 0 + "," + 0 + "," + 0 + "," + 0 + "," + OBJRESPONSE.BODYLINE[0].USERID + "," + "" + "," + "" + "," + OBJRESPONSE.BODYLINE[0].PARTYNAME + "," + smid + "," + OBJRESPONSE.BODYLINE[0].DOA + "," + OBJRESPONSE.BODYLINE[0].DOB + "," + OBJRESPONSE.BODYLINE[0].AREAID + "," + "" + "," + "" + "," + OBJRESPONSE.BODYLINE[0].PARTYTYPE + "" + Environment.NewLine;

                        retval = DB.UpdateDistributors(OBJRESPONSE.BODYLINE[0].PARTYID, OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, Convert.ToString(OBJRESPONSE.BODYLINE[0].CITYID), OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].EMAIL, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].REMARK, OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].BLOCKREASON, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].PHONE, RoleId, "", OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN, OBJRESPONSE.BODYLINE[0].PANNO, 0, 0, 0, 0, OBJRESPONSE.BODYLINE[0].USERID, "", "", OBJRESPONSE.BODYLINE[0].PARTYNAME, smid, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB, OBJRESPONSE.BODYLINE[0].AREAID, "", "", OBJRESPONSE.BODYLINE[0].PARTYTYPE, OBJRESPONSE.BODYLINE[0].SERVICETAX);
                        if (OBJRESPONSE.BODYLINE[0].SYNCID == "")
                        {
                            string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
                            createText += "" + "" + syncid + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
                        }

                    }
                    else
                    {
                        createText += "@@@PARTYID == 1 &&& @@@@ELSE" + OBJRESPONSE.BODYLINE[0].PARTYID + "," + OBJRESPONSE.BODYLINE[0].PARTYNAME + "," + OBJRESPONSE.BODYLINE[0].ADDRESS1 + "," + OBJRESPONSE.BODYLINE[0].ADDRESS2 + "," + OBJRESPONSE.BODYLINE[0].CITYID + "," + OBJRESPONSE.BODYLINE[0].AREAID + "," + OBJRESPONSE.BODYLINE[0].BEATID + "," + OBJRESPONSE.BODYLINE[0].UNDERID + "," + OBJRESPONSE.BODYLINE[0].PIN + "," + OBJRESPONSE.BODYLINE[0].MOBILE + "," + OBJRESPONSE.BODYLINE[0].PHONE + "," + OBJRESPONSE.BODYLINE[0].REMARK + "," + OBJRESPONSE.BODYLINE[0].SYNCID + "," + OBJRESPONSE.BODYLINE[0].INDID + "," + OBJRESPONSE.BODYLINE[0].POTENTIAL + "," + OBJRESPONSE.BODYLINE[0].ACTIVE + "," + OBJRESPONSE.BODYLINE[0].BLOCKREASON + "," + OBJRESPONSE.BODYLINE[0].PARTYTYPE + "," + OBJRESPONSE.BODYLINE[0].CONTACTPERSON + "," + OBJRESPONSE.BODYLINE[0].CSTNO + "," + OBJRESPONSE.BODYLINE[0].VATTIN + "," + OBJRESPONSE.BODYLINE[0].SERVICETAX + "," + OBJRESPONSE.BODYLINE[0].PANNO + "," + OBJRESPONSE.BODYLINE[0].USERID + "," + OBJRESPONSE.BODYLINE[0].DOA + "," + OBJRESPONSE.BODYLINE[0].DOB + "," + OBJRESPONSE.BODYLINE[0].EMAIL + "," + "" + "," + OBJRESPONSE.BODYLINE[0].GSTINNO + "," + OBJRESPONSE.BODYLINE[0].ANDROIDID + "" + Environment.NewLine;

                        retval = PB.UpdatePartyFromMobile(OBJRESPONSE.BODYLINE[0].PARTYID, OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, OBJRESPONSE.BODYLINE[0].CITYID, OBJRESPONSE.BODYLINE[0].AREAID, OBJRESPONSE.BODYLINE[0].BEATID, OBJRESPONSE.BODYLINE[0].UNDERID, OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].PHONE, OBJRESPONSE.BODYLINE[0].REMARK, OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].INDID, OBJRESPONSE.BODYLINE[0].POTENTIAL, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].BLOCKREASON, OBJRESPONSE.BODYLINE[0].PARTYTYPE, OBJRESPONSE.BODYLINE[0].CONTACTPERSON, OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN, OBJRESPONSE.BODYLINE[0].SERVICETAX, OBJRESPONSE.BODYLINE[0].PANNO, OBJRESPONSE.BODYLINE[0].USERID, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB, OBJRESPONSE.BODYLINE[0].EMAIL, "", OBJRESPONSE.BODYLINE[0].GSTINNO, OBJRESPONSE.BODYLINE[0].ANDROIDID);

                    }
                    //}

                    if (retval == -1)
                    {
                        msz = "Duplicate Party Exists";
                        createText += "" + "" + msz + "" + Environment.NewLine;
                    }
                    else if (retval == -3)
                    {
                        msz = "Duplicate Mobile Exists";
                        createText += "" + "" + msz + "" + Environment.NewLine;
                    }
                    else if (retval == -4)
                    {
                        msz = "Duplicate GSTNo Exists";
                        createText += "" + "" + msz + "" + Environment.NewLine;

                    }
                    else if (retval == -5)
                    {
                        msz = "Duplicate AndroidId Exists";
                        createText += "" + "" + msz + "" + Environment.NewLine;

                    }
                    else
                    {
                        string sqlupdate = "UPDATE MASTPARTY SET ANDROID_ID='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "', LONGITUDE = '" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "',LATITUDE='" + OBJRESPONSE.BODYLINE[0].LATITUDE + "',ADDRESS='" + Address + "',LAT_LONG_DATETIME = '" + minDate1 + "',IMGURL='" + OBJRESPONSE.BODYLINE[0].IMGURL + "',GSTINNO='" + OBJRESPONSE.BODYLINE[0].CSTNO + "' WHERE PARTYID=" + OBJRESPONSE.BODYLINE[0].PARTYID + " ";
                        createText += "" + "" + sqlupdate + "" + Environment.NewLine;
                        if (DbConnectionDAL.ExecuteQuery(sqlupdate) == 1)
                        { chk = "2"; }
                    }
                }
                if (retval > 0)
                {
                    if (chk == "1")
                    { msz = "Record Inserted Successfully"; _partyId = retval.ToString(); }
                    else if (chk == "2")
                    { msz = "Record Updated Successfully"; _partyId = OBJRESPONSE.BODYLINE[0].PARTYID.ToString(); }

                    qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "' ";
                    createText += "" + "" + qry + "" + Environment.NewLine;
                    Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();
                }
                else
                {
                    //qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where mobile='" + OBJRESPONSE.BODYLINE[0].MOBILE + "' ";
                    Millisecond = "";
                }

            }
            catch (Exception ex)
            {
                createText += " @@@@@@ Exception in Save Party @@@@@" + "" + ex.ToString() + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                //if (createText.ToString() != "" && createText.ToString().ToUpper() == "Y")
                //{
                //    using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + retval + "_FFMSApp_SaveParty_" + System.DateTime.Now + ".txt"), true))
                //    {
                //        file2.WriteLine(createText);
                //        file2.Close();
                //    }
                //}
            }
            finally
            {
                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                //string path = Server.MapPath("TextFileFolder\\" + OBJRESPONSE.BODYLINE[0].PARTYID + "(" + retval + ")" + "_FFMSApp_SaveParty_" + DateTime.Now.ToString("yyyy-MM-dd") + ".txt");
                //string path2 = Server.MapPath("~");
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + retval + "_FFMSApp_SaveParty_" + DateTime.Now.ToString("yyyy-MM-dd") + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }
            bodyStream.Dispose();
            List<Party> rst = new List<Party>();
            {
                rst.Add(
                    new Party
                    {
                        //Id = retval.ToString(),
                        ID = _partyId,
                        STATUS = msz,
                        MS = Millisecond
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }


        /// <summary>
        /// FFMSApp_SaveParty_V2 create for party creation from app with multiple image
        /// </summary>

        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void FFMSApp_SaveParty_V2()
        //{
        //    var httpRequest = HttpContext.Current.Request;
        //    var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
        //    DataTable DTadmin = new DataTable();
        //    Common cls = new Common();
        //    bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //    var bodyText = bodyStream.ReadToEnd();
        //    //     string items = httpRequest.Params["orderdetail"].ToString();
        //    var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);
        //    string str = "";

        //    //Int32 PartyId = OBJRESPONSE.BODYLINE[0].PARTYID;
        //    //string PartyName = OBJRESPONSE.BODYLINE[0].PARTYNAME;
        //    //string Address1 = OBJRESPONSE.BODYLINE[0].ADDRESS1;
        //    //string Address2 = OBJRESPONSE.BODYLINE[0].ADDRESS2;
        //    //Int32 CityId = OBJRESPONSE.BODYLINE[0].CITYID;
        //    //Int32 AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
        //    //Int32 BeatId = OBJRESPONSE.BODYLINE[0].BEATID;
        //    //Int32 UnderId = OBJRESPONSE.BODYLINE[0].UNDERID;
        //    //string Pin = OBJRESPONSE.BODYLINE[0].PIN;
        //    //string Mobile = OBJRESPONSE.BODYLINE[0].MOBILE;
        //    //string Phone = OBJRESPONSE.BODYLINE[0].PHONE;
        //    //string Remark = OBJRESPONSE.BODYLINE[0].REMARK;
        //    //string SyncId = OBJRESPONSE.BODYLINE[0].SYNCID;
        //    //string IndId = OBJRESPONSE.BODYLINE[0].INDID;
        //    //decimal Potential = OBJRESPONSE.BODYLINE[0].POTENTIAL;
        //    //bool Active = OBJRESPONSE.BODYLINE[0].ACTIVE;
        //    //string BlockReason = OBJRESPONSE.BODYLINE[0].BLOCKREASON;
        //    //int PartyType = OBJRESPONSE.BODYLINE[0].PARTYTYPE;
        //    //string ContactPerson = OBJRESPONSE.BODYLINE[0].CONTACTPERSON;
        //    //string CSTNo = OBJRESPONSE.BODYLINE[0].CSTNO;
        //    //string VatTin = OBJRESPONSE.BODYLINE[0].VATTIN;
        //    //string ServiceTax = OBJRESPONSE.BODYLINE[0].SERVICETAX;
        //    //string PanNo = OBJRESPONSE.BODYLINE[0].PANNO;
        //    //int UserId = OBJRESPONSE.BODYLINE[0].USERID;
        //    //string DOA = OBJRESPONSE.BODYLINE[0].DOA;
        //    //string DOB = OBJRESPONSE.BODYLINE[0].DOB;
        //    //string Email = OBJRESPONSE.BODYLINE[0].EMAIL;
        //    //string androidid = OBJRESPONSE.BODYLINE[0].ANDROIDID;
        //    //string Longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
        //    //string Latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
        //    //string LatlngTime = OBJRESPONSE.BODYLINE[0].LATLNGTIME;
        //    //string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
        //    //string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
        //    //string GSTINNo = OBJRESPONSE.BODYLINE[0].GSTINNO;
        //    //bool Isblock = OBJRESPONSE.BODYLINE[0].Isblock;


        //    //string AppBlockStatus = OBJRESPONSE.BODYLINE[0].AppBlockStatus;
        //    string Partytype_Name = "";

        //    Partytype_Name = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select PartyTypeName From PartyType where PartyTypeId=" + OBJRESPONSE.BODYLINE[0].PARTYTYPE + ""));
        //    bool RetailerCreationApproval = Convert.ToBoolean(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RetailerCreationApproval FROM MastEnviro"));
        //    if (RetailerCreationApproval == True)
        //    {
        //        if (Partytype_Name.ToUpper() != "INSTITUTIONAL" && OBJRESPONSE.BODYLINE[0].PARTYID == 0)
        //        {
        //            OBJRESPONSE.BODYLINE[0].ACTIVE = False;
        //        }
        //    }
        //    else
        //    {

        //    }
        //    string[] imgurls = new string[1];

        //    string chk = "0"; string checkmobileno = string.Empty, _partyId = "", _Query = "";
        //    DataTable mobileno = new DataTable();
        //    DataTable dtandridid = new DataTable();
        //    string qry = "", Millisecond = "";
        //    //double ticks = double.Parse(LatlngTime);
        //    //TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //    //DateTime startdate = new DateTime(1970, 1, 1) + time;
        //    //string minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    string minDate1 = "";
        //    if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LATLNGTIME))
        //    {
        //        double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LATLNGTIME);
        //        TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //        DateTime startdate = new DateTime(1970, 1, 1) + time;
        //        minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }
        //    else
        //    {
        //        minDate1 = DateTime.Now.ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }
        //    //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
        //    string Address = "", filename = "";

        //    //if (Latitude != "")
        //    //{
        //    //    Address = DMT.InsertAddress(Latitude, Longitude);
        //    //}

        //    string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
        //    string path = "http://" + host;


        //    //if (IMAGE1.Contains("http://"))
        //    //{
        //    //    IMGURL = IMAGE1.Replace(path, "~");
        //    //}
        //    //else

        //    if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
        //    {
        //        //  imgurls = IMAGE1.Split();
        //        string[] imges = OBJRESPONSE.BODYLINE[0].IMAGE1.Split(new string[] { "&dataman&" }, StringSplitOptions.None);
        //        imgurls = new string[imges.Length];
        //        for (int i = 0; i < imges.Length; i++)
        //        {

        //            try
        //            {


        //                byte[] bytes = Convert.FromBase64String(imges[i]);

        //                Image image;
        //                using (MemoryStream ms = new MemoryStream(bytes))
        //                {
        //                    image = Image.FromStream(ms);
        //                }
        //                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
        //                if (!Directory.Exists(directoryPath))
        //                {
        //                    Directory.CreateDirectory(directoryPath);
        //                }
        //                string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");


        //                filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SYNCID + '-' + timeStamp);
        //                {
        //                    //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
        //                    //string filePath = Server.MapPath("~/DSRImages" + "/C_" + filename + ".png");
        //                    //File.WriteAllBytes(filePath, bytes);
        //                    //imgurls[i] = "~/DSRImages" + "/C_" + filename + ".png";


        //                    string filePath = Server.MapPath("~/DSRImages" + "/NewParty_" + filename + ".png");
        //                    File.WriteAllBytes(filePath, bytes);
        //                    imgurls[i] = "~/DSRImages" + "/NewParty_" + filename + ".png";
        //                }
        //            }
        //            catch (Exception)
        //            {
        //                if (imges[i].Contains("http://"))
        //                {
        //                    imgurls[i] = imges[i].Replace(path, "~");
        //                }

        //            }
        //        }
        //    }


        //    PartyBAL PB = new PartyBAL();
        //    int retval = 0;


        //    int SMID = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT SMID FROM MastSalesRep WHERE UserId=" + OBJRESPONSE.BODYLINE[0].USERID + ""));

        //    int RoleId = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RoleId FROM MastRole WHERE RoleType='Distributor'"));
        //    string msz = "Record Inserted Successfully";
        //    if (OBJRESPONSE.BODYLINE[0].INDID == "")
        //    {
        //        OBJRESPONSE.BODYLINE[0].INDID = "0";
        //    }
        //    //   string partyoffline = DbConnectionDAL.GetStringScalarVal("select PartyOffLine from mastenviro").ToString();

        //    if (OBJRESPONSE.BODYLINE[0].PARTYID == 0)
        //    {
        //        if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
        //        {


        //            retval = DB.InsertDistributors(OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, Convert.ToString(OBJRESPONSE.BODYLINE[0].CITYID), OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].EMAIL, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].REMARK,
        //                 OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].BLOCKREASON, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].PHONE, RoleId, OBJRESPONSE.BODYLINE[0].CONTACTPERSON, OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN,
        //                 OBJRESPONSE.BODYLINE[0].SERVICETAX, OBJRESPONSE.BODYLINE[0].PANNO, 0, 0, 0, 0, OBJRESPONSE.BODYLINE[0].USERID, "", "", OBJRESPONSE.BODYLINE[0].PARTYNAME, SMID, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB,
        //                 OBJRESPONSE.BODYLINE[0].AREAID, "", "", OBJRESPONSE.BODYLINE[0].PARTYTYPE);
        //            if (OBJRESPONSE.BODYLINE[0].SYNCID == "")
        //            {
        //                string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
        //            }

        //        }
        //        else
        //        {
        //            retval = PB.InsertPartyFromMobile(OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, OBJRESPONSE.BODYLINE[0].CITYID, OBJRESPONSE.BODYLINE[0].AREAID, OBJRESPONSE.BODYLINE[0].BEATID, OBJRESPONSE.BODYLINE[0].UNDERID, OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].PHONE, OBJRESPONSE.BODYLINE[0].REMARK,
        //                 OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].INDID,
        //             OBJRESPONSE.BODYLINE[0].POTENTIAL, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].BLOCKREASON, Convert.ToInt32(OBJRESPONSE.BODYLINE[0].PARTYTYPE), OBJRESPONSE.BODYLINE[0].CONTACTPERSON, OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN, OBJRESPONSE.BODYLINE[0].SERVICETAX,
        //             OBJRESPONSE.BODYLINE[0].PANNO, OBJRESPONSE.BODYLINE[0].USERID, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB, OBJRESPONSE.BODYLINE[0].EMAIL, "", OBJRESPONSE.BODYLINE[0].GSTINNO);
        //        }


        //        if (retval == -1)
        //        { msz = "Duplicate Party Exists"; }
        //        else if (retval == -3)
        //        {
        //            msz = "Duplicate Mobile Exists";
        //            _Query = @"select PartyId from MastParty Where Mobile='" + OBJRESPONSE.BODYLINE[0].MOBILE + "'";
        //            _partyId = DbConnectionDAL.GetStringScalarVal(_Query);
        //        }

        //        else if (retval == -4)
        //        {
        //            msz = "Duplicate GSTNo Exists";
        //            _Query = @"select PartyId from MastParty Where GSTINNo='" + OBJRESPONSE.BODYLINE[0].GSTINNO + "'";
        //            _partyId = DbConnectionDAL.GetStringScalarVal(_Query);
        //        }
        //        else
        //        {


        //            for (int i = 0; i < imgurls.Length; i++)
        //            {
        //                str = "INSERT INTO dbo.MastPartyImage ( IMGURL,PartyId) VALUES ('" + imgurls[i] + "'," + retval + ")";
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, str);

        //            }



        //            string sql = "update mastparty set android_id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "', Longitude = '" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "',Latitude='" + OBJRESPONSE.BODYLINE[0].LATITUDE + "', Address='" + Address + "',Lat_long_datetime = '" + minDate1 + "',IMGURL='" + OBJRESPONSE.BODYLINE[0].IMGURL + "',GSTINNo='" + OBJRESPONSE.BODYLINE[0].CSTNO + "' where partyid=" + retval + " ";
        //            if (DbConnectionDAL.ExecuteQuery(sql) == 1)
        //            { chk = "1"; }
        //        }







        //    }
        //    else
        //    {

        //        if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
        //        {


        //            retval = DB.UpdateDistributors(OBJRESPONSE.BODYLINE[0].PARTYID, OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, Convert.ToString(OBJRESPONSE.BODYLINE[0].CITYID), OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].EMAIL, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].REMARK, OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].BLOCKREASON, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].PHONE, RoleId, "", OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN, OBJRESPONSE.BODYLINE[0].SERVICETAX, OBJRESPONSE.BODYLINE[0].PANNO, 0, 0, 0, 0, OBJRESPONSE.BODYLINE[0].USERID, "", "", OBJRESPONSE.BODYLINE[0].PARTYNAME, SMID, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB, OBJRESPONSE.BODYLINE[0].AREAID, "", "", OBJRESPONSE.BODYLINE[0].PARTYTYPE);
        //            if (OBJRESPONSE.BODYLINE[0].SYNCID == "")
        //            {
        //                string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
        //            }

        //        }
        //        else
        //        {

        //            retval = PB.UpdatePartyFromMobile(OBJRESPONSE.BODYLINE[0].PARTYID, OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, OBJRESPONSE.BODYLINE[0].CITYID, OBJRESPONSE.BODYLINE[0].AREAID, OBJRESPONSE.BODYLINE[0].BEATID, OBJRESPONSE.BODYLINE[0].UNDERID, OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].PHONE, OBJRESPONSE.BODYLINE[0].REMARK, OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].INDID, OBJRESPONSE.BODYLINE[0].POTENTIAL, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].BLOCKREASON, OBJRESPONSE.BODYLINE[0].PARTYTYPE, OBJRESPONSE.BODYLINE[0].CONTACTPERSON, OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN, OBJRESPONSE.BODYLINE[0].SERVICETAX, OBJRESPONSE.BODYLINE[0].PANNO, OBJRESPONSE.BODYLINE[0].USERID, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB, OBJRESPONSE.BODYLINE[0].EMAIL, "", OBJRESPONSE.BODYLINE[0].GSTINNO);

        //        }


        //        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "Delete from MastPartyImage where PartyId=" + OBJRESPONSE.BODYLINE[0].PARTYID + " ");
        //        for (int i = 0; i < imgurls.Length; i++)
        //        {
        //            str = "INSERT INTO dbo.MastPartyImage ( IMGURL,PartyId) VALUES ('" + imgurls[i] + "'," + OBJRESPONSE.BODYLINE[0].PARTYID + ")";
        //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, str);

        //        }


        //    }


        //    #region SentNotification
        //    try
        //    {

        //        if (RetailerCreationApproval == True && Partytype_Name.ToUpper() != "INSTITUTIONAL" && OBJRESPONSE.BODYLINE[0].PARTYID == 0)
        //        {
        //            string displaytitle = ""; string title = "";
        //            string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
        //            string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from MastParty where Partyid=" + retval + ""));
        //            DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid,UnderId from mastsalesrep where userid=" + OBJRESPONSE.BODYLINE[0].USERID + "");


        //            if (dtgrpsmid.Rows.Count > 0)
        //            {
        //                string pro_id = "PARTYCREATION";
        //                string sql_getsenior = "select SMID,Mobile,userid from mastsalesrep where SMID =" + dtgrpsmid.Rows[0]["UnderId"].ToString() + "";
        //                //string sql_getsenior = "select SMID,Mobile,userid from mastsalesrep where SMName<>'.'  and  SMID in (select MainGrp from mastsalesrepgrp where SMID=" + dtgrpsmid.Rows[0]["SMID"].ToString() + " and Level<(select level from mastsalesrepgrp where SMID=" + dtgrpsmid.Rows[0]["SMID"].ToString() + " and MainGrp=" + dtgrpsmid.Rows[0]["SMID"].ToString() + "))";
        //                DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
        //                if (dt_getsenior.Rows.Count > 0)
        //                {
        //                    for (int k = 0; k < dt_getsenior.Rows.Count; k++)
        //                    {

        //                        //if (PartyId != 0)
        //                        //{
        //                        //    displaytitle = PartyName + " -  Party Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
        //                        //    title = " Party Modified";
        //                        //}
        //                        //else
        //                        //{
        //                        displaytitle = OBJRESPONSE.BODYLINE[0].PARTYNAME + " - Outlet created by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
        //                        title = " New Outlet Created";
        //                        //}


        //                        lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()), Convert.ToDateTime(createdatetime), "PartyMasterAstral.aspx?PartyId=" + retval + "&REQ=PR", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), Convert.ToInt32(dt_getsenior.Rows[k]["SMID"].ToString()));

        //                        if (!string.IsNullOrEmpty(dt_getsenior.Rows[k]["mobile"].ToString()))
        //                        {
        //                            //cls.pushnotificationforPartyCreation(displaytitle, compcode,
        //                            //    dt_getsenior.Rows[k]["mobile"].ToString(),
        //                            //  title, dtgrpsmid.Rows[0]["SMID"].ToString(),
        //                            //    dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS", retval.ToString());

        //                            cls.pushnotificationforPartyCreation(displaytitle, compcode,
        //                               dt_getsenior.Rows[k]["mobile"].ToString(),
        //                              title, dtgrpsmid.Rows[0]["SMID"].ToString(),
        //                               dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER", retval.ToString());
        //                        }
        //                    }
        //                }

        //                //DataTable dtdist = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT Mobile,  UserId FROM MastParty WHERE PartyId=" + Line_selectedDistId + "");
        //                //if (dtdist.Rows.Count > 0)
        //                //{
        //                //    lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dtdist.Rows[0]["UserId"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + orddocid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), 0);

        //                //    if (!string.IsNullOrEmpty(dtdist.Rows[0]["mobile"].ToString()))
        //                //    {
        //                //        pushnotificationonorderdispatchcancel(displaytitle, compcode,
        //                //           dtdist.Rows[0]["mobile"].ToString(),
        //                //            "New Order Created", dtgrpsmid.Rows[0]["SMID"].ToString(),
        //                //            dtgrpsmid.Rows[0]["SMName"].ToString(), "GOLDIEE", orddocid, partyname);
        //                //    }
        //                //}

        //            }
        //        }
        //        else
        //        {

        //            //Line file mismatch
        //            //Status = "400";
        //            // HeaderMsz = HeaderMsz + " - Line File Mismatch : Header Line Count: " + HeaderLineCOunt + " and LineFileCount: " + (Convert.ToInt32(Line_seqNo) + 1).ToString();
        //        }


        //    }
        //    catch (Exception ex)
        //    {
        //        //  Line_Status = "200"; // status is set 200 becoz order is saved but exception in sending notification.
        //        // LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();

        //        // Status = "400";
        //        // HeaderMsz = HeaderMsz + " : " + LineMsz;
        //    }

        //    #endregion




        //    //////////////////block notification




        //    if (retval == -1)
        //    { msz = "Duplicate Party Exists"; }
        //    else if (retval == -3)
        //    { msz = "Duplicate Mobile Exists"; }
        //    else if (retval == -4)
        //    {
        //        msz = "Duplicate GSTNo Exists";

        //    }
        //    else
        //    {
        //        string sqlupdate = "update mastparty set android_id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "', Longitude = '" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "',Latitude='" + OBJRESPONSE.BODYLINE[0].LATITUDE + "',Address='" + Address + "',Lat_long_datetime = '" + minDate1 + "',IMGURL='" + OBJRESPONSE.BODYLINE[0].IMGURL + "',GSTINNo='" + OBJRESPONSE.BODYLINE[0].CSTNO + "' where partyid=" + OBJRESPONSE.BODYLINE[0].PARTYID + " ";
        //        if (DbConnectionDAL.ExecuteQuery(sqlupdate) == 1)
        //        { chk = "2"; }
        //    }
        //    if (retval > 0)
        //    {
        //        if (chk == "1")
        //        { msz = "Record Inserted Successfully"; _partyId = retval.ToString(); }
        //        else if (chk == "2")
        //        { msz = "Record Updated Successfully"; _partyId = OBJRESPONSE.BODYLINE[0].PARTYID.ToString(); }

        //        qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "' ";

        //        //Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();
        //    }
        //    else
        //    {
        //        qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where mobile='" + OBJRESPONSE.BODYLINE[0].MOBILE + "' ";
        //    }
        //    Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();

        //    List<Party> rst = new List<Party>();
        //    {
        //        rst.Add(
        //            new Party
        //            {
        //                //Id = retval.ToString(),
        //                Id = _partyId,
        //                Status = msz,
        //                MS = Millisecond
        //            }
        //        );
        //    }
        //    bodyStream.Dispose();
        //    Context.Response.Write(JsonConvert.SerializeObject(rst));
        //}



        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void ManagerApp_SaveParty_V2()
        //{
        //   // var httpRequest = HttpContext.Current.Request;
        //    var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
        //  //  DataTable DTadmin = new DataTable();
        //    Common cls = new Common();
        //    bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //    var bodyText = bodyStream.ReadToEnd();
        //    //     string items = httpRequest.Params["orderdetail"].ToString();
        //    var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);
        //    string str = "";
        //    //Int32 PartyId = OBJRESPONSE.BODYLINE[0].PARTYID;
        //    //string PartyName = OBJRESPONSE.BODYLINE[0].PARTYNAME;
        //    //string Address1 = OBJRESPONSE.BODYLINE[0].ADDRESS1;
        //    //string Address2 = OBJRESPONSE.BODYLINE[0].ADDRESS2;
        //    //Int32 CityId = OBJRESPONSE.BODYLINE[0].CITYID;
        //    //Int32 AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
        //    //Int32 BeatId = OBJRESPONSE.BODYLINE[0].BEATID;
        //    //Int32 UnderId = OBJRESPONSE.BODYLINE[0].UNDERID;
        //    //string Pin = OBJRESPONSE.BODYLINE[0].PIN;
        //    //string Mobile = OBJRESPONSE.BODYLINE[0].MOBILE;
        //    //string Phone = OBJRESPONSE.BODYLINE[0].PHONE;
        //    //string Remark = OBJRESPONSE.BODYLINE[0].REMARK;
        //    //string SyncId = OBJRESPONSE.BODYLINE[0].SYNCID;
        //    //string IndId = OBJRESPONSE.BODYLINE[0].INDID;
        //    //decimal Potential = OBJRESPONSE.BODYLINE[0].POTENTIAL;
        //    //bool Active = OBJRESPONSE.BODYLINE[0].ACTIVE;
        //    //string BlockReason = OBJRESPONSE.BODYLINE[0].BLOCKREASON;
        //    //int PartyType = OBJRESPONSE.BODYLINE[0].PARTYTYPE;
        //    //string ContactPerson = OBJRESPONSE.BODYLINE[0].CONTACTPERSON;
        //    //string CSTNo = OBJRESPONSE.BODYLINE[0].CSTNO;
        //    //string VatTin = OBJRESPONSE.BODYLINE[0].VATTIN;
        //    //string ServiceTax = OBJRESPONSE.BODYLINE[0].SERVICETAX;
        //    //string PanNo = OBJRESPONSE.BODYLINE[0].PANNO;
        //    //int UserId = OBJRESPONSE.BODYLINE[0].USERID;
        //    //string DOA = OBJRESPONSE.BODYLINE[0].DOA;
        //    //string DOB = OBJRESPONSE.BODYLINE[0].DOB;
        //    //string Email = OBJRESPONSE.BODYLINE[0].EMAIL;
        //    //string androidid = OBJRESPONSE.BODYLINE[0].ANDROIDID;
        //    //string Longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
        //    //string Latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
        //    //string LatlngTime = OBJRESPONSE.BODYLINE[0].LATLNGTIME;
        //    //string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
        //    //string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
        //    //string GSTINNo = OBJRESPONSE.BODYLINE[0].GSTINNO;


        //    //string AppStatus = OBJRESPONSE.BODYLINE[0].AppStatus;
        //    //string Appbyuserid = OBJRESPONSE.BODYLINE[0].Appbyuserid;
        //    //string AppRemark = OBJRESPONSE.BODYLINE[0].AppRemark;
        //    //string Appbysmid = OBJRESPONSE.BODYLINE[0].Appbysmid;



        //    //bool Isblock = OBJRESPONSE.BODYLINE[0].Isblock;
        //    //string AppBlockby = OBJRESPONSE.BODYLINE[0].AppBlockby;
        //    //string AppBlockRemark = OBJRESPONSE.BODYLINE[0].AppBlockRemark;
        //    //string AppBlockStatus = OBJRESPONSE.BODYLINE[0].AppBlockStatus;

        //    string Partytype_Name = "";

        //    Partytype_Name = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select PartyTypeName From PartyType where PartyTypeId=" + OBJRESPONSE.BODYLINE[0].PARTYTYPE + ""));
        //    bool RetailerCreationApproval = Convert.ToBoolean(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RetailerCreationApproval FROM MastEnviro"));
        //    if (RetailerCreationApproval == True)
        //    {
        //        if (Partytype_Name.ToUpper() != "INSTITUTIONAL" && OBJRESPONSE.BODYLINE[0].PARTYID == 0)
        //        {
        //            OBJRESPONSE.BODYLINE[0].ACTIVE = False;
        //        }
        //    }
        //    else
        //    {

        //    }
        //    string[] imgurls = new string[1];

        //    string chk = "0"; string checkmobileno = string.Empty, _partyId = "", _Query = "";
        //    DataTable mobileno = new DataTable();
        //    DataTable dtandridid = new DataTable();
        //    string qry = "", Millisecond = "";
        //    //double ticks = double.Parse(LatlngTime);
        //    //TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //    //DateTime startdate = new DateTime(1970, 1, 1) + time;
        //    //string minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    string minDate1 = "";
        //    if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LATLNGTIME))
        //    {
        //        double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LATLNGTIME);
        //        TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //        DateTime startdate = new DateTime(1970, 1, 1) + time;
        //        minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }
        //    else
        //    {
        //        minDate1 = DateTime.Now.ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }
        //   // WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
        //    string Address = "", filename = "";

        //    //if (Latitude != "")
        //    //{
        //    //    Address = DMT.InsertAddress(Latitude, Longitude);
        //    //}

        //    string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
        //    string path = "http://" + host;


        //    //if (IMAGE1.Contains("http://"))
        //    //{
        //    //    IMGURL = IMAGE1.Replace(path, "~");
        //    //}
        //    //else

        //    if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
        //    {
        //        //  imgurls = IMAGE1.Split();
        //        string[] imges = OBJRESPONSE.BODYLINE[0].IMAGE1.Split(new string[] { "&dataman&" }, StringSplitOptions.None);
        //        imgurls = new string[imges.Length];
        //        for (int i = 0; i < imges.Length; i++)
        //        {

        //            try
        //            {


        //                byte[] bytes = Convert.FromBase64String(imges[i]);

        //                Image image;
        //                using (MemoryStream ms = new MemoryStream(bytes))
        //                {
        //                    image = Image.FromStream(ms);
        //                }
        //                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
        //                if (!Directory.Exists(directoryPath))
        //                {
        //                    Directory.CreateDirectory(directoryPath);
        //                }
        //                string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");


        //                filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SYNCID + '-' + timeStamp);
        //                {
        //                    //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
        //                    //string filePath = Server.MapPath("~/DSRImages" + "/C_" + filename + ".png");
        //                    //File.WriteAllBytes(filePath, bytes);
        //                    //imgurls[i] = "~/DSRImages" + "/C_" + filename + ".png";


        //                    string filePath = Server.MapPath("~/DSRImages" + "/NewParty_" + filename + ".png");
        //                    File.WriteAllBytes(filePath, bytes);
        //                    imgurls[i] = "~/DSRImages" + "/NewParty_" + filename + ".png";
        //                }
        //            }
        //            catch (Exception)
        //            {
        //                if (imges[i].Contains("http://"))
        //                {
        //                    imgurls[i] = imges[i].Replace(path, "~");
        //                }

        //            }
        //        }
        //    }


        //    PartyBAL PB = new PartyBAL();
        //    int retval = 0;


        //    int SMID = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT SMID FROM MastSalesRep WHERE UserId=" + OBJRESPONSE.BODYLINE[0].USERID + ""));

        //    int RoleId = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RoleId FROM MastRole WHERE RoleType='Distributor'"));
        //    string msz = "Record Inserted Successfully";
        //    if (OBJRESPONSE.BODYLINE[0].INDID == "")
        //    {
        //        OBJRESPONSE.BODYLINE[0].INDID = "0";
        //    }
        //    //   string partyoffline = DbConnectionDAL.GetStringScalarVal("select PartyOffLine from mastenviro").ToString();



        //    if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
        //    {


        //        retval = DB.UpdateDistributors(OBJRESPONSE.BODYLINE[0].PARTYID, OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, Convert.ToString(OBJRESPONSE.BODYLINE[0].CITYID), OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].EMAIL, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].REMARK, OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].BLOCKREASON, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].PHONE, RoleId, "", OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN, OBJRESPONSE.BODYLINE[0].SERVICETAX, OBJRESPONSE.BODYLINE[0].PANNO, 0, 0, 0, 0, OBJRESPONSE.BODYLINE[0].USERID, "", "", OBJRESPONSE.BODYLINE[0].PARTYNAME, SMID, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB, OBJRESPONSE.BODYLINE[0].AREAID, "", "", OBJRESPONSE.BODYLINE[0].PARTYTYPE);
        //        if (OBJRESPONSE.BODYLINE[0].SYNCID == "")
        //        {
        //            string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
        //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
        //        }

        //    }
        //    else
        //    {
        //        if (Convert.ToInt32(OBJRESPONSE.BODYLINE[0].AppBlockby) != 0)
        //        {

        //        }
        //        else
        //        {
        //            OBJRESPONSE.BODYLINE[0].AppBlockby = "0";
        //        }
        //        retval = PB.UpdatePartyMobileForApproval(OBJRESPONSE.BODYLINE[0].PARTYID, OBJRESPONSE.BODYLINE[0].PARTYNAME, OBJRESPONSE.BODYLINE[0].ADDRESS1, OBJRESPONSE.BODYLINE[0].ADDRESS2, OBJRESPONSE.BODYLINE[0].CITYID, OBJRESPONSE.BODYLINE[0].AREAID, OBJRESPONSE.BODYLINE[0].BEATID, OBJRESPONSE.BODYLINE[0].UNDERID, OBJRESPONSE.BODYLINE[0].PIN, OBJRESPONSE.BODYLINE[0].MOBILE, OBJRESPONSE.BODYLINE[0].PHONE, OBJRESPONSE.BODYLINE[0].REMARK, OBJRESPONSE.BODYLINE[0].SYNCID, OBJRESPONSE.BODYLINE[0].INDID,
        //            OBJRESPONSE.BODYLINE[0].POTENTIAL, OBJRESPONSE.BODYLINE[0].ACTIVE, OBJRESPONSE.BODYLINE[0].BLOCKREASON, OBJRESPONSE.BODYLINE[0].PARTYTYPE, OBJRESPONSE.BODYLINE[0].CONTACTPERSON, OBJRESPONSE.BODYLINE[0].CSTNO, OBJRESPONSE.BODYLINE[0].VATTIN, OBJRESPONSE.BODYLINE[0].SERVICETAX, OBJRESPONSE.BODYLINE[0].PANNO, OBJRESPONSE.BODYLINE[0].USERID, OBJRESPONSE.BODYLINE[0].DOA, OBJRESPONSE.BODYLINE[0].DOB, OBJRESPONSE.BODYLINE[0].EMAIL,
        //            "", OBJRESPONSE.BODYLINE[0].GSTINNO, 0, OBJRESPONSE.BODYLINE[0].AppStatus, Convert.ToInt32(OBJRESPONSE.BODYLINE[0].Appbyuserid), OBJRESPONSE.BODYLINE[0].AppRemark, Convert.ToInt32(OBJRESPONSE.BODYLINE[0].Appbysmid), OBJRESPONSE.BODYLINE[0].Isblock, OBJRESPONSE.BODYLINE[0].AppBlockRemark, OBJRESPONSE.BODYLINE[0].AppBlockStatus, Convert.ToInt32(OBJRESPONSE.BODYLINE[0].AppBlockby));

        //    }


        //    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "Delete from MastPartyImage where PartyId=" + OBJRESPONSE.BODYLINE[0].PARTYID + " ");
        //    for (int i = 0; i < imgurls.Length; i++)
        //    {
        //        str = "INSERT INTO dbo.MastPartyImage ( IMGURL,PartyId) VALUES ('" + imgurls[i] + "'," + OBJRESPONSE.BODYLINE[0].PARTYID + ")";
        //        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, str);

        //    }


        //    #region SentNotification
        //    try
        //    {

        //        if (RetailerCreationApproval == True && Partytype_Name.ToUpper() != "INSTITUTIONAL")
        //        {
        //            string displaytitle = ""; string title = "";
        //            string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
        //            string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from MastParty where Partyid=" + retval + ""));
        //            DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID,mobile ,SMName ,userid from mastsalesrep where userid=" + OBJRESPONSE.BODYLINE[0].USERID + "");

        //            DataTable dtappuser = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid from mastsalesrep where userid=" + OBJRESPONSE.BODYLINE[0].Appbyuserid + "");

        //            if (dtgrpsmid.Rows.Count > 0)
        //            {
        //                string pro_id = "PARTYAPPROVED";
        //                string sql_getsenior = "select SMID,Mobile,userid from mastsalesrep where SMName<>'.'  and  SMID in (select MainGrp from mastsalesrepgrp where SMID=" + dtgrpsmid.Rows[0]["SMID"].ToString() + " and Level<=(select level from mastsalesrepgrp where SMID=" + dtgrpsmid.Rows[0]["SMID"].ToString() + " and MainGrp=" + dtgrpsmid.Rows[0]["SMID"].ToString() + "))";
        //                DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
        //                if (dt_getsenior.Rows.Count > 0)
        //                {
        //                    //for (int k = 0; k < dt_getsenior.Rows.Count; k++)
        //                    //{

        //                    //if (PartyId != 0)
        //                    //{
        //                    //    displaytitle = PartyName + " -  Party Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
        //                    //    title = " Party Modified";
        //                    //}
        //                    //else
        //                    //{
        //                    if (OBJRESPONSE.BODYLINE[0].AppStatus == "Approve")
        //                    {


        //                        displaytitle = OBJRESPONSE.BODYLINE[0].PARTYNAME + " - Outlet approved by " + dtappuser.Rows[0]["SMName"].ToString() + "";
        //                        title = " Outlet Approved";
        //                    }
        //                    else
        //                    {
        //                        displaytitle = OBJRESPONSE.BODYLINE[0].PARTYNAME + " - Outlet rejected by " + dtappuser.Rows[0]["SMName"].ToString() + "";
        //                        title = " Outlet Rejected";
        //                    }
        //                    //}


        //                    lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToDateTime(createdatetime)
        //                        , "PartyMasterAstral.aspx?PartyId=" + retval + "&REQ=PRA", displaytitle, 0,
        //                        Convert.ToInt32(dtappuser.Rows[0]["userid"].ToString()), Convert.ToInt32(dtappuser.Rows[0]["SMID"].ToString())
        //                        , Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()));

        //                    if (!string.IsNullOrEmpty(dtgrpsmid.Rows[0]["mobile"].ToString()))
        //                    {
        //                        cls.pushnotificationforPartyCreation(displaytitle, compcode,
        //                            dtgrpsmid.Rows[0]["mobile"].ToString(),
        //                          title, dtgrpsmid.Rows[0]["SMID"].ToString(),
        //                            dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS", retval.ToString());

        //                        //cls.pushnotificationforPartyCreation(displaytitle, compcode,
        //                        //   dt_getsenior.Rows[k]["mobile"].ToString(),
        //                        //  title, dtgrpsmid.Rows[0]["SMID"].ToString(),
        //                        //   dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER", retval.ToString());
        //                    }
        //                    //  }
        //                }



        //            }
        //        }
        //        else
        //        {

        //            //Line file mismatch
        //            //Status = "400";
        //            // HeaderMsz = HeaderMsz + " - Line File Mismatch : Header Line Count: " + HeaderLineCOunt + " and LineFileCount: " + (Convert.ToInt32(Line_seqNo) + 1).ToString();
        //        }


        //    }
        //    catch (Exception ex)
        //    {
        //        //  Line_Status = "200"; // status is set 200 becoz order is saved but exception in sending notification.
        //        // LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();

        //        // Status = "400";
        //        // HeaderMsz = HeaderMsz + " : " + LineMsz;
        //    }

        //    #endregion

        //    #region SentNotificationFORBLOCK

        //    try
        //    {
        //        if (OBJRESPONSE.BODYLINE[0].AppBlockRemark == null)
        //        {
        //            OBJRESPONSE.BODYLINE[0].AppBlockRemark = "";
        //        }

        //        if (RetailerCreationApproval == True && Partytype_Name.ToUpper() != "INSTITUTIONAL" && OBJRESPONSE.BODYLINE[0].AppBlockRemark != "")
        //        {


        //            string displaytitle = ""; string title = "";
        //            string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
        //            string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from MastParty where Partyid=" + retval + ""));
        //            //   DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName,mobile ,userid,UnderId from mastsalesrep where userid=" + UserId + "");


        //            DataTable dtappuser = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid from mastsalesrep where userid=" + OBJRESPONSE.BODYLINE[0].Appbyuserid + "");

        //            if (dtappuser.Rows.Count > 0)
        //            {
        //                string pro_id = "PARTYBAPPROVED";
        //                //   string sql_getsenior = "select SMID,Mobile,userid from mastsalesrep where SMID in (select MainGrp from mastsalesrepgrp 
        //                //where SMID=" + dtappuser.Rows[0]["SMID"].ToString() + " and Level<=(select level from mastsalesrepgrp where SMID=" + dtappuser.Rows[0]["SMID"].ToString() + " and MainGrp=" + dtappuser.Rows[0]["SMID"].ToString() + "))";

        //                string sql_getsenior = @"select SMName, SMID,Mobile,userid from mastsalesrep where SMID in (select maingrp from mastsalesrepgrp where SMID in (" + dtappuser.Rows[0]["SMID"].ToString() + ") union  SELECT SMID FROM mastsalesrepgrp WHERE  maingrp in (" + dtappuser.Rows[0]["SMID"].ToString() + ")) and active=1 and SMName<>'.' ";
        //                DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
        //                if (dt_getsenior.Rows.Count > 0)
        //                {
        //                    for (int k = 0; k < dt_getsenior.Rows.Count; k++)
        //                    {


        //                        if (OBJRESPONSE.BODYLINE[0].AppBlockStatus == "Approve")
        //                        {


        //                            displaytitle = OBJRESPONSE.BODYLINE[0].PARTYNAME + " - Outlet Block approved by " + dtappuser.Rows[0]["SMName"].ToString() + "";
        //                            title = " Outlet Block Approved";
        //                        }
        //                        else
        //                        {
        //                            displaytitle = OBJRESPONSE.BODYLINE[0].PARTYNAME + " - Outlet Block rejected by " + dtappuser.Rows[0]["SMName"].ToString() + "";
        //                            title = " Outlet Block Rejected";
        //                        }
        //                        //}


        //                        lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()), Convert.ToDateTime(createdatetime)
        //                            , "PartyMasterAstral.aspx?PartyId=" + retval + "&REQ=PRAB", displaytitle, 0,
        //                            Convert.ToInt32(dtappuser.Rows[0]["userid"].ToString()), Convert.ToInt32(dtappuser.Rows[0]["SMID"].ToString())
        //                            , Convert.ToInt32(dt_getsenior.Rows[k]["SMID"].ToString()));

        //                        if (!string.IsNullOrEmpty(dt_getsenior.Rows[0]["mobile"].ToString()))
        //                        {
        //                            cls.pushnotificationforPartyCreation(displaytitle, compcode,
        //                                dt_getsenior.Rows[k]["mobile"].ToString(),
        //                              title, dt_getsenior.Rows[k]["SMID"].ToString(),
        //                                dt_getsenior.Rows[k]["SMName"].ToString(), "FFMS", retval.ToString());

        //                            cls.pushnotificationforPartyCreation(displaytitle, compcode,
        //                               dt_getsenior.Rows[k]["mobile"].ToString(),
        //                              title, dt_getsenior.Rows[k]["SMID"].ToString(),
        //                               dt_getsenior.Rows[k]["SMName"].ToString(), "CRM MANAGER", retval.ToString());
        //                        }
        //                    }
        //                }



        //            }



        //            else
        //            {


        //            }
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        //  Line_Status = "200"; // status is set 200 becoz order is saved but exception in sending notification.
        //        // LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();

        //        // Status = "400";
        //        // HeaderMsz = HeaderMsz + " : " + LineMsz;
        //    }
        //    #endregion

        //    if (retval == -1)
        //    { msz = "Duplicate Party Exists"; }
        //    else if (retval == -3)
        //    { msz = "Duplicate Mobile Exists"; }
        //    else if (retval == -4)
        //    {
        //        msz = "Duplicate GSTNo Exists";

        //    }
        //    else
        //    {
        //        string sqlupdate = "update mastparty set android_id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "', Longitude = '" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "',Latitude='" + OBJRESPONSE.BODYLINE[0].LATITUDE + "',Address='" + Address + "',Lat_long_datetime = '" + minDate1 + "',IMGURL='" + OBJRESPONSE.BODYLINE[0].IMGURL + "',GSTINNo='" + OBJRESPONSE.BODYLINE[0].CSTNO + "' where partyid=" + OBJRESPONSE.BODYLINE[0].PARTYID + " ";
        //        if (DbConnectionDAL.ExecuteQuery(sqlupdate) == 1)
        //        { chk = "2"; }
        //    }
        //    if (retval > 0)
        //    {
        //        if (chk == "1")
        //        { msz = "Record Inserted Successfully"; _partyId = retval.ToString(); }
        //        else if (chk == "2")
        //        { msz = "Record Updated Successfully"; _partyId = OBJRESPONSE.BODYLINE[0].PARTYID.ToString(); }

        //        qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where android_id='" + OBJRESPONSE.BODYLINE[0].ANDROIDID + "' ";

        //        //Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();
        //    }
        //    else
        //    {
        //        qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where mobile='" + OBJRESPONSE.BODYLINE[0].MOBILE + "' ";
        //    }
        //    Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();

        //    List<Party> rst = new List<Party>();
        //    {
        //        rst.Add(
        //            new Party
        //            {
        //                //Id = retval.ToString(),
        //                Id = _partyId,
        //                Status = msz,
        //                MS = Millisecond
        //            }
        //        );
        //    }
        //    Context.Response.Write(JsonConvert.SerializeObject(rst));
        //}


        [DataContract]
        public class LockDSRModal
        {
            [DataMember]
            public string Msz { get; set; }
        }

        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void Wip_LockDSR()
        //{
        //    string createText = "";
        //   // var httpRequest = HttpContext.Current.Request;
        //    var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
        //   // DataTable DTadmin = new DataTable();
        //    bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //    var bodyText = bodyStream.ReadToEnd();
        //    //     string items = httpRequest.Params["orderdetail"].ToString();
        //    var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

        //    //var httpreq = HttpContext.Current.Request;
        //    string SMID = string.Empty; string Vdate = string.Empty; string Lock = string.Empty; int AffectedRec = 0; string Visid = string.Empty;
        //    LockDSRModal rst = new LockDSRModal();
        //    try
        //    {
        //        //SMID = httpreq.Params["SMID"].ToString();
        //        //Visid = httpreq.Params["Visid"].ToString();
        //        //Lock = httpreq.Params["Lock"].ToString();
        //        //Vdate = Convert.ToDateTime(httpreq.Params["Vdate"].ToString()).ToString("yyyy-MM-dd");
        //        SMID = OBJRESPONSE.BODYLINE[0].SMID.ToString();
        //        Visid = OBJRESPONSE.BODYLINE[0].VISID.ToString();
        //        Lock = OBJRESPONSE.BODYLINE[0].LOCK.ToString();
        //        Vdate = OBJRESPONSE.BODYLINE[0].VDATE;
        //        Vdate = Convert.ToDateTime(Vdate).ToString("yyyy-MM-dd");

        //        createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
        //        createText += "" + SMID + "," + Visid + "," + Lock + "," + Vdate + "," + Vdate + "" + Environment.NewLine;

        //    }
        //    catch (Exception ex)
        //    {
        //        string errormsz = "Error In Wip- Params are not proper - " + ex.ToString();

        //        createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
        //        createText += " @@@@@@ Exception Generated @@@@@" + "" + errormsz + " @@@@@@  " + Environment.NewLine;
        //        createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
        //        using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_Wip_LockDSR_" + Vdate + ".txt"), true))
        //        {
        //            file2.WriteLine(createText);
        //            file2.Close();
        //        }
        //        Query = "insert into AutoSyncDateTime (SMID,TaskName) values (" + SMID + ",'" + errormsz + "')";
        //        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, Query);
        //        rst.Msz = "Failure";
        //        Context.Response.Status = "400 Bad Request";
        //        Context.Response.StatusCode = 400;
        //        Context.Response.StatusDescription = "Bad Request";
        //        Context.Response.Write("Bad Request");
        //        Context.Response.Flush();
        //        throw new HttpException(400, "Bad Request");
        //    }
        //    if (!string.IsNullOrEmpty(SMID) & !string.IsNullOrEmpty(Vdate))
        //    {
        //        try
        //        {
        //            //string Exist = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Id from WIP_Transvisit where SMID=" + SMID + " and vdate='" + Vdate + "' and Visid='"+Visid+"'"));
        //            //if (!string.IsNullOrEmpty(Exist))
        //            //{
        //            //    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "update WIP_Transvisit set lock=" + Lock + ",Ismoved=0 where id =" + Exist + "");
        //            //}
        //            //else
        //            //{
        //            Query = "select * from wip_transvisit where SMID=" + SMID + " and vdate ='" + Vdate + "' ";
        //            createText += "" + Query + "" + Environment.NewLine;
        //            DataTable dtchk = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
        //            // if (dtchk.Rows.Count == 0)
        //            {
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "insert into WIP_Transvisit (SMID,vdate,lock,visid) values(" + SMID + ",'" + Vdate + "'," + Lock + "," + Visid + " )");
        //            }

        //            //}
        //            rst.Msz = "Success";

        //            try
        //            {
        //              //  pushnotificationforEndVisit(SMID, Visid);
        //            }
        //            catch (Exception ex)
        //            {
        //                ex.ToString();
        //                createText += " @@@@@@ Exception Generated from : pushnotificationforEndVisit function @@@@@" + "" + ex.ToString() + " @@@@@@  " + Environment.NewLine;
        //            }

        //            //using (WebClient client = new WebClient())
        //            //{
        //            //    string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
        //            //    string url = "";
        //            //    url = "http://" + host + "/And_Sync.asmx/Scheduler_LockDSR";
        //            //    // url = "http://localhost:20547" + "/And_Sync.asmx/Scheduler_LockDSR?flag=M"; 
        //            //    string json = client.DownloadString(url).Replace(@"""", "");
        //            //}
        //        }

        //        catch (Exception ex)
        //        {
        //            rst.Msz = "Failure";
        //            string errormsz = "Error In Wip- " + ex.ToString();
        //            createText += " @@@@@@ Exception Generated @@@@@" + "" + errormsz + " @@@@@@  " + Environment.NewLine;
        //            Query = "insert into AutoSyncDateTime (SMID,TaskName) values (" + SMID + ",'" + errormsz.Replace("'", "''") + "')";
        //            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, Query);
        //        }
        //    }
        //    else
        //    {
        //        createText += " @@@@@@ 400 Bad Request @@@@@" + "" + rst.Msz + " @@@@@@  " + Environment.NewLine;
        //        createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
        //        using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_Wip_LockDSR_" + Vdate + ".txt"), true))
        //        {
        //            file2.WriteLine(createText);
        //            file2.Close();
        //        }

        //        rst.Msz = "Failure";
        //        Context.Response.Status = "400 Bad Request";
        //        Context.Response.StatusCode = 400;
        //        Context.Response.StatusDescription = "Bad Request";
        //        Context.Response.Write("Bad Request");
        //        Context.Response.Flush();
        //        throw new HttpException(400, "Bad Request");
        //    }
        //    createText += " @@@@@@   Providing Response To Android  @@@@@" + rst.Msz + "" + Environment.NewLine;
        //    createText += " @@@@@@   Providing Response To Android  @@@@@" + JsonConvert.SerializeObject(rst) + "" + Environment.NewLine;
        //    createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
        //    using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_Wip_LockDSR_" + Vdate + ".txt"), true))
        //    {
        //        file2.WriteLine(createText);
        //        file2.Close();
        //    }
        //    bodyStream.Dispose();
        //    Context.Response.Write(JsonConvert.SerializeObject(rst));
        //}

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Wip_LockDSR()
        {
            string createText = "";
            string SMID = string.Empty; string Vdate = string.Empty; string Lock = string.Empty; string Visid = string.Empty;
            LockDSRModal rst = new LockDSRModal();
            string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;// get it from Web.config file  
            SqlTransaction objTrans = null;
            string currentdate = DateTime.Now.ToString("yyyy-MM-dd");
            //  string currentdate = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd");

            try
            {

                using (SqlConnection objConn = new SqlConnection(strConnString))
                {
                    //string createText = "";
                    // var httpRequest = HttpContext.Current.Request;
                    var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
                    // DataTable DTadmin = new DataTable();
                    bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
                    var bodyText = bodyStream.ReadToEnd();
                    //     string items = httpRequest.Params["orderdetail"].ToString();
                    var OBJRESPONSE = JsonConvert.DeserializeObject<disList>(bodyText);

                    //var httpreq = HttpContext.Current.Request;
                    //string SMID = string.Empty; string Vdate = string.Empty; string Lock = string.Empty; int AffectedRec = 0; string Visid = string.Empty;
                    //LockDSRModal rst = new LockDSRModal();
                    try
                    {
                        //SMID = httpreq.Params["SMID"].ToString();
                        //Visid = httpreq.Params["Visid"].ToString();
                        //Lock = httpreq.Params["Lock"].ToString();
                        //Vdate = Convert.ToDateTime(httpreq.Params["Vdate"].ToString()).ToString("yyyy-MM-dd");

                        SMID = OBJRESPONSE.BODYLINE[0].SMID.ToString();
                        Visid = OBJRESPONSE.BODYLINE[0].VISID.ToString();
                        Lock = OBJRESPONSE.BODYLINE[0].LOCK.ToString();
                        Vdate = OBJRESPONSE.BODYLINE[0].VDATE;
                        Vdate = Convert.ToDateTime(Vdate).ToString("yyyy-MM-dd");

                        //SMID = "2297";
                        //Visid = "10041";
                        //Lock = "0";
                        //Vdate = "11/Mar/2021";
                        //Vdate = Convert.ToDateTime(Vdate).ToString("yyyy-MM-dd");

                        createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                        createText += "" + SMID + "," + Visid + "," + Lock + "," + Vdate + "," + Vdate + "" + Environment.NewLine;

                    }

                    catch (Exception ex)
                    {
                        string errormsz = "Error In Wip- Params are not proper - " + ex.ToString();

                        createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                        createText += " @@@@@@ Exception Generated @@@@@" + "" + errormsz + " @@@@@@  " + Environment.NewLine;
                        createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                        using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_Wip_LockDSR_" + currentdate + ".txt"), true))
                        {
                            file2.WriteLine(createText);
                            file2.Close();
                        }
                        Query = "insert into AutoSyncDateTime (SMID,TaskName) values (" + SMID + ",'" + errormsz + "')";
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, Query);
                        rst.Msz = "Failure";
                        Context.Response.Status = "400 Bad Request";
                        Context.Response.StatusCode = 400;
                        Context.Response.StatusDescription = "Bad Request";
                        Context.Response.Write("Bad Request");
                        Context.Response.Flush();
                        throw new HttpException(400, "Bad Request");
                    }
                    if (!string.IsNullOrEmpty(SMID) & !string.IsNullOrEmpty(Vdate))
                    {
                        try
                        {
                            //string Exist = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Id from WIP_Transvisit where SMID=" + SMID + " and vdate='" + Vdate + "' and Visid='"+Visid+"'"));
                            //if (!string.IsNullOrEmpty(Exist))
                            //{
                            //    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "update WIP_Transvisit set lock=" + Lock + ",Ismoved=0 where id =" + Exist + "");
                            //}
                            //else
                            //{
                            objConn.Open();
                            //   objTrans = objConn.BeginTransaction();

                            //Query = "select * from wip_transvisit where SMID=" + SMID + " and vdate ='" + Vdate + "' ";
                            //createText += "" + Query + "" + Environment.NewLine;
                            //DataTable dtchk = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                            //  objTrans.Commit();
                            // if (dtchk.Rows.Count == 0)
                            {
                                objTrans = objConn.BeginTransaction();
                                string strinsert = "insert into WIP_Transvisit (SMID,vdate,lock,visid) values(" + SMID + ",'" + Vdate + "'," + Lock + "," + Visid + " )";
                                //  DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "insert into WIP_Transvisit (SMID,vdate,lock,visid) values(" + SMID + ",'" + Vdate + "'," + Lock + "," + Visid + " )");
                                SqlCommand objCmd1 = new SqlCommand(strinsert, objConn, objTrans);
                                try
                                {
                                    objCmd1.ExecuteNonQuery();
                                    objTrans.Commit();
                                }
                                catch (Exception ex)
                                {
                                    objTrans.Rollback();
                                    rst.Msz = "Failure";
                                    string errormsz = "Error In Wip- " + ex.ToString();
                                    createText += " @@@@@@ Exception Generated @@@@@" + "" + errormsz + " @@@@@@  " + Environment.NewLine;
                                    createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                                    using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_Wip_LockDSR_" + currentdate + ".txt"), true))
                                    {
                                        file2.WriteLine(createText);
                                        file2.Close();
                                    }
                                }

                            }

                            //}
                            rst.Msz = "Success";

                            try
                            {
                                //  pushnotificationforEndVisit(SMID, Visid);
                            }
                            catch (Exception ex)
                            {
                                ex.ToString();
                                createText += " @@@@@@ Exception Generated from : pushnotificationforEndVisit function @@@@@" + "" + ex.ToString() + " @@@@@@  " + Environment.NewLine;
                            }
                        }

                        catch (Exception ex)
                        {
                            rst.Msz = "Failure";
                            string errormsz = "Error In Wip- " + ex.ToString();
                            createText += " @@@@@@ Exception Generated @@@@@" + "" + errormsz + " @@@@@@  " + Environment.NewLine;
                            createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                            using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_Wip_LockDSR_" + currentdate + ".txt"), true))
                            {
                                file2.WriteLine(createText);
                                file2.Close();
                            }
                            Query = "insert into AutoSyncDateTime (SMID,TaskName) values (" + SMID + ",'" + errormsz.Replace("'", "''") + "')";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, Query);
                            Context.Response.Write(JsonConvert.SerializeObject(rst));
                        }
                    }
                    else
                    {
                        createText += " @@@@@@ 400 Bad Request @@@@@" + "" + rst.Msz + " @@@@@@  " + Environment.NewLine;
                        createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                        using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_Wip_LockDSR_" + currentdate + ".txt"), true))
                        {
                            file2.WriteLine(createText);
                            file2.Close();
                        }

                        rst.Msz = "Failure";
                        Context.Response.Status = "400 Bad Request";
                        Context.Response.StatusCode = 400;
                        Context.Response.StatusDescription = "Bad Request";
                        Context.Response.Write("Bad Request");
                        Context.Response.Flush();
                        throw new HttpException(400, "Bad Request");
                    }
                    createText += " @@@@@@   Providing Response To Android  @@@@@" + rst.Msz + "" + Environment.NewLine;
                    createText += " @@@@@@   Providing Response To Android  @@@@@" + JsonConvert.SerializeObject(rst) + "" + Environment.NewLine;
                    createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                    using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_Wip_LockDSR_" + currentdate + ".txt"), true))
                    {
                        file2.WriteLine(createText);
                        file2.Close();
                    }
                    bodyStream.Dispose();
                    Context.Response.Write(JsonConvert.SerializeObject(rst));
                }
            }
            catch (Exception ex)
            {
                rst.Msz = "Failure";
                string errormsz = "Error In Wip- " + ex.ToString();
                createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                createText += " @@@@@@ Exception Generated @@@@@" + "" + errormsz + " @@@@@@  " + Environment.NewLine;
                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_Wip_LockDSR_" + currentdate + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
                Context.Response.Write(JsonConvert.SerializeObject(rst));
            }
        }

        public string pushnotificationonorderdispatchcancel(string msg, string compcode, string mobileno, string title, string createdbysmid, string smname, string ProductType, string Docid = "", string partyname = "", string Dispatchcancelstatus = "")
        {
            var result = "-1";
            //string Query = "SELECT * FROM MastSalesRep WHERE Mobile='7906767390'";
            string Query = "Select Deviceno from Mastsalesrep where mobile='" + mobileno + "'";
            DataTable dt = new DataTable();
            string serverKey = "";
            string senderId = "";
            DataTable dtserverdetail = new DataTable();
            //dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //if (dt.Rows.Count > 0)
            //{
            try
            {

                dtserverdetail = DbConnectionDAL.GetDataTable(CommandType.Text, "Select serverkey,senderid from Mastenviro ");

                string regid_query = "select Reg_id  from LineMaster where  Upper(Product)='" + ProductType + "' and CompCode='" + compcode + "' and mobile='" + mobileno + "'";
                string constrDmLicense = "data source=103.231.40.154,1565; user id=dmlicense_user; pwd=SaG@e321; initial catalog=dmlicense;";
                string Query1 = "";

                SqlConnection cn = new SqlConnection(constrDmLicense);
                SqlCommand cmd = new SqlCommand(regid_query, cn);

                cmd.CommandType = CommandType.Text;

                cn.Open();
                string regId = cmd.ExecuteScalar() as string;

                ///regId = "dhlIGmAIT2Q:APA91bHX_9SaxJVgADxA_h653QXxQqEjVlUB1B7twiI9zotPn8upCbPSyyGZjzW2gmSTRaL0kx8yVlThrYnGBkzQejHj_OyCoL8gan5jjMO8hL9K_LGBLxRFOQzqCz9PttlO-W94XOtw";

                cn.Close();
                cmd = null;
                if (dtserverdetail.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(regId))
                    {

                        Query1 = "insert into TransPushNotification(SMID,[Subject],Content,WebFlag) output inserted.id " +
    "values (" + createdbysmid + ",'" + title + "','" + msg + "','Y')";
                        string Id = DbConnectionDAL.GetStringScalarVal(Query1);
                        if (ProductType == "FFMS")
                        {
                            serverKey = "AAAAg3ziCCE:APA91bG2ambp-VLvSJSL8cbmiAygmgTXMQcoWk6kzunAWZ10UJT92wZt06NuJZpRnIGq1XgZYfHG_EpVE7qxGoey2oLCxo5g_me9AS85ouEu8T9bWz6XWFovfpsSoIdSjoibxl4iQHit";//dtserverdetail.Rows[0]["serverkey"].ToString();   // "AAAAGmgBKmE:APA91bGhywq0On9VncehIFPDorXSe59jP4rC-asBGLlnObDf2kF79_GRV3zf9zplDZ_Vyn8SNbr1UFIPM9Fb4bjy-a-Lx70BjQOmsJcRA5BINxTi15W8sANIXALjwaDN6l0nex919eJI9s_C4q46aYpa3feESG2TOg";//s


                            senderId = "564735903777";//dtserverdetail.Rows[0]["senderid"].ToString(); //"113414056545";
                        }
                        else if (ProductType == "CRM MANAGER")
                        {
                            serverKey = "AAAAU9r9dNQ:APA91bGQnNQK0uiNjNZA_sapid9yItgbClKquZRTHubkjGG1IUcCIiNKa57TNulr2BaS8NWqdE_hklLneTQdmfESwTL3n_eBDFm2jInksd-C5jYzmgdjqqrh-1vN8F6e79_hDiVoSe5p";//s


                            senderId = "360156329172";
                        }
                        else if (ProductType == "GOLDIEE")
                        {

                            serverKey = "AAAAwt64dG0:APA91bFMf2SOqW_CcfRnIKIMMQbysoz5i7ckOtALo8rzJnN75PIqRxmSSVJ9biH7RZCC8oVN0uLmE7cnDTGQaWJ65GOHtnxyEWv3u4GalxCvwRNwi-hZnfVt0zXdU-S9YE_-WI-L6cKQ";//s


                            senderId = "836960285805";
                        }


                        string webAddr = "https://fcm.googleapis.com/fcm/send";

                        //var result = "-1";
                        var tRequest = (HttpWebRequest)WebRequest.Create(webAddr);
                        tRequest.ContentType = "application/json";
                        tRequest.Headers.Add(string.Format("Authorization: key={0}", serverKey));
                        tRequest.Headers.Add(string.Format("Sender: id={0}", senderId));

                        tRequest.Method = "POST";

                        var payload = new
                        {
                            to = regId,
                            priority = "high",
                            content_available = true,
                            //notification = new
                            //{
                            //    body = msg,
                            //    title = title
                            //},
                            data = new
                            {
                                body = msg,
                                title = title,
                                docid = Docid,
                                PartyName = partyname,
                                // image = "http://lakshya.goldiee.com/SalespersonImages/defaultspimg.png",//"http://sfmstest.dataman.net.in/ThumbnailImage/VID-20170808-WA0009.jpg"
                                msg = msg,
                                SMID = createdbysmid,
                                Dispatchcancelstatus = Dispatchcancelstatus,
                                smname = smname
                            }
                        };



                        var serializer = new JavaScriptSerializer();
                        using (var streamWriter = new StreamWriter(tRequest.GetRequestStream()))
                        {
                            string json = serializer.Serialize(payload);
                            streamWriter.Write(json);
                            streamWriter.Flush();
                        }

                        var httpResponse = (HttpWebResponse)tRequest.GetResponse();
                        using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                        {
                            result = streamReader.ReadToEnd();


                            Query1 = "update TransPushNotification set serverresponse='" + result + "' where id=" + Id + "";
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                    }
                }
                //    }
                //}
            }
            catch (Exception ex)
            {
                result = "N";
            }
            // }
            return result;
        }





        #region SaveRetailerOrder


        public class RetailerOrderLineEntry
        {
            public int USERID { get; set; }
            public string VDATE { get; set; }
            public string NEXTVISITDATE { get; set; }
            public int SMID { get; set; }
            public string FRMTIME1 { get; set; }
            public string TOTIME1 { get; set; }
            public int WITHUSERID { get; set; }
            public string MODEOFTRANSPORT { get; set; }
            public string VEHICLEUSED { get; set; }
            public int LOCK { get; set; }
            public int NWITHUSERID { get; set; }
            public string ANDROID_ID { get; set; }
            public string CITYIDS { get; set; }
            public string CITYNAME { get; set; }
            public decimal ORDERAMOUNTMAIL { get; set; }
            public decimal ORDERAMOUNTPHONE { get; set; }
            public string VISITCODE { get; set; }
            public decimal ATTENDANCE { get; set; }
            public int FROMAREACODE { get; set; }
            public decimal OTHEREXPENSE { get; set; }
            public string ANDROIDAPPREMARK { get; set; }
            public int TOAREACODE { get; set; }
            public int NCITYID { get; set; }
            public string LONGITUDE { get; set; }
            public string LATITUDE { get; set; }
            public string LAT_LONG_DT { get; set; }
            public string MOBILE_CREATED_DATE { get; set; }



            public int VISID { get; set; }

            public string REMARKS { get; set; }
            public int PRODUCTCLASSID { get; set; }
            public int PRODUCTSEGMENTID { get; set; }
            public int PRODUCTMATGRP { get; set; }

            public string IMGURL { get; set; }
            public string IMAGE1 { get; set; }

            public int A_ORDERNO { get; set; }
            public int A_PORDERNO { get; set; }
            public int A_DEMONO { get; set; }
            public int A_FAILEDVISITNO { get; set; }
            public int A_VISITNO { get; set; }
            public int A_COMPETITORNO { get; set; }
            public int A_PARTYNO { get; set; }
            public int A_DISCUSSIONNO { get; set; }
            public int A_DISTRIBUTORCOLLECTIONNO { get; set; }
            public int A_PARTYCOLLECTIONNO { get; set; }
            public int A_PORDER1NO { get; set; }
            public int A_LEAVENO { get; set; }
            public int A_ORDER1NO { get; set; }
            public int A_BEATPLANNO { get; set; }
            public int A_DISTSTOCK_NO { get; set; }
            public int A_SALESRETURN_NO { get; set; }
            public int A_SALESRETURN1_NO { get; set; }

            public int DISTID { get; set; }
            public int ITEMID { get; set; }
            public decimal QTY { get; set; }
            public decimal CASES { get; set; }
            public decimal UNIT { get; set; }
            public string SEQNO { get; set; }
            public decimal MRP { get; set; }

            public int SNO { get; set; }
            public int CITYID { get; set; }
            public string REMARKDIST { get; set; }
            public string NEXTVISITTIME { get; set; }
            public string SPENTFRTIME { get; set; }
            public string SPENTTOTIME { get; set; }
            public decimal STOCK { get; set; }
            public string DSRTYPE { get; set; }
            public string MODE { get; set; }
            public decimal AMOUNT { get; set; }
            public string PAYMENTDATE { get; set; }
            public string CHEQUE_DDNO { get; set; }
            public string CHEQUE_DD_DATE { get; set; }
            public string BANK { get; set; }
            public string BRANCH { get; set; }
            public string STATUS { get; set; }
            public string ANDROIDID { get; set; }

            public string NEXTVISIT { get; set; }
            public int REASONID { get; set; }
            public string VISITTIME { get; set; }
            public string ITEM { get; set; }
            public decimal RATE { get; set; }

            public string COMPNAME { get; set; }
            public decimal DISCOUNT { get; set; }
            public string BRANDACTIVITY { get; set; }
            public string MEETACTIVITY { get; set; }
            public string ROADSHOW { get; set; }
            public string SCHEME { get; set; }
            public string OTHERGENERALINFO { get; set; }
            public string OTHERACTIVITY { get; set; }
            public decimal ORDERAMOUNT { get; set; }


            public int ORDID { get; set; }

            public string ANDROID_ID1 { get; set; }
            public int SELECTEDDISTID { get; set; }

            public string LASTRECORD { get; set; }
            public string MODIFIEDORDER { get; set; }
            public decimal BASEUNITQTY { get; set; }
            public decimal PRIMARYUNITQTY { get; set; }
            public decimal SECONDARYUNITQTY { get; set; }
            public decimal PRIMARYUNITCONVERSION { get; set; }
            public decimal SECONDARYUNITCONVERSION { get; set; }
            public string DISCOUNTTYPE { get; set; }
            //public decimal DISCOUNTAMOUNT { get; set; }
            public decimal MARGINPERCENTAGE { get; set; }
            public string BASEUNIT { get; set; }
            public string PRIMARYUNIT { get; set; }
            public string SECONDARYUNIT { get; set; }

            public Int32 PARTYID { get; set; }
            public string PARTYNAME { get; set; }
            public string ADDRESS1 { get; set; }
            public string ADDRESS2 { get; set; }

            public Int32 AREAID { get; set; }
            public Int32 BEATID { get; set; }
            public Int32 UNDERID { get; set; }
            public string PIN { get; set; }
            public string MOBILE { get; set; }
            public string PHONE { get; set; }
            public string REMARK { get; set; }
            public string SYNCID { get; set; }
            public string INDID { get; set; }
            public decimal POTENTIAL { get; set; }
            public bool ACTIVE { get; set; }
            public string BLOCKREASON { get; set; }
            public int PARTYTYPE { get; set; }
            public string CONTACTPERSON { get; set; }
            public string CSTNO { get; set; }
            public string VATTIN { get; set; }
            public string SERVICETAX { get; set; }
            public string PANNO { get; set; }

            public string DOA { get; set; }
            public string DOB { get; set; }
            public string EMAIL { get; set; }

            public string LATLNGTIME { get; set; }


        }

        public class RetailerOrder
        {
            public List<RetailerOrderHeader> RetailerOrderHeader;

        }
        public class RetailerOrderHeader
        {


            public int USERID { get; set; }
            public string VDATE { get; set; }
            public string NEXTVISITDATE { get; set; }
            public int SMID { get; set; }
            public string FRMTIME1 { get; set; }
            public string TOTIME1 { get; set; }
            public int WITHUSERID { get; set; }
            public string MODEOFTRANSPORT { get; set; }
            public string VEHICLEUSED { get; set; }
            public int LOCK { get; set; }
            public int NWITHUSERID { get; set; }
            public string ANDROID_ID { get; set; }
            public string CITYIDS { get; set; }
            public string CITYNAME { get; set; }
            public decimal ORDERAMOUNTMAIL { get; set; }
            public decimal ORDERAMOUNTPHONE { get; set; }
            public string VISITCODE { get; set; }
            public decimal ATTENDANCE { get; set; }
            public int FROMAREACODE { get; set; }
            public decimal OTHEREXPENSE { get; set; }
            public string ANDROIDAPPREMARK { get; set; }
            public int TOAREACODE { get; set; }
            public int NCITYID { get; set; }
            public string LONGITUDE { get; set; }
            public string LATITUDE { get; set; }
            public string LAT_LONG_DT { get; set; }
            public string MOBILE_CREATED_DATE { get; set; }



            public int VISID { get; set; }

            public string REMARKS { get; set; }
            public int PRODUCTCLASSID { get; set; }
            public int PRODUCTSEGMENTID { get; set; }
            public int PRODUCTMATGRP { get; set; }

            public string IMGURL { get; set; }
            public string IMAGE1 { get; set; }

            public int A_ORDERNO { get; set; }
            public int A_PORDERNO { get; set; }
            public int A_DEMONO { get; set; }
            public int A_FAILEDVISITNO { get; set; }
            public int A_VISITNO { get; set; }
            public int A_COMPETITORNO { get; set; }
            public int A_PARTYNO { get; set; }
            public int A_DISCUSSIONNO { get; set; }
            public int A_DISTRIBUTORCOLLECTIONNo { get; set; }
            public int A_PARTYCOLLECTIONNO { get; set; }
            public int A_PORDER1NO { get; set; }
            public int A_LEAVENO { get; set; }
            public int A_ORDER1NO { get; set; }
            public int A_BEATPLANNO { get; set; }
            public int A_DISTSTOCK_NO { get; set; }
            public int A_SALESRETURN_NO { get; set; }
            public int A_SALESRETURN1_NO { get; set; }

            public int DISTID { get; set; }
            public int ITEMID { get; set; }
            public decimal QTY { get; set; }
            public decimal CASES { get; set; }
            public decimal UNIT { get; set; }
            public string SEQNO { get; set; }
            public decimal MRP { get; set; }

            public int SNO { get; set; }
            public int CITYID { get; set; }
            public string REMARKDIST { get; set; }
            public string NEXTVISITTIME { get; set; }
            public string SPENTFRTIME { get; set; }
            public string SPENTTOTIME { get; set; }
            public decimal STOCK { get; set; }
            public string DSRTYPE { get; set; }
            public string MODE { get; set; }
            public decimal AMOUNT { get; set; }
            public string PAYMENTDATE { get; set; }
            public string CHEQUE_DDNO { get; set; }
            public string CHEQUE_DD_DATE { get; set; }
            public string BANK { get; set; }
            public string BRANCH { get; set; }
            public string STATUS { get; set; }
            public string ANDROIDID { get; set; }

            public string NEXTVISIT { get; set; }
            public int REASONID { get; set; }
            public string VISITTIME { get; set; }
            public string ITEM { get; set; }
            public decimal RATE { get; set; }

            public string COMPNAME { get; set; }
            public decimal DISCOUNT { get; set; }
            public string BRANDACTIVITY { get; set; }
            public string MEETACTIVITY { get; set; }
            public string ROADSHOW { get; set; }
            public string SCHEME { get; set; }
            public string OTHERGENERALINFO { get; set; }
            public string OTHERACTIVITY { get; set; }
            public decimal ORDERAMOUNT { get; set; }


            public int ORDID { get; set; }

            public string ANDROID_ID1 { get; set; }
            public int SELECTEDDISTID { get; set; }

            public string LASTRECORD { get; set; }
            public string MODIFIEDORDER { get; set; }

            public Int32 PARTYID { get; set; }
            public string PARTYNAME { get; set; }
            public string ADDRESS1 { get; set; }
            public string ADDRESS2 { get; set; }

            public Int32 AREAID { get; set; }
            public Int32 BEATID { get; set; }
            public Int32 UNDERID { get; set; }
            public string PIN { get; set; }
            public string MOBILE { get; set; }
            public string PHONE { get; set; }
            public string REMARK { get; set; }
            public string SYNCID { get; set; }
            public string INDID { get; set; }
            public decimal POTENTIAL { get; set; }
            public bool ACTIVE { get; set; }
            public string BLOCKREASON { get; set; }
            public int PARTYTYPE { get; set; }
            public string CONTACTPERSON { get; set; }
            public string CSTNO { get; set; }
            public string VATTIN { get; set; }
            public string SERVICETAX { get; set; }
            public string PANNO { get; set; }

            public string DOA { get; set; }
            public string DOB { get; set; }
            public string EMAIL { get; set; }

            public string LATLNGTIME { get; set; }


            public string LINECOUNT { get; set; }

            public List<RetailerOrderLineEntry> RetailerOrderLine;
        }

        public class disList1
        {
            public List<Descdetail1> BODYLINE;

        }
        public class Descdetail1
        {


            public int USERID { get; set; }
            public string VDATE { get; set; }
            public string NEXTVISITDATE { get; set; }
            public int SMID { get; set; }
            public string FRMTIME1 { get; set; }
            public string TOTIME1 { get; set; }
            public int WITHUSERID { get; set; }
            public string MODEOFTRANSPORT { get; set; }
            public string VEHICLEUSED { get; set; }
            public int LOCK { get; set; }
            public int NWITHUSERID { get; set; }
            public string ANDROID_ID { get; set; }
            public string CITYIDS { get; set; }
            public string CITYNAME { get; set; }
            public decimal ORDERAMOUNTMAIL { get; set; }
            public decimal ORDERAMOUNTPHONe { get; set; }
            public string VISITCODE { get; set; }
            public decimal ATTENDANCE { get; set; }
            public int FROMAREACODE { get; set; }
            public decimal OTHEREXPENSE { get; set; }
            public string ANDROIDAPPREMARK { get; set; }
            public int TOAREACODE { get; set; }
            public int NCITYID { get; set; }
            public string LONGITUDE { get; set; }
            public string LATITUDE { get; set; }
            public string LAT_LONG_DT { get; set; }
            public string MOBILE_CREATED_DATE { get; set; }



            public int VISID { get; set; }

            public string REMARKS { get; set; }
            public int PRODUCTCLASSID { get; set; }
            public int PRODUCTSEGMENTID { get; set; }
            public int PRODUCTMATGRP { get; set; }

            public string IMGURL { get; set; }
            public string IMAGE1 { get; set; }

            public int A_ORDERNO { get; set; }
            public int A_PORDERNO { get; set; }
            public int A_DEMONO { get; set; }
            public int A_FAILEDVISITNO { get; set; }
            public int A_VISITNO { get; set; }
            public int A_COMPETITORNO { get; set; }
            public int A_PARTYNO { get; set; }
            public int A_DISCUSSIONNO { get; set; }
            public int A_DISTRIBUTORCOLLECtionNo { get; set; }
            public int A_PARTYCOLLECTIONNO { get; set; }
            public int A_PORDER1NO { get; set; }
            public int A_LEAVENO { get; set; }
            public int A_ORDER1NO { get; set; }
            public int A_BEATPLANNO { get; set; }
            public int A_DISTSTOCK_NO { get; set; }
            public int A_SALESRETURN_NO { get; set; }
            public int A_SALESRETURN1_NO { get; set; }

            public int DISTID { get; set; }
            public int ITEMID { get; set; }
            public decimal QTY { get; set; }
            public decimal CASES { get; set; }
            public decimal UNIT { get; set; }
            public string SEQNO { get; set; }
            public decimal MRP { get; set; }

            public int SNO { get; set; }
            public int CITYID { get; set; }
            public string REMARKDIST { get; set; }
            public string NEXTVISITTIME { get; set; }
            public string SPENTFRTIME { get; set; }
            public string SPENTTOTIME { get; set; }
            public decimal STOCK { get; set; }
            public string DSRTYPE { get; set; }
            public string MODE { get; set; }
            public decimal AMOUNT { get; set; }
            public string PAYMENTDATE { get; set; }
            public string CHEQUE_DDNO { get; set; }
            public string CHEQUE_DD_DATE { get; set; }
            public string BANK { get; set; }
            public string BRANCH { get; set; }
            public string STATUS { get; set; }
            public string ANDROIDID { get; set; }

            public string NEXTVISIT { get; set; }
            public int REASONID { get; set; }
            public string VISITTIME { get; set; }
            public string ITEM { get; set; }
            public decimal RATE { get; set; }

            public string COMPNAME { get; set; }
            public decimal DISCOUNT { get; set; }
            public string BRANDACTIVITY { get; set; }
            public string MEETACTIVITY { get; set; }
            public string ROADSHOW { get; set; }
            public string SCHEME { get; set; }
            public string OTHERGENERALINFO { get; set; }
            public string OTHERACTIVITY { get; set; }
            public decimal ORDERAMOUNT { get; set; }


            public int ORDID { get; set; }

            public string ANDROID_ID1 { get; set; }
            public int SELECTEDDISTID { get; set; }

            public string LASTRECORD { get; set; }
            public string MODIFIEDORDER { get; set; }

            public Int32 PARTYID { get; set; }
            public string PARTYNAME { get; set; }
            public string ADDRESS1 { get; set; }
            public string ADDRESS2 { get; set; }

            public Int32 AREAID { get; set; }
            public Int32 BEATID { get; set; }
            public Int32 UNDERID { get; set; }
            public string PIN { get; set; }
            public string MOBILE { get; set; }
            public string PHONE { get; set; }
            public string REMARK { get; set; }
            public string SYNCID { get; set; }
            public string INDID { get; set; }
            public decimal POTENTIAL { get; set; }
            public bool ACTIVE { get; set; }
            public string BLOCKREASON { get; set; }
            public int PARTYTYPE { get; set; }
            public string CONTACTPERSON { get; set; }
            public string CSTNO { get; set; }
            public string VATTIN { get; set; }
            public string SERVICETAX { get; set; }
            public string PANNO { get; set; }

            public string DOA { get; set; }
            public string DOB { get; set; }
            public string EMAIL { get; set; }

            public string LATLNGTIME { get; set; }





            public string LINECOUNT { get; set; }
            public List<RetailerOrderLineEntry> RetailerOrderLine;
            public string EXPECTEDDD { get; set; }
            public string ORDERTAKENTYPE { get; set; }
            public decimal TOTALDISC { get; set; }
            public decimal NETAMOUNT { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void SaveRetailerOrder()
        {
            string createText = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            string HeaderMsz = string.Empty;
            string LineMsz = string.Empty;
            string Status = "400";
            string Line_Status = "400"; string Line_ms = string.Empty; string HeaderMS_Query = ""; string Line_Android_Id = "";
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList1>(bodyText);

            int VisId = OBJRESPONSE.BODYLINE[0].VISID;
            string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            int UserId = OBJRESPONSE.BODYLINE[0].USERID;
            string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            int PartyId = OBJRESPONSE.BODYLINE[0].PARTYID;
            int AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
            string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
            decimal OrderAmount = OBJRESPONSE.BODYLINE[0].ORDERAMOUNT;
            string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;
            string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
            string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
            string HeaderLineCOunt = OBJRESPONSE.BODYLINE[0].LINECOUNT;
            var RetailerOrderLineEntry = OBJRESPONSE.BODYLINE[0].RetailerOrderLine;

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            createText += "" + VisId + "," + Android_Id + "," + UserId + "," + VDate + "," + SMID + "," + PartyId + "," + AreaId + "," + Remarks + "," + OrderAmount + "," + longitude + "," + latitude + "," + lat_long_dt + "," + mobile_created_date + "," + IMGURL + "," + IMAGE1 + ", " + HeaderLineCOunt + "," + RetailerOrderLineEntry + "" + Environment.NewLine;


            int OrdId = 0;
            string orddocid = string.Empty;
            string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            //if (string.IsNullOrEmpty(mobile_created_date))
            //{
            //    mobile_created_date = "0";
            //}

            double ticks1 = double.Parse(mobile_created_date);
            TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
            DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
            mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");

            if (!string.IsNullOrEmpty(lat_long_dt))
            {
                double ticks = double.Parse(lat_long_dt);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            List<RetailerLineOrderResponse> rst_line = new List<RetailerLineOrderResponse>();
            #region UploadImage
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;

            if (IMAGE1.Contains("http://"))
            {
                IMGURL = IMAGE1.Replace(path, "~");
            }
            else if (IMAGE1 != "N/A")
            {
                byte[] bytes = Convert.FromBase64String(IMAGE1);

                Image image;
                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    image = Image.FromStream(ms);
                }
                string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                filename = Path.GetFileName(SMID + '-' + timeStamp);
                {
                    string filePath = Server.MapPath("~/DSRImages" + "/O_" + filename + ".png");
                    File.WriteAllBytes(filePath, bytes);
                    IMGURL = "~/DSRImages" + "/O_" + filename + ".png";
                }

            }
            #endregion


            #region MarkFromTime_inTrasnvisit
            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");
            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }
            #endregion

            string modifyorder = "N";
            string str = string.Empty;
            {

                str = "select partyid,visid,OrdDocId from temp_TransOrder where  PartyId='" + PartyId + "' and visid=" + VisId + "";

                DataTable dtexist = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dtexist.Rows.Count > 0)
                {
                    if ((dtexist.Rows[0]["partyid"].ToString() == PartyId.ToString()) && (dtexist.Rows[0]["visid"].ToString() == VisId.ToString()))
                    {
                        HeaderMS_Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + dtexist.Rows[0]["orddocid"].ToString() + "'";
                        modifyorder = "Y";
                        // Now we would update that this header , since it exist

                        str = "update temp_TransOrder set ItemCount=" + HeaderLineCOunt + ", remarks='" + Remarks + "',orderamount=" + OrderAmount + ",Latitude='" + latitude + "',Longitude='" + longitude + "',Lat_long_datetime='" + minDate1 + "',Mobile_Created_date='" + mobiletime + "',OrderDownloaded=NULL,[IMGURL]='" + IMGURL + "'  OUTPUT  Inserted.OrdDocId where OrdDocId='" + dtexist.Rows[0]["orddocid"].ToString() + "'";
                        try
                        {
                            string _output = DbConnectionDAL.GetStringScalarVal(str);
                            if (_output == dtexist.Rows[0]["orddocid"].ToString())
                            {
                                // Header succesfully updated

                                HeaderMsz = "Successfully Updated";
                                Status = "200";
                                // Now from here we would update line file
                                str = "select OrdId,orddocid,Android_Id from temp_transorder where visid=" + VisId + " and partyid=" + PartyId + "";
                                DataTable dtchk = DbConnectionDAL.getFromDataTable(str);
                                if (dtchk.Rows.Count > 0)
                                {
                                    OrdId = Convert.ToInt32(dtchk.Rows[0]["OrdId"]);
                                    orddocid = dtchk.Rows[0]["orddocid"].ToString();
                                    Android_Id = dtchk.Rows[0]["Android_Id"].ToString();
                                }
                                else
                                {
                                    //some error occured while updating header
                                    Status = "400";
                                    HeaderMsz = "Ordid and Docid not found after updating header";
                                }
                            }
                            else
                            {
                                //some error occured while updating header
                                Status = "400";
                                HeaderMsz = "some error occured while updating header";
                            }
                        }
                        catch (Exception ex)
                        {
                            Status = "400";
                            HeaderMsz = ex.ToString();
                        }


                    }
                    else
                    {
                        //msz to say that, this android id exist in other data;
                        Status = "400";
                        HeaderMsz = Android_Id + " - this android id exist in other data";
                    }

                }
                else
                {
                    orddocid = Settings.GetDocID("ORDSN", DateTime.Now);

                    str = "INSERT INTO dbo.temp_TransOrder (VisId,OrdDocId, Android_Id, UserId,VDate,SMID, ItemCount,PartyId,AreaId,Remarks,OrderAmount,Created_date,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,[IMGURL]) OUTPUT INSERTED.OrdDocId " +
                  " VALUES ('" + VisId + "', '" + orddocid + "', '" + Android_Id + "', " + UserId + ", '" + VDate + "', " + SMID + " ," + HeaderLineCOunt + ", '" + PartyId + "', '" + AreaId + "', '" + Remarks + "', " + OrderAmount + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + minDate1 + "','" + mobiletime + "','" + IMGURL + "')";
                    try
                    {
                        string _output = DbConnectionDAL.GetStringScalarVal(str);
                        if (_output == orddocid)
                        {
                            HeaderMS_Query = "select  OrdId,OrdDocId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + orddocid + "'";
                            modifyorder = "N";
                            Status = "200";
                            HeaderMsz = "Successfully Inserted";

                            str = "select OrdId,orddocid,Android_Id from temp_transorder where visid=" + VisId + " and partyid=" + PartyId + "";
                            DataTable dtchk = DbConnectionDAL.getFromDataTable(str);
                            if (dtchk.Rows.Count > 0)
                            {
                                OrdId = Convert.ToInt32(dtchk.Rows[0]["OrdId"]);
                                orddocid = dtchk.Rows[0]["orddocid"].ToString();
                                Android_Id = dtchk.Rows[0]["Android_Id"].ToString();
                            }
                            else
                            {
                                //some error occured while updating header
                                Status = "400";
                                HeaderMsz = "Ordid and Docid not found after updating header";
                            }
                        }
                        else
                        {
                            Status = "400";
                            HeaderMsz = "some error occured while Inserting Header";
                        }
                    }
                    catch (Exception ex)
                    {
                        Status = "400";
                        HeaderMsz = ex.ToString();
                    }
                }

                #region GetLineEntries
                using (WebClient client = new WebClient())
                {

                    for (int i = 0; i < RetailerOrderLineEntry.Count; i++)
                    {

                        int Line_OrdId = RetailerOrderLineEntry[i].ORDID;
                        int Line_VisId = RetailerOrderLineEntry[i].VISID;
                        string Line_Sno = RetailerOrderLineEntry[i].SNO.ToString();
                        int Line_UserId = RetailerOrderLineEntry[i].USERID;
                        string Line_VDate = RetailerOrderLineEntry[i].VDATE;
                        int Line_SMId = RetailerOrderLineEntry[i].SMID;
                        string Line_PartyId = RetailerOrderLineEntry[i].PARTYID.ToString();
                        int Line_AreaId = RetailerOrderLineEntry[i].AREAID;
                        int Line_ItemId = RetailerOrderLineEntry[i].ITEMID;
                        decimal Line_Qty = RetailerOrderLineEntry[i].QTY;
                        decimal Line_Rate = RetailerOrderLineEntry[i].RATE;
                        string Line_Remarks = RetailerOrderLineEntry[i].REMARKS;
                        decimal Line_amount = RetailerOrderLineEntry[i].AMOUNT;
                        Line_Android_Id = RetailerOrderLineEntry[i].ANDROID_ID;
                        string Line_Android_Id1 = RetailerOrderLineEntry[i].ANDROID_ID1;
                        string Line_cases = RetailerOrderLineEntry[i].CASES.ToString();
                        string Line_unit = RetailerOrderLineEntry[i].UNIT.ToString();
                        string Line_longitude = RetailerOrderLineEntry[i].LONGITUDE;
                        string Line_latitude = RetailerOrderLineEntry[i].LATITUDE;
                        string Line_lat_long_dt = RetailerOrderLineEntry[i].LAT_LONG_DT;
                        string Line_mobile_created_date = RetailerOrderLineEntry[i].MOBILE_CREATED_DATE;
                        string Line_seqNo = RetailerOrderLineEntry[i].SEQNO;
                        int Line_selectedDistId = RetailerOrderLineEntry[i].SELECTEDDISTID;
                        decimal Line_discount = RetailerOrderLineEntry[i].DISCOUNT;
                        string Line_LastRecord = RetailerOrderLineEntry[i].LASTRECORD;
                        string Line_modifiedorder = RetailerOrderLineEntry[i].MODIFIEDORDER;
                        if (Line_seqNo == "0")
                        {
                            str = "delete from temp_transorder1 where partyid=" + PartyId + " and visid=" + VisId + " ";
                            DbConnectionDAL.ExecuteQuery(str);
                        }
                        //if (string.IsNullOrEmpty(Line_selectedDistId.ToString()))
                        //{
                        //    Line_selectedDistId = 0;
                        //}
                        //if (string.IsNullOrEmpty(Line_discount.ToString()))
                        //{
                        //    Line_discount = 0;
                        //}

                        //if (string.IsNullOrEmpty(mobile_created_date))
                        //{
                        //    mobile_created_date = "0";
                        //}

                        if (!string.IsNullOrEmpty(lat_long_dt))
                        {
                            double ticks = double.Parse(lat_long_dt);
                            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                            DateTime startdate = new DateTime(1970, 1, 1) + time;
                            minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                        }
                        if (!string.IsNullOrEmpty(mobile_created_date))
                        {
                            double Line_ticks1 = double.Parse(mobile_created_date);
                            TimeSpan Line_time1 = TimeSpan.FromMilliseconds(Line_ticks1);
                            DateTime Line_startdate1 = new DateTime(1970, 1, 1) + Line_time1;
                            mobiletime = Line_startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                            mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                        }
                        str = "INSERT INTO dbo.temp_TransOrder1 (OrdId,VisId,OrdDocId, Sno, UserId,VDate,SMID, PartyId,AreaId,ItemId,Qty,Rate,Remarks,amount,Android_Id,android_id1,Created_date,cases,unit,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,DistId,Discount)  OUTPUT INSERTED.android_id1  " +
 " VALUES (" + OrdId + ", '" + VisId + "', '" + orddocid + "', '" + Line_seqNo + "', '" + UserId + "', '" + VDate + "', " + SMID + " , '" + PartyId + "', '" + AreaId + "', " + Line_ItemId + ", " + Line_Qty + ", " + Line_Rate + ",'" + Remarks + "', " + Line_amount + ", '" + Line_Android_Id + "', '" + Line_Android_Id1 + "',DateAdd(minute,330,getutcdate())," + Convert.ToDecimal(Line_cases) + "," + Convert.ToDecimal(Line_unit) + ",'" + latitude + "','" + longitude + "','" + minDate1 + "','" + mobiletime + "'," + Line_selectedDistId + "," + Line_discount + ")";
                        try
                        {
                            string _output = DbConnectionDAL.GetStringScalarVal(str);
                            if (_output == Line_Android_Id1)
                            {
                                Query = "select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from temp_TransOrder1 where OrdDocId='" + orddocid + "' and itemid=" + Line_ItemId + " and OrdId=" + OrdId + "";


                                Line_ms = DbConnectionDAL.GetStringScalarVal(Query);
                                Line_Status = "200";
                                LineMsz = "Successfully Inserted Itemid " + Line_ItemId;

                            }
                            else
                            {
                                Line_Status = "400";
                                LineMsz = "Error While Inserting ItemId " + Line_ItemId;
                                Status = "400";
                                HeaderMsz = HeaderMsz + " : " + LineMsz;
                            }
                        }
                        catch (Exception ex)
                        {
                            Line_Status = "400";
                            LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();
                            Status = "400";
                            HeaderMsz = HeaderMsz + " : " + LineMsz;
                        }

                        #region SentNotification
                        try
                        {
                            if (Line_LastRecord == "Y" && Status == "200")
                            {
                                if (HeaderLineCOunt == (Convert.ToInt32(Line_seqNo) + 1).ToString())
                                {
                                    string displaytitle = ""; string title = ""; string partyname = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Partyname From MastParty where PartyId=" + PartyId + ""));
                                    string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
                                    string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from temp_TransOrder1 where OrdId=" + OrdId + ""));
                                    DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid from mastsalesrep where SMID=" + SMID + "");
                                    if (dtgrpsmid.Rows.Count > 0)
                                    {

                                    }
                                    else
                                    {
                                        dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName,userid from mastsalesrep where SMID==" + SMID + "");
                                    }

                                    if (dtgrpsmid.Rows.Count > 0)
                                    {
                                        string pro_id = "RETORDDISCAN";
                                        string sql_getsenior = "select SMID,Mobile,userid from mastsalesrep where SMID in (select MainGrp from mastsalesrepgrp where SMID=" + dtgrpsmid.Rows[0]["SMID"].ToString() + " and Level<=(select level from mastsalesrepgrp where SMID=" + dtgrpsmid.Rows[0]["SMID"].ToString() + " and MainGrp=" + dtgrpsmid.Rows[0]["SMID"].ToString() + "))";
                                        DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                                        if (dt_getsenior.Rows.Count > 0)
                                        {
                                            for (int k = 0; k < dt_getsenior.Rows.Count; k++)
                                            {

                                                if (modifyorder == "Y")
                                                {
                                                    displaytitle = orddocid.Replace("-", " ") + " -  Order Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                                    title = " Order Modified";
                                                }
                                                else
                                                {
                                                    displaytitle = orddocid.Replace("-", " ") + " - New Order created by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                                    title = " New Order Created";
                                                }


                                                lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + orddocid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), Convert.ToInt32(dt_getsenior.Rows[k]["SMID"].ToString()));

                                                if (!string.IsNullOrEmpty(dt_getsenior.Rows[k]["mobile"].ToString()))
                                                {
                                                    pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                                        dt_getsenior.Rows[k]["mobile"].ToString(),


                                                      title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                                        dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS");

                                                    pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                                       dt_getsenior.Rows[k]["mobile"].ToString(),
                                                      title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                                       dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER");
                                                }
                                            }
                                        }

                                        DataTable dtdist = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT Mobile,  UserId FROM MastParty WHERE PartyId=" + Line_selectedDistId + "");
                                        if (dtdist.Rows.Count > 0)
                                        {
                                            lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dtdist.Rows[0]["UserId"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + orddocid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), 0);

                                            if (!string.IsNullOrEmpty(dtdist.Rows[0]["mobile"].ToString()))
                                            {
                                                pushnotificationonorderdispatchcancel(displaytitle, compcode,
                                                   dtdist.Rows[0]["mobile"].ToString(),
                                                    "New Order Created", dtgrpsmid.Rows[0]["SMID"].ToString(),
                                                    dtgrpsmid.Rows[0]["SMName"].ToString(), "GOLDIEE", orddocid, partyname);
                                            }
                                        }

                                    }
                                }
                                else
                                {

                                    //Line file mismatch
                                    Status = "400";
                                    HeaderMsz = HeaderMsz + " - Line File Mismatch : Header Line Count: " + HeaderLineCOunt + " and LineFileCount: " + (Convert.ToInt32(Line_seqNo) + 1).ToString();
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            Line_Status = "200"; // status is set 200 becoz order is saved but exception in sending notification.
                            LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();

                            Status = "400";
                            HeaderMsz = HeaderMsz + " : " + LineMsz;
                        }

                        #endregion

                        rst_line.Add(
              new RetailerLineOrderResponse
              {
                  ItemId = Line_ItemId.ToString(),
                  Ordid = OrdId.ToString(),
                  OrdDocid = orddocid,
                  MS = Line_ms,
                  Status = Line_Status,
                  Msz = LineMsz,
                  AndroidId_1 = Line_Android_Id1

              }
       );
                    }
                }
                #endregion

            }
            string MS = "";
            try
            {
                DataTable dtHeader = DbConnectionDAL.GetDataTable(CommandType.Text, HeaderMS_Query);
                if (dtHeader.Rows.Count > 0)
                    MS = dtHeader.Rows[0]["Milliseconds"].ToString();
            }
            catch (Exception ex)
            {
                HeaderMsz = HeaderMsz + "  : " + HeaderMsz;
            }
            List<RetailerOrderResponse> rstheader = new List<RetailerOrderResponse>();


            rstheader.Add(
                new RetailerOrderResponse
                {
                    ID = OrdId,
                    DOCUMENTID = orddocid,
                    MS = MS,
                    MODIFYORD = modifyorder,
                    STATUS = Status,
                    MSZ = HeaderMsz,
                    ANDROIDID = Android_Id,
                    RETAILERORDERLINERESPONSE = rst_line
                }
            );

            createText += " @@@@@@   Providing Response To Android  @@@@@" + JsonConvert.SerializeObject(rstheader) + "" + Environment.NewLine;
            createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_SaveRetailerOrder_" + VDate + ".txt"), true))
            {
                file2.WriteLine(createText);
                file2.Close();
            }

            Context.Response.Write(JsonConvert.SerializeObject(rstheader));
        }


        public class RetailerOrderResponse
        {
            [DataMember]
            public int ID { get; set; }
            [DataMember]
            public string DOCUMENTID { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string STATUS { get; set; }
            [DataMember]
            public string MSZ { get; set; }
            [DataMember]
            public string MODIFYORD { get; set; }
            [DataMember]
            public string ANDROIDID { get; set; }

            //public List<RetailerLineOrderResponse> RetailerOrderLineResponse;
            public List<RetailerLineOrderResponse> RETAILERORDERLINERESPONSE;
        }

        public class RetailerLineOrderResponse
        {
            [DataMember]
            public string ItemId { get; set; }
            [DataMember]
            public string Ordid { get; set; }
            [DataMember]
            public string OrdDocid { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string Msz { get; set; }
            [DataMember]
            public string AndroidId_1 { get; set; }
        }

        //15-06-2021--------------- add log in every step----- anurag
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void SaveRetailerOrder1()
        {
            string createText = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            string HeaderMsz = string.Empty;
            string LineMsz = string.Empty;
            string Status = "400";
            string Line_Status = "400"; string Line_ms = string.Empty; string HeaderMS_Query = ""; string Line_Android_Id = "";
            var OBJRESPONSE = JsonConvert.DeserializeObject<disList1>(bodyText);

            //int VisId = OBJRESPONSE.BODYLINE[0].VISID;
            //string Android_Id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
            //int UserId = OBJRESPONSE.BODYLINE[0].USERID;
            //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
            //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
            //int PartyId = OBJRESPONSE.BODYLINE[0].PARTYID;
            //int AreaId = OBJRESPONSE.BODYLINE[0].AREAID;
            //string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
            //decimal OrderAmount = OBJRESPONSE.BODYLINE[0].ORDERAMOUNT;
            //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
            //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
            //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
            //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;
            //string IMGURL = OBJRESPONSE.BODYLINE[0].IMGURL;
            //string IMAGE1 = OBJRESPONSE.BODYLINE[0].IMAGE1;
            //string HeaderLineCOunt = OBJRESPONSE.BODYLINE[0].LINECOUNT;
            //var RetailerOrderLineEntry = OBJRESPONSE.BODYLINE[0].RetailerOrderLine;
            //string ExpectedDD = OBJRESPONSE.BODYLINE[0].EXPECTEDDD;
            //string OrderTakenType = OBJRESPONSE.BODYLINE[0].ORDERTAKENTYPE;
            //decimal TotalDisc = OBJRESPONSE.BODYLINE[0].TOTALDISC;
            //decimal NetAmount = OBJRESPONSE.BODYLINE[0].NETAMOUNT;

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            createText += "" + OBJRESPONSE.BODYLINE[0].VISID + "," + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "," + OBJRESPONSE.BODYLINE[0].USERID + "," + OBJRESPONSE.BODYLINE[0].VDATE + "," + OBJRESPONSE.BODYLINE[0].SMID + "," + OBJRESPONSE.BODYLINE[0].PARTYID + "," + OBJRESPONSE.BODYLINE[0].AREAID + "," + OBJRESPONSE.BODYLINE[0].REMARKS + "," + OBJRESPONSE.BODYLINE[0].ORDERAMOUNT + "," + OBJRESPONSE.BODYLINE[0].LONGITUDE + "," + OBJRESPONSE.BODYLINE[0].LATITUDE + "," + OBJRESPONSE.BODYLINE[0].LAT_LONG_DT + "," + OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE + "," + OBJRESPONSE.BODYLINE[0].IMGURL + "," + OBJRESPONSE.BODYLINE[0].IMAGE1 + ", " + OBJRESPONSE.BODYLINE[0].LINECOUNT + "," + OBJRESPONSE.BODYLINE[0].RetailerOrderLine + ", " + OBJRESPONSE.BODYLINE[0].EXPECTEDDD + ", " + OBJRESPONSE.BODYLINE[0].ORDERTAKENTYPE + ", " + OBJRESPONSE.BODYLINE[0].TOTALDISC + ", " + OBJRESPONSE.BODYLINE[0].NETAMOUNT + "" + Environment.NewLine;


            int OrdId = 0;
            string orddocid = string.Empty;
            string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";
            List<RetailerOrderResponse> rstheader = new List<RetailerOrderResponse>();
            //if (string.IsNullOrEmpty(mobile_created_date))
            //{
            //    mobile_created_date = "0";
            //}
            try
            {
                double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");

                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
                {
                    double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

                List<RetailerLineOrderResponse> rst_line = new List<RetailerLineOrderResponse>();
                #region UploadImage
                string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
                createText += "" + "" + host + "" + Environment.NewLine;
                string path = "http://" + host;

                if (OBJRESPONSE.BODYLINE[0].IMAGE1.Contains("http://"))
                {
                    OBJRESPONSE.BODYLINE[0].IMGURL = OBJRESPONSE.BODYLINE[0].IMAGE1.Replace(path, "~");
                }
                else if (OBJRESPONSE.BODYLINE[0].IMAGE1 != "N/A")
                {
                    byte[] bytes = Convert.FromBase64String(OBJRESPONSE.BODYLINE[0].IMAGE1);

                    Image image;
                    using (MemoryStream ms = new MemoryStream(bytes))
                    {
                        image = Image.FromStream(ms);
                    }
                    string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }
                    string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    filename = Path.GetFileName(OBJRESPONSE.BODYLINE[0].SMID + '-' + timeStamp);
                    {
                        string filePath = Server.MapPath("~/DSRImages" + "/O_" + filename + ".png");
                        File.WriteAllBytes(filePath, bytes);
                        OBJRESPONSE.BODYLINE[0].IMGURL = "~/DSRImages" + "/O_" + filename + ".png";
                    }

                }
                #endregion


                #region MarkFromTime_inTrasnvisit
                var frtime = "0";
                var totime = "0";
                string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
                string dtSuppliedDate = Convert.ToDateTime(OBJRESPONSE.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                {
                    try
                    {
                        if (mobiletimehm != "00:00")
                        {
                            string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                            createText += "" + "" + strchk + "" + Environment.NewLine;
                            DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                            if (dtfr.Rows.Count > 0)
                            {
                                TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                                TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                                TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                                if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "" + "" + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                                    {
                                        frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "" + "" + strfr + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                    }
                                }
                                if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                    createText += "" + "" + strfr + "" + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                                    {
                                        totime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                                        createText += "" + "" + strto + "" + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                                    }
                                }
                            }
                            dtfr.Dispose();
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@@ Exception in Update date in TransVisit" + "" + ex.Message + "" + Environment.NewLine;
                    }
                }
                #endregion

                string modifyorder = "N";
                string str = string.Empty;
                {

                    str = "select partyid,visid,OrdDocId from temp_TransOrder where  PartyId='" + OBJRESPONSE.BODYLINE[0].PARTYID + "' and visid=" + OBJRESPONSE.BODYLINE[0].VISID + "";
                    createText += "" + str + "" + Environment.NewLine;
                    DataTable dtexist = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                    if (dtexist.Rows.Count > 0)
                    {
                        if ((dtexist.Rows[0]["partyid"].ToString() == OBJRESPONSE.BODYLINE[0].PARTYID.ToString()) && (dtexist.Rows[0]["visid"].ToString() == OBJRESPONSE.BODYLINE[0].VISID.ToString()))
                        {
                            try
                            {
                                HeaderMS_Query = "select *, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + dtexist.Rows[0]["orddocid"].ToString() + "'";
                                createText += "" + "" + HeaderMS_Query + "" + Environment.NewLine;
                                modifyorder = "Y";
                                // Now we would update that this header , since it exist

                                str = "update temp_TransOrder set ItemCount=" + OBJRESPONSE.BODYLINE[0].LINECOUNT + ", remarks='" + OBJRESPONSE.BODYLINE[0].REMARKS + "',orderamount=" + OBJRESPONSE.BODYLINE[0].ORDERAMOUNT + ",Latitude='" + OBJRESPONSE.BODYLINE[0].LATITUDE + "',Longitude='" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "',Lat_long_datetime='" + minDate1 + "',Mobile_Created_date='" + mobiletime + "',[IMGURL]='" + OBJRESPONSE.BODYLINE[0].IMGURL + "',[ExpectedDD]='" + OBJRESPONSE.BODYLINE[0].EXPECTEDDD + "',[OrderTakenType]='" + OBJRESPONSE.BODYLINE[0].ORDERTAKENTYPE + "',[TotalDiscount]=" + OBJRESPONSE.BODYLINE[0].TOTALDISC + ",[NetAmount]= " + OBJRESPONSE.BODYLINE[0].NETAMOUNT + "  OUTPUT  Inserted.OrdDocId where OrdDocId='" + dtexist.Rows[0]["orddocid"].ToString() + "'";
                                createText += "" + str + "" + Environment.NewLine;

                                string _output = DbConnectionDAL.GetStringScalarVal(str);
                                if (_output == dtexist.Rows[0]["orddocid"].ToString())
                                {
                                    // Header succesfully updated

                                    HeaderMsz = "Successfully Updated";
                                    Status = "200";
                                    // Now from here we would update line file
                                    str = "select OrdId,orddocid,Android_Id from temp_transorder where visid=" + OBJRESPONSE.BODYLINE[0].VISID + " and partyid=" + OBJRESPONSE.BODYLINE[0].PARTYID + "";
                                    createText += "" + str + "" + Environment.NewLine;
                                    DataTable dtchk = DbConnectionDAL.getFromDataTable(str);
                                    if (dtchk.Rows.Count > 0)
                                    {
                                        OrdId = Convert.ToInt32(dtchk.Rows[0]["OrdId"]);
                                        orddocid = dtchk.Rows[0]["orddocid"].ToString();
                                        OBJRESPONSE.BODYLINE[0].ANDROID_ID = dtchk.Rows[0]["Android_Id"].ToString();
                                    }
                                    else
                                    {
                                        //some error occured while updating header
                                        Status = "400";
                                        HeaderMsz = "Ordid and Docid not found after updating header";
                                        createText += "" + "" + Status + "" + HeaderMsz + "" + Environment.NewLine;
                                    }
                                }
                                else
                                {
                                    //some error occured while updating header
                                    Status = "400";
                                    HeaderMsz = "some error occured while updating header";
                                    createText += "" + "" + Status + "" + HeaderMsz + "" + Environment.NewLine;
                                }
                            }
                            catch (Exception ex)
                            {
                                Status = "400";
                                HeaderMsz = ex.ToString();
                                createText += "" + "" + Status + "" + HeaderMsz + "" + Environment.NewLine;
                            }


                        }
                        else
                        {
                            //msz to say that, this android id exist in other data;
                            Status = "400";
                            HeaderMsz = OBJRESPONSE.BODYLINE[0].ANDROID_ID + " - this android id exist in other data";
                            createText += "" + "" + Status + "" + HeaderMsz + "" + Environment.NewLine;
                        }

                    }
                    else
                    {
                        orddocid = Settings.GetDocID("ORDSN", DateTime.Now);
                        try
                        {
                            str = "INSERT INTO dbo.temp_TransOrder (VisId,OrdDocId, Android_Id, UserId,VDate,SMID, ItemCount,PartyId,AreaId,Remarks,OrderAmount,Created_date,Latitude,Longitude,Lat_long_datetime,Mobile_Created_date,[IMGURL],[ExpectedDD],[OrderTakenType],[TotalDiscount],[NetAmount]) OUTPUT INSERTED.OrdDocId " +
                      " VALUES ('" + OBJRESPONSE.BODYLINE[0].VISID + "', '" + orddocid + "', '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', " + OBJRESPONSE.BODYLINE[0].USERID + ", '" + OBJRESPONSE.BODYLINE[0].VDATE + "', " + OBJRESPONSE.BODYLINE[0].SMID + " ," + OBJRESPONSE.BODYLINE[0].LINECOUNT + ", '" + OBJRESPONSE.BODYLINE[0].PARTYID + "', '" + OBJRESPONSE.BODYLINE[0].AREAID + "', '" + OBJRESPONSE.BODYLINE[0].REMARKS + "', " + OBJRESPONSE.BODYLINE[0].ORDERAMOUNT + ",DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + minDate1 + "','" + mobiletime + "','" + OBJRESPONSE.BODYLINE[0].IMGURL + "','" + OBJRESPONSE.BODYLINE[0].EXPECTEDDD + "','" + OBJRESPONSE.BODYLINE[0].ORDERTAKENTYPE + "'," + OBJRESPONSE.BODYLINE[0].TOTALDISC + "," + OBJRESPONSE.BODYLINE[0].NETAMOUNT + ")";

                            createText += "" + str + "" + Environment.NewLine;
                            string _output = DbConnectionDAL.GetStringScalarVal(str);
                            if (_output == orddocid)
                            {
                                HeaderMS_Query = "select  OrdId,OrdDocId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds   from temp_TransOrder where OrdDocId='" + orddocid + "'";

                                createText += "" + "" + HeaderMS_Query + "" + Environment.NewLine;
                                modifyorder = "N";
                                Status = "200";
                                HeaderMsz = "Successfully Inserted";

                                str = "select OrdId,orddocid,Android_Id from temp_transorder where visid=" + OBJRESPONSE.BODYLINE[0].VISID + " and partyid=" + OBJRESPONSE.BODYLINE[0].PARTYID + "";
                                createText += "" + str + "" + Environment.NewLine;
                                DataTable dtchk = DbConnectionDAL.getFromDataTable(str);
                                if (dtchk.Rows.Count > 0)
                                {
                                    OrdId = Convert.ToInt32(dtchk.Rows[0]["OrdId"]);
                                    orddocid = dtchk.Rows[0]["orddocid"].ToString();
                                    OBJRESPONSE.BODYLINE[0].ANDROID_ID = dtchk.Rows[0]["Android_Id"].ToString();
                                }
                                else
                                {
                                    //some error occured while updating header
                                    Status = "400";
                                    HeaderMsz = "Ordid and Docid not found after updating header";

                                    createText += "" + "" + Status + "" + HeaderMsz + "" + Environment.NewLine;
                                }
                            }
                            else
                            {
                                Status = "400";
                                HeaderMsz = "some error occured while Inserting Header";

                                createText += "" + "" + Status + "" + HeaderMsz + "" + Environment.NewLine;
                            }
                        }
                        catch (Exception ex)
                        {
                            Status = "400";
                            HeaderMsz = ex.ToString();

                            createText += "" + "" + Status + "" + HeaderMsz + "" + Environment.NewLine;
                        }
                    }

                    #region GetLineEntries
                    using (WebClient client = new WebClient())
                    {

                        for (int i = 0; i < OBJRESPONSE.BODYLINE[0].RetailerOrderLine.Count; i++)
                        {

                            int Line_OrdId = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].ORDID;
                            int Line_VisId = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].VISID;
                            string Line_Sno = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].SNO.ToString();
                            int Line_UserId = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].USERID;
                            string Line_VDate = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].VDATE;
                            int Line_SMId = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].SMID;
                            string Line_PartyId = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].PARTYID.ToString();
                            int Line_AreaId = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].AREAID;
                            int Line_ItemId = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].ITEMID;
                            decimal Line_Qty = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].QTY;
                            decimal Line_Rate = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].RATE;
                            string Line_Remarks = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].REMARKS;
                            decimal Line_amount = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].AMOUNT;
                            Line_Android_Id = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].ANDROID_ID;
                            string Line_Android_Id1 = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].ANDROID_ID1;
                            string Line_cases = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].CASES.ToString();
                            string Line_unit = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].UNIT.ToString();
                            string Line_longitude = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].LONGITUDE;
                            string Line_latitude = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].LATITUDE;
                            string Line_lat_long_dt = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].LAT_LONG_DT;
                            string Line_mobile_created_date = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].MOBILE_CREATED_DATE;
                            string Line_seqNo = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].SEQNO;
                            int Line_selectedDistId = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].SELECTEDDISTID;
                            decimal Line_discount = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].DISCOUNT;
                            string Line_LastRecord = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].LASTRECORD;
                            string Line_modifiedorder = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].MODIFIEDORDER;
                            decimal Line_BaseUnitQty = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].BASEUNITQTY;
                            decimal Line_PrimaryUnitQty = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].PRIMARYUNITQTY;
                            decimal Line_SecondaryUnitQty = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].SECONDARYUNITQTY;
                            decimal Line_PrimaryUnitConversion = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].PRIMARYUNITCONVERSION;
                            decimal Line_SecondaryUnitConversion = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].SECONDARYUNITCONVERSION;
                            string Line_DiscountType = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].DISCOUNTTYPE;
                            //decimal Line_DiscountAmount = RetailerOrderLineEntry[i].DiscountAmount;
                            decimal Line_MarginPercentage = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].MARGINPERCENTAGE;
                            string Line_BaseUnit = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].BASEUNIT;
                            string Line_PrimaryUnit = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].PRIMARYUNIT;
                            string Line_SecondaryUnit = OBJRESPONSE.BODYLINE[0].RetailerOrderLine[i].SECONDARYUNIT;
                            if (Line_seqNo == "0")
                            {
                                str = "delete from temp_transorder1 where partyid=" + OBJRESPONSE.BODYLINE[0].PARTYID + " and visid=" + OBJRESPONSE.BODYLINE[0].VISID + " ";

                                createText += "" + "" + str + "" + Environment.NewLine;
                                DbConnectionDAL.ExecuteQuery(str);
                            }
                            //if (string.IsNullOrEmpty(Line_selectedDistId.ToString()))
                            //{
                            //    Line_selectedDistId = 0;
                            //}
                            //if (string.IsNullOrEmpty(Line_discount.ToString()))
                            //{
                            //    Line_discount = 0;
                            //}

                            //if (string.IsNullOrEmpty(mobile_created_date))
                            //{
                            //    mobile_created_date = "0";
                            //}
                            try
                            {
                                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
                                {
                                    double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
                                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                                }
                                if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
                                {
                                    double Line_ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
                                    TimeSpan Line_time1 = TimeSpan.FromMilliseconds(Line_ticks1);
                                    DateTime Line_startdate1 = new DateTime(1970, 1, 1) + Line_time1;
                                    mobiletime = Line_startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                                    mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                                }
                                decimal discountamount = 0;
                                discountamount = (Line_amount * Line_discount) / Convert.ToDecimal(100);

                                str = "INSERT INTO dbo.temp_TransOrder1 ([OrdId],[VisId],[OrdDocId], [Sno], [UserId],[VDate],[SMID], [PartyId],[AreaId],[ItemId],[Qty],[Rate],[Remarks],[amount],[Android_Id],[android_id1],[Created_date],[cases],[unit],[Latitude],[Longitude],[Lat_long_datetime],[Mobile_Created_date],[DistId],[Discount],[BaseUnit],[BaseUnitQty],[PrimaryUnit],[PrimaryUnitQty],[SecondaryUnit],[SecondaryUnitQty],[PrimaryUnitConversion],[SecondaryUnitConversion],[DiscountType],[DiscountAmount],[MarginPercentage])  OUTPUT INSERTED.android_id1  " +
         " VALUES (" + OrdId + ", '" + OBJRESPONSE.BODYLINE[0].VISID + "', '" + orddocid + "', '" + Line_seqNo + "', '" + OBJRESPONSE.BODYLINE[0].USERID + "', '" + OBJRESPONSE.BODYLINE[0].VDATE + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , '" + OBJRESPONSE.BODYLINE[0].PARTYID + "', '" + OBJRESPONSE.BODYLINE[0].AREAID + "', " + Line_ItemId + ", " + Line_Qty + ", " + Line_Rate + ",'" + OBJRESPONSE.BODYLINE[0].REMARKS + "', " + Line_amount + ", '" + Line_Android_Id + "', '" + Line_Android_Id1 + "',DateAdd(minute,330,getutcdate())," + Convert.ToDecimal(Line_cases) + "," + Convert.ToDecimal(Line_unit) + ",'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + minDate1 + "','" + mobiletime + "'," + Line_selectedDistId + "," + Line_discount + ",'" + Line_BaseUnit + "'," + Line_BaseUnitQty + ",'" + Line_PrimaryUnit + "'," + Line_PrimaryUnitQty + ",'" + Line_SecondaryUnit + "'," + Line_SecondaryUnitQty + "," + Line_PrimaryUnitConversion + "," + Line_SecondaryUnitConversion + ",'" + Line_DiscountType + "'," + discountamount + "," + Line_MarginPercentage + ")";
                                createText += "" + "" + str + "" + Environment.NewLine;
                                string _output = DbConnectionDAL.GetStringScalarVal(str);
                                if (_output == Line_Android_Id1)
                                {
                                    Query = "select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS Milliseconds from temp_TransOrder1 where OrdDocId='" + orddocid + "' and itemid=" + Line_ItemId + " and OrdId=" + OrdId + "";

                                    createText += "" + "" + Query + "" + Environment.NewLine;
                                    Line_ms = DbConnectionDAL.GetStringScalarVal(Query);
                                    Line_Status = "200";
                                    LineMsz = "Successfully Inserted Itemid " + Line_ItemId;

                                }
                                else
                                {
                                    Line_Status = "400";
                                    LineMsz = "Error While Inserting ItemId " + Line_ItemId;
                                    Status = "400";
                                    HeaderMsz = HeaderMsz + " : " + LineMsz;
                                    createText += "" + "" + Line_Status + "" + LineMsz + "" + Status + "" + HeaderMsz + "" + Environment.NewLine;
                                }
                            }
                            catch (Exception ex)
                            {
                                Line_Status = "400";
                                LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();
                                Status = "400";
                                HeaderMsz = HeaderMsz + " : " + LineMsz;
                                createText += "" + "" + Line_Status + "" + LineMsz + "" + Status + "" + HeaderMsz + "" + Environment.NewLine;
                            }

                            #region SentNotification
                            try
                            {
                                if (Line_LastRecord == "Y" && Status == "200")
                                {
                                    if (OBJRESPONSE.BODYLINE[0].LINECOUNT == (Convert.ToInt32(Line_seqNo) + 1).ToString())
                                    {
                                        string displaytitle = ""; string title = "";

                                        createText += "" + "" + "Select Partyname From MastParty where PartyId=" + OBJRESPONSE.BODYLINE[0].PARTYID + "" + Environment.NewLine;
                                        string partyname = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Partyname From MastParty where PartyId=" + OBJRESPONSE.BODYLINE[0].PARTYID + ""));

                                        createText += "" + "" + "Select CompCode From MastEnviro" + "" + Environment.NewLine;
                                        string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));

                                        createText += "" + "" + "Select Created_date from temp_TransOrder1 where OrdId=" + OrdId + "" + Environment.NewLine;
                                        string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from temp_TransOrder1 where OrdId=" + OrdId + ""));

                                        createText += "" + "" + "Select SMID ,SMName ,userid from mastsalesrep where SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "" + Environment.NewLine;
                                        DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid from mastsalesrep where SMID=" + OBJRESPONSE.BODYLINE[0].SMID + "");

                                        if (dtgrpsmid.Rows.Count > 0)
                                        {

                                        }
                                        else
                                        {
                                            createText += "" + "" + "Select SMID ,SMName,userid from mastsalesrep where SMID==" + OBJRESPONSE.BODYLINE[0].SMID + "" + Environment.NewLine;
                                            dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName,userid from mastsalesrep where SMID==" + OBJRESPONSE.BODYLINE[0].SMID + "");
                                        }

                                        if (dtgrpsmid.Rows.Count > 0)
                                        {
                                            string pro_id = "RETORDDISCAN";
                                            string sql_getsenior = "select SMID,Mobile,userid from mastsalesrep where SMID in (select MainGrp from mastsalesrepgrp where SMID=" + dtgrpsmid.Rows[0]["SMID"].ToString() + " and Level<=(select level from mastsalesrepgrp where SMID=" + dtgrpsmid.Rows[0]["SMID"].ToString() + " and MainGrp=" + dtgrpsmid.Rows[0]["SMID"].ToString() + "))";
                                            createText += "" + "" + sql_getsenior + "" + Environment.NewLine;
                                            DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                                            if (dt_getsenior.Rows.Count > 0)
                                            {
                                                for (int k = 0; k < dt_getsenior.Rows.Count; k++)
                                                {
                                                    if (modifyorder == "Y")
                                                    {
                                                        displaytitle = orddocid.Replace("-", " ") + " -  Order Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                                        title = " Order Modified";
                                                    }
                                                    else
                                                    {
                                                        displaytitle = orddocid.Replace("-", " ") + " - New Order created by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                                        title = " New Order Created";
                                                    }

                                                    createText += "InsertTransNotification " + pro_id + "," + Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()) + "," + Convert.ToDateTime(createdatetime) + "," + "Retailerdispatchorderform.aspx?Docid=" + orddocid.Replace("-", " ") + "" + "," + displaytitle + "," + 0 + "," + Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()) + "," + Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()) + "," + Convert.ToInt32(dt_getsenior.Rows[k]["SMID"].ToString()) + Environment.NewLine;

                                                    lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + orddocid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), Convert.ToInt32(dt_getsenior.Rows[k]["SMID"].ToString()));

                                                    if (!string.IsNullOrEmpty(dt_getsenior.Rows[k]["mobile"].ToString()))
                                                    {
                                                        createText += "pushnotificationonorderdispatchcancel " + displaytitle + "," + compcode + "," + dt_getsenior.Rows[k]["mobile"].ToString() + "," + title + "," + dtgrpsmid.Rows[0]["SMID"].ToString() + "," + dtgrpsmid.Rows[0]["SMName"].ToString() + "," + "FFMS" + Environment.NewLine;

                                                        pushnotificationonorderdispatchcancel(displaytitle, compcode, dt_getsenior.Rows[k]["mobile"].ToString(), title, dtgrpsmid.Rows[0]["SMID"].ToString(), dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS");

                                                        createText += "pushnotificationonorderdispatchcancel " + displaytitle + "," + compcode + "," + dt_getsenior.Rows[k]["mobile"].ToString() + "," + title + "," + dtgrpsmid.Rows[0]["SMID"].ToString() + "," + dtgrpsmid.Rows[0]["SMName"].ToString() + "," + "CRM MANAGER" + Environment.NewLine;

                                                        pushnotificationonorderdispatchcancel(displaytitle, compcode, dt_getsenior.Rows[k]["mobile"].ToString(), title, dtgrpsmid.Rows[0]["SMID"].ToString(), dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER");
                                                    }
                                                }
                                            }
                                            dt_getsenior.Dispose();

                                            createText += "SELECT Mobile, UserId FROM MastParty WHERE PartyId = " + Line_selectedDistId + Environment.NewLine;
                                            DataTable dtdist = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT Mobile,  UserId FROM MastParty WHERE PartyId=" + Line_selectedDistId + "");
                                            if (dtdist.Rows.Count > 0)
                                            {
                                                createText += "InsertTransNotification " + pro_id + "," + Convert.ToInt32(dtdist.Rows[0]["UserId"].ToString()) + "," + Convert.ToDateTime(createdatetime) + "," + "Retailerdispatchorderform.aspx?Docid=" + orddocid.Replace("-", " ") + "" + "," + displaytitle + "," + 0 + "," + Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()) + "," + Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()) + "," + 0 + Environment.NewLine;

                                                lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dtdist.Rows[0]["UserId"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + orddocid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), 0);

                                                if (!string.IsNullOrEmpty(dtdist.Rows[0]["mobile"].ToString()))
                                                {
                                                    createText += "pushnotificationonorderdispatchcancel " + displaytitle + "," + compcode + "," + dtdist.Rows[0]["mobile"].ToString() + "," + "New Order Created" + "," + dtgrpsmid.Rows[0]["SMID"].ToString() + "," + dtgrpsmid.Rows[0]["SMName"].ToString() + "," + "GOLDIEE" + "," + orddocid + "," + partyname + Environment.NewLine;

                                                    pushnotificationonorderdispatchcancel(displaytitle, compcode, dtdist.Rows[0]["mobile"].ToString(), "New Order Created", dtgrpsmid.Rows[0]["SMID"].ToString(), dtgrpsmid.Rows[0]["SMName"].ToString(), "GOLDIEE", orddocid, partyname);
                                                }
                                            }
                                            dtdist.Dispose();

                                        }
                                        dtgrpsmid.Dispose();
                                    }
                                    else
                                    {

                                        //Line file mismatch
                                        Status = "400";
                                        HeaderMsz = HeaderMsz + " - Line File Mismatch : Header Line Count: " + OBJRESPONSE.BODYLINE[0].LINECOUNT + " and LineFileCount: " + (Convert.ToInt32(Line_seqNo) + 1).ToString();

                                        createText += "" + "" + Status + "" + HeaderMsz + Environment.NewLine;
                                    }
                                }

                            }
                            catch (Exception ex)
                            {
                                Line_Status = "200"; // status is set 200 becoz order is saved but exception in sending notification.
                                LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();

                                Status = "400";
                                HeaderMsz = HeaderMsz + " : " + LineMsz;

                                createText += "" + "" + Line_Status + "" + LineMsz + "" + Status + "" + HeaderMsz + Environment.NewLine;
                            }

                            #endregion

                            rst_line.Add(
                  new RetailerLineOrderResponse
                  {
                      ItemId = Line_ItemId.ToString(),
                      Ordid = OrdId.ToString(),
                      OrdDocid = orddocid,
                      MS = Line_ms,
                      Status = Line_Status,
                      Msz = LineMsz,
                      AndroidId_1 = Line_Android_Id1

                  }
           );
                        }
                    }
                    #endregion



                    /////////////////////////update potential

                    decimal potential = 0;
                    createText += "Select Isnull(Potential,0) From MastParty  WHERE PartyId = " + OBJRESPONSE.BODYLINE[0].PARTYID + Environment.NewLine;
                    potential = Convert.ToDecimal(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Isnull(Potential,0) From MastParty  WHERE PartyId = " + OBJRESPONSE.BODYLINE[0].PARTYID + ""));
                    if (OBJRESPONSE.BODYLINE[0].NETAMOUNT > potential)
                    {
                        createText += "UPDATE MastParty SET Potential = " + OBJRESPONSE.BODYLINE[0].NETAMOUNT + " WHERE PartyId = " + OBJRESPONSE.BODYLINE[0].PARTYID + Environment.NewLine;
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "UPDATE MastParty SET Potential = " + OBJRESPONSE.BODYLINE[0].NETAMOUNT + " WHERE PartyId = " + OBJRESPONSE.BODYLINE[0].PARTYID + "");
                    }

                    /////////////////////////updatepotential

                }
                string MS = "";
                try
                {
                    DataTable dtHeader = DbConnectionDAL.GetDataTable(CommandType.Text, HeaderMS_Query);
                    if (dtHeader.Rows.Count > 0)
                        MS = dtHeader.Rows[0]["Milliseconds"].ToString();
                    dtHeader.Dispose();
                }
                catch (Exception ex)
                {
                    HeaderMsz = HeaderMsz + "  : " + HeaderMsz;

                    createText += "" + "" + HeaderMsz + Environment.NewLine;
                }



                rstheader.Add(
                    new RetailerOrderResponse
                    {
                        ID = OrdId,
                        DOCUMENTID = orddocid,
                        MS = MS,
                        MODIFYORD = modifyorder,
                        STATUS = Status,
                        MSZ = HeaderMsz,
                        ANDROIDID = OBJRESPONSE.BODYLINE[0].ANDROID_ID,
                        RETAILERORDERLINERESPONSE = rst_line
                    }
                );

                //   createText += " @@@@@@   Providing Response To Android  @@@@@" + OrdId + ", " + orddocid + ", " + MS + ", " + modifyorder + ", " + Status + ", " + HeaderMsz + ", " + Android_Id + ", " + rst_line + "" + Environment.NewLine;
                createText += " @@@@@@   Providing Response To Android  @@@@@" + JsonConvert.SerializeObject(rstheader) + "" + Environment.NewLine;
            }
            catch (Exception ex)
            {
                createText += "@@@Exception in _JSInsertTransVisitDistWithImage_ @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
            }
            finally
            {
                bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_SaveRetailerOrder1_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }

            ///*b*/odyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(rstheader));

        }


        #endregion



        #endregion


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetDistributorOrderDetailByPODocID(string docid)
        {
            string str = "";
            DataTable Dt = new DataTable();
            str = "SELECT Replace(Convert(VARCHAR,dispatchcanceldatetime,106),' ','/')+' '+LEFT(Convert(VARCHAR,dispatchcanceldatetime,108),5) As dispatchcanceldatetime, isnull(MP1.PartyName,'') As Distributor,Isnull(UN.Name,'') As Doneby, MP.PartyName AS PartyName,Isnull(MP.Address1,'')+' '+Isnull(MP.Address2,'') AS Address , mi.ItemId as ItemId,t1.PODocId as DocId,mi.ItemName as ItemName,t1.Qty as OrderQty,t1.rate AS  rate,t1.Qty*t1.rate as OrderAmount,t.remarks,Replace(Convert(VARCHAR,t.vdate,106),' ','/') AS vdate,Isnull(t1.DispatchQty,0) As DispatchQty, (CASE WHEN Isnull(t.orderType,'P')='P' THEN 'Pending' WHEN Isnull(t.orderType,'P')='C'    THEN 'Cancelled' ELSE 'Dispatched' END) AS Status,t.DispatchRemarks As dispatchcancelremark FROM TransPurchOrder1 t1 left join TransPurchOrder t on t.PODocId=t1.PODocId left join MastParty MP on MP.PartyId=t.DistId left join mastitem mi on t1.ItemId = mi.ItemId  Left join (SELECT PartyName AS Name,userid FROM mastparty WHERE Isnull(userid,0)<>0 UNION SELECT EmpName AS Name,userid FROM MastSalesRep WHERE  Isnull(userid,0)<>0) UN on UN.userid=t.DispatchCancel_smid Left join mastParty MP1 on  MP1.PartyId=t1.DistId where t1.PODocId = '" + docid.Replace("-", " ") + "'";
            Dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            return JsonConvert.SerializeObject(Dt);
        }

        #region "Distributor Order Details"
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void GetDistributorOrderBySdID()
        {
            string str = "";
            string _SD_id, _FDate, _ToDate = "";
            string HeaderMsz = string.Empty;
            string Status = "400";
            List<DistributorResponse> dist = new List<DistributorResponse>();
            try
            {
                var request = HttpContext.Current.Request;
                var input = new StreamReader(HttpContext.Current.Request.InputStream);
                input.BaseStream.Seek(0, SeekOrigin.Begin);
                var inputtext = input.ReadToEnd();
                var inputresponse = JsonConvert.DeserializeObject<SuperDist>(inputtext);

                _SD_id = inputresponse.bodyline[0].SD_Id;
                _FDate = inputresponse.bodyline[0].FDate;
                _ToDate = inputresponse.bodyline[0].ToDate;

                str = "select mp.Partyid,mp.PartyName,mp.Mobile,ma.AreaName from mastparty as mp  left join MastArea as ma on mp.CityId=ma.AreaId  where ISNULL(mp.partydist,0)=1 and ma.AreaType='CITY' and  isnull(mp.sd_id,0) =" + _SD_id + "";
                DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

                for (int i = 0; i < dtordr.Rows.Count; i++)
                {
                    str = "select tpo.PODocId,tpo.VDate,case when isnull(TPO.SMID,0)=0 then mpDist.PartyName else mpSP.SMName end as OrdrTakenBy,case when isnull(TPO.orderType,'')='C' then 'Cancel' when isnull(TPO.orderType,'')='D' then 'Dispatch' else 'Pending' end as OrderStatus,isnull(TPO.DispatchRemarks,'') as DispatchRemarks  FROM TransPurchOrder as TPO left join MastSalesRep mpSP on tpo.SMID=mpSP.SMID left join MastParty as mpDist on  tpo.DistId=mpDist.Partyid where tpo.DistId=" + dtordr.Rows[i]["Partyid"].ToString() + "  and CAST(tpo.VDate as date) >= '" + Convert.ToDateTime(_FDate).ToString("yyyy-MM-dd") + "' and CAST(tpo.VDate as date) <= '" + Convert.ToDateTime(_ToDate).ToString("yyyy-MM-dd") + "' ";
                    DataTable dtdistordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                    if (dtdistordr.Rows.Count > 0)
                    {
                        HeaderMsz = "Successful";
                        Status = "200";

                        List<DistributorOrderDetailResponse> distOrder = new List<DistributorOrderDetailResponse>();

                        for (int j = 0; j < dtdistordr.Rows.Count; j++)
                        {

                            distOrder.Add(
                           new DistributorOrderDetailResponse
                           {
                               OrderDocId = dtdistordr.Rows[j]["PODocId"].ToString(),
                               OrderDateTime = Convert.ToDateTime(dtdistordr.Rows[j]["VDate"]).ToString("yyyy-MM-dd"),
                               OrderTakenBy = dtdistordr.Rows[j]["OrdrTakenBy"].ToString(),
                               OrderStatus = dtdistordr.Rows[j]["OrderStatus"].ToString(),
                               OrderRemark = dtdistordr.Rows[j]["DispatchRemarks"].ToString()

                           });

                        }

                        dist.Add(
                      new DistributorResponse
                      {
                          DistName = dtordr.Rows[i]["PartyName"].ToString(),
                          Mobile = dtordr.Rows[i]["Mobile"].ToString(),
                          City = dtordr.Rows[i]["AreaName"].ToString(),
                          Status = Status,
                          Msz = HeaderMsz,
                          DistributorOrderDetailResponse = distOrder
                      });
                    }

                }
            }
            catch (Exception ex)
            {
                Status = "400";
                HeaderMsz = ex.ToString();
                dist.Add(
                      new DistributorResponse
                      {
                          Status = Status,
                          Msz = HeaderMsz
                      });
            }

            Context.Response.Write(JsonConvert.SerializeObject(dist));

        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetDistributorOrderBySdID_New(string SD_ID, string FDATE, string TODATE)
        {
            string str = "", _qry = "";
            string _SD_id, _FDate, _ToDate = "";
            string HeaderMsz = string.Empty;
            string Status = "400";
            DataTable Dt = new DataTable();
            //    List<DistributorResponse> dist = new List<DistributorResponse>();
            try
            {
                //   var request = HttpContext.Current.Request;
                //var input = new StreamReader(HttpContext.Current.Request.InputStream);
                //input.BaseStream.Seek(0, SeekOrigin.Begin);
                //var inputtext = input.ReadToEnd();
                //var INPUTRESPONSE = JsonConvert.DeserializeObject<SuperDist>(inputtext);

                //_SD_id = INPUTRESPONSE.BODYLINE[0].SD_ID;
                //_FDate = INPUTRESPONSE.BODYLINE[0].FDATE;
                //_ToDate = INPUTRESPONSE.BODYLINE[0].TODATE;

                str = "select mp.partyid from mastparty as mp  left join MastArea as ma on mp.CityId=ma.AreaId  where ISNULL(mp.partydist,0)=1 and ma.AreaType='CITY' and  isnull(mp.sd_id,0) =" + SD_ID + "";


                _qry = "select Max(TPO.vdate) vdate, Replace(Convert(VARCHAR,Max(TPO.dispatchcanceldatetime),106),' ','/')+' '+LEFT(Convert(VARCHAR,Max(TPO.dispatchcanceldatetime),108),5) As dispatchcanceldatetime, Replace(Convert(VARCHAR,Max(TPO.Createddate),106),' ','/')+' '+LEFT(Convert(VARCHAR,Max(TPO.Createddate),108),5) As createddatetime, case when isnull(Max(TPO.SMID),0)=0 then Max(mpDist.PartyName) else Max(mpSP.SMName) end as OrdrTakenBy,Replace(Convert(VARCHAR,Max(TPO.Createddate),106),' ','/') AS orderdate1,tpo.PODocId AS Docid, Max(mpDist.PartyName) AS PartyName,Max(mpDist.PartyId) PartyId,Isnull(Max(mpDist.Address),'')+' '+Isnull(Max(mpDist.Address2),'') AS Address,Max(mpDist.Mobile) AS Mobile, Max(TPO.VDate) AS orderdate,Sum(TPO1.Qty) AS totalqty,Sum(TPO1.Qty*TPO1.Rate) AS totalamount,   Max(TPO.Distid) AS DistID ,Max(mpSP.SMID) SMID,Max(mpSP.SMName) SMName,Max(TPO.Remarks) Remarks,case when isnull(Max(TPO.orderType),'')='C' then 'Cancelled' when isnull(Max(TPO.orderType),'')='D' then 'Dispatched' else 'Pending' end as Status,isnull(Max(TPO.DispatchRemarks),'') as DispatchRemarks  FROM TransPurchOrder as TPO LEFT JOIN TransPurchOrder1 TPO1 ON TPO1.PODocId=TPO.PODocId left join MastSalesRep mpSP on tpo.SMID=mpSP.SMID left join MastParty as mpDist on  tpo.DistId=mpDist.PartyId where tpo.DistId in (" + str + ")  and CAST(tpo.vdate as date) >= '" + Convert.ToDateTime(FDATE).ToString("yyyy-MM-dd") + "' and CAST(tpo.vdate as date) <= '" + Convert.ToDateTime(TODATE).ToString("yyyy-MM-dd") + "' GROUP BY TPO.PODocId";
                Dt = DbConnectionDAL.GetDataTable(CommandType.Text, _qry);
                //DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

                //for (int i = 0; i < dtordr.Rows.Count; i++)
                //{
                //    str = "select tpo.PODocId,tpo.vdate,case when isnull(TPO.SMID,0)=0 then mpDist.PartyName else mpSP.SMName end as OrdrTakenBy,case when isnull(TPO.orderType,'')='C' then 'Cancel' when isnull(TPO.orderType,'')='D' then 'Dispatch' else 'Pending' end as OrderStatus,isnull(TPO.DispatchRemarks,'') as DispatchRemarks  FROM TransPurchOrder as TPO left join MastSalesRep mpSP on tpo.SMID=mpSP.SMID left join MastParty as mpDist on  tpo.DistId=mpDist.PartyId where tpo.DistId=" + dtordr.Rows[i]["PartyId"].ToString() + "  and CAST(tpo.vdate as date) >= '" + Convert.ToDateTime(_FDate).ToString("yyyy-MM-dd") + "' and CAST(tpo.vdate as date) <= '" + Convert.ToDateTime(_ToDate).ToString("yyyy-MM-dd") + "' ";
                //    DataTable dtdistordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                //    if (dtdistordr.Rows.Count > 0)
                //    {
                //        HeaderMsz = "Successful";
                //        Status = "200";

                //        List<DistributorOrderDetailResponse> distOrder = new List<DistributorOrderDetailResponse>();

                //        for (int j = 0; j < dtdistordr.Rows.Count; j++)
                //        {

                //            distOrder.Add(
                //           new DistributorOrderDetailResponse
                //           {
                //               OrderDocId = dtdistordr.Rows[j]["PODocId"].ToString(),
                //               OrderDateTime = Convert.ToDateTime(dtdistordr.Rows[j]["vdate"]).ToString("yyyy-MM-dd"),
                //               OrderTakenBy = dtdistordr.Rows[j]["OrdrTakenBy"].ToString(),
                //               OrderStatus = dtdistordr.Rows[j]["OrderStatus"].ToString(),
                //               OrderRemark = dtdistordr.Rows[j]["DispatchRemarks"].ToString()

                //           });

                //        }

                //        dist.Add(
                //      new DistributorResponse
                //      {
                //          DistName = dtordr.Rows[i]["PartyName"].ToString(),
                //          Mobile = dtordr.Rows[i]["Mobile"].ToString(),
                //          City = dtordr.Rows[i]["AreaName"].ToString(),
                //          Status = Status,
                //          Msz = HeaderMsz,
                //          DistributorOrderDetailResponse = distOrder
                //      });
                //    }

                //}
            }
            catch (Exception ex)
            {
                //Status = "400";
                //HeaderMsz = ex.ToString();
                //dist.Add(
                //      new DistributorResponse
                //      {
                //          Status = Status,
                //          Msz = HeaderMsz
                //      });
            }
            return JsonConvert.SerializeObject(Dt);

            //  Context.Response.Write(JsonConvert.SerializeObject(Dt));

        }

        public class SuperDistributor
        {

            public string SD_Id { get; set; }
            public string FDate { get; set; }
            public string ToDate { get; set; }

        }
        public class SuperDist
        {
            public List<SuperDistributor> bodyline;
        }

        public class DistributorResponse
        {
            [DataMember]
            public string DistName { get; set; }
            [DataMember]
            public string Mobile { get; set; }
            [DataMember]
            public string City { get; set; }
            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string Msz { get; set; }

            public List<DistributorOrderDetailResponse> DistributorOrderDetailResponse;
        }

        public class DistributorOrderDetailResponse
        {
            [DataMember]
            public string OrderDocId { get; set; }
            [DataMember]
            public string OrderDateTime { get; set; }
            [DataMember]
            public string OrderTakenBy { get; set; }
            [DataMember]
            public string OrderStatus { get; set; }
            [DataMember]
            public string OrderRemark { get; set; }
        }

        #endregion

        #region "Purchase Order Details"
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void GetPurchaseOrderDetailByPODocID()    //for update
        {
            string str = "";
            string _PODocID = "";
            string HeaderMsz = string.Empty;
            string Status = "400";
            List<PurchaseorderDetail> PurcOrder = new List<PurchaseorderDetail>();
            try
            {
                var request = HttpContext.Current.Request;
                var input = new StreamReader(HttpContext.Current.Request.InputStream);
                input.BaseStream.Seek(0, SeekOrigin.Begin);
                var inputtext = input.ReadToEnd();
                var inputresponse = JsonConvert.DeserializeObject<PurchaseID>(inputtext);

                _PODocID = inputresponse.BODYLINE[0].PODOCID;

                str = "select TPO.PODocId,isnull(mi.ItemName,'') as ItemName,TPO1.Qty,TPO1.Rate ,isnull(TPO1.Disc,0) as discount,'0.00' as PrimaryQnty,'0.00' as SecondryQnty, '' as PrimaryUnitConversionFactor,'' as SecondryUnitConversionFactor, case when isnull(TPO.orderType,'')='C' then 'Cancel' when isnull(TPO.orderType,'')='D' then 'Dispatch' else 'Pending' end as OrderStatus,isnull(TPO.DispatchRemarks,'') as DispatchRemarks,(select cast(sum(Qty*Rate) as numeric(18,2)) from TransPurchOrder1 where PODocId =TPO.PODocId) as orderValue   from TransPurchOrder TPO left join TransPurchOrder1 TPO1 on TPO.PODocId=TPO1.PODocId   left join MastItem as MI on TPO1.ItemId=mi.ItemId where mi.ItemType='ITEM' and  tpo.PODocId='" + _PODocID + "'";
                DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

                if (dtordr.Rows.Count > 0)
                {
                    for (int i = 0; i < dtordr.Rows.Count; i++)
                    {
                        HeaderMsz = "Successful";
                        Status = "200";
                        PurcOrder.Add(
                         new PurchaseorderDetail
                         {
                             OrderDocId = dtordr.Rows[i]["PODocId"].ToString(),
                             ItemName = dtordr.Rows[i]["ItemName"].ToString(),
                             ItemQnty = dtordr.Rows[i]["Qty"].ToString(),
                             ItemRate = dtordr.Rows[i]["Rate"].ToString(),
                             ItemDiscount = dtordr.Rows[i]["discount"].ToString(),
                             PrimaryQnty = dtordr.Rows[i]["PrimaryQnty"].ToString(),
                             SecondryQnty = dtordr.Rows[i]["SecondryQnty"].ToString(),
                             PrimaryUnitConversionFactor = dtordr.Rows[i]["PrimaryUnitConversionFactor"].ToString(),
                             SecondryUnitConversionFactor = dtordr.Rows[i]["SecondryUnitConversionFactor"].ToString(),
                             orderStatus = dtordr.Rows[i]["OrderStatus"].ToString(),
                             OrderRemark = dtordr.Rows[i]["DispatchRemarks"].ToString(),
                             orderValue = dtordr.Rows[i]["orderValue"].ToString(),
                             Status = Status,
                             Msz = HeaderMsz
                         });
                    }
                }
            }
            catch (Exception ex)
            {
                Status = "400";
                HeaderMsz = ex.ToString();
                PurcOrder.Add(
                 new PurchaseorderDetail
                 {
                     Status = Status,
                     Msz = HeaderMsz
                 });
            }
            Context.Response.Write(JsonConvert.SerializeObject(PurcOrder));

        }

        public class PurchaseOrderID
        {

            public string PODOCID { get; set; }


        }
        public class PurchaseID
        {
            public List<PurchaseOrderID> BODYLINE;
        }



        public class PurchaseorderDetail   // for update
        {
            [DataMember]
            public string OrderDocId { get; set; }
            [DataMember]
            public string ItemName { get; set; }
            [DataMember]
            public string ItemQnty { get; set; }
            [DataMember]
            public string ItemRate { get; set; }
            [DataMember]
            public string ItemDiscount { get; set; }
            [DataMember]
            public string PrimaryQnty { get; set; }
            [DataMember]
            public string SecondryQnty { get; set; }
            [DataMember]
            public string PrimaryUnitConversionFactor { get; set; }
            [DataMember]
            public string SecondryUnitConversionFactor { get; set; }
            [DataMember]
            public string orderStatus { get; set; }
            [DataMember]
            public string OrderRemark { get; set; }
            [DataMember]
            public string orderValue { get; set; }
            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string Msz { get; set; }

        }


        #endregion

        #region "Purchase Order Details in Excel"
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void GetPurchaseOrderDetailInExcelByPODocID()
        {
            string str = "";
            string _PODocID = "";
            string HeaderMsz = string.Empty;
            string Status = "400";
            string filepath = "";
            string _filepath = "";
            List<PurchaseOrderExcelPath> PurcExclPath = new List<PurchaseOrderExcelPath>();
            try
            {
                var request = HttpContext.Current.Request;
                var input = new StreamReader(HttpContext.Current.Request.InputStream);
                input.BaseStream.Seek(0, SeekOrigin.Begin);
                var inputtext = input.ReadToEnd();
                var inputresponse = JsonConvert.DeserializeObject<PurchaseDocID>(inputtext);

                _PODocID = inputresponse.BODYLINE[0].PODOCID;

                str = "select tpo.distid,tpo1.pordid,TPO.PODocId,mp.PartyName, cast(TPO.VDate as date) as vdate, TPO.Remarks,case when isnull(TPO.SMID,0)=0 then mp.PartyName else mpSP.SMName end as OrdrPlacedBy,mi.ItemName,TPO1.Qty,tpo1.Rate,(TPO1.Qty * tpo1.Rate) as amnt, case when isnull(TPO.orderType,'')='C' then 'Cancel' when isnull(TPO.orderType,'')='D' then 'Dispatch' else 'Pending' end as OrderStatus,isnull(TPO.DispatchRemarks,'') as DispatchRemarks  from TransPurchOrder TPO left join TransPurchOrder1 TPO1 on TPO.PODocId=TPO1.PODocId  left join MastParty as MP on TPO.DistId=mp.PartyId   left join  MastSalesRep mpSP on tpo.SMID=mpSP.SMID left join MastItem as mi on TPO1.ItemId=mi.ItemId where isnull(mp.PartyDist,0)=1 and ISNULL(mi.ItemType,'')='ITEM' AND   tpo.PODocId='" + _PODocID + "'";
                DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

                if (dtordr.Rows.Count > 0)
                {

                    string fileName = "PO_" + dtordr.Rows[0]["distid"].ToString() + "_" + Convert.ToDateTime(dtordr.Rows[0]["vdate"]).ToString("yyyyMMdd") + "_" + dtordr.Rows[0]["pordid"].ToString() + ".csv";


                    string headertext = "Docid : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["PODocId"].ToString() + "," + "DistributorName : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["PartyName"].ToString() + "," + "Date : ".TrimStart('"').TrimEnd('"') + "," + Convert.ToDateTime(dtordr.Rows[0]["vdate"]).ToString("yyyy-MM-dd");

                    StringBuilder sb = new StringBuilder();
                    sb.AppendLine(headertext);

                    headertext = "Order PlacedBy : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["OrdrPlacedBy"].ToString() + "," + "Remark : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["Remarks"].ToString() + ",";

                    sb.AppendLine(headertext);
                    // sb.AppendLine(System.Environment.NewLine);

                    if (dtordr.Rows[0]["OrderStatus"].ToString() == "Cancel")
                    {

                        headertext = " Order Status : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["OrderStatus"].ToString() + "," + "Cancel Remark : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["DispatchRemarks"].ToString();
                    }
                    else if (dtordr.Rows[0]["OrderStatus"].ToString() == "Dispatch")
                    {
                        headertext = " Order Status : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["OrderStatus"].ToString() + "," + "Dispatch Remark : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["DispatchRemarks"].ToString();
                    }
                    else
                    {
                        headertext = " Order Status : ".TrimStart('"').TrimEnd('"') + "," + dtordr.Rows[0]["OrderStatus"].ToString();
                    }

                    sb.AppendLine(headertext);
                    sb.AppendLine(System.Environment.NewLine);

                    headertext = "Item Name".TrimStart('"').TrimEnd('"') + "," + "Order Quantity".TrimStart('"').TrimEnd('"') + "," + "Rate".TrimStart('"').TrimEnd('"') + "," + "Order Amount".TrimStart('"').TrimEnd('"');

                    sb.Append(headertext);
                    sb.AppendLine(System.Environment.NewLine);

                    dtordr.Columns.Remove("distid");
                    dtordr.Columns.Remove("pordid");
                    dtordr.Columns.Remove("PODocId");
                    dtordr.Columns.Remove("PartyName");
                    dtordr.Columns.Remove("vdate");
                    dtordr.Columns.Remove("Remarks");
                    dtordr.Columns.Remove("OrdrPlacedBy");
                    dtordr.Columns.Remove("OrderStatus");
                    dtordr.Columns.Remove("DispatchRemarks");
                    dtordr.AcceptChanges();

                    for (int j = 0; j < dtordr.Rows.Count; j++)
                    {
                        for (int k = 0; k < dtordr.Columns.Count; k++)
                        {
                            if (dtordr.Rows[j][k].ToString().Contains(","))
                            {
                                sb.Append(string.Format("\"{0}\"", dtordr.Rows[j][k].ToString()) + ',');
                            }
                            else if (dtordr.Rows[j][k].ToString().Contains(System.Environment.NewLine))
                            {
                                sb.Append(string.Format("\"{0}\"", dtordr.Rows[j][k].ToString()) + ',');
                            }
                            else
                            {
                                sb.Append(dtordr.Rows[j][k].ToString() + ',');
                            }
                        }
                        sb.Append(Environment.NewLine);
                    }



                    str = "select sum(tpo1.Qty * tpo1.Rate) from TransPurchOrder TPO left join TransPurchOrder1 TPO1 on TPO.PODocId=TPO1.PODocId  where  tpo.PODocId='" + _PODocID + "'";
                    string TotSum = DbConnectionDAL.GetScalarValue(CommandType.Text, str).ToString();
                    string footertext = "".TrimStart('"').TrimEnd('"') + "," + "".TrimStart('"').TrimEnd('"') + "," + "Total : ".TrimStart('"').TrimEnd('"') + "," + TotSum.TrimStart('"').TrimEnd('"');
                    sb.Append(Environment.NewLine);
                    sb.Append(footertext);

                    filepath = string.Format("{0}/{1}", Server.MapPath("~/SalesInvoiceReport"), fileName);

                    if (System.IO.File.Exists(filepath))
                    {
                        System.IO.File.Delete(filepath);
                    }
                    File.WriteAllText(filepath, sb.ToString());

                    str = "select url from MastEnviro";
                    string url = DbConnectionDAL.GetScalarValue(CommandType.Text, str).ToString();
                    _filepath = "http://" + url + "/SalesInvoiceReport/" + fileName;

                    HeaderMsz = "Successful";
                    Status = "200";

                }

                else
                {
                    HeaderMsz = "No Record Found";
                    Status = "200";
                }


            }


            catch (Exception ex)
            {
                Status = "400";
                HeaderMsz = ex.ToString();
            }

            PurcExclPath.Add(
                        new PurchaseOrderExcelPath
                        {
                            FilePath = _filepath,
                            Status = Status,
                            Msz = HeaderMsz
                        });
            Context.Response.Write(JsonConvert.SerializeObject(PurcExclPath));

        }

        public class PurchaseOrderDocID
        {
            public string PODOCID { get; set; }
        }
        public class PurchaseDocID
        {
            public List<PurchaseOrderDocID> BODYLINE;
        }
        public class PurchaseOrderExcelPath
        {
            [DataMember]
            public string FilePath { get; set; }
            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string Msz { get; set; }

        }

        #endregion


        #region "Purchase Order Details Excel Delete"
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void DeletePurchaseOrderDetailExcelByPODocID()
        {
            string str = "";
            string _PODocID = "";
            string HeaderMsz = string.Empty;
            string Status = "400";

            List<PurchaseOrderExcelDeleteMSG> PurcExclMsg = new List<PurchaseOrderExcelDeleteMSG>();
            try
            {
                var request = HttpContext.Current.Request;
                var input = new StreamReader(HttpContext.Current.Request.InputStream);
                input.BaseStream.Seek(0, SeekOrigin.Begin);
                var inputtext = input.ReadToEnd();
                var inputresponse = JsonConvert.DeserializeObject<PurcDocID>(inputtext);

                _PODocID = inputresponse.BODYLINE[0].PODOCID;

                str = "select tpo.distid,tpo1.pordid, cast(TPO.VDate as date) as vdate from TransPurchOrder TPO left join TransPurchOrder1 TPO1 on TPO.PODocId=TPO1.PODocId  where  tpo.PODocId='" + _PODocID + "'";
                DataTable dtordr = DbConnectionDAL.GetDataTable(CommandType.Text, str);

                if (dtordr.Rows.Count > 0)
                {

                    string fileName = "PO_" + dtordr.Rows[0]["distid"].ToString() + "_" + Convert.ToDateTime(dtordr.Rows[0]["vdate"]).ToString("yyyyMMdd") + "_" + dtordr.Rows[0]["pordid"].ToString() + ".csv";

                    string filepath = string.Format("{0}/{1}", Server.MapPath("~/SalesInvoiceReport"), fileName);

                    if (System.IO.File.Exists(filepath))
                    {
                        System.IO.File.Delete(filepath);

                        HeaderMsz = "Successfully Deleted ";
                        Status = "200";
                    }
                    else
                    {
                        HeaderMsz = "No file found for " + _PODocID + " DocId ";
                        Status = "200";
                    }

                }
                else
                {
                    HeaderMsz = "No Record Found";
                    Status = "200";
                }


            }

            catch (Exception ex)
            {
                Status = "400";
                HeaderMsz = ex.ToString();
            }

            PurcExclMsg.Add(
                new PurchaseOrderExcelDeleteMSG
                {

                    Status = Status,
                    Msz = HeaderMsz
                });

            Context.Response.Write(JsonConvert.SerializeObject(PurcExclMsg));

        }

        public class PurchaseOrdrDocID
        {
            public string PODOCID { get; set; }
        }
        public class PurcDocID
        {
            public List<PurchaseOrdrDocID> BODYLINE;
        }
        public class PurchaseOrderExcelDeleteMSG
        {

            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string Msz { get; set; }

        }

        #endregion

        private void pushnotificationforEndVisit(string SMID, string visid)
        {
            try
            {
                string str = "";
                string _compcode, _msg = "";
                string retval = "";
                string pro_id = "ENDVISIT";
                string _SrSmid, _SMID = ""; string _FrTime = "", _toTime = ""; string _vdate = ""; string _SrMobile, _frMobile = ""; string _srUserid = ""; string _Smname = ""; string _FromUserId = "", _msgurl = "";
                DataTable dt;

                str = "select CompCode from MastEnviro";
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    _compcode = dt.Rows[0]["CompCode"].ToString();

                }
                else
                {
                    return;
                }

                str = "select SMID,frTime1,toTime1,VDate from transvisit where VisId=" + visid + " AND SMID=" + SMID + "";
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                if (dt.Rows.Count > 0)
                {
                    _SMID = dt.Rows[0]["SMID"].ToString();
                    _toTime = dt.Rows[0]["toTime1"].ToString();
                    _FrTime = dt.Rows[0]["frTime1"].ToString();
                    _vdate = Convert.ToDateTime(dt.Rows[0]["VDate"]).ToString("dd-MMM-yyyy");

                    str = "select ms.SMName,ms.Mobile,ms.UserId,mSenior.SMID as SeniorSmid,mSenior.Mobile as SeniorMobile,mSenior.UserId as SeniorUserid from MastSalesRep ms left join MastSalesRep mSenior on ms.UnderId=mSenior.SMID where ms.SMID=" + _SMID;
                    dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                    if (dt.Rows.Count > 0)
                    {
                        _frMobile = "  (" + dt.Rows[0]["Mobile"].ToString().Trim() + ")";
                        _Smname = dt.Rows[0]["SMName"].ToString().Trim();
                        _SrMobile = dt.Rows[0]["SeniorMobile"].ToString().Trim();
                        _srUserid = dt.Rows[0]["SeniorUserid"].ToString().Trim();
                        _SrSmid = dt.Rows[0]["SeniorSmid"].ToString().Trim();
                        _FromUserId = dt.Rows[0]["UserId"].ToString().Trim();

                        _msg = _Smname + _frMobile + "  has locked his DSR,last entry time is of  " + _vdate + " at " + _toTime;
                        _msgurl = "DSREntryForm.aspx?SMID=" + _SMID + "&p_name=" + _Smname + "&fdate=" + _vdate;
                        str = " INSERT INTO TransNotification ([pro_id],[userid],[VDate],[msgURL],[displayTitle],[Status],[FromUserId],[SMID],[ToSMid]) output inserted.NotiId values ('" + pro_id + "'," + Convert.ToInt32(_srUserid) + ",getdate(),'" + _msgurl + "','" + _msg + "','" + 0 + "'," + Convert.ToInt32(_FromUserId) + "," + _SMID + "," + _SrSmid + ") ";
                        retval = DbConnectionDAL.GetStringScalarVal(str);
                        if (!string.IsNullOrEmpty(retval))
                        {
                            pushnotificationonEndVisit(_srUserid, _msg, _compcode, _SrMobile, "Regarding End Visit", _SMID, _Smname, "CRM MANAGER");
                        }


                    }
                }


            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }


        }


        public string pushnotificationonEndVisit(string userid, string msg, string compcode, string mobileno, string title, string createdbysmid, string smname, string ProductType)
        {
            var result = "-1";
            DataTable dt = new DataTable();
            string serverKey = "";
            string senderId = "";
            DataTable dtserverdetail = new DataTable();

            try
            {

                dtserverdetail = DbConnectionDAL.GetDataTable(CommandType.Text, "Select DistApp_FireBase_ServerKey,DistApp_FireBase_SenderID,ManagerApp_FireBase_ServerKey,ManagerApp_FireBase_SenderID from Mastenviro ");

                string regid_query = "select Reg_id  from LineMaster where  Upper(Product)='" + ProductType + "' and CompCode='" + compcode + "' and mobile='" + mobileno + "'";
                string constrDmLicense = "data source=103.231.40.154,1565; user id=dmlicense_user; pwd=SaG@e321; initial catalog=dmlicense;";
                string Query1 = "";

                SqlConnection cn = new SqlConnection(constrDmLicense);
                SqlCommand cmd = new SqlCommand(regid_query, cn);

                cmd.CommandType = CommandType.Text;

                cn.Open();
                string regId = cmd.ExecuteScalar() as string;

                // regId = "fO0VQXCZf1g:APA91bFmByRKmUxUD9Rjbo2Nfhu2L4X_rHTTr0jJUsG10R4KlK92HOIqyzmpGdNfK7kvcJbgtXP1CR2yz_aQtklujKAtlLrtWpPZ0ekOqfsp-R2kdtkSn9qJ3gQhtPyD7_3NbVxDwTwN"; 

                cn.Close();
                cmd = null;
                if (dtserverdetail.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(regId))
                    {

                        Query1 = "insert into TransPushNotification(SMID,[Subject],Content,WebFlag) output inserted.id " +
                            "values (" + userid + ",'" + title + "','" + msg + "','Y')";
                        string Id = DbConnectionDAL.GetStringScalarVal(Query1);

                        if (ProductType == "GOLDIEE")
                        {
                            serverKey = dtserverdetail.Rows[0]["DistApp_FireBase_ServerKey"].ToString();
                            senderId = dtserverdetail.Rows[0]["DistApp_FireBase_SenderID"].ToString();
                        }
                        //else if (ProductType == "GOLDIEE SALES")
                        //{
                        //  serverKey = dtserverdetail.Rows[0]["MktApp_FireBase_ServerKey"].ToString();
                        //senderId = dtserverdetail.Rows[0]["MktApp_FireBase_SenderID"].ToString();
                        //}
                        else if (ProductType == "CRM MANAGER")
                        {
                            serverKey = dtserverdetail.Rows[0]["ManagerApp_FireBase_ServerKey"].ToString();
                            senderId = dtserverdetail.Rows[0]["ManagerApp_FireBase_SenderID"].ToString();
                        }



                        string webAddr = "https://fcm.googleapis.com/fcm/send";

                        var tRequest = (HttpWebRequest)WebRequest.Create(webAddr);
                        tRequest.ContentType = "application/json";
                        tRequest.Headers.Add(string.Format("Authorization: key={0}", serverKey));
                        tRequest.Headers.Add(string.Format("Sender: id={0}", senderId));

                        tRequest.Method = "POST";

                        var payload = new
                        {
                            to = regId,
                            priority = "high",
                            content_available = true,

                            data = new
                            {
                                body = msg,
                                title = title,
                                msg = msg,
                                SMID = createdbysmid,
                                smname = smname
                            }
                        };



                        var serializer = new JavaScriptSerializer();
                        using (var streamWriter = new StreamWriter(tRequest.GetRequestStream()))
                        {
                            string json = serializer.Serialize(payload);
                            streamWriter.Write(json);
                            streamWriter.Flush();
                        }

                        var httpResponse = (HttpWebResponse)tRequest.GetResponse();
                        using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                        {
                            result = streamReader.ReadToEnd();

                            Query1 = "update TransPushNotification set serverresponse='" + result + "' where id=" + Id + "";
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                result = "N";
            }

            return result;
        }




        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetDistributorStock()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            string minDate = OBJRESPONSE.BODY[0].MINDATE;
            string DistId = OBJRESPONSE.BODY[0].DISTID;
            string FromDate = OBJRESPONSE.BODY[0].FROMDATE;
            string ToDate = OBJRESPONSE.BODY[0].TODATE;

            double ticks = double.Parse(minDate);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");

            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(minDate) > 0)
            { MQry = " WHERE  T.[MILLISECONDS] >='" + minDate + "'"; }

            Query = "SELECT  TOP " + NoOfRec + " ITEMID, QTY AVAILABLEQTY,CREATED_DATE, [MILLISECONDS] MS FROM (SELECT ITEMID,QTY,CREATED_DATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS [MILLISECONDS] FROM TEMP_TRANSDISTSTOCK WHERE DISTID=" + DistId + " AND VDATE BETWEEN '" + FromDate + "' and '" + ToDate + "' UNION ALL SELECT ITEMID,QTY,CREATED_DATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS [MILLISECONDS] FROM TRANSDISTSTOCK WHERE DISTID=" + DistId + " AND VDATE BETWEEN '" + FromDate + "' AND '" + ToDate + "') AS  T  " + MQry + "  ORDER BY T.CREATED_DATE ";

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<DistStockList> rst = new List<DistStockList>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new DistStockList
            //        {
            //            itemid = dt.Rows[i]["ItemId"].ToString(),
            //            availableQty = dt.Rows[i]["Qty"].ToString(),
            //            MS = dt.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

       


        /// <summary>
        /// Block Party request from App
        /// </summary>
        /// <param name="Isblock"></param>
        /// <param name="AppBlockStatus"></param>
        /// <param name="SMID"></param>
        /// <param name="userid"></param>
        /// <param name="BlockReason"></param>
        /// <param name="PartyId"></param>
        /// 
        [DataContract]
        public class Result
        {
            [DataMember]
            public string msg { get; set; }
        }

        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void FFMSApp_BlockParty_V2()
        //{

        //    var httprequest = HttpContext.Current.Request;
        //    var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
        //    DataTable DTadmin = new DataTable();
        //    bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //    var bodyText = bodyStream.ReadToEnd();
        //    var OBJRESPONSE = JsonConvert.DeserializeObject<BlockPartyUp_V2>(bodyText);

        //    bool Isblock = OBJRESPONSE.Isblock;
        //    string AppBlockStatus = OBJRESPONSE.AppBlockStatus;
        //    int SMID = OBJRESPONSE.SMID;
        //    int userid = OBJRESPONSE.userid;
        //    string BlockReason = OBJRESPONSE.BlockReason;
        //    int PartyId = OBJRESPONSE.PartyId;
        //    Result rs = new Result();

        //    Common cls = new Common();
        //    #region SentNotificationforblock
        //    try
        //    {

        //        if (PartyId != 0 && AppBlockStatus.ToUpper() == "PENDING")
        //        {
        //            string sql = "update mastparty set Isblock='" + Isblock + "',BlockReason='" + BlockReason + "',AppBlockStatus='" + AppBlockStatus + "' where partyid=" + PartyId + " ";
        //            if (DbConnectionDAL.ExecuteQuery(sql) == 1)
        //            {

        //            }
        //            string displaytitle = ""; string title = "";
        //            string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
        //            string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from MastParty where Partyid=" + PartyId + ""));
        //            DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid,UnderId from mastsalesrep where userid=" + userid + "");
        //            string PartyName = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select PartyName from MastParty where Partyid=" + PartyId + ""));

        //            if (dtgrpsmid.Rows.Count > 0)
        //            {
        //                string pro_id = "PARTYBAPPROVED";
        //                string sql_getsenior = "select SMID,Mobile,userid from mastsalesrep where SMName<>'.'  and  SMID in (select MainGrp from mastsalesrepgrp where SMID=" + dtgrpsmid.Rows[0]["SMID"].ToString() + " and Level<(select level from mastsalesrepgrp where SMID=" + dtgrpsmid.Rows[0]["SMID"].ToString() + " and MainGrp=" + dtgrpsmid.Rows[0]["SMID"].ToString() + "))";
        //                DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
        //                if (dt_getsenior.Rows.Count > 0)
        //                {
        //                    for (int k = 0; k < dt_getsenior.Rows.Count; k++)
        //                    {

        //                        //if (PartyId != 0)
        //                        //{
        //                        //    displaytitle = PartyName + " -  Party Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
        //                        //    title = " Party Modified";
        //                        //}
        //                        //else
        //                        //{
        //                        displaytitle = PartyName.Replace("'", "''") + " - Outlet Blocked by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
        //                        title = "  Outlet Blocked";
        //                        //}


        //                        lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()), Convert.ToDateTime(createdatetime), "PartyMasterAstral.aspx?PartyId=" + PartyId + "&REQ=PRB", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), Convert.ToInt32(dt_getsenior.Rows[k]["SMID"].ToString()));

        //                        if (!string.IsNullOrEmpty(dt_getsenior.Rows[k]["mobile"].ToString()))
        //                        {



        //                            cls.pushnotificationforPartyCreation(displaytitle, compcode,
        //                                dt_getsenior.Rows[k]["mobile"].ToString(),
        //                              title, dtgrpsmid.Rows[0]["SMID"].ToString(),
        //                                dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS", PartyId.ToString());

        //                            cls.pushnotificationforPartyCreation(displaytitle, compcode,
        //                               dt_getsenior.Rows[k]["mobile"].ToString(),
        //                              title, dtgrpsmid.Rows[0]["SMID"].ToString(),
        //                               dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER", PartyId.ToString());
        //                        }
        //                    }
        //                }



        //            }

        //        }
        //        else
        //        {

        //            //Line file mismatch
        //            //Status = "400";
        //            // HeaderMsz = HeaderMsz + " - Line File Mismatch : Header Line Count: " + HeaderLineCOunt + " and LineFileCount: " + (Convert.ToInt32(Line_seqNo) + 1).ToString();
        //        }

        //        rs.msg = "Y";
        //    }
        //    catch (Exception ex)
        //    {
        //        rs.msg = "N";
        //    }

        //    #endregion

        //    Context.Response.Write(JsonConvert.SerializeObject(rs));

        //}
        /// <summary>
        /// Use by Manager app to get count of pending party those are not approved or reject by manager
        /// </summary>
        /// <param name="SMID"></param>
       
        /// <summary>
        /// Use by Manager app to get list of party those are not approved or reject by manager
        /// </summary>

        /// <param name="SMID"></param>
    

        /// <summary>
        /// Get Party detail in Manager app using Partyid
        /// </summary>
        /// <param name="Partyid"></param>
      

        


        #region LeaveCheckForStartVisit

        //[DataContract]
        //public class LeaveCheckForStartVisit_Response
        //{
        //    [DataMember]
        //    public string Status { get; set; }
        //    [DataMember]
        //    public string Headermsz { get; set; }
        //    [DataMember]
        //    public string LeaveType { get; set; }

        //}

        //[WebMethod]
        //public void LeaveCheckForStartVisit_V2()
        //{

        //    #region "Variable Declaration"

        //    string str = "";
        //    DataTable dt;
        //    string LeaveType = "N";
        //    string status = "400", HeaderMsg = "";

        //    List<LeaveCheckForStartVisit_Response> rst = new List<LeaveCheckForStartVisit_Response>();

        //  //  var httprequest = HttpContext.Current.Request;
        //    var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
        //   // DataTable DTadmin = new DataTable();
        //    bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //    var bodyText = bodyStream.ReadToEnd();
        //    var OBJRESPONSE = JsonConvert.DeserializeObject<UserDetailList_V2>(bodyText);

        //    string SMID = OBJRESPONSE.SMID;
        //    string LDate = OBJRESPONSE.DATE;

        //    #endregion

        //    if (!string.IsNullOrEmpty(SMID) && SMID != "0")
        //    {
        //        if (!string.IsNullOrEmpty(LDate) && LDate != "")
        //        {

        //            try
        //            {
        //                //str = "select LVRQId from  TransLeaveRequest where SMID=" + SMID + "  AND  ISNULL(appstatus,'')='Approve' and  REPLACE(CONVERT(varchar,fromdate,106),' ','/')<='" + LDate + "' and  REPLACE(CONVERT(varchar,ToDate,106),' ','/')>='" + LDate + "' ";


        //                str = "select LVRQId from  TransLeaveRequest where SMID=" + SMID + "  AND  ISNULL(appstatus,'')='Approve' and  fromdate<='" + LDate + "' and  ToDate>='" + LDate + "' ";
        //                dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
        //                if (dt.Rows.Count > 0)
        //                {
        //                    status = "200";
        //                    HeaderMsg = "SuccessFull";
        //                    LeaveType = "Y";

        //                }
        //                else
        //                {
        //                    status = "200";
        //                    HeaderMsg = "No Leave Found";
        //                    LeaveType = "N";
        //                }
        //            }
        //            catch (Exception ex)
        //            {
        //                status = "400";
        //                HeaderMsg = ex.ToString();
        //                LeaveType = "N";
        //            }
        //        }
        //        else
        //        {
        //            status = "400";
        //            HeaderMsg = "Date is not Found.";
        //            LeaveType = "N";
        //        }
        //    }
        //    else
        //    {
        //        status = "400";
        //        HeaderMsg = "SalesPerson is not Found.";
        //        LeaveType = "N";
        //    }


        //    bodyStream.Dispose();
        //    rst.Add(new LeaveCheckForStartVisit_Response
        //    {
        //        Status = status,
        //        Headermsz = HeaderMsg,
        //        LeaveType = LeaveType
        //    });
        //    Context.Response.Write(JsonConvert.SerializeObject(rst));


        //}


        #endregion



        #region InsertDSR

        /// <summary>
        /// For Insert DSR ,start visit ,end visit. and if USer is absent then he has option of week Off,Holiday,Absent.
        /// Developed by Akanksha Bais 
        /// Date:-28-01-2021
        /// </summary>
        /// <param name="Userid"></param>
        /// <param name="VDate"></param>
        /// <param name="NextVisitDate"></param>
        /// <param name="Remarks"></param>
        /// <param name="SMID"></param>
        /// <param name="frmtime1"></param>
        /// <param name="toTime1"></param>
        /// <param name="withuserid"></param>
        /// <param name="modeoftransport"></param>
        /// <param name="vehicleused"></param>
        /// <param name="Lock"></param>
        /// <param name="nwithuserid"></param>
        /// <param name="android_id"></param>
        /// <param name="cityids"></param>
        /// <param name="cityname"></param>
        /// <param name="orderamountmail"></param>
        /// <param name="orderamountphone"></param>
        /// <param name="visitcode"></param>
        /// <param name="Attendance"></param>
        /// <param name="Fromareacode"></param>
        /// <param name="OtherExpense"></param>
        /// <param name="AndroidAppRemark"></param>
        /// <param name="toareacode"></param>
        /// <param name="ncityid"></param>
        /// <param name="longitude"></param>
        /// <param name="latitude"></param>
        /// <param name="lat_long_dt"></param>
        /// <param name="mobile_created_date"></param>
        /// <param name="Endlongitude"></param>
        /// <param name="Endlatitude"></param>
        /// <param name="Endlat_long_dt"></param>
        /// <param name="mobile_End_date"></param>
        /// <param name="EndRemark"></param>
        /// <param name="Off_Type"></param> for WeekOff,Holiday,absent       
        /// <param name="Tran_Type"></param> refers to which trype of DSR will be inserted. S-Start visit,E-End Visit, O- Week Off,holiday,absent
        /// 





        //[DataContract]
        //public class Visit_V2
        //{
        //    [DataMember]
        //    public string Id { get; set; }
        //    [DataMember]
        //    public string DocumentId { get; set; }
        //    [DataMember]
        //    public string MS { get; set; }
        //    [DataMember]
        //    public string Modifyord { get; set; }

        //}



        /// <summary>
        /// //////////////////////////Added by Akansha Dated-08022021
        /// </summary>

        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void JSInsertTransVisit_V2()
        //{
        //    string createText = "";
        //   // var httpRequest = HttpContext.Current.Request;
        //    var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

        //    bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //    var bodyText = bodyStream.ReadToEnd();
        //    //     string items = httpRequest.Params["orderdetail"].ToString();

        //    var OBJRESPONSE = JsonConvert.DeserializeObject<disList_V2>(bodyText);

        //    //////////////comment for optimization
        //    //int Userid = OBJRESPONSE.BODYLINE[0].USERID;
        //    //string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
        //    //string NextVisitDate = OBJRESPONSE.BODYLINE[0].NEXTVISITDATE;
        //    //string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
        //    //int SMID = OBJRESPONSE.BODYLINE[0].SMID;
        //    //string frmtime1 = OBJRESPONSE.BODYLINE[0].frmtime1;
        //    //string toTime1 = OBJRESPONSE.BODYLINE[0].toTime1;
        //    //int withuserid = OBJRESPONSE.BODYLINE[0].withuserid;
        //    //string modeoftransport = OBJRESPONSE.BODYLINE[0].modeoftransport;
        //    //string vehicleused = OBJRESPONSE.BODYLINE[0].vehicleused;
        //    //int Lock = OBJRESPONSE.BODYLINE[0].LOCK;
        //    //int nwithuserid = OBJRESPONSE.BODYLINE[0].nwithuserid;
        //    //string android_id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
        //    //string cityids = OBJRESPONSE.BODYLINE[0].cityids;
        //    //string cityname = OBJRESPONSE.BODYLINE[0].cityname;
        //    //decimal orderamountmail = OBJRESPONSE.BODYLINE[0].orderamountmail;
        //    //decimal orderamountphone = OBJRESPONSE.BODYLINE[0].orderamountphone;
        //    //string visitcode = OBJRESPONSE.BODYLINE[0].visitcode;
        //    //decimal Attendance = OBJRESPONSE.BODYLINE[0].Attendance;
        //    //int Fromareacode = OBJRESPONSE.BODYLINE[0].Fromareacode;
        //    //decimal OtherExpense = OBJRESPONSE.BODYLINE[0].OtherExpense;
        //    //string AndroidAppRemark = OBJRESPONSE.BODYLINE[0].AndroidAppRemark;
        //    //int toareacode = OBJRESPONSE.BODYLINE[0].toareacode;
        //    //int ncityid = OBJRESPONSE.BODYLINE[0].ncityid;
        //    //string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
        //    //string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
        //    //string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
        //    //string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;

        //    //string Off_Type = OBJRESPONSE.BODYLINE[0].Off_Type;
        //    //string Endlongitude = OBJRESPONSE.BODYLINE[0].Endlongitude;
        //    //string Endlatitude = OBJRESPONSE.BODYLINE[0].Endlatitude;
        //    //string Endlat_long_dt = OBJRESPONSE.BODYLINE[0].Endlat_long_dt;
        //    //string mobile_End_date = OBJRESPONSE.BODYLINE[0].mobile_End_date;
        //    //string EndRemark = OBJRESPONSE.BODYLINE[0].EndRemark;
        //    //string Tran_Type = OBJRESPONSE.BODYLINE[0].Tran_Type;
        //    //////////////comment for optimization
        //    //List<Visit_V2> rst = new List<Visit_V2>();

        //    if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].Tran_Type) || OBJRESPONSE.BODYLINE[0].Tran_Type.Trim() == "")
        //    {
        //        string[] tran = new string[0];
        //        Context.Response.Write(JsonConvert.SerializeObject(tran));
        //        return;
        //    }
        //    createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
        //    createText += "" + OBJRESPONSE.BODYLINE[0].USERID + "," + OBJRESPONSE.BODYLINE[0].VDATE + "," + OBJRESPONSE.BODYLINE[0].NEXTVISITDATE + "," + OBJRESPONSE.BODYLINE[0].REMARKS + "," + OBJRESPONSE.BODYLINE[0].SMID + "," + OBJRESPONSE.BODYLINE[0].frmtime1 + "," + OBJRESPONSE.BODYLINE[0].toTime1 + "," + OBJRESPONSE.BODYLINE[0].withuserid + "," + OBJRESPONSE.BODYLINE[0].modeoftransport + "," + OBJRESPONSE.BODYLINE[0].vehicleused + "," + OBJRESPONSE.BODYLINE[0].LOCK + "," + OBJRESPONSE.BODYLINE[0].nwithuserid + "," + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "," + OBJRESPONSE.BODYLINE[0].cityids + "," + OBJRESPONSE.BODYLINE[0].cityname + ", " + OBJRESPONSE.BODYLINE[0].orderamountmail + "," + OBJRESPONSE.BODYLINE[0].orderamountphone + "," + OBJRESPONSE.BODYLINE[0].visitcode + "," + OBJRESPONSE.BODYLINE[0].Attendance + ", " + OBJRESPONSE.BODYLINE[0].Fromareacode + ", " + OBJRESPONSE.BODYLINE[0].OtherExpense + ", " + OBJRESPONSE.BODYLINE[0].AndroidAppRemark + ", " + OBJRESPONSE.BODYLINE[0].toareacode + ", " + OBJRESPONSE.BODYLINE[0].ncityid + ", " + OBJRESPONSE.BODYLINE[0].LONGITUDE + ", " + OBJRESPONSE.BODYLINE[0].LATITUDE + ", " + OBJRESPONSE.BODYLINE[0].LAT_LONG_DT + ", " + OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE + ", " + OBJRESPONSE.BODYLINE[0].Endlongitude + ", " + OBJRESPONSE.BODYLINE[0].Endlatitude + ", " + OBJRESPONSE.BODYLINE[0].Endlat_long_dt + ", " + OBJRESPONSE.BODYLINE[0].mobile_End_date + ", " + OBJRESPONSE.BODYLINE[0].EndRemark + "" + Environment.NewLine;




        //    int exists = 0;
        //    string minDate1 = "", mobiletime = "", minDate2 = "", EndMobileTime = "", endAddress = "", endUpdate = "null,null,null,null,null,null";
        //    if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT))
        //    {
        //        double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].LAT_LONG_DT);
        //        TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //        DateTime startdate = new DateTime(1970, 1, 1) + time;
        //        minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }

        //    if (OBJRESPONSE.BODYLINE[0].Tran_Type == "E")
        //    {
        //        if (string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].Endlat_long_dt) || OBJRESPONSE.BODYLINE[0].Endlat_long_dt == "")
        //        {
        //            double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].mobile_End_date);
        //            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //            DateTime startdate = new DateTime(1970, 1, 1) + time;
        //            minDate2 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //        }

        //    }

        //    if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].Endlat_long_dt))
        //    {
        //        double ticks = double.Parse(OBJRESPONSE.BODYLINE[0].Endlat_long_dt);
        //        TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //        DateTime startdate = new DateTime(1970, 1, 1) + time;
        //        minDate2 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }



        //    if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE))
        //    {
        //        double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE);
        //        TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
        //        DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
        //        mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }
        //    if (!string.IsNullOrEmpty(OBJRESPONSE.BODYLINE[0].mobile_End_date))
        //    {
        //        double ticks1 = double.Parse(OBJRESPONSE.BODYLINE[0].mobile_End_date);
        //        TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
        //        DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
        //        EndMobileTime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }

        //    string id = "0"; string documentid = "0";
        //    string Millisecond = "";

        //    //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
        //    string Address = "";
        //    //if (latitude != "")
        //    //{
        //    //    Address = DMT.InsertAddress(latitude, longitude);
        //    //}

        //    //if (Endlatitude != "")
        //    //{
        //    //    endAddress = DMT.InsertAddress(Endlatitude, Endlongitude);
        //    //}
        //    DataTable dtvisit = new DataTable();
        //    try
        //    {
        //        //Query = "select *  from TransVisit  where VDate='" + VDate + "' and SMID=" + SMID + " ";
        //        Query = "select visid,VisitDocId,cityids,cityname,appstatus,isnull(dsr_type,'') dsr_type from TransVisit  where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " ";
        //        createText += " @@@@@@  Select to table   @@@@@" + Query + "" + Environment.NewLine;
        //        DataTable dtdsr = DbConnectionDAL.getFromDataTable(Query);
        //        if (dtdsr.Rows.Count > 0)
        //        {
        //            exists = Convert.ToInt32(dtdsr.Rows[0]["visid"].ToString());
        //            if (exists > 0)
        //            {
        //                string appstat = ""; string getcityidsfromweb = ""; string getcitynamessfromweb = "";

        //                documentid = dtdsr.Rows[0]["VisitDocId"].ToString();


        //                if (dtdsr.Rows[0]["appstatus"].ToString() == "Reject")
        //                {
        //                    appstat = ",appstatus=null,appby=null,appremark=null,appbysmid=null";
        //                }

        //                if (OBJRESPONSE.BODYLINE[0].Tran_Type.Trim().ToUpper() == "S")
        //                {
        //                    OBJRESPONSE.BODYLINE[0].Off_Type = "P";
        //                    endUpdate = "EndRemark=null,Mobile_End_date=null,EndLatitude=null,EndLongitude=null,EndAddress=null ,EndLat_long_datetime=null";
        //                    //EndRemark = null; EndMobileTime = null; Endlatitude = null; Endlongitude = null; endAddress = null; minDate2 = null;
        //                }
        //                else if (OBJRESPONSE.BODYLINE[0].Tran_Type.Trim().ToUpper() == "O")
        //                {
        //                    endUpdate = "EndRemark=null,Mobile_End_date=null,EndLatitude=null,EndLongitude=null,EndAddress=null ,EndLat_long_datetime=null";
        //                }
        //                else if (OBJRESPONSE.BODYLINE[0].Tran_Type.Trim().ToUpper() == "E")
        //                {
        //                    OBJRESPONSE.BODYLINE[0].Off_Type = "P";
        //                    endUpdate = "EndRemark='" + OBJRESPONSE.BODYLINE[0].EndRemark + "',Mobile_End_date='" + EndMobileTime + "',EndLatitude='" + OBJRESPONSE.BODYLINE[0].Endlatitude + "',EndLongitude='" + OBJRESPONSE.BODYLINE[0].Endlongitude + "',EndAddress='" + endAddress + "' ,EndLat_long_datetime='" + minDate2 + "'";
        //                }


        //                if (dtdsr.Rows[0]["dsr_type"].ToString() != OBJRESPONSE.BODYLINE[0].Off_Type.Trim().ToUpper())
        //                {
        //                    Query = "INSERT INTO dbo.transvisitlog (VisId,VisitDocId,UserId,VDate,NextVisitDate,Remark,SMID,CityId,DistId,nCityId,frTime1,frTime2,toTime1,toTime2,WithUserId,ModeOfTransport,VehicleUsed,Industry,Lock,nWithUserId,AppStatus,AppBy,AppRemark,AppBySMId,Android_Id,cityIdS,cityName,OrderAmountMail,OrderAmountPhone,visitcode,Attendance,Fromareacode,OtherExpense,AndroidAppRemark,toareacode,Chargeable,ExportedToAndroid,Created_date,Longitude,Latitude,Address,Lat_long_datetime,Mobile_Created_date,UnlockRequest,TotalDistance,EndRemark,EndLongitude,EndLatitude,EndAddress,EndLat_long_datetime,Mobile_End_date,DSR_Type,Tran_Type)   select * from transvisit where  VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " ";
        //                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, Query);
        //                }



        //                Query = @"update TransVisit set VisitDocId='" + documentid + "',UserId=" + OBJRESPONSE.BODYLINE[0].USERID + ",VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "',NextVisitDate='" + OBJRESPONSE.BODYLINE[0].NEXTVISITDATE + "', Remark='" + OBJRESPONSE.BODYLINE[0].REMARKS + "',SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " ,WithUserId=" + OBJRESPONSE.BODYLINE[0].withuserid + ",ModeOfTransport='" + OBJRESPONSE.BODYLINE[0].modeoftransport + "', VehicleUsed='" + OBJRESPONSE.BODYLINE[0].vehicleused + "',Lock=" + OBJRESPONSE.BODYLINE[0].LOCK + ", nWithUserId=" + OBJRESPONSE.BODYLINE[0].nwithuserid + ", Android_Id='" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', cityIdS='" + OBJRESPONSE.BODYLINE[0].cityids + "', cityName='" + OBJRESPONSE.BODYLINE[0].cityname + "', OrderAmountMail= " + OBJRESPONSE.BODYLINE[0].orderamountmail + ", OrderAmountPhone=" + OBJRESPONSE.BODYLINE[0].orderamountphone + " ,visitcode='" + OBJRESPONSE.BODYLINE[0].visitcode + "',Attendance=" + OBJRESPONSE.BODYLINE[0].Attendance + ", Fromareacode=" + OBJRESPONSE.BODYLINE[0].Fromareacode + ",OtherExpense=" + OBJRESPONSE.BODYLINE[0].OtherExpense + ",AndroidAppRemark='" + OBJRESPONSE.BODYLINE[0].AndroidAppRemark + "',toareacode=" + OBJRESPONSE.BODYLINE[0].toareacode + ",ncityid=" + OBJRESPONSE.BODYLINE[0].ncityid + ", Created_date=DateAdd(minute,330,getutcdate()),Latitude='" + OBJRESPONSE.BODYLINE[0].LATITUDE + "',Longitude='" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "',Address='" + Address + "' ,Lat_long_datetime='" + minDate1 + "'," + endUpdate + ",DSR_Type='" + OBJRESPONSE.BODYLINE[0].Off_Type + "',Tran_Type='" + OBJRESPONSE.BODYLINE[0].Tran_Type + "'  " + appstat + " where VDate='" + OBJRESPONSE.BODYLINE[0].VDATE + "' and SMID=" + OBJRESPONSE.BODYLINE[0].SMID + " ";
        //                createText += " @@@@@@  Update to table   @@@@@" + Query + "" + Environment.NewLine;
        //                exists = Convert.ToInt32(DbConnectionDAL.ExecuteQuery(Query));

        //            }
        //        }
        //        else
        //        {
        //            try
        //            {

        //                if (OBJRESPONSE.BODYLINE[0].Tran_Type.Trim().ToUpper() == "S")
        //                {
        //                    OBJRESPONSE.BODYLINE[0].Off_Type = "P";
        //                    //EndRemark = null;EndMobileTime = null; Endlatitude = null; Endlongitude = null; endAddress = null; minDate2 = null;
        //                    endUpdate = "null,null,null,null,null,null";
        //                }
        //                else if (OBJRESPONSE.BODYLINE[0].Tran_Type.Trim().ToUpper() == "O")
        //                {
        //                    endUpdate = "null,null,null,null,null,null";

        //                }
        //                else if (OBJRESPONSE.BODYLINE[0].Tran_Type.Trim().ToUpper() == "E")
        //                {
        //                    OBJRESPONSE.BODYLINE[0].Off_Type = "P";
        //                    endUpdate = "'" + OBJRESPONSE.BODYLINE[0].EndRemark + "','" + EndMobileTime + "','" + OBJRESPONSE.BODYLINE[0].Endlatitude + "','" + OBJRESPONSE.BODYLINE[0].Endlongitude + "','" + endAddress + "','" + minDate2 + "'";
        //                }

        //                documentid = Settings.GetDocID("VISSN", DateTime.Now);
        //                Settings.SetDocID("VISSN", documentid);

        //                Query = "INSERT INTO dbo.TransVisit (VisitDocId, UserId, VDate, NextVisitDate, Remark, SMID, WithUserId, ModeOfTransport, VehicleUsed, Lock, nWithUserId, Android_Id, cityIdS, cityName, OrderAmountMail, OrderAmountPhone,visitcode,Attendance,Fromareacode,OtherExpense,AndroidAppRemark,toareacode,ncityid,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,EndRemark,Mobile_End_date,EndLatitude,EndLongitude,EndAddress,EndLat_long_datetime,DSR_Type,Tran_Type) " +
        //            " VALUES ('" + documentid + "', " + OBJRESPONSE.BODYLINE[0].USERID + ", '" + OBJRESPONSE.BODYLINE[0].VDATE + "', '" + OBJRESPONSE.BODYLINE[0].NEXTVISITDATE + "', '" + OBJRESPONSE.BODYLINE[0].REMARKS + "', " + OBJRESPONSE.BODYLINE[0].SMID + " , " + OBJRESPONSE.BODYLINE[0].withuserid + ", '" + OBJRESPONSE.BODYLINE[0].modeoftransport + "', '" + OBJRESPONSE.BODYLINE[0].vehicleused + "', " + OBJRESPONSE.BODYLINE[0].LOCK + ", " + OBJRESPONSE.BODYLINE[0].nwithuserid + ", '" + OBJRESPONSE.BODYLINE[0].ANDROID_ID + "', '" + OBJRESPONSE.BODYLINE[0].cityids + "', '" + OBJRESPONSE.BODYLINE[0].cityname + "', " + OBJRESPONSE.BODYLINE[0].orderamountmail + ", " + OBJRESPONSE.BODYLINE[0].orderamountphone + ",'" + OBJRESPONSE.BODYLINE[0].visitcode + "'," + OBJRESPONSE.BODYLINE[0].Attendance + "," + OBJRESPONSE.BODYLINE[0].Fromareacode + "," + OBJRESPONSE.BODYLINE[0].OtherExpense + ",'" + OBJRESPONSE.BODYLINE[0].AndroidAppRemark + "'," + OBJRESPONSE.BODYLINE[0].toareacode + "," + OBJRESPONSE.BODYLINE[0].ncityid + ",DateAdd(minute,330,getutcdate()),'" + OBJRESPONSE.BODYLINE[0].LATITUDE + "','" + OBJRESPONSE.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "'," + endUpdate + ",'" + OBJRESPONSE.BODYLINE[0].Off_Type + "','" + OBJRESPONSE.BODYLINE[0].Tran_Type + "')";
        //                createText += " @@@@@@  Insert to table   @@@@@" + Query + "" + Environment.NewLine;
        //                exists = Convert.ToInt32(DbConnectionDAL.ExecuteQuery(Query));

        //            }
        //            catch (Exception ex)
        //            {
        //                createText += " @@@@@@  Exception Generated  @@@@@" + ex.ToString() + "" + Environment.NewLine;
        //                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_JInsertTransVisit_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
        //                {
        //                    file2.WriteLine(createText);
        //                    file2.Close();
        //                }
        //            }

        //        }
        //        dtdsr.Dispose();
        //        if (exists > 0)
        //        {
        //            //Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS Milliseconds  from Transvisit where Visitdocid='" + documentid + "'";


        //            Query = "select VisId As Id,VisitDocId As DocumentId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS MS  from Transvisit where Visitdocid='" + documentid + "'";

        //            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
        //            //if (dtvisit.Rows.Count > 0)
        //            //{
        //            //    id = dtvisit.Rows[0]["VisId"].ToString();
        //            //    documentid = dtvisit.Rows[0]["VisitDocId"].ToString();
        //            //    Millisecond = dtvisit.Rows[0]["Milliseconds"].ToString();
        //            //}
        //          //  dtvisit.Dispose();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        createText += " @@@@@@  Exception Generated  @@@@@" + ex.ToString() + "" + Environment.NewLine;
        //        using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_JInsertTransVisit_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
        //        {
        //            file2.WriteLine(createText);
        //            file2.Close();
        //        }
        //    }


        //    //rst.Add(
        //    //    new Visit_V2
        //    //    {
        //    //        Id = id,
        //    //        DocumentId = documentid,
        //    //        MS = Millisecond

        //    //    }
        //    //);

        //    createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["id"].ToString() + ", " + dtvisit.Rows[0]["documentid"].ToString() + ", " +  dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;
        //    createText += " @@@@@@   Providing Response To Android  @@@@@" + JsonConvert.SerializeObject(dtvisit) + "" + Environment.NewLine;
        //    createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
        //    using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + OBJRESPONSE.BODYLINE[0].SMID + "_JInsertTransVisit_" + OBJRESPONSE.BODYLINE[0].VDATE + ".txt"), true))
        //    {
        //        file2.WriteLine(createText);
        //        file2.Close();
        //    }
        //    bodyStream.Dispose();
        //    Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
        //    dtvisit.Dispose();
        //}

        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void JSInsertTransVisit_V2()
        //{
        //    string createText = "";
        //    var httpRequest = HttpContext.Current.Request;
        //    var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
        //    DataTable DTadmin = new DataTable();
        //    bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
        //    var bodyText = bodyStream.ReadToEnd();
        //    //     string items = httpRequest.Params["orderdetail"].ToString();
        //    var OBJRESPONSE = JsonConvert.DeserializeObject<disList_V2>(bodyText);

        //    int Userid = OBJRESPONSE.BODYLINE[0].USERID;
        //    string VDate = OBJRESPONSE.BODYLINE[0].VDATE;
        //    string NextVisitDate = OBJRESPONSE.BODYLINE[0].NEXTVISITDATE;
        //    string Remarks = OBJRESPONSE.BODYLINE[0].REMARKS;
        //    int SMID = OBJRESPONSE.BODYLINE[0].SMID;
        //    string frmtime1 = OBJRESPONSE.BODYLINE[0].frmtime1;
        //    string toTime1 = OBJRESPONSE.BODYLINE[0].toTime1;
        //    int withuserid = OBJRESPONSE.BODYLINE[0].withuserid;
        //    string modeoftransport = OBJRESPONSE.BODYLINE[0].modeoftransport;
        //    string vehicleused = OBJRESPONSE.BODYLINE[0].vehicleused;
        //    int Lock = OBJRESPONSE.BODYLINE[0].LOCK;
        //    int nwithuserid = OBJRESPONSE.BODYLINE[0].nwithuserid;
        //    string android_id = OBJRESPONSE.BODYLINE[0].ANDROID_ID;
        //    string cityids = OBJRESPONSE.BODYLINE[0].cityids;
        //    string cityname = OBJRESPONSE.BODYLINE[0].cityname;
        //    decimal orderamountmail = OBJRESPONSE.BODYLINE[0].orderamountmail;
        //    decimal orderamountphone = OBJRESPONSE.BODYLINE[0].orderamountphone;
        //    string visitcode = OBJRESPONSE.BODYLINE[0].visitcode;
        //    decimal Attendance = OBJRESPONSE.BODYLINE[0].Attendance;
        //    int Fromareacode = OBJRESPONSE.BODYLINE[0].Fromareacode;
        //    decimal OtherExpense = OBJRESPONSE.BODYLINE[0].OtherExpense;
        //    string AndroidAppRemark = OBJRESPONSE.BODYLINE[0].AndroidAppRemark;
        //    int toareacode = OBJRESPONSE.BODYLINE[0].toareacode;
        //    int ncityid = OBJRESPONSE.BODYLINE[0].ncityid;
        //    string longitude = OBJRESPONSE.BODYLINE[0].LONGITUDE;
        //    string latitude = OBJRESPONSE.BODYLINE[0].LATITUDE;
        //    string lat_long_dt = OBJRESPONSE.BODYLINE[0].LAT_LONG_DT;
        //    string mobile_created_date = OBJRESPONSE.BODYLINE[0].MOBILE_CREATED_DATE;

        //    string Off_Type = OBJRESPONSE.BODYLINE[0].Off_Type;
        //    string Endlongitude = OBJRESPONSE.BODYLINE[0].Endlongitude;
        //    string Endlatitude = OBJRESPONSE.BODYLINE[0].Endlatitude;
        //    string Endlat_long_dt = OBJRESPONSE.BODYLINE[0].Endlat_long_dt;
        //    string mobile_End_date = OBJRESPONSE.BODYLINE[0].mobile_End_date;
        //    string EndRemark = OBJRESPONSE.BODYLINE[0].EndRemark;
        //    string Tran_Type = OBJRESPONSE.BODYLINE[0].Tran_Type;

        //    List<Visit_V2> rst = new List<Visit_V2>();

        //    if (string.IsNullOrEmpty(Tran_Type) || Tran_Type.Trim() == "")
        //    {
        //        string[] tran = new string[0];
        //        Context.Response.Write(JsonConvert.SerializeObject(tran));
        //        return;
        //    }
        //    createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
        //    createText += "" + Userid + "," + VDate + "," + NextVisitDate + "," + Remarks + "," + SMID + "," + frmtime1 + "," + toTime1 + "," + withuserid + "," + modeoftransport + "," + vehicleused + "," + Lock + "," + nwithuserid + "," + android_id + "," + cityids + "," + cityname + ", " + orderamountmail + "," + orderamountphone + "," + visitcode + "," + Attendance + ", " + Fromareacode + ", " + OtherExpense + ", " + AndroidAppRemark + ", " + toareacode + ", " + ncityid + ", " + longitude + ", " + latitude + ", " + lat_long_dt + ", " + mobile_created_date + ", " + Endlongitude + ", " + Endlatitude + ", " + Endlat_long_dt + ", " + mobile_End_date + ", " + EndRemark + "" + Environment.NewLine;




        //    int exists = 0;
        //    string minDate1 = "", mobiletime = "", minDate2 = "", EndMobileTime = "", endAddress = "", endUpdate = "null,null,null,null,null,null";
        //    if (!string.IsNullOrEmpty(lat_long_dt))
        //    {
        //        double ticks = double.Parse(lat_long_dt);
        //        TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //        DateTime startdate = new DateTime(1970, 1, 1) + time;
        //        minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }

        //    if (Tran_Type == "E")
        //    {
        //        if (string.IsNullOrEmpty(Endlat_long_dt) || Endlat_long_dt == "")
        //        {
        //            double ticks = double.Parse(mobile_End_date);
        //            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //            DateTime startdate = new DateTime(1970, 1, 1) + time;
        //            minDate2 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //        }

        //    }

        //    if (!string.IsNullOrEmpty(Endlat_long_dt))
        //    {
        //        double ticks = double.Parse(Endlat_long_dt);
        //        TimeSpan time = TimeSpan.FromMilliseconds(ticks);
        //        DateTime startdate = new DateTime(1970, 1, 1) + time;
        //        minDate2 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }



        //    if (!string.IsNullOrEmpty(mobile_created_date))
        //    {
        //        double ticks1 = double.Parse(mobile_created_date);
        //        TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
        //        DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
        //        mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }
        //    if (!string.IsNullOrEmpty(mobile_End_date))
        //    {
        //        double ticks1 = double.Parse(mobile_End_date);
        //        TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
        //        DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
        //        EndMobileTime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
        //    }

        //    string id = "0"; string documentid = "0";
        //    string Millisecond = "";

        //    WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
        //    string Address = "";
        //    if (latitude != "")
        //    {
        //        Address = DMT.InsertAddress(latitude, longitude);
        //    }

        //    if (Endlatitude != "")
        //    {
        //        endAddress = DMT.InsertAddress(Endlatitude, Endlongitude);
        //    }
        //    try
        //    {
        //        //Query = "select *  from TransVisit  where VDate='" + VDate + "' and SMID=" + SMID + " ";
        //        Query = "select visid,VisitDocId,cityids,cityname,appstatus from TransVisit  where VDate='" + VDate + "' and SMID=" + SMID + " ";
        //        createText += " @@@@@@  Select to table   @@@@@" + Query + "" + Environment.NewLine;
        //        DataTable dtdsr = DbConnectionDAL.getFromDataTable(Query);
        //        if (dtdsr.Rows.Count > 0)
        //        {
        //            exists = Convert.ToInt32(dtdsr.Rows[0]["visid"].ToString());
        //            if (exists > 0)
        //            {
        //                string appstat = ""; string getcityidsfromweb = ""; string getcitynamessfromweb = "";

        //                documentid = dtdsr.Rows[0]["VisitDocId"].ToString();


        //                if (dtdsr.Rows[0]["appstatus"].ToString() == "Reject")
        //                {
        //                    appstat = ",appstatus=null,appby=null,appremark=null,appbysmid=null";
        //                }

        //                if (Tran_Type.Trim().ToUpper() == "S")
        //                {
        //                    Off_Type = "P";
        //                    endUpdate = "EndRemark=null,Mobile_End_date=null,EndLatitude=null,EndLongitude=null,EndAddress=null ,EndLat_long_datetime=null";
        //                    //EndRemark = null; EndMobileTime = null; Endlatitude = null; Endlongitude = null; endAddress = null; minDate2 = null;
        //                }
        //                else if (Tran_Type.Trim().ToUpper() == "O")
        //                {
        //                    endUpdate = "EndRemark=null,Mobile_End_date=null,EndLatitude=null,EndLongitude=null,EndAddress=null ,EndLat_long_datetime=null";
        //                }
        //                else if (Tran_Type.Trim().ToUpper() == "E")
        //                {
        //                    Off_Type = "P";
        //                    endUpdate = "EndRemark='" + EndRemark + "',Mobile_End_date='" + EndMobileTime + "',EndLatitude='" + Endlatitude + "',EndLongitude='" + Endlongitude + "',EndAddress='" + endAddress + "' ,EndLat_long_datetime='" + minDate2 + "'";
        //                }

        //                Query = "INSERT INTO dbo.transvisitlog (VisId,VisitDocId,UserId,VDate,NextVisitDate,Remark,SMID,CityId,DistId,nCityId,frTime1,frTime2,toTime1,toTime2,WithUserId,ModeOfTransport,VehicleUsed,Industry,Lock,nWithUserId,AppStatus,AppBy,AppRemark,AppBySMId,Android_Id,cityIdS,cityName,OrderAmountMail,OrderAmountPhone,visitcode,Attendance,Fromareacode,OtherExpense,AndroidAppRemark,toareacode,Chargeable,ExportedToAndroid,Created_date,Longitude,Latitude,Address,Lat_long_datetime,Mobile_Created_date,UnlockRequest,TotalDistance,EndRemark,EndLongitude,EndLatitude,EndAddress,EndLat_long_datetime,Mobile_End_date,DSR_Type,Tran_Type)   select * from transvisit where  VDate='" + VDate + "' and SMID=" + SMID + " ";
        //                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, Query);

        //                Query = @"update TransVisit set VisitDocId='" + documentid + "',UserId=" + Userid + ",VDate='" + VDate + "',NextVisitDate='" + NextVisitDate + "', Remark='" + Remarks + "',SMID=" + SMID + " ,WithUserId=" + withuserid + ",ModeOfTransport='" + modeoftransport + "', VehicleUsed='" + vehicleused + "',Lock=" + Lock + ", nWithUserId=" + nwithuserid + ", Android_Id='" + android_id + "', cityIdS='" + cityids + "', cityName='" + cityname + "', OrderAmountMail= " + orderamountmail + ", OrderAmountPhone=" + orderamountphone + " ,visitcode='" + visitcode + "',Attendance=" + Attendance + ", Fromareacode=" + Fromareacode + ",OtherExpense=" + OtherExpense + ",AndroidAppRemark='" + AndroidAppRemark + "',toareacode=" + toareacode + ",ncityid=" + ncityid + ", Created_date=DateAdd(minute,330,getutcdate()),Latitude='" + latitude + "',Longitude='" + longitude + "',Address='" + Address + "' ,Lat_long_datetime='" + minDate1 + "'," + endUpdate + ",DSR_Type='" + Off_Type + "',Tran_Type='" + Tran_Type + "'  " + appstat + " where VDate='" + VDate + "' and SMID=" + SMID + " ";
        //                createText += " @@@@@@  Update to table   @@@@@" + Query + "" + Environment.NewLine;
        //                exists = Convert.ToInt32(DbConnectionDAL.ExecuteQuery(Query));

        //            }
        //        }
        //        else
        //        {
        //            try
        //            {

        //                if (Tran_Type.Trim().ToUpper() == "S")
        //                {
        //                    Off_Type = "P";
        //                    //EndRemark = null;EndMobileTime = null; Endlatitude = null; Endlongitude = null; endAddress = null; minDate2 = null;
        //                    endUpdate = "null,null,null,null,null,null";
        //                }
        //                else if (Tran_Type.Trim().ToUpper() == "O")
        //                {
        //                    endUpdate = "null,null,null,null,null,null";

        //                }
        //                else if (Tran_Type.Trim().ToUpper() == "E")
        //                {
        //                    Off_Type = "P";
        //                    endUpdate = "'" + EndRemark + "','" + EndMobileTime + "','" + Endlatitude + "','" + Endlongitude + "','" + endAddress + "','" + minDate2 + "'";
        //                }

        //                documentid = Settings.GetDocID("VISSN", DateTime.Now);
        //                Settings.SetDocID("VISSN", documentid);

        //                Query = "INSERT INTO dbo.TransVisit (VisitDocId, UserId, VDate, NextVisitDate, Remark, SMID, WithUserId, ModeOfTransport, VehicleUsed, Lock, nWithUserId, Android_Id, cityIdS, cityName, OrderAmountMail, OrderAmountPhone,visitcode,Attendance,Fromareacode,OtherExpense,AndroidAppRemark,toareacode,ncityid,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,EndRemark,Mobile_End_date,EndLatitude,EndLongitude,EndAddress,EndLat_long_datetime,DSR_Type,Tran_Type) " +
        //            " VALUES ('" + documentid + "', " + Userid + ", '" + VDate + "', '" + NextVisitDate + "', '" + Remarks + "', " + SMID + " , " + withuserid + ", '" + modeoftransport + "', '" + vehicleused + "', " + Lock + ", " + nwithuserid + ", '" + android_id + "', '" + cityids + "', '" + cityname + "', " + orderamountmail + ", " + orderamountphone + ",'" + visitcode + "'," + Attendance + "," + Fromareacode + "," + OtherExpense + ",'" + AndroidAppRemark + "'," + toareacode + "," + ncityid + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "'," + endUpdate + ",'" + Off_Type + "','" + Tran_Type + "')";
        //                createText += " @@@@@@  Insert to table   @@@@@" + Query + "" + Environment.NewLine;
        //                exists = Convert.ToInt32(DbConnectionDAL.ExecuteQuery(Query));

        //            }
        //            catch (Exception ex)
        //            {
        //                createText += " @@@@@@  Exception Generated  @@@@@" + ex.ToString() + "" + Environment.NewLine;
        //                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_JInsertTransVisit_" + VDate + ".txt"), true))
        //                {
        //                    file2.WriteLine(createText);
        //                    file2.Close();
        //                }
        //            }

        //        }
        //        if (exists > 0)
        //        {
        //            Query = "select *,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS Milliseconds  from Transvisit where Visitdocid='" + documentid + "'";
        //            DataTable dtvisit = new DataTable();
        //            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
        //            if (dtvisit.Rows.Count > 0)
        //            {
        //                id = dtvisit.Rows[0]["VisId"].ToString();
        //                documentid = dtvisit.Rows[0]["VisitDocId"].ToString();
        //                Millisecond = dtvisit.Rows[0]["Milliseconds"].ToString();
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        createText += " @@@@@@  Exception Generated  @@@@@" + ex.ToString() + "" + Environment.NewLine;
        //        using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_JInsertTransVisit_" + VDate + ".txt"), true))
        //        {
        //            file2.WriteLine(createText);
        //            file2.Close();
        //        }
        //    }


        //    rst.Add(
        //        new Visit_V2
        //        {
        //            Id = id,
        //            DocumentId = documentid,
        //            MS = Millisecond

        //        }
        //    );

        //    createText += " @@@@@@   Providing Response To Android  @@@@@" + id + ", " + documentid + ", " + Millisecond + "" + Environment.NewLine;
        //    createText += " @@@@@@   Providing Response To Android  @@@@@" + JsonConvert.SerializeObject(rst) + "" + Environment.NewLine;
        //    createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
        //    using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_JInsertTransVisit_" + VDate + ".txt"), true))
        //    {
        //        file2.WriteLine(createText);
        //        file2.Close();
        //    }
        //    Context.Response.Write(JsonConvert.SerializeObject(rst));
        //}

        #endregion






        //        [WebMethod]
        //        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //        public void ManagerApp_JSGetAllBeatUnderUser_V2(string SMID, string match)
        //        {

        //            string str = "";

        //            if (match != "")
        //            {
        //                str = @"SELECT Max(mp.BeatId) AS BtId,Max(mp.AreaId) AS ArId,Max(mp.CityId) AS CtId,
        //(Max(mr.AreaName)+'-'+Max(mar.AreaName)+'-'+Max(mstar.AreaName)) AS Name from [MastParty] mp 
        //LEFT JOIN Mastsalesrep MS1 ON MS1.UserId=mp.Created_User_id Left Join MastArea mar on mp.AreaId=mar.AreaId Left Join MastArea mr on mp.BeatId=mr.AreaId 
        //Left Join MastArea mstar on mp.CityId=mstar.AreaId where  mp.AreaId in (SELECT Linkcode FROM MastLink WHERE PrimCode IN (select distinct SMID from MastSalesRepGrp where SMID in (select SMID from MastSalesRepGrp 
        //where MainGrp in (" + SMID + ")) and  level> (select distinct level from MastSalesRepGrp where MainGrp in (" + SMID + " ))) ) and mp.Partydist=0 AND MP.AppStatus='Approve'  AND (mr.AreaName LIKE '%" + match + "%' or mar.AreaName LIKE '%" + match + "%' OR mstar.AreaName LIKE '%" + match + "%') group by mp.BeatId";
        //            }
        //            else
        //            {
        //                str = @"SELECT Max(mp.BeatId) AS BtId,Max(mp.AreaId) AS ArId,Max(mp.CityId) AS CtId,
        //(Max(mr.AreaName)+'-'+Max(mar.AreaName)+'-'+Max(mstar.AreaName)) AS Name from [MastParty] mp 
        //LEFT JOIN Mastsalesrep MS1 ON MS1.UserId=mp.Created_User_id
        //Left Join MastArea mar on mp.AreaId=mar.AreaId Left Join MastArea mr on mp.BeatId=mr.AreaId 
        //Left Join MastArea mstar on mp.CityId=mstar.AreaId 
        //where  mp.AreaId in (SELECT Linkcode FROM MastLink WHERE PrimCode IN (select distinct SMID from MastSalesRepGrp where SMID in (select SMID from MastSalesRepGrp 
        //where MainGrp in (" + SMID + ")) and  level> (select distinct level from MastSalesRepGrp where MainGrp in (" + SMID + " ))) ) and mp.Partydist=0 AND MP.AppStatus='Approve'  group by mp.BeatId";
        //            }
        //            //        str = @"SELECT Max(mp.BeatId) AS BEAT_ID,Max(mp.AreaId) AS AREA_ID,Max(mp.CityId) AS CITY_ID,
        //            //(Max(mr.AreaName)+'-'+Max(mar.AreaName)+'-'+Max(mstar.AreaName)) AS LIST from [MastParty] mp 
        //            //Left Join MastArea mar on mp.AreaId=mar.AreaId Left Join MastArea mr on mp.BeatId=mr.AreaId 
        //            //Left Join MastArea mstar on mp.CityId=mstar.AreaId 
        //            //where mp.AppStatus='Approve' and  mp.AreaId in (select DISTINCT AreaId FROM [MastParty] 
        //            //where SMID in (SELECT SMID FROM MastSalesRepGrp WHERE maingrp=" + SMID + "   AND (mr.AreaName LIKE '%" + match + "%' or mar.AreaName LIKE '%" + match + "%' OR mstar.AreaName LIKE '%" + match + "%'))) and mp.Lvl=2 group by mp.BeatId";
        //            DataTable dt = new DataTable();
        //            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

        //            //List<GetUnderUsers> rst = new List<GetUnderUsers>();
        //            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
        //            //{
        //            //    rst.Add(
        //            //        new GetUnderUsers
        //            //        {
        //            //            BtId = dt.Rows[i]["BEAT_ID"].ToString(),
        //            //            ArId = dt.Rows[i]["AREA_ID"].ToString(),
        //            //            CtId = dt.Rows[i]["CITY_ID"].ToString(),
        //            //            Name = dt.Rows[i]["LIST"].ToString()
        //            //        }
        //            //    );
        //            //}
        //            Context.Response.Write(JsonConvert.SerializeObject(dt));
        //            dt.Dispose();
        //        }


        //        [WebMethod]
        //        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //        public void FFMSApp_JSGetBlockPartyList_V2(string SMID)
        //        {
        //            string str = "";
        //            str = "Select * from MastParty where Isnull(Active,0)=1 and Isnull(Isblock,0)=1 and (Created_User_id in (Select userid from MastSalesrep where SMID=" + SMID + ") OR AreaId IN (SELECT Linkcode FROM MastLink WHERE PrimCode IN(" + SMID + ")))";
        //            DataTable dt = new DataTable();
        //            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
        //            Context.Response.Write(JsonConvert.SerializeObject(dt));
        //            dt.Dispose();
        //        }
        //        [WebMethod]
        //        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //        public void ManagerApp_JSGetPartyList_V2(string Btid, string pnme)
        //        {
        //            string str = "";

        //            if (pnme != "")
        //            {
        //                str = @"select PartyId PID,PartyName PName,Mobile Mob,Created_Date Cdate from [MastParty] where BeatId =" + Btid + " and AppStatus='Approve' and Isnull(Isblock,0)=0 and PartyName like '%" + pnme + "%'";
        //            }
        //            else
        //            {
        //                str = @"select PartyId PID,PartyName PName,Mobile Mob,Created_Date Cdate from [MastParty] where BeatId =" + Btid + " and AppStatus='Approve' and Isnull(Isblock,0)=0 ";
        //            }

        //            DataTable dt = new DataTable();
        //            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

        //            //List<GetPartyList> rst = new List<GetPartyList>();
        //            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
        //            //{
        //            //    rst.Add(
        //            //        new GetPartyList
        //            //        {
        //            //            PID = dt.Rows[i]["PartyId"].ToString(),
        //            //            PName = dt.Rows[i]["PartyName"].ToString(),
        //            //            Mob = dt.Rows[i]["Mobile"].ToString(),
        //            //            Cdate = dt.Rows[i]["Created_Date"].ToString()
        //            //        }
        //            //    );
        //            //}
        //            Context.Response.Write(JsonConvert.SerializeObject(dt));
        //            dt.Dispose();
        //        }




        #region GetDSR




        #endregion
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetSuperDistributor(string SMID)
        {
            DataTable Dt = new DataTable();
            string str = "";
            string citystr = "";
            //string cityQry = @"  select AreaId from mastarea where areaid in (select distinct underid from mastarea where areaid in (select linkcode from mastlink where primtable='SALESPERSON' and LinkTable='AREA' and PrimCode in (SELECT SMID FROM MastSalesRep WHERE SMID IN (SELECT SMID FROM mastsalesrepgrp WHERE  maingrp IN (" + SMID + ")))) and Active=1 ) and areatype='City' and Active=1 order by AreaName";
            //DataTable dtCity = DbConnectionDAL.GetDataTable(CommandType.Text, cityQry);
            //for (int i = 0; i < dtCity.Rows.Count; i++)
            //{
            //    citystr += dtCity.Rows[i]["AreaId"] + ",";
            //}
            //citystr = citystr.TrimStart(',').TrimEnd(',');
            //string distqry = @"select * from MastParty where CityId in (" + citystr + ")  and PartyDist=1 and Active=1 order by PartyName";
            string distqry = @"SELECT PARTYID,PARTYNAME FROM MASTPARTY WHERE DISTTYPE='SUPERDIST' AND  AREAID IN (SELECT LINKCODE FROM MASTLINK WHERE PRIMTABLE='SALESPERSON' AND LINKTABLE='AREA' AND PRIMCODE IN (SELECT SMID FROM MASTSALESREP WHERE SMID IN (SELECT SMID FROM MASTSALESREPGRP WHERE  MAINGRP IN (" + SMID + ")))) AND ACTIVE=1   AND PARTYDIST=1 ORDER BY PARTYNAME";
            Dt = DbConnectionDAL.GetDataTable(CommandType.Text, distqry);
            Context.Response.Write(JsonConvert.SerializeObject(Dt));
            Dt.Dispose();
        }





        ////////////////////////Manager api optimize

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_EmployeeDetails(string mobile)
        {
            try
            {
                //string str = @"SELECT smid, SMName,address1,email,mobile,syncid,roleid,userid FROM MastSalesRep where Mobile='" + mobile + "'";
                string str = @"SELECT SMID, SMNAME,ADDRESS1 address,EMAIL,MOBILE MOBILENO,SYNCID,MS.ROLEID,USERID,'' CITY FROM MastSalesRep ms LEFT JOIN mastrole mr ON ms.RoleId=mr.RoleId WHERE mr.RoleType IN ('CityHead','DistrictHead','RegionHead','StateHead') and Mobile='" + mobile + "'";
                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                //List<EmployeeDetailsList> rst = new List<EmployeeDetailsList>();
                //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
                //{
                //    rst.Add(
                //        new EmployeeDetailsList
                //        {
                //            smid = dt.Rows[i]["smid"].ToString(),
                //            smname = dt.Rows[i]["SMName"].ToString(),
                //            address = dt.Rows[i]["address1"].ToString(),
                //            email = dt.Rows[i]["email"].ToString(),
                //            mobileNo = dt.Rows[i]["mobile"].ToString(),
                //            syncid = dt.Rows[i]["syncid"].ToString(),
                //            roleid = dt.Rows[i]["roleid"].ToString(),
                //            userid = dt.Rows[i]["userid"].ToString(),
                //            city = string.Empty

                //        }
                //    );
                //}
                Context.Response.Write(JsonConvert.SerializeObject(dt));
                dt.Dispose();
            }
            catch (Exception ex)
            {
                ex.ToString();
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void DistributorApp_GetDynamicMenu(int role_id)
        {
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();

            //            Query = @"select mp.*,mra.* ,case when mra.ViewP is null then 'True' else mra.ViewP end as viewPer from mastpage mp left join MastRolePermission_android 
            //             mra on mp.pageid=mra.PageId where mp.android='Y' and mp.level_idx=1 and mp.PageId in (select distinct mp.Parent_Id from mastpage mp left join 
            //             MastRolePermission_android mra on mp.pageid=mra.PageId where mp.android='Y'  
            //             and mra.roleid=" + role_id + " and viewp>0 ) union select mp.*,mra.*,case when mra.ViewP is null then 'True' else mra.ViewP end as viewPer from mastpage mp left join MastRolePermission_android mra on mp.pageid=mra.PageId  where mp.android='Y' and mra.roleid=" + role_id + " and viewp>0";


            Query = "SELECT (Case when Isnull(menuicon,'')<>'' then 'http://' + '" + host + "' + Replace(menuicon,'~','') else '' end)  ICON,MP.PAGEID,PAGENAME,ADDP,EDITP,DELETEP,PARENT_ID PARENTID,ANDROID_FORM FORM_FILTER,DISPLAYNAME,LEVEL_IDX,IDX ,CASE WHEN MRA.VIEWP IS NULL THEN 'True' ELSE MRA.VIEWP END AS VIEWP FROM MASTPAGE MP  LEFT JOIN MASTROLEPERMISSION_ANDROID MRA ON MP.PAGEID=MRA.PAGEID WHERE MP.ANDROID='Y' AND MP.LEVEL_IDX=1 AND MP.PAGEID IN (SELECT DISTINCT MP.PARENT_ID   FROM MASTPAGE MP LEFT JOIN MASTROLEPERMISSION_ANDROID MRA ON MP.PAGEID=MRA.PAGEID  WHERE MP.ANDROID='Y'   AND MRA.ROLEID=" + role_id + " AND VIEWP>0 ) UNION SELECT (Case when Isnull(menuicon,'')<>'' then 'http://' + '" + host + "' + Replace(menuicon,'~','') else '' end)  ICON,MP.PAGEID,PAGENAME,ADDP,EDITP,DELETEP,PARENT_ID PARENTID,ANDROID_FORM FORM_FILTER,DISPLAYNAME,LEVEL_IDX,IDX ,CASE WHEN MRA.VIEWP IS NULL THEN 'True' ELSE MRA.VIEWP END AS VIEWP	FROM MASTPAGE MP LEFT JOIN MASTROLEPERMISSION_ANDROID MRA ON MP.PAGEID=MRA.PAGEID  WHERE MP.ANDROID='Y'  AND MRA.ROLEID=" + role_id + " AND VIEWP>0 ";
            DataTable dtcheck = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //List<GetDynamicmenu> rst = new List<GetDynamicmenu>();
            //{
            //    DataTable dtcheck = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            //    if (dtcheck.Rows.Count > 0)
            //    {
            //        for (int i = 0; i < dtcheck.Rows.Count; i++)
            //        {
            //            string path = "";
            //            if (dtcheck.Rows[i]["menuicon"].ToString() != "")
            //            {
            //                path = "http://" + host + (dtcheck.Rows[i]["menuicon"].ToString()).Replace(@"~", string.Empty);
            //            }
            //            {
            //                rst.Add(
            //                    new GetDynamicmenu
            //                    {
            //                        pageid = dtcheck.Rows[i]["pageid"].ToString(),
            //                        pagename = dtcheck.Rows[i]["pagename"].ToString(),
            //                        viewp = dtcheck.Rows[i]["viewPer"].ToString(),
            //                        addp = dtcheck.Rows[i]["addp"].ToString(),
            //                        editp = dtcheck.Rows[i]["editp"].ToString(),
            //                        deletep = dtcheck.Rows[i]["deletep"].ToString(),
            //                        parentid = dtcheck.Rows[i]["parent_id"].ToString(),
            //                        displayname = dtcheck.Rows[i]["displayname"].ToString(),
            //                        level_idx = dtcheck.Rows[i]["level_idx"].ToString(),
            //                        idx = dtcheck.Rows[i]["idx"].ToString(),
            //                        Form_Filter = dtcheck.Rows[i]["android_form"].ToString(),
            //                        Icon = path,
            //                    }
            //                );
            //            }
            //        }
            //    }
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dtcheck));
            dtcheck.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void DistributorApp_PendingOrderSegmentwise(string fromdt, string todt, int distid)
        {
            //  string strdate = " and T1.Vdate between '" + Settings.dateformat(fromdt) + " 00:00' and '" + Settings.dateformat(todt) + " 23:59'";

            string str = @"SELECT MS.ID AS ITEMID,MS.NAME AS ITEMNAME,SUM(T1.QTY) AS ORDERQTY,SUM(T1.SHIPPINGQTY) AS SHIPPEDQTY,SUM(T1.PENDINGQTY) AS PENDINGQTY FROM PurchaseOrderImport AS T1 LEFT JOIN mastitem mi ON T1.itemid=mi.itemid LEFT JOIN mastitemsegment ms ON mi.SegmentId=ms.Id where T1.DistId in (" + distid + ") GROUP BY ms.Id,ms.Name ORDER BY pendingqty desc";

            DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            //List<XJsPendingorderDetailsItemwise> rst = new List<XJsPendingorderDetailsItemwise>();
            //if (dt.Rows.Count > 0)
            //{
            //    for (int i = 0; i < dt.Rows.Count; i++)
            //    {
            //        rst.Add(
            //            new XJsPendingorderDetailsItemwise
            //            {
            //                itemId = dt.Rows[i]["itemid"].ToString(),
            //                itemname = dt.Rows[i]["itemname"].ToString(),
            //                orderQty = dt.Rows[i]["orderQty"].ToString(),
            //                shippedQty = dt.Rows[i]["shippedqty"].ToString(),
            //                pendingQty = dt.Rows[i]["pendingqty"].ToString()
            //            }
            //        );
            //    }
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void DistributorApp_PendingOrderItemwiseService(int segmentid, string fromdt, string todt, int distid)
        {
            //  string strdate = " and T1.Vdate between '" + Settings.dateformat(fromdt) + " 00:00' and '" + Settings.dateformat(todt) + " 23:59'";

            string str = @"SELECT MI.ITEMID,MI.ITEMNAME,SUM(T1.QTY) AS ORDERQTY,SUM(T1.SHIPPINGQTY) AS SHIPPEDQTY,SUM(T1.PENDINGQTY) AS PENDINGQTY FROM PurchaseOrderImport AS T1 LEFT JOIN mastitem mi ON T1.itemid=mi.itemid where T1.DistId in (" + distid + ") AND mi.SegmentId=" + segmentid + " GROUP BY mi.itemid,mi.itemname ORDER BY pendingqty desc";

            DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            //List<XJsPendingorderDetailsItemwise> rst = new List<XJsPendingorderDetailsItemwise>();
            //if (dt.Rows.Count > 0)
            //{
            //    for (int i = 0; i < dt.Rows.Count; i++)
            //    {
            //        rst.Add(
            //            new XJsPendingorderDetailsItemwise
            //            {
            //                itemId = dt.Rows[i]["itemid"].ToString(),
            //                itemname = dt.Rows[i]["itemname"].ToString(),
            //                orderQty = dt.Rows[i]["orderQty"].ToString(),
            //                shippedQty = dt.Rows[i]["shippedqty"].ToString(),
            //                pendingQty = dt.Rows[i]["pendingqty"].ToString()
            //            }
            //        );
            //    }
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void DistributorApp_GetDistributorPendingOrder(string fromdt, string todt, int distid, int itemid)
        {
            //   string strdate = " and T1.Vdate between '" + Settings.dateformat(fromdt) + " 00:00' and '" + Settings.dateformat(todt) + " 23:59'";

            string str = @"SELECT DISTINCT max(T1.PODocId) as OrderNo,Replace(Convert(varchar,max(t1.Vdate),106),' ','/') as OrderDt,sum(T1.qty) AS orderQty,sum(T1.shippingQty) AS shippedqty,sum(T1.pendingqty) AS pendingqty FROM PurchaseOrderImport AS T1 where T1.DistId in (" + distid + ")  AND T1.itemid in (" + itemid + " ) GROUP BY T1.PODocId ORDER BY pendingqty desc ";

            DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            //List<XJsPendingorderDetails> rst = new List<XJsPendingorderDetails>();
            //if (dt.Rows.Count > 0)
            //{
            //    for (int i = 0; i < dt.Rows.Count; i++)
            //    {
            //        rst.Add(
            //            new XJsPendingorderDetails
            //            {
            //                OrderNo = dt.Rows[i]["PODocId"].ToString(),
            //                OrderDt = Convert.ToDateTime(dt.Rows[i]["VDate"]).ToString("dd/MMM/yyyy"),
            //                orderQty = dt.Rows[i]["orderQty"].ToString(),
            //                shippedQty = dt.Rows[i]["shippedqty"].ToString(),
            //                pendingQty = dt.Rows[i]["pendingqty"].ToString()
            //            }
            //        );
            //    }
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_ProductInvoice(int productgroupid, string fromdt, string todt, int distid, int smid)
        {
            string str = "";
            string strdate = " and tdv.Vdate between '" + Settings.dateformat(fromdt) + " 00:00' and '" + Settings.dateformat(todt) + " 23:59'";
            if (distid == 0)
            {
                str = @"SELECT MI.ITEMID ITEMID,MI.ITEMNAME ITEMNAME,ISNULL(SUM(TDV1.QTY),0) AS QTY,ISNULL(SUM(TDV1.QTYINKG),0) AS WEIGHT, ISNULL(SUM(TDV1.NET_TOTAL),0) AS AMOUNT FROM transdistinv tdv 
                     INNER JOIN transdistinv1 tdv1 ON tdv.distinvdocid = tdv1.distinvdocid 
                     LEFT JOIN mastitem mi ON tdv1.ItemId=mi.ItemId where mi.underid=" + productgroupid + " and tdv.DistId in (SELECT partyid FROM MastParty WHERE PartyDist=1 and SMId IN (SELECT smid FROM MastSalesRepGrp WHERE MainGrp=" + smid + ")) " + strdate + " Group BY mi.itemid,mi.ItemName";
            }
            else
            {
                str = @"SELECT MI.ITEMID ITEMID,MI.ITEMNAME ITEMNAME,ISNULL(SUM(TDV1.QTY),0) AS QTY,ISNULL(SUM(TDV1.QTYINKG),0) AS WEIGHT, ISNULL(SUM(TDV1.NET_TOTAL),0) AS AMOUNT FROM transdistinv tdv 
                     INNER JOIN transdistinv1 tdv1 ON tdv.distinvdocid = tdv1.distinvdocid 
                     LEFT JOIN mastitem mi ON tdv1.ItemId=mi.ItemId where mi.underid=" + productgroupid + " and tdv.DistId=" + distid + " " + strdate + " Group BY mi.itemid,mi.ItemName";
            }

            DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            //List<ProductInvoice> rst = new List<ProductInvoice>();

            //if (dt.Rows.Count > 0)
            //{
            //    for (int i = 0; i < dt.Rows.Count; i++)
            //    {
            //        decimal value = Convert.ToDecimal(dt.Rows[i]["Amount"]);
            //        rst.Add(
            //            new ProductInvoice
            //            {
            //                itemId = dt.Rows[i]["itemid"].ToString(),
            //                itemName = dt.Rows[i]["ItemName"].ToString(),
            //                qty = dt.Rows[i]["Qty"].ToString(),
            //                weight = dt.Rows[i]["weight"].ToString(),
            //                // amount = dt.Rows[i]["Amount"].ToString()
            //                amount = (int)Math.Round(value, MidpointRounding.ToEven)
            //            }
            //        );
            //    }
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void DistributorApp_GetCoupanSchemme(int distributorId)
        {
            //  String str = "SELECT ms.SchemeId,ms.SchemeName,count(*) AS PendingCoupan FROM MastCoupanScheme ms LEFT JOIN transcoupan t ON ms.SchemeId=t.SchemeId WHERE t.DistId IN (" + distributorId + ") AND t.RetailerId IS null GROUP BY ms.SchemeId,ms.SchemeName";
            String str = @"SELECT SchemeId SCHEMEID,SchemeName SCHEMENAME FROM MastCoupanScheme where Active=1 ORDER BY SchemeName";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            //List<DistributorSchemeList> rst = new List<DistributorSchemeList>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new DistributorSchemeList
            //        {
            //            schemeId = dt.Rows[i]["SchemeId"].ToString(),
            //            schemeName = dt.Rows[i]["SchemeName"].ToString()
            //            //   pendingCoupan = dt.Rows[i]["PendingCoupan"].ToString()

            //        }
            //    );
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_JSGetUnderUser(string Smid)
        {
            string str = @"SELECT ms.SMId ID,(ms.SMName + ' - ' + md.DesName) AS NAME FROM MastSalesRep ms LEFT JOIN mastlogin ml ON ms.UserId=ml.Id LEFT JOIN mastdesignation md ON ml.DesigId=md.DesId WHERE SMId IN (SELECT SMId FROM MastSalesRepGrp WHERE maingrp=" + Smid + ") ORDER BY MS.SMName";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            //List<GetUnderUsers> rst = new List<GetUnderUsers>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new GetUnderUsers
            //        {
            //            Id = dt.Rows[i]["SMid"].ToString(),
            //            Name = dt.Rows[i]["SMName"].ToString()

            //        }
            //    );
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_GetTop9Sale(int distid, string division)
        {
            string stradd = "";
            if (division != "All")
            {
                stradd = "AND Divisioncode='" + division + "'";
            }
            string str = @"SELECT TOP 9 Replace(Convert(varchar,Vdate,106),' ','/') DATE,DistInvDocId INVOICENO,isnull(Sum(net_total),0) AS NETAMOUNT,TRANSPORTER TRANSPORTER FROM TransDistInv1 WHERE DistId=" + distid + " GROUP BY Vdate,DistInvDocId,TRANSPORTER ORDER BY VDate DESC ";
            DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            //List<Top5ProductInvoice> rst = new List<Top5ProductInvoice>();
            //if (dt.Rows.Count > 0)
            //{
            //    for (int i = 0; i < dt.Rows.Count; i++)
            //    {
            //        decimal value = Convert.ToDecimal(dt.Rows[i]["netamount"]);
            //        rst.Add(
            //            new Top5ProductInvoice
            //            {
            //                date = Convert.ToDateTime(dt.Rows[i]["VDate"]).ToString("dd/MMM/yyyy"),
            //                invoiceNo = dt.Rows[i]["DistInvDocId"].ToString(),
            //                netAmount = (int)Math.Round(value, MidpointRounding.ToEven),
            //                transporter = dt.Rows[i]["TRANSPORTER"].ToString(),

            //            }
            //        );
            //    }
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_GetTop5SaleInvoiceItemWise(string invoiceNo)
        {

            //            string str = @"SELECT mi.SyncId,mi.ItemName,t1.vdate,t1.DistInvDocId,t1.qty,t1.rate,t1.amount,t1.Tax_Amt,t1.Net_Total,t1.CaseNo,mi.unit FROM TransDistInv1 t1 LEFT JOIN mastitem mi ON t1.itemid=mi.ItemId 
            //                          WHERE DistInvDocId='" + invoiceNo + "' ORDER BY mi.SyncId";

            string str = @"SELECT mi.SyncId,mi.ItemName,t1.vdate ,t1.DistInvDocId,t1.qty,t1.rate,t1.amount,t1.Tax_Amt,t1.Net_Total,t1.CaseNo,mi.unit  FROM TransDistInv1 t1 LEFT JOIN mastitem mi ON t1.itemid=mi.ItemId 
                          WHERE DistInvDocId='" + invoiceNo + "' " +
                        " union All SELECT '' as SyncId,t2.Description as ItemName,t.vdate,t2.DistInvDocId,0 as qty,0 as rate,t2.amount,0 as Tax_Amt,t2.amount as Net_Total,'' as CaseNo," +
                        " '' as unit FROM TransDistInv2 t2 LEFT JOIN TransDistInv t ON t2.DistInvDocId=t.DistInvDocId  WHERE t2.DistInvDocId='" + invoiceNo + "'";

            DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            DataRow dr = dt.NewRow();
            dr["ItemName"] = "Total Amount";
            dr["Net_Total"] = Convert.ToDecimal(dt.Compute("SUM(Net_Total)", string.Empty));
            dt.Rows.Add(dr);
            //List<Top5ProductInvoiceItemwise> rst = new List<Top5ProductInvoiceItemwise>();
            //if (dt.Rows.Count > 0)
            //{

            //    for (int i = 0; i < dt.Rows.Count; i++)
            //    {
            //        string vdate = "";
            //        if (!string.IsNullOrEmpty(dt.Rows[i]["VDate"].ToString()))
            //        {
            //            vdate = Convert.ToDateTime(dt.Rows[i]["VDate"]).ToString("dd/MMM/yyyy");
            //        }
            //        decimal value = Convert.ToDecimal(dt.Rows[i]["Net_Total"]);

            //        rst.Add(
            //            new Top5ProductInvoiceItemwise
            //            {
            //                syncId = dt.Rows[i]["SyncId"].ToString(),
            //                itemName = dt.Rows[i]["ItemName"].ToString(),
            //                //date = Convert.ToDateTime(dt.Rows[i]["VDate"]).ToString("dd/MMM/yyyy"),
            //                date = vdate,
            //                invoiceno = dt.Rows[i]["DistInvDocId"].ToString(),
            //                qty = dt.Rows[i]["qty"].ToString(),
            //                rate = dt.Rows[i]["rate"].ToString(),
            //                amount = dt.Rows[i]["amount"].ToString(),
            //                tax = dt.Rows[i]["Tax_Amt"].ToString(),
            //                netAmount = (int)Math.Round(value, MidpointRounding.ToEven),
            //                caseno = dt.Rows[i]["CaseNo"].ToString(),
            //                unit = dt.Rows[i]["unit"].ToString()

            //            }
            //        );
            //    }
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetInTimeStatistics(int smid, string date)
        {
            DataTable dt = new DataTable();
            //dt = DbConnectionDAL.GetDataTable(CommandType.Text, "select sum(InTime) InTime,Name,[date],max([time]) AS [time] from((select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),created_date,106) [date],convert(char(5), created_date, 108) [time] from(select tv.smid,count(visid) InTime,'Before 9:00' Name,smname,created_date from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),created_date,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and CAST(created_date As Time) < CAST('9:00' As Time) and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,created_date) tbl group by name,smname,smid,created_date)Union(select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),created_date,106) [date],convert(char(5), created_date, 108) [time] from(select tv.smid,count(visid) InTime,'9:00-10:00' Name,smname,created_date from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),created_date,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and CAST(created_date As Time) between CAST('9:00' As Time) and CAST('10:00' As Time) and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,created_date) tbl group by name,smid,smname,created_date)Union(select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),created_date,106) [date],convert(char(5), created_date, 108) [time] from(select tv.smid,count(visid) InTime,'10:00-11:00' Name,smname,created_date from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),created_date,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and CAST(created_date As Time) between CAST('10:00' As Time) and CAST('11:00' As Time) and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,created_date) tbl group by name,smid,smname,created_date)Union(select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),created_date,106) [date],convert(char(5), created_date, 108) [time] from(select tv.smid,count(visid) InTime,'11:00-12:00' Name,smname,created_date from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),created_date,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and CAST(created_date As Time) between CAST('11:00' As Time) and CAST('12:00' As Time) and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,created_date) tbl group by name,smid,smname,created_date)Union(select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),created_date,106) [date],convert(char(5), created_date, 108) [time] from(select count(visid) InTime,'After 12:00' Name,tv.smid,smname,created_date from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),created_date,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and CAST(created_date As Time) > CAST('12:00' As Time) and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,created_date) tbl group by name,smid,smname,created_date)) tbl group by Name,[date] ORDER BY [date], [time] asc");

            dt = DbConnectionDAL.GetDataTable(CommandType.Text, "select sum(InTime) COUNT,Name NAME,[date],max([time]) AS [time] from (select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from (select tv.smid,count(visid) InTime,'Before 9:00' Name,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and frTime1 < '09:00' and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smname,smid,vDate,frTime1 " +

                     " Union select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select tv.smid,count(visid) InTime,'9:00-10:00' Name,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and frTime1 >= '09:00' and frTime1 < '10:00' and tv.smid in (SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smid,smname,vDate,frTime1 " +

                    " Union select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select tv.smid,count(visid) InTime,'10:00-11:00' Name,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and frTime1 >= '10:00' and frTime1 < '11:00' and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smid,smname,vDate,frTime1 " +

                    " Union select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from (select tv.smid,count(visid) InTime,'11:00-12:00' Name,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and frTime1 >= '11:00' and frTime1 < '12:00' and tv.smid in (SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smid,smname,vDate,frTime1 " +

                    " Union select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select count(visid) InTime,'After 12:00' Name,tv.smid,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and frTime1 >= '12:00' and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smid,smname,vDate,frTime1) tbl group by Name,[date] ORDER BY [date], [time] asc");


            //List<InTimeStatistics> rst = new List<InTimeStatistics>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new InTimeStatistics
            //        {
            //            name = dt.Rows[i]["Name"].ToString(),
            //            count = dt.Rows[i]["InTime"].ToString()

            //        }
            //    );
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetInTimeStatisticsDetails(string status, int smid, string date)
        {
            DataTable dt = new DataTable(); DataTable dtt = new DataTable(); DataRow[] rowArray = null;
            //dt = DbConnectionDAL.GetDataTable(CommandType.Text, "(select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select tv.smid,count(visid) InTime,'Before 9:00' Name,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and CAST(frTime1 As Time) < CAST('9:00' As Time) and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smname,smid,vDate,frTime1) Union(select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select tv.smid,count(visid) InTime,'9:00-10:00' Name,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and CAST(frTime1 As Time) between CAST('9:00' As Time) and CAST('10:00' As Time) and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smid,smname,vDate,frTime1)Union(select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select tv.smid,count(visid) InTime,'10:00-11:00' Name,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and CAST(frTime1 As Time) between CAST('10:00' As Time) and CAST('11:00' As Time) and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smid,smname,vDate,frTime1)Union(select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select tv.smid,count(visid) InTime,'11:00-12:00' Name,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and CAST(frTime1 As Time) between CAST('11:00' As Time) and CAST('12:00' As Time) and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smid,smname,vDate,frTime1)Union(select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select count(visid) InTime,'After 12:00' Name,tv.smid,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and CAST(frTime1 As Time) > CAST('12:00' As Time) and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smid,smname,vDate,frTime1)");

            dt = DbConnectionDAL.GetDataTable(CommandType.Text, "select smname SMNAME,date DATE,time TIME from (select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select tv.smid,count(visid) InTime,'Before 9:00' Name,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and frTime1 <'09:00' and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smname,smid,vDate,frTime1 " +

             " Union select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select tv.smid,count(visid) InTime,'9:00-10:00' Name,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and frTime1 >= '09:00' and frTime1 < '10:00' and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smid,smname,vDate,frTime1 " +

           " Union select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select tv.smid,count(visid) InTime,'10:00-11:00' Name,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and frTime1 >= '10:00' and frTime1 < '11:00' and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smid,smname,vDate,frTime1 " +

           " Union select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select tv.smid,count(visid) InTime,'11:00-12:00' Name,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and frTime1 >= '11:00' and frTime1 < '12:00' and tv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smid,smname,vDate,frTime1 " +

          " Union select distinct smid,sum(InTime) InTime,Name,smname,convert(varchar(20),vDate,106) [date],convert(char(5), frTime1, 108) [time] from(select count(visid) InTime,'After 12:00' Name,tv.smid,smname,vDate,frTime1 from transvisit tv inner join MastSalesRep mp on mp.smid = tv.smid where CONVERT(VARCHAR(20),vDate,101)='" + Convert.ToDateTime(date).ToString("MM/dd/yyyy") + "' and frTime1 >= '12:00' and tv.smid in (SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by tv.smid,smname,vDate,frTime1) tbl group by name,smid,smname,vDate,frTime1) a order by convert(datetime,  a.date, 103) asc");

            string ChartType = status;

            if (ChartType == "Before 9:00")
                rowArray = dt.Select("Name='Before 9:00'");
            else if (ChartType == "9:00-10:00")
                rowArray = dt.Select("Name='9:00-10:00'");
            else if (ChartType == "10:00-11:00")
                rowArray = dt.Select("Name='10:00-11:00'");
            else if (ChartType == "11:00-12:00")
                rowArray = dt.Select("Name='11:00-12:00'");
            else if (ChartType == "After 12:00")
                rowArray = dt.Select("Name='After 12:00'");
            dtt = dt.Clone();
            foreach (DataRow row in rowArray)
                dtt.ImportRow(row);

            //List<InTimeStatistics> rst = new List<InTimeStatistics>();
            //for (int i = 0; i <= (dtt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new InTimeStatistics
            //        {
            //            smname = dtt.Rows[i]["smname"].ToString(),
            //            date = dtt.Rows[i]["date"].ToString(),
            //            time = dtt.Rows[i]["time"].ToString()
            //        }
            //    );
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dtt));
            dtt.Dispose();
            dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetNoSalesReason(int smid, string date)
        {
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, "select sum(NoSalesCount) NOSALESCOUNT,FVNAME from((select count(*)NoSalesCount,mfvr.FVName,tfv.smid,mas.smname,mp.areaid,mp.beatid,ma.AreaName,ma1.AreaName BeatName from transfailedvisit tfv inner join MastFailedVisitRemark mfvr on tfv.ReasonId=mfvr.FVId LEFT JOIN MastParty mp ON tfv.partyid=mp.partyid left join mastsalesrep mas on tfv.smid=mas.smid left join mastarea ma on mp.areaid=ma.areaid left join mastarea ma1 on mp.beatid=ma1.areaid WHERE mp.partydist=0 and VDate='" + date + "' and tfv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by FVName,tfv.smid,smname,mp.areaid,beatid,ma.areatype,ma.AreaName,ma1.AreaName )Union All(select count(*)NoSalesCount,mfvr.FVName,tfv.smid,mas.smname,mp.areaid,mp.beatid,ma.AreaName,ma1.AreaName BeatName from temp_transfailedvisit tfv inner join MastFailedVisitRemark mfvr on tfv.ReasonId=mfvr.FVId LEFT JOIN MastParty mp ON tfv.partyid=mp.partyid left join mastsalesrep mas on tfv.smid=mas.smid left join mastarea ma on mp.areaid=ma.areaid left join mastarea ma1 on mp.beatid=ma1.areaid WHERE mp.partydist=0 and VDate='" + date + "' and tfv.smid in(SELECT smid FROM MastSalesRep WHERE SMId IN (SELECT smid FROM mastsalesrepgrp WHERE  maingrp IN (" + smid + ")) and Active=1) group by FVName,tfv.smid,smname,mp.areaid,beatid,ma.areatype,ma.AreaName,ma1.AreaName )) tbl group by FVName");

            //List<NoSalesReason> rst = new List<NoSalesReason>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new NoSalesReason
            //        {
            //            name = dt.Rows[i]["FVName"].ToString(),
            //            count = dt.Rows[i]["NoSalesCount"].ToString()

            //        }
            //    );
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetAttendence(int smid, string date)
        {
            //             String str = @"select sum(Person) as Person,'Total' as Status from (select count(*) as Person from mastsalesrep a left join mastsalesrep b on a.underid=b.smid 
            //             left join mastrole mr on mr.roleid=a.roleid where  a.smid in (select smid from mastsalesrepgrp with (nolock)  where maingrp = " + smid + ") and a.smid<> " + smid + " AND a.Active=1 group by a.smname ) as Person Union All select  count(*) as Person, 'Present' as Status from TransVisit with (nolock) where vdate ='" + date + "' and IsNull(appstatus,'DSR') !='Reject' and SMId IN (select smid from mastsalesrepgrp WHERE MainGrp=" + smid + ") Union All  select count(*) as Person, 'Absent' as Status from mastsalesrep with (nolock) where smname not in ('.') and smid in (select smid from mastsalesrepgrp WHERE MainGrp=" + smid + " AND smid<> " + smid + ") and active=1 and SMId not in (select SMId from TransVisit with (nolock) where vdate ='" + date + "' Union All select  SMId  from TransLeaveRequest with (nolock) where '" + date + "' between FromDate and ToDate  and  AppStatus='Approve' ) Union All select count(*) as Person, 'Leave' as Status from TransLeaveRequest with (nolock) where SMId in  (select SMId from mastsalesrep with (nolock) where  active=1  ) and '" + date + "' between FromDate and ToDate  and  IsNull(appstatus,'DSR') !='Reject'  and AppStatus not in ('Reject' ,'Pending')";


            // tghis i scomments don  9 sep 2019
            //            String str = @"select sum(Person) as Person,'Total' as Status from (select count(*) as Person from mastsalesrep a left join mastsalesrep b on a.underid=b.smid 
            //             left join mastrole mr on mr.roleid=a.roleid where  a.smid in (select smid from mastsalesrepgrp with (nolock)  where maingrp = " + smid + ") and a.smid<> " + smid + " AND a.Active=1 group by a.smname ) as Person Union All select  count(*) as Person, 'Present' as Status from TransVisit with (nolock) where vdate ='" + date + "' and IsNull(appstatus,'DSR') !='Reject' and SMId IN (select smid from mastsalesrepgrp WHERE MainGrp=" + smid + ") Union All  select count(*) as Person, 'Absent' as Status from mastsalesrep with (nolock) where smname not in ('.') and smid in (select smid from mastsalesrepgrp WHERE MainGrp=" + smid + " AND smid<> " + smid + ") and active=1 and SMId not in (select SMId from TransVisit with (nolock) where vdate ='" + date + "' Union All select  SMId  from TransLeaveRequest with (nolock) where '" + date + "' between FromDate and ToDate  and  AppStatus='Approve' ) Union All select count(*) as Person, 'Leave' as Status from TransLeaveRequest with (nolock) where SMId in  (select SMId from mastsalesrep with (nolock) where  active=1  ) AND AppStatus='Approve' AND FromDate BETWEEN '" + date + "'  AND '" + date + "' or ToDate BETWEEN '" + date + "'  AND '" + date + "' and AppStatus not in ('Reject' ,'Pending') and smid in (select smid from mastsalesrepgrp WHERE MainGrp=" + smid + " AND smid<> " + smid + ")";

            String str = @"select sum(Person) as COUNT,'Total' as STATUS from (select count(*) as Person from mastsalesrep a left join mastsalesrep b on a.underid=b.smid 
             left join mastrole mr on mr.roleid=a.roleid where  a.smid in (select smid from mastsalesrepgrp with (nolock)  where maingrp = " + smid + ") and a.smid<> " + smid + " AND a.Active=1 group by a.smname ) as Person Union All select  count(*) as Person, 'Present' as Status from TransVisit with (nolock) where vdate ='" + date + "' and IsNull(appstatus,'DSR') !='Reject' and SMId IN (select smid from mastsalesrepgrp WHERE MainGrp=" + smid + ") and smid <>" + smid + " Union All  select count(*) as Person, 'Absent' as Status from mastsalesrep with (nolock) where smname not in ('.') and smid in (select smid from mastsalesrepgrp WHERE MainGrp=" + smid + " AND smid<> " + smid + ") and active=1  and smid <>" + smid + "  and SMId not in (select SMId from TransVisit with (nolock) where vdate ='" + date + "' Union All select  SMId  from TransLeaveRequest with (nolock) where '" + date + "' between FromDate and ToDate  and  AppStatus='Approve' ) Union All select count(*) as Person, 'Leave' as Status from TransLeaveRequest with (nolock) where SMId in  (select SMId from mastsalesrep with (nolock) where  active=1  ) AND AppStatus='Approve' AND FromDate BETWEEN '" + date + "'  AND '" + date + "' or ToDate BETWEEN '" + date + "'  AND '" + date + "' and AppStatus not in ('Reject' ,'Pending') and smid in (select smid from mastsalesrepgrp WHERE MainGrp=" + smid + " AND smid<> " + smid + " ) Union All select count(*) as Person, 'Total Leave' as Status from TransLeaveRequest with (nolock) where SMId in (select SMId from mastsalesrep with (nolock) where  active=1  ) AND FromDate BETWEEN '" + date + "'  AND '" + date + "' or ToDate BETWEEN '" + date + "'  AND '" + date + "' and AppStatus not in ('Reject') and smid in (select smid from mastsalesrepgrp WHERE MainGrp=" + smid + " AND smid<> " + smid + ")";


            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            //List<AttendenceList> rst = new List<AttendenceList>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new AttendenceList
            //        {
            //            status = dt.Rows[i]["Status"].ToString(),
            //            count = dt.Rows[i]["Person"].ToString()

            //        }
            //    );
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_GetAttendenceDetails(string status, int smid, string date)
        {
            String str = "";

            if (status == "Total")
            {
                str = "select a.SMID,a.smname SALESPERSON,a.mobile MOBILE,b.smname as REPORTINGPERSON,mr.ROLETYPE,case when a.Active=1 then 'Yes' else 'No' end Active,'' as CURRENTLOCATION,'' as  FROMDATE, '' as TODATE, '' as                    from mastsalesrep a left join mastsalesrep b on a.underid=b.smid left join mastrole mr on mr.roleid=a.roleid where a.smid not in (" + smid + ") and a.smid in (select smid from MastSalesRepGrp where MainGrp  in (" + smid + ")) and a.active=1 order by a.smname asc";
            }
            else if (status == "Present")
            {
                str = "select a.SMID,a.smname SALESPERSON,a.mobile MOBILE,b.smname as REPORTINGPERSON,tv.frtime1 as InTime,tv.totime1 as outTime,(select top 1 case address when '' then 'No Address Found' when null  then 'No Address Found' else address end as address  from (select  isnull (address,'No Address Found') as Address,lat_long_datetime  from TransVisit where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/') and smid = a.smid  union all select isnull (address,'No Address Found') as Address,lat_long_datetime from  temp_transdemo where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/') and smid = a.smid union all select  isnull (address,'No Address Found') as Address,lat_long_datetime  from distributercollection where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/') and smid = a.smid  union all select  isnull (address,'No Address Found') as Address,lat_long_datetime from  temp_transvisitdist where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/')  and smid = a.smid   union all  select  isnull (address,'No Address Found') as Address,lat_long_datetime  from  temp_transorder where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/')  and smid = a.smid  union all select  isnull (address,'No Address Found') as Address,lat_long_datetime from temp_Transdemo where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/')   and smid = a.smid  union all select  isnull (address,'No Address Found') as Address,lat_long_datetime from temp_transcompetitor where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/')  and smid = a.smid   union all select  isnull (address,'No Address Found') as Address,lat_long_datetime from temp_transorder1 where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/')  and smid = a.smid union all select  isnull (address,'No Address Found') as Address,lat_long_datetime from temp_TransFailedVisit where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/')  and smid = a.smid  union all select  isnull (address,'No Address Found') as Address,lat_long_datetime from temp_transdiststock where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/')  and smid = a.smid  union all select  isnull (address,'No Address Found') as Address,lat_long_datetime from temp_transcollection where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/') and smid = a.smid ) a order by lat_long_datetime desc) as CURRENTLOCATION,'' as  FROMDATE, '' as TODATE, '' as REASON from mastsalesrep a left join mastsalesrep b on a.underid=b.smid left join transvisit tv on a.smid=tv.smid  WHERE a.smid IN (select smid from mastsalesrepgrp with (nolock)  where maingrp = " + smid + ") and a.active=1 and a.smid<> " + smid + " and a.smid in (select  smid from TransVisit with (nolock) where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/')  and IsNull(appstatus,'DSR') !='Reject') and tv.vdate=replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/') Order By a.smname";
            }
            else if (status == "Absent")
            {
                str = "select a.SMID,a.smname SALESPERSON,a.mobile MOBILE,b.smname as REPORTINGPERSON,'' as CURRENTLOCATION,'' as  FROMDATE, '' as TODATE, '' as REASON from mastsalesrep a left join mastsalesrep b on a.underid=b.smid where a.smname not in ('.') and a.smid in (select smid from mastsalesrep with (nolock) where smid in (select smid from mastsalesrepgrp with (nolock)  where maingrp = " + smid + ") and active=1 and smid<> " + smid + " and SMId not in (select  SMId from TransVisit with (nolock) where vdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/')) AND SMId NOT IN (SELECT SMId from TransLeaveRequest with (nolock) where Fromdate = replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/') and AppStatus not in ('Reject' ,'Pending'))) Order By a.smname";
            }
            else
            {
                str = "select a.SMID,a.smname SALESPERSON,a.mobile MOBILE,b.smname as REPORTINGPERSON,tl.fromdate FROMDATE,tl.todate TODATE,tl.reason REASON,'' as CURRENTLOCATION from mastsalesrep a left join mastsalesrep b on a.underid=b.smid left join transleaverequest tl on tl.smid=a.smid WHERE a.smid IN (select smid from mastsalesrepgrp with (nolock)  where maingrp = " + smid + ") and a.active=1 and a.smid<> " + smid + " and replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/') between FromDate and ToDate  and a.smid in (select smid from TransLeaveRequest with (nolock) where SMId in  (select SMId from mastsalesrep with (nolock) where  active=1  ) and replace(convert(NVARCHAR, DateAdd(minute,330,'" + date + "'), 106), ' ', '/') between FromDate and ToDate  and  IsNull(appstatus,'DSR') !='Reject'  and AppStatus not in ('Reject' ,'Pending')) Order By a.smname";
            }
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            //List<AttendenceListDetails> rst = new List<AttendenceListDetails>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new AttendenceListDetails
            //        {
            //            Salesperson = dt.Rows[i]["smname"].ToString(),
            //            mobile = dt.Rows[i]["mobile"].ToString(),
            //            reportingperson = dt.Rows[i]["reportingPerson"].ToString(),
            //            currentLocation = dt.Rows[i]["Location"].ToString(),
            //            fromdate = dt.Rows[i]["fromdate"].ToString(),
            //            toDate = dt.Rows[i]["todate"].ToString(),
            //            reason = dt.Rows[i]["reason"].ToString()

            //        }
            //    );
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        //////////////////////Manager api optimize


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetPriceList_V_1_0()
        {

            #region Variable Declaration
            string SMID = "", DISTID = "";
            string PriceListApplicability = "";
            DataTable dt = new DataTable();
            DataTable dtval = new DataTable();
            dtval.Columns.Add(new DataColumn("PRICELIST", typeof(DataTable)));
            dtval.Columns.Add(new DataColumn("STATUS", typeof(string)));
            dtval.Columns.Add(new DataColumn("MSZ", typeof(string)));
            DataRow row;
            row = dtval.NewRow();

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();

            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string minDate = objResponse.BODY[0].MINDATE;
            SMID = objResponse.BODY[0].SMID;
            DISTID = objResponse.BODY[0].DISTID;


            #endregion

            try
            {

                if (SMID != "" && DISTID != "")
                {
                    int smid = Convert.ToInt32(SMID);
                    int DistId = Convert.ToInt32(DISTID);

                    string MQry = ""; Query = "select dataamt from mastenviro";
                    int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                    string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
                    if (Convert.ToInt64(minDate) > 0)
                    {
                        MQry = " where T.MS >'" + minDate + "'";
                    }

                    PriceListApplicability = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "select PriceListApplicability from MastEnviro"));

                    if (PriceListApplicability == "")
                    {
                        row["STATUS"] = "200";
                        row["MSZ"] = "Enviro doesn't have PriceListApplicability";
                        row["PRICELIST"] = dt;
                    }
                    else
                    {
                        if (smid > 0)
                        {

                            if (PriceListApplicability.ToLower() == "country") dt = DbConnectionDAL.GetDataTable(CommandType.Text, " select top " + NoOfRec + " * from  (SELECT  P.ID,I.ITEMNAME,I.SYNCID, FORMAT(P.WEFDATE,'dd/MM/yyyy')  WEFDATE,CAST(P.MRP AS VARCHAR) MRP,CAST(P.DP AS VARCHAR) DP ,CAST(P.RP AS VARCHAR) RP, ISNULL(P.PRICELISTAPPLICABILITY,'') PRICELISTAPPLICABILITY,I.UNDERID AS PRODGRPID,I.ITEMID AS PRODID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(P.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(P.CREATEDDATE AS DATE), P.CREATEDDATE) AS [MS], MCNT.SYNCID AS COUNTRY_STATE_CITY_DIST_SYNCID,p.COUNTRY_STATE_CITY_DIST_ID   FROM PRICELIST P LEFT JOIN MASTITEM I ON I.ITEMID=P.ITEMID left join MastArea mCNT on mCNT.AreaId=p.Country_State_City_Dist_id  where   p.wefDate <='" + BusinessLayer.Settings.GetUTCTime().ToString("dd/MMM/yyyy") + "' and p.IsEffected=1 and p.Country_State_City_Dist_id in (select distinct cnt.AreaId from  mastarea ma left join MastArea ct on ct.AreaId=ma.UnderId left join MastArea mdt on mdt.AreaId=ct.UnderId left join MastArea st on st.AreaId=mdt.UnderId left join MastArea rg on rg.AreaId=st.UnderId left join MastArea cnt on cnt.AreaId=rg.UnderId where ma.AreaId in( select LinkCode from MastLink where PrimCode=" + smid + " ) and ma.AreaType='AREA') ) as T " + MQry + " order by T.wefdate desc");

                            else if (PriceListApplicability.ToLower() == "state") dt = DbConnectionDAL.GetDataTable(CommandType.Text, "select top " + NoOfRec + " * from  (SELECT P.ID,I.ITEMNAME,I.SYNCID, FORMAT(P.WEFDATE,'dd/MM/yyyy')  WEFDATE,CAST(P.MRP AS VARCHAR) MRP,CAST(P.DP AS VARCHAR) DP ,CAST(P.RP AS VARCHAR) RP, ISNULL(P.PRICELISTAPPLICABILITY,'') PRICELISTAPPLICABILITY,I.UNDERID AS PRODGRPID,I.ITEMID AS PRODID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(P.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(P.CREATEDDATE AS DATE), P.CREATEDDATE) AS [MS], MST.SYNCID AS COUNTRY_STATE_CITY_DIST_SYNCID,p.COUNTRY_STATE_CITY_DIST_ID   FROM PRICELIST P LEFT JOIN MASTITEM I ON I.ITEMID=P.ITEMID left join MastArea mst on mst.AreaId=p.Country_State_City_Dist_id  where  p.wefDate <='" + BusinessLayer.Settings.GetUTCTime().ToString("dd/MMM/yyyy") + "' and p.IsEffected=1 and p.Country_State_City_Dist_id in (select distinct st.AreaId from  mastarea ma left join MastArea ct on ct.AreaId=ma.UnderId left join MastArea mdt on mdt.AreaId=ct.UnderId left join MastArea st on st.AreaId=mdt.UnderId  where ma.AreaId in( select LinkCode from MastLink where PrimCode=" + smid + " ) and ma.AreaType='AREA')) as T " + MQry + " order by T.wefdate desc ");

                            else if (PriceListApplicability.ToLower() == "city") dt = DbConnectionDAL.GetDataTable(CommandType.Text, "select top " + NoOfRec + " * from  (SELECT   P.ID,I.ITEMNAME,I.SYNCID, FORMAT(P.WEFDATE,'dd/MM/yyyy')  WEFDATE,CAST(P.MRP AS VARCHAR) MRP,CAST(P.DP AS VARCHAR) DP ,CAST(P.RP AS VARCHAR) RP, ISNULL(P.PRICELISTAPPLICABILITY,'') PRICELISTAPPLICABILITY,I.UNDERID AS PRODGRPID,I.ITEMID AS PRODID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(P.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(P.CREATEDDATE AS DATE), P.CREATEDDATE) AS [MS], MCT.SYNCID AS COUNTRY_STATE_CITY_DIST_SYNCID,p.COUNTRY_STATE_CITY_DIST_ID   FROM PRICELIST P LEFT JOIN MASTITEM I ON I.ITEMID=P.ITEMID left join MastArea mCT on mCT.AreaId=p.Country_State_City_Dist_id  where  p.wefDate <='" + BusinessLayer.Settings.GetUTCTime().ToString("dd/MMM/yyyy") + "' and p.IsEffected=1 and p.Country_State_City_Dist_id in (select distinct ct.AreaId from  mastarea ma left join MastArea ct on ct.AreaId=ma.UnderId  where ma.AreaId in( select LinkCode from MastLink where PrimCode=" + smid + " ) and ma.AreaType='AREA') ) as T " + MQry + " order by T.wefdate desc");

                            else if (PriceListApplicability.ToLower() == "dist") dt = DbConnectionDAL.GetDataTable(CommandType.Text, "select top " + NoOfRec + " * from  (SELECT   P.ID,I.ITEMNAME,I.SYNCID, FORMAT(P.WEFDATE,'dd/MM/yyyy')  WEFDATE,CAST(P.MRP AS VARCHAR) MRP,CAST(P.DP AS VARCHAR) DP ,CAST(P.RP AS VARCHAR) RP, ISNULL(P.PRICELISTAPPLICABILITY,'') PRICELISTAPPLICABILITY,I.UNDERID AS PRODGRPID,I.ITEMID AS PRODID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(P.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(P.CREATEDDATE AS DATE), P.CREATEDDATE) AS [MS],MP.SYNCID AS COUNTRY_STATE_CITY_DIST_SYNCID,p.COUNTRY_STATE_CITY_DIST_ID   FROM PRICELIST P LEFT JOIN MASTITEM I ON I.ITEMID=P.ITEMID left join mastparty mp on mp.partyid=p.Country_State_City_Dist_id  where  p.wefDate <='" + BusinessLayer.Settings.GetUTCTime().ToString("dd/MMM/yyyy") + "' and p.IsEffected=1 and p.Country_State_City_Dist_id in (select partyid from mastparty  where AreaId in( select LinkCode from MastLink where PrimCode=" + smid + " ) and isnull(partydist,0)=1)) as T " + MQry + " order by T.wefdate desc ");


                        }
                        else if (DistId > 0)
                        {

                            if (PriceListApplicability.ToLower() == "country") dt = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT TOP " + NoOfRec + " * FROM  (SELECT   P.ID,I.ITEMNAME,I.SYNCID, FORMAT(P.WEFDATE,'dd/MM/yyyy')  WEFDATE,CAST(P.MRP AS VARCHAR) MRP,CAST(P.DP AS VARCHAR) DP ,CAST(P.RP AS VARCHAR) RP, ISNULL(P.PRICELISTAPPLICABILITY,'') PRICELISTAPPLICABILITY,I.UNDERID AS PRODGRPID,I.ITEMID AS PRODID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(P.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(P.CREATEDDATE AS DATE), P.CREATEDDATE) AS [MS], MCNT.SYNCID AS COUNTRY_STATE_CITY_DIST_SYNCID,p.COUNTRY_STATE_CITY_DIST_ID   FROM PRICELIST P LEFT JOIN MASTITEM I ON I.ITEMID=P.ITEMID LEFT JOIN MASTAREA MCNT ON MCNT.AREAID=P.COUNTRY_STATE_CITY_DIST_ID  where   p.wefDate <='" + BusinessLayer.Settings.GetUTCTime().ToString("dd/MMM/yyyy") + "' and p.IsEffected=1 and p.Country_State_City_Dist_id in (select distinct cnt.AreaId from  mastarea ma left join MastArea ct on ct.AreaId=ma.UnderId left join MastArea mdt on mdt.AreaId=ct.UnderId left join MastArea st on st.AreaId=mdt.UnderId left join MastArea rg on rg.AreaId=st.UnderId left join MastArea cnt on cnt.AreaId=rg.UnderId where ma.AreaId in( select areaid from mastparty where partyid=" + DistId + " and isnull(partydist,0)=1))  ) as T " + MQry + " order by T.wefdate desc ");

                            else if (PriceListApplicability.ToLower() == "state") dt = DbConnectionDAL.GetDataTable(CommandType.Text, "select top " + NoOfRec + " * from  (SELECT   P.ID,I.ITEMNAME,I.SYNCID, FORMAT(P.WEFDATE,'dd/MM/yyyy')  WEFDATE,CAST(P.MRP AS VARCHAR) MRP,CAST(P.DP AS VARCHAR) DP ,CAST(P.RP AS VARCHAR) RP, ISNULL(P.PRICELISTAPPLICABILITY,'') PRICELISTAPPLICABILITY,I.UNDERID AS PRODGRPID,I.ITEMID AS PRODID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(P.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(P.CREATEDDATE AS DATE), P.CREATEDDATE) AS [MS], MST.SYNCID AS COUNTRY_STATE_CITY_DIST_SYNCID,p.COUNTRY_STATE_CITY_DIST_ID   FROM PRICELIST P LEFT JOIN MASTITEM I ON I.ITEMID=P.ITEMID left join MastArea mst on mst.AreaId=p.Country_State_City_Dist_id  where  p.wefDate <='" + BusinessLayer.Settings.GetUTCTime().ToString("dd/MMM/yyyy") + "' and p.IsEffected=1 and p.Country_State_City_Dist_id in (select distinct st.AreaId from  mastarea ma left join MastArea ct on ct.AreaId=ma.UnderId left join MastArea mdt on mdt.AreaId=ct.UnderId left join MastArea st on st.AreaId=mdt.UnderId  where ma.AreaId in( select areaid from mastparty where partyid=" + DistId + " and isnull(partydist,0)=1) )) as T " + MQry + " order by T.wefdate desc  ");

                            else if (PriceListApplicability.ToLower() == "city") dt = DbConnectionDAL.GetDataTable(CommandType.Text, "select top " + NoOfRec + " * from  (SELECT P.ID,I.ITEMNAME,I.SYNCID, FORMAT(P.WEFDATE,'dd/MM/yyyy')  WEFDATE,CAST(P.MRP AS VARCHAR) MRP,CAST(P.DP AS VARCHAR) DP ,CAST(P.RP AS VARCHAR) RP, ISNULL(P.PRICELISTAPPLICABILITY,'') PRICELISTAPPLICABILITY,I.UNDERID AS PRODGRPID,I.ITEMID AS PRODID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(P.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(P.CREATEDDATE AS DATE), P.CREATEDDATE) AS [MS], MCT.SYNCID AS COUNTRY_STATE_CITY_DIST_SYNCID,p.COUNTRY_STATE_CITY_DIST_ID   FROM PRICELIST P LEFT JOIN MASTITEM I ON I.ITEMID=P.ITEMID left join MastArea mCT on mCT.AreaId=p.Country_State_City_Dist_id  where  p.wefDate <='" + BusinessLayer.Settings.GetUTCTime().ToString("dd/MMM/yyyy") + "' and p.IsEffected=1 and p.Country_State_City_Dist_id in (select cityid from mastparty where partyid=" + DistId + " ) ) as T " + MQry + " order by T.wefdate desc  ");

                            else if (PriceListApplicability.ToLower() == "dist")
                                dt = DbConnectionDAL.GetDataTable(CommandType.Text, "select top " + NoOfRec + " * from  (SELECT  P.ID,I.ITEMNAME,I.SYNCID, FORMAT(P.WEFDATE,'dd/MM/yyyy')  WEFDATE,CAST(P.MRP AS VARCHAR) MRP,CAST(P.DP AS VARCHAR) DP ,CAST(P.RP AS VARCHAR) RP, ISNULL(P.PRICELISTAPPLICABILITY,'') PRICELISTAPPLICABILITY,I.UNDERID AS PRODGRPID,I.ITEMID AS PRODID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(P.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(P.CREATEDDATE AS DATE), P.CREATEDDATE) AS [MS], MP.SYNCID AS COUNTRY_STATE_CITY_DIST_SYNCID,p.COUNTRY_STATE_CITY_DIST_ID   FROM PRICELIST P LEFT JOIN MASTITEM I ON I.ITEMID=P.ITEMID left join mastparty mp on mp.partyid =p.Country_State_City_Dist_id  where  p.wefDate <='" + BusinessLayer.Settings.GetUTCTime().ToString("dd/MMM/yyyy") + "' and p.IsEffected=1 and p.Country_State_City_Dist_id=" + DistId + " ) as T " + MQry + " order by T.wefdate desc  ");

                            if (dt.Rows.Count > 0)
                            {
                                row["STATUS"] = "200";
                                row["MSZ"] = "SuccessFul";
                                row["PRICELIST"] = dt;
                            }
                            else
                            {
                                row["STATUS"] = "200";
                                row["MSZ"] = "No Record Found";
                                row["PRICELIST"] = dt;
                            }

                        }
                        if (dt.Rows.Count > 0)
                        {
                            row["STATUS"] = "200";
                            row["MSZ"] = "SuccessFul";
                            row["PRICELIST"] = dt;
                        }
                        else
                        {
                            row["STATUS"] = "200";
                            row["MSZ"] = "No Record Found";
                            row["PRICELIST"] = dt;
                        }

                    }

                }
                else
                {
                    row["STATUS"] = "200";
                    row["MSZ"] = "Please supply  data for desired Result.";
                    row["PRICELIST"] = dt;

                }



            }
            catch (Exception ex)
            {
                row["STATUS"] = "400";
                row["MSZ"] = "Error" + ex.ToString();
                row["PRICELIST"] = dt;
            }
            dtval.Rows.Add(row);
            Context.Response.Write(JsonConvert.SerializeObject(dtval));
            dtval.Dispose();
            dt.Dispose();
        }

        //15-05-2021-------------- UPPERCASE KEYS WITH OPTIMIZE
        //15-06-2021-------- add log in every step---- anurag
        //17-06-2021-------- All Parameters in Upper Case---- anurag
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void InsertTemp_Sample()
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "", filepath = "";
            var httpRequest = HttpContext.Current.Request;
            //var productText = Server.HtmlEncode("<p>example</p>");
            //string wlid = this.HttpContext.Request.Unvalidated["wlid"];
            //string dd = httpRequest.Unvalidated["REMARKS"];
            string VisId = httpRequest.Unvalidated["VISID"].ToString();
            string Android_Id = httpRequest.Unvalidated["ANDROID_ID"].ToString();
            string UserId = httpRequest.Unvalidated["USERID"].ToString();
            string VDate = httpRequest.Unvalidated["VDATE"].ToString();
            string SMId = httpRequest.Unvalidated["SMID"].ToString();
            string PartyId = httpRequest.Unvalidated["PARTYID"].ToString();
            string AreaId = httpRequest.Unvalidated["AREAID"].ToString();
            string Remarks = httpRequest.Unvalidated["REMARKS"].ToString();
            //string Remarks = httpRequest.Unvalidated["REMARKS"];

            string OrderAmount = httpRequest.Unvalidated["ORDERAMOUNT"].ToString();
            string longitude = httpRequest.Unvalidated["LONGITUDE"].ToString();
            string latitude = httpRequest.Unvalidated["LATITUDE"].ToString();

            string lat_long_dt = httpRequest.Unvalidated["LAT_LONG_DT"].ToString();
            string mobile_created_date = httpRequest.Unvalidated["MOBILE_CREATED_DATE"].ToString();
            string ImgUrl = httpRequest.Unvalidated["IMGURL"].ToString();
            string image1 = httpRequest.Unvalidated["IMAGE1"].ToString();
            DataTable dtvisit = new DataTable();
            try
            {
                if (string.IsNullOrEmpty(mobile_created_date))
                {
                    mobile_created_date = "0";
                }

                if (!string.IsNullOrEmpty(lat_long_dt))
                {
                    double ticks = double.Parse(lat_long_dt);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

                if (!string.IsNullOrEmpty(mobile_created_date))
                {
                    double ticks1 = double.Parse(mobile_created_date);
                    TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                    DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                    mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                }

                string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
                string path = "http://" + host;

                if (image1.Contains("http://"))
                {
                    ImgUrl = image1.Replace(path, "~");
                }
                //else if (image1 != "N/A")
                //{
                //    byte[] bytes = Convert.FromBase64String(image1);

                //    Image image;
                //    using (MemoryStream ms = new MemoryStream(bytes))
                //    {
                //        image = Image.FromStream(ms);
                //    }
                //    string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                //    if (!Directory.Exists(directoryPath))
                //    {
                //        Directory.CreateDirectory(directoryPath);
                //    }



                //    String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                //    filename = Path.GetFileName(SMId + '-' + timeStamp);
                //    {
                //        //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                //        string filePath = Server.MapPath("~/DSRImages" + "/O_" + filename + ".png");
                //        File.WriteAllBytes(filePath, bytes);
                //        ImgUrl = "~/DSRImages" + "/O_" + filename + ".png";
                //    }

                //}

                if (httpRequest.Files.Count > 0)
                {
                    foreach (string file in httpRequest.Files)
                    {
                        var postedFile = httpRequest.Files[file];
                        string ss = Path.GetExtension(postedFile.FileName);
                        string fileName = Guid.NewGuid() + Path.GetExtension(postedFile.FileName);
                        string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                        if (!Directory.Exists(directoryPath))
                        {
                            Directory.CreateDirectory(directoryPath);
                        }


                        if ((Path.GetExtension(postedFile.FileName) == ".jpg") || (Path.GetExtension(postedFile.FileName) == ".jpeg") || (Path.GetExtension(postedFile.FileName) == ".png"))
                        {
                            String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                            filepath = "~/DSRImages/" + "O_" + timeStamp + '-' + postedFile.FileName;
                            var filePath = HttpContext.Current.Server.MapPath(filepath);
                            postedFile.SaveAs(filePath);
                        }
                    }
                }


                var frtime = "0";
                var totime = "0";
                string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
                string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");



                if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                {
                    try
                    {
                        if (mobiletimehm != "00:00")
                        {
                            string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                            DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                            if (dtfr.Rows.Count > 0)
                            {
                                TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                                TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                                TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                                if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                                    {
                                        frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                    }
                                }
                                if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                                    {
                                        totime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                                    }
                                }
                            }
                            dtfr.Dispose();
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception in Update date in TransVisit @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
                    }
                }


                string OrdDocId = Settings.GetDocID("SAMP", DateTime.Now); string str = string.Empty;
                Settings.SetDocID("SAMP", OrdDocId);
                string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
                if (ChkLock == "True")
                {

                }

                else if (ChkLock == "False")
                {
                    try
                    {
                        str = "delete from temp_TransSample where partyid=" + PartyId + " and VisId=" + VisId + "";
                        createText += "" + "" + Query + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteQuery(str);
                        Query = "select SampleId AS ID,SampleDocId AS DOCUMENTID, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS MS   from temp_TransSample where SampleDocId='" + OrdDocId + "'";
                        createText += "" + "" + Query + "" + Environment.NewLine;
                        //Created_date
                        str = "select * from temp_TransSample where  android_id='" + Android_Id + "'";
                        createText += "" + "" + str + "" + Environment.NewLine;
                        DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                        if (dt.Rows.Count > 0)
                        {
                            str = "delete from transSample where android_id='" + Android_Id + "'";
                            createText += "" + "" + str + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(str);
                        }
                        WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        if (latitude != "")
                        {
                            Address = DMT.InsertAddress(latitude, longitude);
                        }
                        //  string Address = DMT.InsertAddress(latitude, longitude);
                        // str = "INSERT INTO dbo.temp_TransSample (VisId,SampleDocId, Android_Id, UserId,VDate,SMId, PartyId,AreaId,Remarks,Amount,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,[ImgUrl],Sample,DistId) " +
                        //" VALUES ('" + VisId + "', '" + OrdDocId + "', '" + Android_Id + "', " + UserId + ", '" + VDate + "', " + SMId + " , '" + PartyId + "', '" + AreaId + "', '" + Remarks + "', " + OrderAmount + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + filepath + "',0,0)";

                        str = "INSERT INTO dbo.temp_TransSample (VisId,SampleDocId, Android_Id, UserId,VDate,SMId, PartyId,AreaId,Remarks,Amount,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,[ImgUrl],Sample) " +
                      " VALUES ('" + VisId + "', '" + OrdDocId + "', '" + Android_Id + "', " + UserId + ", '" + VDate + "', " + SMId + " , '" + PartyId + "', '" + AreaId + "', '" + Remarks + "', " + OrderAmount + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + filepath + "',0)";
                        createText += "" + "" + str + "" + Environment.NewLine;
                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception while Insert data from TransSample to temp_TransSample @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
                    }
                }

                dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["ID"].ToString() + ", " + dtvisit.Rows[0]["DOCUMENTID"].ToString() + ", " + dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;
            }
            catch (Exception ex)
            {
                createText += " @@@@@@  Exception Generated in _InsertTemp_Sample_  @@@@@" + ex.ToString() + "" + Environment.NewLine;
            }
            finally
            {
                //bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMId + "_InsertTemp_Sample_" + VDate + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        //15-05-2021-------------- UPPERCASE KEYS WITH OPTIMIZE
        //15-06-2021-------- add log in every step---- anurag
        //17-06-2021-------- All Parameters in Upper Case---- anurag
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void InsertTemp_Sample1(int SAMPLEID, int VISID, string SNO, int USERID, string VDATE, int SMID, string PARTYID, int AREAID, int ITEMID, decimal QTY, decimal RATE, string REMARKS, decimal AMOUNT, string ANDROID_ID, string ANDROID_ID1, string CASES, string UNIT, string LONGITUDE, string LATITUDE, string LAT_LONG_DT, string MOBILE_CREATED_DATE, string SEQNO, int DISTID, decimal DISCOUNT)
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            string Query = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";


            //var httpRequest = HttpContext.Current.Request;

            //string SampleId = httpRequest.Params["SampleId"].ToString();
            //string VisId = httpRequest.Params["VisId"].ToString();
            //string Sno = httpRequest.Params["Sno"].ToString();
            //string UserId = httpRequest.Params["UserId"].ToString();
            //string VDate = httpRequest.Params["VDate"].ToString();
            //string SMId = httpRequest.Params["SMId"].ToString();
            //string PartyId = httpRequest.Params["PartyId"].ToString();
            //string AreaId = httpRequest.Params["AreaId"].ToString();


            //string ItemId = httpRequest.Params["ItemId"].ToString();
            //string Qty = httpRequest.Params["Qty"].ToString();
            //string lat_long_dt = httpRequest.Params["lat_long_dt"].ToString();

            //string mobile_created_date = httpRequest.Params["mobile_created_date"].ToString();
            //string seqNo = httpRequest.Params["seqNo"].ToString();
            //string DistId = httpRequest.Params["DistId"].ToString();
            //string discount = httpRequest.Params["discount"].ToString();
            if (string.IsNullOrEmpty(DISTID.ToString()))
            {
                DISTID = 0;
            }

            if (string.IsNullOrEmpty(DISCOUNT.ToString()))
            {
                DISCOUNT = 0;
            }

            if (string.IsNullOrEmpty(MOBILE_CREATED_DATE))
            {
                MOBILE_CREATED_DATE = "0";
            }
            DataTable dtvisit = new DataTable();
            try
            {
                if (!string.IsNullOrEmpty(LAT_LONG_DT))
                {
                    double ticks = double.Parse(LAT_LONG_DT);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

                if (!string.IsNullOrEmpty(MOBILE_CREATED_DATE))
                {
                    double ticks1 = double.Parse(MOBILE_CREATED_DATE);
                    TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                    DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                    mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                }

                var frtime = "0";
                var totime = "0";
                string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
                string dtSuppliedDate = Convert.ToDateTime(VDATE).ToString("yyyy-MM-dd");

                if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                {
                    try
                    {
                        if (mobiletimehm != "00:00")
                        {
                            string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VISID + "";
                            DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                            if (dtfr.Rows.Count > 0)
                            {
                                TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                                TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                                TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                                if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VISID + "";
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                                    {
                                        frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VISID + "";
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                    }
                                }
                                if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VISID + "";
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                                    {
                                        totime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VISID + "";
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                                    }
                                }
                            }
                            dtfr.Dispose();
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception in Update date in TransVisit @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
                    }
                }

                string str = string.Empty; List<Visit1> rst = new List<Visit1>();
                string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VISID) + "").ToString();
                if (ChkLock == "True")
                {

                }
                else if (ChkLock == "False")
                {
                    try
                    {
                        if (SEQNO == "0")
                        {
                            str = "delete from Temp_transsample1 where partyid=" + PARTYID + " and visid=" + VISID + " ";
                            createText += "" + "" + str + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(str);
                        }

                        str = "select sampledocid from Temp_transsample where SampleId=" + SAMPLEID + "";
                        createText += "" + "" + str + "" + Environment.NewLine;
                        string docid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, str));


                        str = "select SampleId from Temp_transsample where smid=" + SMID + " and vdate='" + VDATE + "' and partyid=" + PARTYID + "";
                        createText += "" + "" + str + "" + Environment.NewLine;
                        string _OrdId = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, str));
                        if (!string.IsNullOrEmpty(_OrdId))
                        {
                            SAMPLEID = Convert.ToInt32(_OrdId);
                        }
                        else
                        {
                            SAMPLEID = 0;
                        }
                        //if (!string.IsNullOrEmpty(docid))   freely insert to db
                        {
                            str = "select * from Temp_transsample1 where android_id='" + ANDROID_ID + "' and android_id1='" + ANDROID_ID1 + "'";
                            createText += "" + "" + str + "" + Environment.NewLine;
                            DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                            if (dt.Rows.Count > 0)
                            {
                                str = "delete from TEMP_transsample1 where android_id='" + ANDROID_ID + "' and android_id1='" + ANDROID_ID1 + "'";
                                createText += "" + "" + str + "" + Environment.NewLine;
                                DbConnectionDAL.ExecuteQuery(str);
                            }
                            WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                            string Address = "";
                            if (LATITUDE != "")
                            {
                                Address = DMT.InsertAddress(LATITUDE, LONGITUDE);
                            }
                            //  string Address = DMT.InsertAddress(latitude, longitude);
                            str = "INSERT INTO dbo.Temp_transsample1 (SampleId,VisId,SampleDocId, Sno, UserId,VDate,SMId, PartyId,AreaId,ItemId,Qty,Rate,Remarks,amount,Android_Id,android_id1,Created_date,cases,unit,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,DistId,Discount) " +
                            " VALUES (" + SAMPLEID + ", '" + VISID + "', '" + docid + "', '" + SNO + "', '" + USERID + "', '" + VDATE + "', " + SMID + " , '" + PARTYID + "', '" + AREAID + "', " + ITEMID + ", " + QTY + ", " + RATE + ",'" + REMARKS + "', " + AMOUNT + ", '" + ANDROID_ID + "', '" + ANDROID_ID1 + "',DateAdd(minute,330,getutcdate())," + Convert.ToDecimal(CASES) + "," + Convert.ToDecimal(UNIT) + ",'" + LATITUDE + "','" + LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "'," + DISTID + "," + DISCOUNT + ")";
                            createText += "" + "" + str + "" + Environment.NewLine;
                            //System.IO.StreamWriter TextFileCID = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/AppLogFile-" + SMId + "-.txt"), true);

                            //TextFileCID.WriteLine("UnlockInsertQuery  :-" + str);
                            //TextFileCID.Close();
                            if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                            { }

                            Query = "select Sample1Id AS ID,SampleId AS ORDERID,SampleDocId AS DOCUMENTID,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS MS from Temp_transsample1 where SampleDocId='" + docid + "'";
                            createText += "" + "" + Query + "" + Environment.NewLine;
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception while Insert data from transsample1 to Temp_transsample1 @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
                    }
                }


                dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["ID"].ToString() + ", " + dtvisit.Rows[0]["DOCUMENTID"].ToString() + ", " + dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;
                //for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
                //{
                //    rst.Add(
                //        new Visit1
                //        {
                //            Id = dtvisit.Rows[i]["Sample1Id"].ToString(),
                //            OrderId = dtvisit.Rows[i]["SampleId"].ToString(),
                //            DocumentId = dtvisit.Rows[i]["SampleDocId"].ToString(),
                //            MS = dtvisit.Rows[i]["Milliseconds"].ToString()
                //        }
                //    );
                //}
            }
            catch (Exception ex)
            {
                createText += "@@@Exception in _InsertTemp_Sample1_ @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
            }
            finally
            {
                //bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMID + "_InsertTemp_Sample1_" + VDATE + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        #region "Response"

        [DataContract]
        public class InsertProspectDistResponseStatus
        {
            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string HeaderMsg { get; set; }
            [DataMember]
            public List<InsertProspectDistResponseDetail> data { get; set; }
        }
        [DataContract]
        public class InsertProspectDistResponseDetail
        {
            [DataMember]
            public string ProspectDistId { get; set; }
            [DataMember]
            public string CreatedDate { get; set; }
        }

        #endregion

        public string PushNotificationForDistAndManager(string msg, string userid, string DeviceNo, string ProductType, string title)
        {
            var result = "";
            string Query = "", Query1 = "";
            DataTable dt = new DataTable();
            string serverKey = "", senderId = "";
            try
            {


                DataTable dtserverdetail = DbConnectionDAL.GetDataTable(CommandType.Text, "Select senderid,serverkey,DistApp_FireBase_ServerKey,DistApp_FireBase_SenderID,ManagerApp_FireBase_ServerKey,ManagerApp_FireBase_SenderID,compurl,CompCode from Mastenviro ");
                if (!string.IsNullOrEmpty(DeviceNo))
                {
                    string regid_query = "select Reg_id from LineMaster where Upper(Product)='" + ProductType + "' and  CompCode='" + dtserverdetail.Rows[0]["CompCode"].ToString() + "' and Mobile='" + DeviceNo + "' ";

                    string constrDmLicense = "data source=103.231.40.154,1565; user id=dmlicense_user; pwd=SaG@e321; initial catalog=dmlicense;";

                    Query1 = "select 1 from LineMaster WHERE DeviceId='" + DeviceNo + "' and Upper(Product)='" + ProductType + "' AND Active ='Y'";
                    string us = DbConnectionDAL.GetStringScalarVal(Query1);

                    SqlConnection cn = new SqlConnection(constrDmLicense);
                    SqlCommand cmd = new SqlCommand(regid_query, cn);
                    SqlCommand cmd1 = new SqlCommand(Query1, cn);
                    cmd.CommandType = CommandType.Text;
                    cmd1.CommandType = CommandType.Text;
                    cn.Open();
                    string regId = cmd.ExecuteScalar() as string;
                    string licenceinfo = cmd1.ExecuteScalar() as string;
                    cn.Close();
                    cmd = null;
                    if (!string.IsNullOrEmpty(regId))
                    {
                        Query1 = "insert into TransPushNotification(smid,[Subject],Content,WebFlag) output inserted.id " +
                            "values (" + userid + ",'" + title + "','" + msg + "','Y')";
                        string Id = DbConnectionDAL.GetStringScalarVal(Query1);

                        if (ProductType == "FFMS")
                        {
                            serverKey = dtserverdetail.Rows[0]["serverkey"].ToString();
                            senderId = dtserverdetail.Rows[0]["senderid"].ToString();
                        }
                        else if (ProductType == "CRM MANAGER")
                        {
                            serverKey = dtserverdetail.Rows[0]["ManagerApp_FireBase_ServerKey"].ToString();
                            senderId = dtserverdetail.Rows[0]["ManagerApp_FireBase_SenderID"].ToString();
                        }
                        else if (ProductType == "GOLDIEE")
                        {
                            serverKey = dtserverdetail.Rows[0]["DistApp_FireBase_ServerKey"].ToString();
                            senderId = dtserverdetail.Rows[0]["DistApp_FireBase_SenderID"].ToString();
                        }


                        string webAddr = "https://fcm.googleapis.com/fcm/send";

                        //var result = "-1";
                        var tRequest = (HttpWebRequest)WebRequest.Create(webAddr);
                        tRequest.ContentType = "application/json";
                        tRequest.Headers.Add(string.Format("Authorization: key={0}", serverKey));
                        tRequest.Headers.Add(string.Format("Sender: id={0}", senderId));
                        tRequest.Method = "POST";
                        var payload = new
                        {
                            to = regId,
                            priority = "high",
                            content_available = true,
                            data = new
                            {
                                body = msg,
                                title = title,
                                msg = msg
                            }
                        };

                        var serializer = new JavaScriptSerializer();
                        using (var streamWriter = new StreamWriter(tRequest.GetRequestStream()))
                        {
                            string json = serializer.Serialize(payload);

                            streamWriter.Write(json);
                            streamWriter.Flush();
                        }

                        var httpResponse = (HttpWebResponse)tRequest.GetResponse();
                        using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                        {
                            result = streamReader.ReadToEnd();

                            Query1 = "update TransPushNotification set serverresponse='" + result + "' where id=" + Id + "";
                            DbConnectionDAL.ExecuteQuery(Query1);
                        }
                    }
                    else
                    {
                        result += "Registration No Is Null";
                    }
                }
            }
            catch (Exception ex)
            {
                result = ex.Message.ToString();
            }
            return result;
        }

        //15-06-2021----------- add log in every step---------- anurag
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void InsertProspectDistMaster()
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            #region "Variable Declaration"
            string _PartyName = "", _Address1 = "", _Address2 = "", _Pin = "", _Email = "", _Mobile = "", _Phone_No_Office = "", _Phone_No_Residence = "", _Business_Nature = "", _Partner_Propector_Director_Name = "", _Storage_Facility = "", _Storage_Facility_Square_fit = "", _No_Of_Emp_SalesPerson = "", _No_Of_Emp_Others = "", _Investment_Proposed = "", _Monthly_Exp_turnover = "", _Dist_underYou = "", _Retailer_UnderYou = "", _No_Of_System_Computing = "", _Avail_trans_for_delivery = "", _NewsPaper_Published = "", _Festival_fairs_In_Your_area_Timings = "", _GSTIN = "", _GSTIN_DOC = "", _PAN_NO = "", _PAN_DOC = "", _ADHAAR_NO = "", _ADHAAR_DOC = "", _FSSAI_Lisence_No = "", _FSSAI_Lisence_DOC = "", _Bank_Name = "", _Bank_DOC = "", _Branch_Name = "", _ACCNO = "", _Other_Branch_Name = "", _Remark = "", _Approved_Rejected = "", _Approved_RejectedDate = "", _Approved_RejectedRemark = "", _Android_Id = "", _Longitude = "", _Latitude = "", _Address = "", _Lat_long_datetime = "", _ContactPerson = "", _mobileCreateDateTime = "";
            int _Approved_RejectedBySMID = 0, _Created_UserId = 0, _CityId = 0;
            string minDate1 = "", minDate2 = "", createTimeStamp = "";
            string _str = "", status = "400", HeaderMzg = "", filePath = "", filePathName = "";
            string smid = "", username = "", msgurl = "", _msg = "", displaytitle = "", pro_id = "";
            string[] filepathname = new string[5];
            DataTable dt;
            List<InsertProspectDistResponseStatus> ResponseStatus = new List<InsertProspectDistResponseStatus>();
            List<InsertProspectDistResponseDetail> distdata = new List<InsertProspectDistResponseDetail>();

            #endregion
            try
            {
                var httpRequest = HttpContext.Current.Request;

                _PartyName = httpRequest.Params["PartyName"].ToString();
                _Address1 = httpRequest.Params["Address1"].ToString();
                _Address2 = httpRequest.Params["Address2"].ToString();
                _Pin = httpRequest.Params["Pin"].ToString();
                _CityId = Convert.ToInt32(httpRequest.Params["CityId"].ToString());
                _Email = httpRequest.Params["Email"].ToString();
                _Mobile = httpRequest.Params["Mobile"].ToString();
                _Phone_No_Office = httpRequest.Params["Phone_No_Office"].ToString();
                _Phone_No_Residence = httpRequest.Params["Phone_No_Residence"].ToString();
                _Business_Nature = httpRequest.Params["Business_Nature"].ToString();
                _Partner_Propector_Director_Name = httpRequest.Params["Partner_Propector_Director_Name"].ToString();
                _Storage_Facility = httpRequest.Params["Storage_Facility"].ToString();
                _Storage_Facility_Square_fit = httpRequest.Params["Storage_Facility_Square_fit"].ToString();
                _No_Of_Emp_SalesPerson = httpRequest.Params["No_Of_Emp_SalesPerson"].ToString();
                _No_Of_Emp_Others = httpRequest.Params["No_Of_Emp_Others"].ToString();
                _Investment_Proposed = httpRequest.Params["Investment_Proposed"].ToString();
                _Monthly_Exp_turnover = httpRequest.Params["Monthly_Exp_turnover"].ToString();
                _Dist_underYou = httpRequest.Params["Dist_underYou"].ToString();
                _Retailer_UnderYou = httpRequest.Params["Retailer_UnderYou"].ToString();
                _No_Of_System_Computing = httpRequest.Params["No_Of_System_Computing"].ToString();
                _Avail_trans_for_delivery = httpRequest.Params["Avail_trans_for_delivery"].ToString();
                _NewsPaper_Published = httpRequest.Params["NewsPaper_Published"].ToString();
                _Festival_fairs_In_Your_area_Timings = httpRequest.Params["Festival_fairs_In_Your_area_Timings"].ToString();
                _GSTIN = httpRequest.Params["GSTIN"].ToString();
                _PAN_NO = httpRequest.Params["PAN_NO"].ToString();
                _ADHAAR_NO = httpRequest.Params["ADHAAR_NO"].ToString();
                _FSSAI_Lisence_No = httpRequest.Params["FSSAI_Lisence_No"].ToString();
                _Bank_Name = httpRequest.Params["Bank_Name"].ToString();
                _Branch_Name = httpRequest.Params["Branch_Name"].ToString();
                _ACCNO = httpRequest.Params["ACCNO"].ToString();
                _Other_Branch_Name = httpRequest.Params["Other_Branch_Name"].ToString();
                _Remark = httpRequest.Params["Remark"].ToString();
                _Created_UserId = Convert.ToInt32(httpRequest.Params["Created_UserId"].ToString());
                _Android_Id = httpRequest.Params["Android_Id"].ToString();
                _Longitude = httpRequest.Params["Longitude"].ToString();
                _Latitude = httpRequest.Params["Latitude"].ToString();
                _Lat_long_datetime = httpRequest.Params["Lat_long_datetime"].ToString();
                _ContactPerson = httpRequest.Params["ContactPerson"].ToString();
                _mobileCreateDateTime = httpRequest.Params["mobileCreateDateTime"].ToString();

                createText += "" + _PartyName + "," + _Address1 + "," + _Address2 + "," + _Pin + "," + _Email + "," + _Mobile + "," + _Phone_No_Office + "," + _Phone_No_Residence + "," + _Business_Nature + "," + _Partner_Propector_Director_Name + "," + _Storage_Facility + "," + _Storage_Facility_Square_fit + "," + _No_Of_Emp_SalesPerson + "," + _No_Of_Emp_Others + "," + _Investment_Proposed + "," + _Monthly_Exp_turnover + "," + _Dist_underYou + "," + _Retailer_UnderYou + "," + _No_Of_System_Computing + "," + _Avail_trans_for_delivery + "," + _NewsPaper_Published + "," + _Festival_fairs_In_Your_area_Timings + "," + _GSTIN + "," + _GSTIN_DOC + "," + _PAN_NO + "," + _PAN_DOC + "," + _ADHAAR_NO + "," + _ADHAAR_DOC + "," + _FSSAI_Lisence_No + "," + _FSSAI_Lisence_DOC + "," + _Bank_Name + "," + _Bank_DOC + "," + _Branch_Name + "," + _ACCNO + "," + _Other_Branch_Name + "," + _Remark + "," + _Approved_Rejected + "," + _Approved_RejectedDate + "," + _Approved_RejectedRemark + "," + _Android_Id + "," + _Longitude + "," + _Latitude + "," + _Address + "," + _Lat_long_datetime + "," + _ContactPerson + "," + _mobileCreateDateTime + "" + Environment.NewLine;

                try
                {
                    if (!string.IsNullOrEmpty(_Lat_long_datetime))
                    {
                        double ticks = double.Parse(_Lat_long_datetime);
                        TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                        DateTime startdate = new DateTime(1970, 1, 1) + time;
                        minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    }
                    else
                    {
                        minDate1 = DateTime.Now.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    }
                    if (!string.IsNullOrEmpty(_mobileCreateDateTime))
                    {
                        double ticks = double.Parse(_mobileCreateDateTime);
                        TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                        DateTime startdate = new DateTime(1970, 1, 1) + time;
                        minDate2 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    }
                    else
                    {
                        minDate2 = DateTime.Now.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    }
                    WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");

                    if (_Latitude != "")
                    {
                        _Address = DMT.InsertAddress(_Latitude, _Longitude);
                    }


                    //insert

                    ////File Save

                    if (httpRequest.Files.Count > 0)
                    {
                        string keyname = ""; int i = 0;

                        string directoryPath = Server.MapPath(string.Format("~/{0}/", "ProspectDistributor"));
                        if (!Directory.Exists(directoryPath)) Directory.CreateDirectory(directoryPath);

                        foreach (string keys in httpRequest.Files.Keys)
                        {

                            // HttpPostedFile file = httpRequest.Files[keys];
                            var postedFile = httpRequest.Files[keys];
                            string fileName = Guid.NewGuid() + Path.GetExtension(postedFile.FileName);
                            String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                            filePathName = "~/ProspectDistributor/" + "" + _PartyName + '-' + keys + '-' + timeStamp + postedFile.FileName;
                            filePath = HttpContext.Current.Server.MapPath(filePathName);
                            filepathname[i] = filePathName;
                            postedFile.SaveAs(filePath);

                            if (keys == "GSTIN_DOC")
                            {
                                _GSTIN_DOC = filePathName;
                            }
                            else if (keys == "PAN_DOC")
                            {
                                _PAN_DOC = filePathName;
                            }
                            else if (keys == "ADHAAR_DOC")
                            {
                                _ADHAAR_DOC = filePathName;
                            }
                            else if (keys == "FSSAI_Lisence_DOC")
                            {
                                _FSSAI_Lisence_DOC = filePathName;
                            }
                            else if (keys == "Bank_DOC")
                            {
                                _Bank_DOC = filePathName;
                            }

                            i++;
                        }

                    }

                    ////

                    _str = "insert into MastProspect_Distributor (PartyName, Address1, Address2, Pin, CityId, Email, Mobile, [Phone No Office], [Phone No Residence],  [Business Nature], [Partner_Propector_Director Name], [Storage Facility], [Storage Facility Square fit], [No Of Emp_SalesPerson], [No Of Emp_Others], [Investment Proposed], [Monthly Exp_turnover], Dist_underYou, Retailer_UnderYou, [No Of System_Computing], [Avail trans for delivery], [NewsPaper Published], [Festival_fairs In Your area_Timings], GSTIN, [GSTIN DOC], [PAN NO], [PAN DOC], [ADHAAR NO], [ADHAAR DOC], [FSSAI Lisence No], [FSSAI Lisence DOC], [Bank Name], [Bank DOC], [Branch Name], ACCNO, [Other Branch Name], Remark, Approved_Rejected, Approved_RejectedBySMID, Approved_RejectedDate, Approved_RejectedRemark, [Created UserId], Android_Id, Longitude, Latitude, Address, Lat_long_datetime,contactPersonName,mobile_created_date_time) output inserted.partyid values ('" + _PartyName + "', '" + _Address1 + "', '" + _Address2 + "', " + _Pin + ", " + _CityId + ", '" + _Email + "', '" + _Mobile + "', '" + _Phone_No_Office + "', '" + _Phone_No_Residence + "', '" + _Business_Nature + "', '" + _Partner_Propector_Director_Name + "', '" + _Storage_Facility + "', " + Convert.ToDecimal(_Storage_Facility_Square_fit) + ", " + _No_Of_Emp_SalesPerson + ", " + _No_Of_Emp_Others + ", '" + _Investment_Proposed + "', '" + _Monthly_Exp_turnover + "', " + _Dist_underYou + ", " + _Retailer_UnderYou + ", '" + _No_Of_System_Computing + "', '" + _Avail_trans_for_delivery + "', '" + _NewsPaper_Published + "', '" + _Festival_fairs_In_Your_area_Timings + "', '" + _GSTIN + "', '" + _GSTIN_DOC + "', '" + _PAN_NO + "', '" + _PAN_DOC + "', '" + _ADHAAR_NO + "', '" + _ADHAAR_DOC + "', '" + _FSSAI_Lisence_No + "', '" + _FSSAI_Lisence_DOC + "', '" + _Bank_Name + "', '" + _Bank_DOC + "', '" + _Branch_Name + "', '" + _ACCNO + "', '" + _Other_Branch_Name + "', '" + _Remark + "', '" + _Approved_Rejected + "', " + _Approved_RejectedBySMID + ", '" + _Approved_RejectedDate + "', '" + _Approved_RejectedRemark + "', " + _Created_UserId + ", '" + _Android_Id + "', '" + _Longitude + "', '" + _Latitude + "', '" + _Address + "', '" + minDate1 + "', '" + _ContactPerson + "', '" + minDate2 + "')";

                    createText += "" + "" + _str + "" + Environment.NewLine;

                    string returnval = DbConnectionDAL.GetStringScalarVal(_str);

                    if (!string.IsNullOrEmpty(returnval))
                    {
                        string _partyId = returnval;

                        _str = "select Created_Date from MastProspect_Distributor where partyid=" + _partyId;
                        createText += "" + "" + _str + "" + Environment.NewLine;
                        dt = DbConnectionDAL.GetDataTable(CommandType.Text, _str);
                        DateTime createDate = Convert.ToDateTime(dt.Rows[0]["Created_Date"]);
                        TimeSpan time = (createDate - new DateTime(1970, 1, 1, 0, 0, 0, 0).ToLocalTime());



                        distdata.Add(
                            new InsertProspectDistResponseDetail
                            {
                                ProspectDistId = _partyId,
                                CreatedDate = Convert.ToString(time.TotalSeconds)
                            }
                            );
                        status = "200";
                        HeaderMzg = "Record Inserted Successfully";

                        //Push notification <<<

                        _str = "SELECT SMId,smname FROM MastSalesRep WHERE UserId=" + _Created_UserId;
                        createText += "" + "" + _str + "" + Environment.NewLine;
                        dt = DbConnectionDAL.GetDataTable(CommandType.Text, _str);
                        if (dt.Rows.Count > 0)
                        {
                            smid = dt.Rows[0]["smid"].ToString();
                            username = dt.Rows[0]["smname"].ToString();

                            msgurl = "ProspectDistributorApprovalForm.aspx?partyid=" + returnval;
                            _msg = "A new prospect distributor " + _PartyName + " has been opened by " + username;
                            pro_id = "PROSPECTDIST";
                            displaytitle = "Prospect Distributor";

                            _str = "select userid,smid,mobile from mastsalesrep where smid in (SELECT MainGrp from MastSalesRepGrp where SMId=" + smid + " and MainGrp <>" + smid + ")";
                            createText += "" + "" + _str + "" + Environment.NewLine;
                            dt = DbConnectionDAL.GetDataTable(CommandType.Text, _str);
                            if (dt.Rows.Count > 0)
                            {
                                for (int i = 0; dt.Rows.Count > i; i++)
                                {
                                    _str = " INSERT INTO TransNotification ([pro_id],[userid],[VDate],[msgURL],[displayTitle],[Status],[FromUserId],[SMId],[ToSmid],[Title])  output inserted.notiid values ('" + pro_id + "'," + Convert.ToInt32(dt.Rows[i]["userid"].ToString().Trim()) + ",getdate(),'" + msgurl + "','" + _msg + "','" + 0 + "'," + Convert.ToInt32(_Created_UserId) + "," + smid + "," + dt.Rows[i]["smid"].ToString() + ",'" + displaytitle + "') ";
                                    createText += "" + "" + _str + "" + Environment.NewLine;
                                    returnval = DbConnectionDAL.GetStringScalarVal(_str);
                                    if (!string.IsNullOrEmpty(returnval))
                                    {
                                        createText += "PushNotificationForDistAndManager " + _msg + "," + dt.Rows[i]["userid"].ToString() + "," + dt.Rows[i]["mobile"].ToString() + "," + "CRM MANAGER" + "," + displaytitle + Environment.NewLine;

                                        PushNotificationForDistAndManager(_msg, dt.Rows[i]["userid"].ToString(), dt.Rows[i]["mobile"].ToString(), "CRM MANAGER", displaytitle);
                                    }
                                }


                            }
                        }


                        //>>>end notificaiton
                    }
                    else
                    {
                        for (int i = 0; i < 5; i++)
                        {
                            filePath = filepathname[i];
                            if (System.IO.File.Exists(filePath)) System.IO.File.Delete(filePath);
                        }
                        status = "400";
                        HeaderMzg = "Insertion Failure.";

                        createText += "" + "" + status + HeaderMzg + "" + Environment.NewLine;
                    }

                }
                catch (Exception ex)
                {
                    status = "400";
                    HeaderMzg = ex.ToString();

                    createText += "" + "" + status + HeaderMzg + "" + Environment.NewLine;
                }
                ResponseStatus.Add(
                   new InsertProspectDistResponseStatus
                   {

                       Status = status,
                       HeaderMsg = HeaderMzg,
                       data = distdata
                   });
            }
            catch (Exception ex)
            {
                createText += "@@@Exception in _InsertProspectDistMaster_ @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
            }
            finally
            {
                //bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                //bodyStream.Dispose();
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + _PartyName + "_InsertProspectDistMaster_" + _mobileCreateDateTime + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }
            Context.Response.Write(JsonConvert.SerializeObject(ResponseStatus));
        }

        //15-05-2021----------- UPPERCASE AND OPTIMIZE
        //15-06-2021------------ add log in every step---- anurag
        //17-06-2021-------- All Parameters in Upper Case---- anurag
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void InsertTemp_SalesReturn()
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            string Query = "", filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "", filepath = "";
            var httpRequest = HttpContext.Current.Request;
            var filePath = "";
            string VisId = httpRequest.Params["VISID"].ToString();
            string Android_Id = httpRequest.Params["ANDROID_ID"].ToString();
            string UserId = httpRequest.Params["USERID"].ToString();
            string VDate = httpRequest.Params["VDATE"].ToString();
            string SMId = httpRequest.Params["SMID"].ToString();
            string PartyId = httpRequest.Params["PARTYID"].ToString();
            string AreaId = httpRequest.Params["AREAID"].ToString();
            string Remarks = httpRequest.Params["REMARKS"].ToString();


            string OrderAmount = httpRequest.Params["ORDERAMOUNT"].ToString();
            string longitude = httpRequest.Params["LONGITUDE"].ToString();
            string latitude = httpRequest.Params["LATITUDE"].ToString();

            string lat_long_dt = httpRequest.Params["LAT_LONG_DT"].ToString();
            string mobile_created_date = httpRequest.Params["MOBILE_CREATED_DATE"].ToString();
            string ImgUrl = httpRequest.Params["IMGURL"].ToString();
            string image1 = httpRequest.Params["IMAGE1"].ToString();
            string RRId = httpRequest.Params["RRID"].ToString();
            string InvoiceName = httpRequest.Params["INVOICENAME"].ToString();
            DataTable dtvisit = new DataTable();
            try
            {
                if (string.IsNullOrEmpty(mobile_created_date))
                {
                    mobile_created_date = "0";
                }

                if (!string.IsNullOrEmpty(lat_long_dt))
                {
                    double ticks = double.Parse(lat_long_dt);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

                if (!string.IsNullOrEmpty(mobile_created_date))
                {
                    double ticks1 = double.Parse(mobile_created_date);
                    TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                    DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                    mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                    mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
                }

                string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
                string path = "http://" + host;

                if (image1.Contains("http://"))
                {
                    ImgUrl = image1.Replace(path, "~");
                }

                if (httpRequest.Files.Count > 0)
                {
                    foreach (string file in httpRequest.Files)
                    {
                        var postedFile = httpRequest.Files[file];
                        string ss = Path.GetExtension(postedFile.FileName);
                        string fileName = Guid.NewGuid() + Path.GetExtension(postedFile.FileName);
                        string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                        if (!Directory.Exists(directoryPath))
                        {
                            Directory.CreateDirectory(directoryPath);
                        }


                        if ((Path.GetExtension(postedFile.FileName) == ".jpg") || (Path.GetExtension(postedFile.FileName) == ".jpeg") || (Path.GetExtension(postedFile.FileName) == ".png"))
                        {
                            String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                            filepath = "~/DSRImages/" + "O_" + timeStamp + '-' + postedFile.FileName;
                            filePath = HttpContext.Current.Server.MapPath(filepath);
                            postedFile.SaveAs(filePath);
                        }
                    }
                }


                var frtime = "0";
                var totime = "0";
                string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
                string dtSuppliedDate = Convert.ToDateTime(VDate).ToString("yyyy-MM-dd");



                if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
                {
                    try
                    {
                        if (mobiletimehm != "00:00")
                        {
                            string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VisId + "";
                            createText += "@@@Execute Query" + "" + strchk + " " + Environment.NewLine;
                            DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                            if (dtfr.Rows.Count > 0)
                            {
                                TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                                TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                                TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                                if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                                    createText += "@@@Execute Query" + "" + strfr + " " + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                                    {
                                        frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VisId + "";
                                        createText += "@@@Execute Query" + "" + strfr + " " + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                    }
                                }
                                if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                                {
                                    string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VisId + "";
                                    createText += "@@@Execute Query" + "" + strfr + " " + Environment.NewLine;
                                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                                }
                                else
                                {
                                    if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                                    {
                                        totime = tsmobiletimehm.ToString(@"hh\:mm");
                                        string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VisId + "";
                                        createText += "@@@Execute Query" + "" + strto + " " + Environment.NewLine;
                                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception in update date in Transvisit" + "" + ex.Message + " " + Environment.NewLine;
                    }
                }


                string OrdDocId = Settings.GetDocID("SALER", DateTime.Now); string str = string.Empty;
                Settings.SetDocID("SALER", OrdDocId);
                string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VisId) + "").ToString();
                if (ChkLock == "True")
                {

                }

                else if (ChkLock == "False")
                {
                    try
                    {
                        str = "delete from temp_TransSalesReturn where partyid=" + PartyId + " and VisId=" + VisId + "";
                        DbConnectionDAL.ExecuteQuery(str);
                        Query = "select SRetId as ID,SRetDocId as DOCUMENTID, (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS MS   from Temp_TransSalesReturn where SRetDocId='" + OrdDocId + "'";
                        createText += "@@@Execute Query" + "" + Query + " " + Environment.NewLine;
                        //Created_date
                        str = "select * from Temp_TransSalesReturn where  android_id='" + Android_Id + "'";
                        createText += "@@@Execute Query" + "" + str + " " + Environment.NewLine;
                        DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                        if (dt.Rows.Count > 0)
                        {
                            str = "delete from transSalesReturn where android_id='" + Android_Id + "'";
                            createText += "@@@Execute Query" + "" + str + " " + Environment.NewLine;
                            DbConnectionDAL.ExecuteQuery(str);
                        }
                        WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                        string Address = "";
                        if (latitude != "")
                        {
                            Address = DMT.InsertAddress(latitude, longitude);
                        }
                        //  string Address = DMT.InsertAddress(latitude, longitude);
                        str = "INSERT INTO dbo.temp_TransSalesReturn (VisId,SRetDocId, Android_Id, UserId,VDate,SMId, PartyId,AreaId,Remarks,Amount,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,[ImgUrl],RRId,InvoiceName) " +
                       " VALUES ('" + VisId + "', '" + OrdDocId + "', '" + Android_Id + "', " + UserId + ", '" + VDate + "', " + SMId + " , '" + PartyId + "', '" + AreaId + "', '" + Remarks + "', " + OrderAmount + ",DateAdd(minute,330,getutcdate()),'" + latitude + "','" + longitude + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + filepath + "'," + RRId + ",'" + InvoiceName + "')";
                        createText += "@@@Execute Query" + "" + str + " " + Environment.NewLine;
                        if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                        { }
                    }
                    catch (Exception ex)
                    {
                        createText += "@@@Exception in Insert data in temp_TransSalesReturn" + "" + ex.Message + " " + Environment.NewLine;
                    }
                }


                dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["Id"].ToString() + ", " + dtvisit.Rows[0]["DocumentId"].ToString() + ", " + dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;
            }
            catch (Exception ex)
            {
                createText += "@@@Exception in _InsertTemp_SalesReturn_ @@@@@@@@@ " + "" + ex.Message + "" + Environment.NewLine;
            }
            finally
            {
                //bodyStream.Dispose();

                createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
                //bodyStream.Dispose();
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + SMId + "_InsertTemp_SalesReturn_" + VDate + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }
            //List<Visit> rst = new List<Visit>();
            //for (int i = 0; i <= (dtvisit.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new Visit
            //        {
            //            Id = dtvisit.Rows[i]["SRetId"].ToString(),
            //            DocumentId = dtvisit.Rows[i]["SRetDocId"].ToString(),
            //            MS = dtvisit.Rows[i]["Milliseconds"].ToString()
            //        }
            //    );
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        //15-05-2021----------- UPPERCASE AND OPTIMIZE
        //17-06-2021-------- add log in every step---- anurag
        //17-06-2021-------- All Parameters in Upper Case---- anurag
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void InsertTemp_SalesRetrun1(int SRETID, int VISID, string SNO, int USERID, string VDATE, int SMID, string PARTYID, int AREAID, int ITEMID, decimal QTY, decimal RATE, string REMARKS, decimal AMOUNT, string ANDROID_ID, string ANDROID_ID1, string CASES, string UNIT, string LONGITUDE, string LATITUDE, string LAT_LONG_DT, string MOBILE_CREATED_DATE, string SEQNO, string RCID, string MFDATE, string BATCHNO)
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            string Query = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";


            //var httpRequest = HttpContext.Current.Request;

            //string SampleId = httpRequest.Params["SampleId"].ToString();
            //string VisId = httpRequest.Params["VisId"].ToString();
            //string Sno = httpRequest.Params["Sno"].ToString();
            //string UserId = httpRequest.Params["UserId"].ToString();
            //string VDate = httpRequest.Params["VDate"].ToString();
            //string SMId = httpRequest.Params["SMId"].ToString();
            //string PartyId = httpRequest.Params["PartyId"].ToString();
            //string AreaId = httpRequest.Params["AreaId"].ToString();


            //string ItemId = httpRequest.Params["ItemId"].ToString();
            //string Qty = httpRequest.Params["Qty"].ToString();
            //string lat_long_dt = httpRequest.Params["lat_long_dt"].ToString();

            //string mobile_created_date = httpRequest.Params["mobile_created_date"].ToString();
            //string seqNo = httpRequest.Params["seqNo"].ToString();
            //string DistId = httpRequest.Params["DistId"].ToString();
            //string discount = httpRequest.Params["discount"].ToString();
            //if (string.IsNullOrEmpty(DistId.ToString()))
            //{
            //    DistId = 0;
            //}

            if (string.IsNullOrEmpty(MFDATE.ToString()))
            {
                MFDATE = "NULL";
            }

            if (string.IsNullOrEmpty(BATCHNO.ToString()))
            {
                BATCHNO = "NULL";
            }

            if (string.IsNullOrEmpty(RCID.ToString()))
            {
                RCID = "0";
            }
            if (string.IsNullOrEmpty(UNIT.ToString()))
            {
                UNIT = "0";
            }
            if (string.IsNullOrEmpty(CASES.ToString()))
            {
                CASES = "0";
            }

            if (string.IsNullOrEmpty(MOBILE_CREATED_DATE))
            {
                MOBILE_CREATED_DATE = "0";
            }

            if (!string.IsNullOrEmpty(LAT_LONG_DT))
            {
                double ticks = double.Parse(LAT_LONG_DT);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(MOBILE_CREATED_DATE))
            {
                double ticks1 = double.Parse(MOBILE_CREATED_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(VDATE).ToString("yyyy-MM-dd");

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + VISID + "";
                    createText = "" + "" + strchk + "" + Environment.NewLine;
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + VISID + "";
                            createText = "" + "" + strchk + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + VISID + "";
                                createText = "" + "" + strchk + "" + Environment.NewLine;
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + VISID + "";
                            createText = "" + "" + strchk + "" + Environment.NewLine;
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + VISID + "";
                                createText = "" + "" + strchk + "" + Environment.NewLine;
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                }
            }

            string str = string.Empty; List<Visit1> rst = new List<Visit1>();
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(VISID) + "").ToString();
            createText = "" + "" + "select Lock from transvisit where visid=" + Convert.ToInt32(VISID) + "" + "" + Environment.NewLine;
            if (ChkLock == "True")
            {

            }
            else if (ChkLock == "False")
            {
                if (SEQNO == "0")
                {
                    str = "delete from Temp_transSalesReturn1 where partyid=" + PARTYID + " and visid=" + VISID + " ";
                    createText = "" + "" + str + "" + Environment.NewLine;
                    DbConnectionDAL.ExecuteQuery(str);
                }

                str = "select SRetDocId from Temp_transSalesReturn where SRetId=" + SRETID + "";
                createText = "" + "" + str + "" + Environment.NewLine;
                string docid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, str));


                str = "select SRetId from Temp_transSalesReturn where smid=" + SMID + " and vdate='" + VDATE + "' and partyid=" + PARTYID + "";
                createText = "" + "" + str + "" + Environment.NewLine;
                string _OrdId = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, str));
                if (!string.IsNullOrEmpty(_OrdId))
                {
                    SRETID = Convert.ToInt32(_OrdId);
                }
                else
                {
                    SRETID = 0;
                }
                //if (!string.IsNullOrEmpty(docid))   freely insert to db
                {
                    str = "select * from Temp_transSalesReturn1 where android_id='" + ANDROID_ID + "' and android_id1='" + ANDROID_ID1 + "'";
                    createText = "" + "" + str + "" + Environment.NewLine;
                    DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                    if (dt.Rows.Count > 0)
                    {
                        str = "delete from TEMP_transSalesReturn1 where android_id='" + ANDROID_ID + "' and android_id1='" + ANDROID_ID1 + "'";
                        createText = "" + "" + str + "" + Environment.NewLine;
                        DbConnectionDAL.ExecuteQuery(str);
                    }
                    WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                    string Address = "";
                    if (LATITUDE != "")
                    {
                        Address = DMT.InsertAddress(LATITUDE, LONGITUDE);
                    }
                    //  string Address = DMT.InsertAddress(latitude, longitude);
                    str = "INSERT INTO dbo.Temp_transSalesReturn1 (SRetId,VisId,SRetDocId, Sno, UserId,VDate,SMId, PartyId,AreaId,ItemId,Qty,Rate,Remarks,amount,Android_Id,android_id1,Created_date,cases,unit,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,RCId,MfDate,BatchNo) " +
                    " VALUES (" + SRETID + ", '" + VISID + "', '" + docid + "', '" + SNO + "', '" + USERID + "', '" + VDATE + "', " + SMID + " , '" + PARTYID + "', '" + AREAID + "', " + ITEMID + ", " + QTY + ", " + RATE + ",'" + REMARKS + "', " + AMOUNT + ", '" + ANDROID_ID + "', '" + ANDROID_ID1 + "',DateAdd(minute,330,getutcdate())," + Convert.ToDecimal(CASES) + "," + Convert.ToDecimal(UNIT) + ",'" + LATITUDE + "','" + LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "'," + RCID + ",'" + MFDATE + "','" + BATCHNO + "')";
                    createText = "" + "" + str + "" + Environment.NewLine;
                    //System.IO.StreamWriter TextFileCID = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/AppLogFile-" + SMId + "-.txt"), true);

                    //TextFileCID.WriteLine("UnlockInsertQuery  :-" + str);
                    //TextFileCID.Close();
                    if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                    { }

                    Query = "select SRet1Id AS ID,SRetId AS ORDERID,SRetDocId AS DOCUMENTID,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS MS from Temp_transSalesReturn1 where SRetDocId='" + docid + "'";
                    createText = "" + "" + Query + "" + Environment.NewLine;
                }
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        #region v2 changes from here

        #region JSInsertTransVisit_V2

        public class disList
        {
            public List<Descdetail> BODYLINE;
        }

        public class Descdetail
        {
            public string INVOICES { get; set; }
            public int USERID { get; set; }
            public string VDATE { get; set; }
            public string NEXTVISITDATE { get; set; }
            public int SMID { get; set; }
            public string FRMTIME1 { get; set; }
            public string TOTIME1 { get; set; }
            public int WITHUSERID { get; set; }
            public string MODEOFTRANSPORT { get; set; }
            public string VEHICLEUSED { get; set; }
            public int LOCK { get; set; }
            public int NWITHUSERID { get; set; }
            public string ANDROID_ID { get; set; }
            public string CITYIDS { get; set; }
            public string CITYNAME { get; set; }
            public decimal ORDERAMOUNTMAIL { get; set; }
            public decimal ORDERAMOUNTPHONE { get; set; }
            public string VISITCODE { get; set; }
            public decimal ATTENDANCE { get; set; }
            public int FROMAREACODE { get; set; }
            public decimal OTHEREXPENSE { get; set; }
            public string ANDROIDAPPREMARK { get; set; }
            public int TOAREACODE { get; set; }
            public int NCITYID { get; set; }
            public string LONGITUDE { get; set; }
            public string LATITUDE { get; set; }
            public string LAT_LONG_DT { get; set; }
            public string MOBILE_CREATED_DATE { get; set; }
            public int VISID { get; set; }
            public string REMARKS { get; set; }
            public int PRODUCTCLASSID { get; set; }
            public int PRODUCTSEGMENTID { get; set; }
            public int PRODUCTMATGRP { get; set; }
            public string IMGURL { get; set; }
            public string IMAGE1 { get; set; }

            public int A_ORDERNO { get; set; }
            public int A_PORDERNO { get; set; }
            public int A_DEMONO { get; set; }
            public int A_FAILEDVISITNO { get; set; }
            public int A_VISITNO { get; set; }
            public int A_COMPETITORNO { get; set; }
            public int A_PARTYNO { get; set; }
            public int A_DISCUSSIONNO { get; set; }
            public int A_DISTRIBUTORCOLLECTIONNO { get; set; }
            public int A_PARTYCOLLECTIONNO { get; set; }
            public int A_PORDER1NO { get; set; }
            public int A_LEAVENO { get; set; }
            public int A_ORDER1NO { get; set; }
            public int A_BEATPLANNO { get; set; }
            public int A_DISTSTOCK_NO { get; set; }
            public int A_SALESRETURN_NO { get; set; }
            public int A_SALESRETURN1_NO { get; set; }
            public int DISTID { get; set; }
            public int ITEMID { get; set; }
            public decimal QTY { get; set; }
            public decimal CASES { get; set; }
            public decimal UNIT { get; set; }
            public string SEQNO { get; set; }
            public decimal MRP { get; set; }
            public int SNO { get; set; }
            public int CITYID { get; set; }
            public string REMARKDIST { get; set; }
            public string NEXTVISITTIME { get; set; }
            public string SPENTFRTIME { get; set; }
            public string SPENTTOTIME { get; set; }
            public decimal STOCK { get; set; }
            public string DSRTYPE { get; set; }
            public string MODE { get; set; }
            public decimal AMOUNT { get; set; }
            public string PAYMENTDATE { get; set; }
            public string CHEQUE_DDNO { get; set; }
            public string CHEQUE_DD_DATE { get; set; }
            public string BANK { get; set; }
            public string BRANCH { get; set; }
            public string STATUS { get; set; }
            public string ANDROIDID { get; set; }
            public string NEXTVISIT { get; set; }
            public int REASONID { get; set; }
            public string VISITTIME { get; set; }
            public string ITEM { get; set; }
            public decimal RATE { get; set; }
            public string COMPNAME { get; set; }
            public decimal DISCOUNT { get; set; }
            public string BRANDACTIVITY { get; set; }
            public string MEETACTIVITY { get; set; }
            public string ROADSHOW { get; set; }
            public string SCHEME { get; set; }
            public string OTHERGENERALINFO { get; set; }
            public string OTHERACTIVITY { get; set; }
            public decimal ORDERAMOUNT { get; set; }
            public int ORDID { get; set; }
            public string ANDROID_ID1 { get; set; }
            public int SELECTEDDISTID { get; set; }
            public string LASTRECORD { get; set; }
            public string MODIFIEDORDER { get; set; }
            public Int32 PARTYID { get; set; }
            public string PARTYNAME { get; set; }
            public string ADDRESS1 { get; set; }
            public string ADDRESS2 { get; set; }
            public Int32 AREAID { get; set; }
            public Int32 BEATID { get; set; }
            public Int32 UNDERID { get; set; }
            public string PIN { get; set; }
            public string MOBILE { get; set; }
            public string PHONE { get; set; }
            public string REMARK { get; set; }
            public string SYNCID { get; set; }
            public string INDID { get; set; }
            public decimal POTENTIAL { get; set; }
            public bool ACTIVE { get; set; }
            public string BLOCKREASON { get; set; }
            public int PARTYTYPE { get; set; }
            public string CONTACTPERSON { get; set; }
            public string CSTNO { get; set; }
            public string VATTIN { get; set; }
            public string SERVICETAX { get; set; }
            public string PANNO { get; set; }
            public string DOA { get; set; }
            public string DOB { get; set; }
            public string EMAIL { get; set; }
            public string LATLNGTIME { get; set; }
            public string GSTINNO { get; set; }
            public string BASEUNIT { get; set; }
            public decimal BASEUNITQTY { get; set; }
            public string PRIMARYUNIT { get; set; }
            public decimal PRIMARYUNITQTY { get; set; }
            public string SECONDARYUNIT { get; set; }
            public decimal SECONDARYUNITQTY { get; set; }
            public decimal PRIMARYUNITCONVERSION { get; set; }
            public decimal SECONDARYUNITCONVERSION { get; set; }
            public string BATCHNO { get; set; }
            public string EXPIRYDATE { get; set; }
            public string CREATEDBYUSERID { get; set; }
            public string APPSTATUS { get; set; }
            public string APPBYUSERID { get; set; }
            public string APPREMARK { get; set; }
            public string APPBYSMID { get; set; }
            public bool ISBLOCK { get; set; }
            public string APPBLOCKBY { get; set; }
            public string APPBLOCKREMARK { get; set; }
            public string APPBLOCKSTATUS { get; set; }
            public string STOCKINV { get; set; }
            public string STARTCALL { get; set; }
            public string ENDCALL { get; set; }
            public string OFF_TYPE { get; set; }
            public string ENDLONGITUDE { get; set; }
            public string ENDLATITUDE { get; set; }
            public string ENDLAT_LONG_DT { get; set; }
            public string MOBILE_END_DATE { get; set; }
            public string ENDREMARK { get; set; }
            public string TRAN_TYPE { get; set; }

        }

        public class disList_V2
        {
            public List<Descdetail_V2> BODYLINE;
        }

        public class Descdetail_V2
        {


            public int USERID { get; set; }
            public string VDATE { get; set; }
            public string NEXTVISITDATE { get; set; }
            public int SMID { get; set; }
            public string FRMTIME1 { get; set; }
            public string TOTIME1 { get; set; }
            public int WITHUSERID { get; set; }
            public string MODEOFTRANSPORT { get; set; }
            public string VEHICLEUSED { get; set; }
            public int LOCK { get; set; }
            public int NWITHUSERID { get; set; }
            public string ANDROID_ID { get; set; }
            public string CITYIDS { get; set; }
            public string CITYNAME { get; set; }
            public decimal ORDERAMOUNTMAIL { get; set; }
            public decimal ORDERAMOUNTPHONE { get; set; }
            public string VISITCODE { get; set; }
            public decimal ATTENDANCE { get; set; }
            public int FROMAREACODE { get; set; }
            public decimal OTHEREXPENSE { get; set; }
            public string ANDROIDAPPREMARK { get; set; }
            public int TOAREACODE { get; set; }
            public int NCITYID { get; set; }
            public string LONGITUDE { get; set; }
            public string LATITUDE { get; set; }
            public string LAT_LONG_DT { get; set; }
            public string MOBILE_CREATED_DATE { get; set; }
            public string REMARKS { get; set; }

            public string OFF_TYPE { get; set; }
            public string ENDLONGITUDE { get; set; }
            public string ENDLATITUDE { get; set; }
            public string ENDLAT_LONG_DT { get; set; }
            public string MOBILE_END_DATE { get; set; }
            public string ENDREMARK { get; set; }
            public string TRAN_TYPE { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransVisit_V2()
        {
            string createText = "";
            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();

            var objResponse = JsonConvert.DeserializeObject<disList_V2>(bodyText);

            if (string.IsNullOrEmpty(objResponse.BODYLINE[0].TRAN_TYPE) || objResponse.BODYLINE[0].TRAN_TYPE.Trim() == "")
            {
                string[] tran = new string[0];
                Context.Response.Write(JsonConvert.SerializeObject(tran));
                return;
            }

            createText += "" + objResponse.BODYLINE[0].USERID + "," + objResponse.BODYLINE[0].VDATE + "," + objResponse.BODYLINE[0].NEXTVISITDATE + "," + objResponse.BODYLINE[0].REMARKS + "," + objResponse.BODYLINE[0].SMID + "," + objResponse.BODYLINE[0].FRMTIME1 + "," + objResponse.BODYLINE[0].TOTIME1 + "," + objResponse.BODYLINE[0].WITHUSERID + "," + objResponse.BODYLINE[0].MODEOFTRANSPORT + "," + objResponse.BODYLINE[0].VEHICLEUSED + "," + objResponse.BODYLINE[0].LOCK + "," + objResponse.BODYLINE[0].NWITHUSERID + "," + objResponse.BODYLINE[0].ANDROID_ID + "," + objResponse.BODYLINE[0].CITYIDS + "," + objResponse.BODYLINE[0].CITYNAME + ", " + objResponse.BODYLINE[0].ORDERAMOUNTMAIL + "," + objResponse.BODYLINE[0].ORDERAMOUNTPHONE + "," + objResponse.BODYLINE[0].VISITCODE + "," + objResponse.BODYLINE[0].ATTENDANCE + ", " + objResponse.BODYLINE[0].FROMAREACODE + ", " + objResponse.BODYLINE[0].OTHEREXPENSE + ", " + objResponse.BODYLINE[0].ANDROIDAPPREMARK + ", " + objResponse.BODYLINE[0].TOAREACODE + ", " + objResponse.BODYLINE[0].NCITYID + ", " + objResponse.BODYLINE[0].LONGITUDE + ", " + objResponse.BODYLINE[0].LATITUDE + ", " + objResponse.BODYLINE[0].LAT_LONG_DT + ", " + objResponse.BODYLINE[0].MOBILE_CREATED_DATE + ", " + objResponse.BODYLINE[0].ENDLONGITUDE + ", " + objResponse.BODYLINE[0].ENDLATITUDE + ", " + objResponse.BODYLINE[0].ENDLAT_LONG_DT + ", " + objResponse.BODYLINE[0].MOBILE_END_DATE + ", " + objResponse.BODYLINE[0].ENDREMARK + "," + objResponse.BODYLINE[0].TRAN_TYPE + "" + Environment.NewLine;




            int exists = 0;
            string minDate1 = "", mobiletime = "", minDate2 = "", EndMobileTime = "", endAddress = "", endUpdate = "null,null,null,null,null,null";
            if (!string.IsNullOrEmpty(objResponse.BODYLINE[0].LAT_LONG_DT))
            {
                double ticks = double.Parse(objResponse.BODYLINE[0].LAT_LONG_DT);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (objResponse.BODYLINE[0].TRAN_TYPE == "E")
            {
                if (string.IsNullOrEmpty(objResponse.BODYLINE[0].ENDLAT_LONG_DT) || objResponse.BODYLINE[0].ENDLAT_LONG_DT == "")
                {
                    double ticks = double.Parse(objResponse.BODYLINE[0].MOBILE_END_DATE);
                    TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                    DateTime startdate = new DateTime(1970, 1, 1) + time;
                    minDate2 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                }

            }

            if (!string.IsNullOrEmpty(objResponse.BODYLINE[0].ENDLAT_LONG_DT))
            {
                double ticks = double.Parse(objResponse.BODYLINE[0].ENDLAT_LONG_DT);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate2 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(objResponse.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                double ticks1 = double.Parse(objResponse.BODYLINE[0].MOBILE_CREATED_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }
            if (!string.IsNullOrEmpty(objResponse.BODYLINE[0].MOBILE_END_DATE))
            {
                double ticks1 = double.Parse(objResponse.BODYLINE[0].MOBILE_END_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                EndMobileTime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            string id = "0"; string documentid = "0";
            string Millisecond = "";

            string Address = "";

            DataTable dtvisit = new DataTable();
            try
            {

                Query = "SELECT VISID,VISITDOCID,CITYIDS,CITYNAME,APPSTATUS,ISNULL(DSR_TYPE,'') DSR_TYPE FROM TRANSVISIT  WHERE VDATE='" + objResponse.BODYLINE[0].VDATE + "' and SMId=" + objResponse.BODYLINE[0].SMID + " ";
                createText += " @@@@@@  Select to table   @@@@@" + Query + "" + Environment.NewLine;
                DataTable dtdsr = DbConnectionDAL.getFromDataTable(Query);
                if (dtdsr.Rows.Count > 0)
                {
                    exists = Convert.ToInt32(dtdsr.Rows[0]["VISID"].ToString());
                    if (exists > 0)
                    {
                        string appstat = ""; string getcityidsfromweb = ""; string getcitynamessfromweb = "";

                        documentid = dtdsr.Rows[0]["VISITDOCID"].ToString();


                        if (dtdsr.Rows[0]["APPSTATUS"].ToString() == "Reject")
                        {
                            appstat = ",APPSTATUS=NULL,APPBY=NULL,APPREMARK=NULL,APPBYSMID=NULL";
                        }

                        if (objResponse.BODYLINE[0].TRAN_TYPE.Trim().ToUpper() == "S")
                        {
                            objResponse.BODYLINE[0].OFF_TYPE = "P";
                            endUpdate = "ENDREMARK=NULL,MOBILE_END_DATE=NULL,ENDLATITUDE=NULL,ENDLONGITUDE=NULL,ENDADDRESS=NULL ,ENDLAT_LONG_DATETIME=NULL";

                        }
                        else if (objResponse.BODYLINE[0].TRAN_TYPE.Trim().ToUpper() == "O")
                        {
                            endUpdate = "ENDREMARK=NULL,MOBILE_END_DATE=NULL,ENDLATITUDE=NULL,ENDLONGITUDE=NULL,ENDADDRESS=NULL ,ENDLAT_LONG_DATETIME=NULL";
                        }
                        else if (objResponse.BODYLINE[0].TRAN_TYPE.Trim().ToUpper() == "E")
                        {
                            objResponse.BODYLINE[0].OFF_TYPE = "P";
                            endUpdate = "ENDREMARK='" + objResponse.BODYLINE[0].ENDREMARK + "',MOBILE_END_DATE='" + EndMobileTime + "',ENDLATITUDE='" + objResponse.BODYLINE[0].ENDLATITUDE + "',ENDLONGITUDE='" + objResponse.BODYLINE[0].ENDLONGITUDE + "',ENDADDRESS='" + endAddress + "' ,ENDLAT_LONG_DATETIME='" + minDate2 + "'";
                        }


                        if (dtdsr.Rows[0]["DSR_TYPE"].ToString() != objResponse.BODYLINE[0].OFF_TYPE.Trim().ToUpper())
                        {
                            Query = "INSERT INTO DBO.TRANSVISITLOG (VISID,VISITDOCID,USERID,VDATE,NEXTVISITDATE,REMARK,SMID,CITYID,DISTID,NCITYID,FRTIME1,FRTIME2,TOTIME1,TOTIME2,WITHUSERID,MODEOFTRANSPORT,VEHICLEUSED,INDUSTRY,LOCK,NWITHUSERID,APPSTATUS,APPBY,APPREMARK,APPBYSMID,ANDROID_ID,CITYIDS,CITYNAME,ORDERAMOUNTMAIL,ORDERAMOUNTPHONE,VISITCODE,ATTENDANCE,FROMAREACODE,OTHEREXPENSE,ANDROIDAPPREMARK,TOAREACODE,CHARGEABLE,EXPORTEDTOANDROID,CREATED_DATE,LONGITUDE,LATITUDE,ADDRESS,LAT_LONG_DATETIME,MOBILE_CREATED_DATE,UNLOCKREQUEST,TOTALDISTANCE,ENDREMARK,ENDLONGITUDE,ENDLATITUDE,ENDADDRESS,ENDLAT_LONG_DATETIME,MOBILE_END_DATE,DSR_TYPE,TRAN_TYPE,LOGCREATED_DATE)   SELECT VISID,VISITDOCID,USERID,VDATE,NEXTVISITDATE,REMARK,SMID,CITYID,DISTID,NCITYID,FRTIME1,FRTIME2,TOTIME1,TOTIME2,WITHUSERID,MODEOFTRANSPORT,VEHICLEUSED,INDUSTRY,LOCK,NWITHUSERID,APPSTATUS,APPBY,APPREMARK,APPBYSMID,ANDROID_ID,CITYIDS,CITYNAME,ORDERAMOUNTMAIL,ORDERAMOUNTPHONE,VISITCODE,ATTENDANCE,FROMAREACODE,OTHEREXPENSE,ANDROIDAPPREMARK,TOAREACODE,CHARGEABLE,EXPORTEDTOANDROID,CREATED_DATE,LONGITUDE,LATITUDE,ADDRESS,LAT_LONG_DATETIME,MOBILE_CREATED_DATE,UNLOCKREQUEST,TOTALDISTANCE,ENDREMARK,ENDLONGITUDE,ENDLATITUDE,ENDADDRESS,ENDLAT_LONG_DATETIME,MOBILE_END_DATE,DSR_TYPE,TRAN_TYPE,GETDATE() FROM TRANSVISIT WHERE  VDATE='" + objResponse.BODYLINE[0].VDATE + "' AND SMID=" + objResponse.BODYLINE[0].SMID + " ";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, Query);
                        }



                        Query = @"UPDATE TRANSVISIT SET VISITDOCID='" + documentid + "',USERID=" + objResponse.BODYLINE[0].USERID + ",VDATE='" + objResponse.BODYLINE[0].VDATE + "',NEXTVISITDATE='" + objResponse.BODYLINE[0].NEXTVISITDATE + "', REMARK='" + objResponse.BODYLINE[0].REMARKS + "',SMID=" + objResponse.BODYLINE[0].SMID + " ,WITHUSERID=" + objResponse.BODYLINE[0].WITHUSERID + ",MODEOFTRANSPORT='" + objResponse.BODYLINE[0].MODEOFTRANSPORT + "', VEHICLEUSED='" + objResponse.BODYLINE[0].VEHICLEUSED + "',LOCK=" + objResponse.BODYLINE[0].LOCK + ", NWITHUSERID=" + objResponse.BODYLINE[0].NWITHUSERID + ", ANDROID_ID='" + objResponse.BODYLINE[0].ANDROID_ID + "', CITYIDS='" + objResponse.BODYLINE[0].CITYIDS + "', CITYNAME='" + objResponse.BODYLINE[0].CITYNAME + "', ORDERAMOUNTMAIL= " + objResponse.BODYLINE[0].ORDERAMOUNTMAIL + ", ORDERAMOUNTPHONE=" + objResponse.BODYLINE[0].ORDERAMOUNTPHONE + " ,VISITCODE='" + objResponse.BODYLINE[0].VISITCODE + "',ATTENDANCE=" + objResponse.BODYLINE[0].ATTENDANCE + ", FROMAREACODE=" + objResponse.BODYLINE[0].FROMAREACODE + ",OTHEREXPENSE=" + objResponse.BODYLINE[0].OTHEREXPENSE + ",ANDROIDAPPREMARK='" + objResponse.BODYLINE[0].ANDROIDAPPREMARK + "',TOAREACODE=" + objResponse.BODYLINE[0].TOAREACODE + ",NCITYID=" + objResponse.BODYLINE[0].NCITYID + ", CREATED_DATE=DATEADD(MINUTE,330,GETUTCDATE()),LATITUDE='" + objResponse.BODYLINE[0].LATITUDE + "',LONGITUDE='" + objResponse.BODYLINE[0].LONGITUDE + "',ADDRESS='" + Address + "' ,LAT_LONG_DATETIME='" + minDate1 + "'," + endUpdate + ",DSR_TYPE='" + objResponse.BODYLINE[0].OFF_TYPE + "',TRAN_TYPE='" + objResponse.BODYLINE[0].TRAN_TYPE + "'  " + appstat + " WHERE VDATE='" + objResponse.BODYLINE[0].VDATE + "' AND SMID=" + objResponse.BODYLINE[0].SMID + " ";
                        createText += " @@@@@@  Update to table   @@@@@" + Query + "" + Environment.NewLine;
                        exists = Convert.ToInt32(DbConnectionDAL.ExecuteQuery(Query));

                    }
                }
                else
                {
                    try
                    {

                        if (objResponse.BODYLINE[0].TRAN_TYPE.Trim().ToUpper() == "S")
                        {
                            objResponse.BODYLINE[0].OFF_TYPE = "P";

                            endUpdate = "NULL,NULL,NULL,NULL,NULL,NULL";
                        }
                        else if (objResponse.BODYLINE[0].TRAN_TYPE.Trim().ToUpper() == "O")
                        {
                            endUpdate = "NULL,NULL,NULL,NULL,NULL,NULL";

                        }
                        else if (objResponse.BODYLINE[0].TRAN_TYPE.Trim().ToUpper() == "E")
                        {
                            objResponse.BODYLINE[0].OFF_TYPE = "P";
                            endUpdate = "'" + objResponse.BODYLINE[0].ENDREMARK + "','" + EndMobileTime + "','" + objResponse.BODYLINE[0].ENDLATITUDE + "','" + objResponse.BODYLINE[0].ENDLONGITUDE + "','" + endAddress + "','" + minDate2 + "'";
                        }

                        documentid = Settings.GetDocID("VISSN", DateTime.Now);
                        Settings.SetDocID("VISSN", documentid);

                        Query = "INSERT INTO DBO.TRANSVISIT (VISITDOCID, USERID, VDATE, NEXTVISITDATE, REMARK, SMID, WITHUSERID, MODEOFTRANSPORT, VEHICLEUSED, LOCK, NWITHUSERID, ANDROID_ID, CITYIDS, CITYNAME, ORDERAMOUNTMAIL, ORDERAMOUNTPHONE,VISITCODE,ATTENDANCE,FROMAREACODE,OTHEREXPENSE,ANDROIDAPPREMARK,TOAREACODE,NCITYID,CREATED_DATE,LATITUDE,LONGITUDE,ADDRESS,LAT_LONG_DATETIME,MOBILE_CREATED_DATE,ENDREMARK,MOBILE_END_DATE,ENDLATITUDE,ENDLONGITUDE,ENDADDRESS,ENDLAT_LONG_DATETIME,DSR_TYPE,TRAN_TYPE) " +
                    " VALUES ('" + documentid + "', " + objResponse.BODYLINE[0].USERID + ", '" + objResponse.BODYLINE[0].VDATE + "', '" + objResponse.BODYLINE[0].NEXTVISITDATE + "', '" + objResponse.BODYLINE[0].REMARKS + "', " + objResponse.BODYLINE[0].SMID + " , " + objResponse.BODYLINE[0].WITHUSERID + ", '" + objResponse.BODYLINE[0].MODEOFTRANSPORT + "', '" + objResponse.BODYLINE[0].VEHICLEUSED + "', " + objResponse.BODYLINE[0].LOCK + ", " + objResponse.BODYLINE[0].NWITHUSERID + ", '" + objResponse.BODYLINE[0].ANDROID_ID + "', '" + objResponse.BODYLINE[0].CITYIDS + "', '" + objResponse.BODYLINE[0].CITYNAME + "', " + objResponse.BODYLINE[0].ORDERAMOUNTMAIL + ", " + objResponse.BODYLINE[0].ORDERAMOUNTPHONE + ",'" + objResponse.BODYLINE[0].VISITCODE + "'," + objResponse.BODYLINE[0].ATTENDANCE + "," + objResponse.BODYLINE[0].FROMAREACODE + "," + objResponse.BODYLINE[0].OTHEREXPENSE + ",'" + objResponse.BODYLINE[0].ANDROIDAPPREMARK + "'," + objResponse.BODYLINE[0].TOAREACODE + "," + objResponse.BODYLINE[0].NCITYID + ",DateAdd(minute,330,getutcdate()),'" + objResponse.BODYLINE[0].LATITUDE + "','" + objResponse.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "'," + endUpdate + ",'" + objResponse.BODYLINE[0].OFF_TYPE + "','" + objResponse.BODYLINE[0].TRAN_TYPE + "')";
                        createText += " @@@@@@  Insert to table   @@@@@" + Query + "" + Environment.NewLine;
                        exists = Convert.ToInt32(DbConnectionDAL.ExecuteQuery(Query));

                    }
                    catch (Exception ex)
                    {
                        createText += " @@@@@@  Exception Generated  @@@@@" + ex.ToString() + "" + Environment.NewLine;
                        using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + objResponse.BODYLINE[0].SMID + "_JInsertTransVisit_" + objResponse.BODYLINE[0].VDATE + ".txt"), true))
                        {
                            file2.WriteLine(createText);
                            file2.Close();
                        }
                    }

                }
                dtdsr.Dispose();
                if (exists > 0)
                {

                    Query = "SELECT VISID AS ID,VISITDOCID AS DOCUMENTID,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)   AS MS  FROM TRANSVISIT WHERE VISITDOCID='" + documentid + "'";

                    dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                }
            }
            catch (Exception ex)
            {
                createText += " @@@@@@  Exception Generated  @@@@@" + ex.ToString() + "" + Environment.NewLine;
                using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + objResponse.BODYLINE[0].SMID + "_JInsertTransVisit_" + objResponse.BODYLINE[0].VDATE + ".txt"), true))
                {
                    file2.WriteLine(createText);
                    file2.Close();
                }
            }

            createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["id"].ToString() + ", " + dtvisit.Rows[0]["documentid"].ToString() + ", " + dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;
            createText += " @@@@@@   Providing Response To Android  @@@@@" + JsonConvert.SerializeObject(dtvisit) + "" + Environment.NewLine;
            createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + objResponse.BODYLINE[0].SMID + "_JInsertTransVisit_" + objResponse.BODYLINE[0].VDATE + ".txt"), true))
            {
                file2.WriteLine(createText);
                file2.Close();
            }
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        #endregion

        #region JSGetDSR_V2

        public class disUserList_V2
        {
            public List<Userdetail_V2> BODY;
        }

        public class Userdetail_V2
        {
            public string CONPER_ID { get; set; }
            public string MINDATE { get; set; }
        }

        [DataContract]
        public class DSRList_V2
        {
            [DataMember]
            public string VISID { get; set; }
            [DataMember]
            public string VISITDOCID { get; set; }
            [DataMember]
            public string USERID { get; set; }
            [DataMember]
            public string VDATE { get; set; }
            [DataMember]
            public string REMARK { get; set; }
            [DataMember]
            public string SMID { get; set; }
            [DataMember]
            public string CITYID { get; set; }
            [DataMember]
            public string DISTID { get; set; }
            [DataMember]
            public string NCITYID { get; set; }
            [DataMember]
            public string NEXTVISITDATE { get; set; }
            [DataMember]
            public string FROMTIME { get; set; }
            [DataMember]
            public string TOTIME { get; set; }
            [DataMember]
            public string WITHUSERID { get; set; }
            [DataMember]
            public string MODEOFTRANSPORT { get; set; }
            [DataMember]
            public string VEHICLEUSED { get; set; }
            [DataMember]
            public string INDUSTRY { get; set; }
            [DataMember]
            public string LOCK { get; set; }
            [DataMember]
            public string NWITHUSERID { get; set; }
            [DataMember]
            public string APPSTATUS { get; set; }
            [DataMember]
            public string APPBY { get; set; }
            [DataMember]
            public string APPREMARK { get; set; }
            [DataMember]
            public string APPBYSMID { get; set; }
            [DataMember]
            public string ANDROID_ID { get; set; }
            [DataMember]
            public string CITYIDS { get; set; }
            [DataMember]
            public string CITYNAME { get; set; }

            [DataMember]
            public string ORDERAMOUNTMAIL { get; set; }
            [DataMember]
            public string ORDERAMOUNTPHONE { get; set; }

            [DataMember]
            public string VISITCODE { get; set; }
            [DataMember]
            public string ATTENDANCE { get; set; }
            [DataMember]
            public string FROMAREACODE { get; set; }
            [DataMember]
            public string OTHEREXPENSE { get; set; }
            [DataMember]
            public string ANDROIDAPPREMARK1 { get; set; }
            [DataMember]
            public string TOAREACODE { get; set; }
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string LONGITUDE { get; set; }
            [DataMember]
            public string LATITUDE { get; set; }
            [DataMember]
            public string LATLONGDT { get; set; }
            [DataMember]
            public string MOBILE_CREATED_DATE { get; set; }
            [DataMember]
            public string ENDREMARK { get; set; }
            [DataMember]
            public string ENDLONGITUDE { get; set; }
            [DataMember]
            public string ENDLATITUDE { get; set; }
            [DataMember]
            public string ENDLAT_LONG_DATETIME { get; set; }
            [DataMember]
            public string MOBILE_END_DATE { get; set; }
            [DataMember]
            public string DSR_TYPE { get; set; }
            [DataMember]
            public string TRAN_TYPE { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetDSR_V2()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList_V2>(bodyText);
            string ConPer_Id = objResponse.BODY[0].CONPER_ID;
            string minDate = objResponse.BODY[0].MINDATE;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            List<DSRList_V2> rst = new List<DSRList_V2>();
            string MQry = "";
            if (Convert.ToInt64(minDate) > 0)
            {

                MQry = " WHERE  T.[MS] > '" + minDate + "'";
            }
            Query = "SELECT DATAAMT FROM MASTENVIRO";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());

            Query = "select top 1 visid,vdate from TransVisit where smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT TOP " + NoOfRec + " * FROM (SELECT VISID,VISITDOCID,USERID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,REPLACE(REMARK,'/N', '') AS REMARK,SMID,ISNULL(CITYID,'') AS CITYID,ISNULL(DISTID,'') AS DISTID,NCITYID, REPLACE(CONVERT(NVARCHAR, NEXTVISITDATE, 106), ' ', '/') AS NEXTVISITDATE,ISNULL(FRTIME1,'') AS FROMTIME,ISNULL(TOTIME1,'') AS TOTIME, WITHUSERID,MODEOFTRANSPORT,VEHICLEUSED,ISNULL(INDUSTRY,'') AS INDUSTRY, CASE APPSTATUS WHEN 'APPROVE' THEN 1 WHEN 'REJECT' THEN 1 ELSE LOCK END AS LOCK,NWITHUSERID,ISNULL(APPSTATUS,'') AS APPSTATUS,ISNULL(APPBY,'') AS APPBY,ISNULL(APPREMARK,'') AS APPREMARK,APPBYSMID,ISNULL(ANDROID_ID,VISITDOCID) AS ANDROID_ID,CITYIDS,CITYNAME,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE) AS [MS],ISNULL(ORDERAMOUNTMAIL,0.00) AS ORDERAMOUNTMAIL , VISITCODE,  ATTENDANCE,  FROMAREACODE,TOAREACODE,OTHEREXPENSE, ANDROIDAPPREMARK AS ANDROIDAPPREMARK1,ISNULL(ORDERAMOUNTPHONE,0.00) AS ORDERAMOUNTPHONE,LONGITUDE,LATITUDE,ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS [LATLONGDT],(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS [MOBILE_CREATED_DATE],ISNULL(ENDREMARK,'') AS ENDREMARK,ISNULL(ENDLONGITUDE,'') AS ENDLONGITUDE,ISNULL(ENDLATITUDE,'') AS ENDLATITUDE,ISNULL((CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(ENDLAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(ENDLAT_LONG_DATETIME AS DATE), ENDLAT_LONG_DATETIME),'') AS ENDLAT_LONG_DATETIME,ISNULL((CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_END_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_END_DATE AS DATE), MOBILE_END_DATE),'') AS MOBILE_END_DATE,DSR_TYPE,TRAN_TYPE  FROM TRANSVISIT WHERE SMID IN (" + ConPer_Id + ") AND VDATE= '" + vdate + "' ) AS T " + MQry + " ORDER BY  T.[MS]";
                DataTable dt = new DataTable();
                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);


                //VISID = DT.ROWS[I]["VISID"].TOSTRING(),
                //VISITDOCID = DT.ROWS[I]["VISITDOCID"].TOSTRING(),
                //USERID = DT.ROWS[I]["USERID"].TOSTRING(),
                //VDATE = DT.ROWS[I]["VDATE"].TOSTRING(),
                //REMARK = DT.ROWS[I]["REMARK"].TOSTRING().REPLACE("\N", ""),
                //SMID = DT.ROWS[I]["SMID"].TOSTRING(),
                //CITYID = DT.ROWS[I]["CITYID"].TOSTRING(),
                //DISTID = DT.ROWS[I]["DISTID"].TOSTRING(),
                //NCITYID = DT.ROWS[I]["NCITYID"].TOSTRING(),
                //NEXTVISITDATE = DT.ROWS[I]["NEXTVISITDATE"].TOSTRING(),
                //FROMTIME = DT.ROWS[I]["FROMTIME"].TOSTRING(),
                //TOTIME = DT.ROWS[I]["TOTIME"].TOSTRING(),
                //WITHUSERID = DT.ROWS[I]["WITHUSERID"].TOSTRING(),
                //MODEOFTRANSPORT = DT.ROWS[I]["MODEOFTRANSPORT"].TOSTRING(),
                //VEHICLEUSED = DT.ROWS[I]["VEHICLEUSED"].TOSTRING(),
                //INDUSTRY = DT.ROWS[I]["INDUSTRY"].TOSTRING(),
                //LOCK = DT.ROWS[I]["LOCK"].TOSTRING(),
                //NWITHUSERID = DT.ROWS[I]["NWITHUSERID"].TOSTRING(),
                //APPSTATUS = DT.ROWS[I]["APPSTATUS"].TOSTRING(),
                //APPBY = DT.ROWS[I]["APPBY"].TOSTRING(),
                //APPREMARK = DT.ROWS[I]["APPREMARK"].TOSTRING(),
                //APPBYSMID = DT.ROWS[I]["APPBYSMID"].TOSTRING(),
                //ANDROID_ID = DT.ROWS[I]["ANDROID_ID"].TOSTRING(),
                //CITYIDS = DT.ROWS[I]["CITYIDS"].TOSTRING(),
                //CITYNAME = DT.ROWS[I]["CITYNAME"].TOSTRING(),
                //MS = DT.ROWS[I]["MILLISECONDS"].TOSTRING(),
                //ORDERAMOUNTMAIL = DT.ROWS[I]["ORDERAMOUNTMAIL"].TOSTRING(),
                //ORDERAMOUNTPHONE = DT.ROWS[I]["ORDERAMOUNTPHONE"].TOSTRING(),
                //VISITCODE = DT.ROWS[I]["VISITCODE"].TOSTRING(),
                //ATTENDANCE = DT.ROWS[I]["ATTENDANCE"].TOSTRING(),
                //FROMAREACODE = DT.ROWS[I]["FROMAREACODE"].TOSTRING(),
                //OTHEREXPENSE = DT.ROWS[I]["OTHEREXPENSE"].TOSTRING(),
                //TOAREACODE = DT.ROWS[I]["TOAREACODE"].TOSTRING(),
                //LONGITUDE = DT.ROWS[I]["LONGITUDE"].TOSTRING(),
                //LATITUDE = DT.ROWS[I]["LATITUDE"].TOSTRING(),
                //LATLONGDT = DT.ROWS[I]["LAT_LONG_DATETIME"].TOSTRING(),
                //ANDROIDAPPREMARK1 = DT.ROWS[I]["ANDROIDAPPREMARK"].TOSTRING(),
                //MOBILE_CREATED_DATE = DT.ROWS[I]["MOBILE_CREATED_DATE"].TOSTRING(),
                //ENDREMARK = DT.ROWS[I]["ENDREMARK"].TOSTRING(),
                //ENDLONGITUDE = DT.ROWS[I]["ENDLONGITUDE"].TOSTRING(),
                //ENDLATITUDE = DT.ROWS[I]["ENDLATITUDE"].TOSTRING(),
                //ENDLAT_LONG_DATETIME = DT.ROWS[I]["ENDLAT_LONG_DATETIME"].TOSTRING(),
                //MOBILE_END_DATE = DT.ROWS[I]["MOBILE_END_DATE"].TOSTRING(),
                //DSR_TYPE = DT.ROWS[I]["DSR_TYPE"].TOSTRING(),
                //TRAN_TYPE = DT.ROWS[I]["TRAN_TYPE"].TOSTRING()

                Context.Response.Write(JsonConvert.SerializeObject(dt));
                dt.Dispose();
            }
        }

        #endregion

        #region LeaveCheckForStartVisit

        [DataContract]
        public class LeaveCheckForStartVisit_Response
        {
            [DataMember]
            public string STATUS { get; set; }
            [DataMember]
            public string HEADERMSZ { get; set; }
            [DataMember]
            public string LEAVETYPE { get; set; }

        }

        [WebMethod]
        public void LeaveCheckForStartVisit_V2()
        {

            #region "Variable Declaration"

            string str = "";
            DataTable dt;
            string LeaveType = "N";
            string status = "400", HeaderMsg = "";

            List<LeaveCheckForStartVisit_Response> rst = new List<LeaveCheckForStartVisit_Response>();

            //  var httprequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            var objResponse = JsonConvert.DeserializeObject<UserDetailList_V2>(bodyText);

            string smid = objResponse.SMID;
            string LDate = objResponse.DATE;

            #endregion

            if (!string.IsNullOrEmpty(smid) && smid != "0")
            {
                if (!string.IsNullOrEmpty(LDate) && LDate != "")
                {

                    try
                    {
                        //str = "select LVRQId from  TransLeaveRequest where SMID=" + smid + "  AND  ISNULL(appstatus,'')='Approve' and  REPLACE(CONVERT(varchar,fromdate,106),' ','/')<='" + LDate + "' and  REPLACE(CONVERT(varchar,ToDate,106),' ','/')>='" + LDate + "' ";


                        str = "select LVRQId from  TransLeaveRequest where SMID=" + smid + "  AND  ISNULL(appstatus,'')='Approve' and  fromdate<='" + LDate + "' and  ToDate>='" + LDate + "' ";
                        dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                        if (dt.Rows.Count > 0)
                        {
                            status = "200";
                            HeaderMsg = "SuccessFull";
                            LeaveType = "Y";

                        }
                        else
                        {
                            status = "200";
                            HeaderMsg = "No Leave Found";
                            LeaveType = "N";
                        }
                    }
                    catch (Exception ex)
                    {
                        status = "400";
                        HeaderMsg = ex.ToString();
                        LeaveType = "N";
                    }
                }
                else
                {
                    status = "400";
                    HeaderMsg = "Date is not Found.";
                    LeaveType = "N";
                }
            }
            else
            {
                status = "400";
                HeaderMsg = "SalesPerson is not Found.";
                LeaveType = "N";
            }


            bodyStream.Dispose();
            rst.Add(new LeaveCheckForStartVisit_Response
            {
                STATUS = status,
                HEADERMSZ = HeaderMsg,
                LEAVETYPE = LeaveType
            });
            Context.Response.Write(JsonConvert.SerializeObject(rst));


        }

        #endregion

        #region xJSGetParties_TimeStampWiseLatLongAdd_V2

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void xJSGetParties_TimeStampWiseLatLongAdd_V2()
        {
            string path = "";

            //var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            DataTable Dtimages = new DataTable();
            string ConPer_Id = OBJRESPONSE.BODY[0].CONPER_ID;
            string minDate = OBJRESPONSE.BODY[0].MINDATE;

            string totalorderQty = @"Isnull((SELECT sum(Qty) From(SELECT Isnull(Qty,0) As Qty,OrdDocId FROM Temp_TransOrder1   WHERE SMID=" + ConPer_Id + " AND PartyId=p.PartyId UNION ALL SELECT Isnull(Qty,0) As Qty,OrdDocId FROM TransOrder1  WHERE SMID=" + ConPer_Id + " AND PartyId=p.PartyId )a),0) AS TotalOrderQty,";

            string totalorderValue = @"Isnull((SELECT Cast(sum(Amount)  As numeric(18,2)) From(SELECT Isnull(Amount,0) As Amount,OrdDocId FROM Temp_TransOrder1  WHERE SMID=" + ConPer_Id + " AND PartyId=p.PartyId  UNION ALL SELECT Isnull(Amount,0) As Amount,OrdDocId FROM TransOrder1  WHERE SMID=" + ConPer_Id + " AND PartyId=p.PartyId )a),0)   AS TotalOrderValue,";


            string Avgorderqty = @"Isnull((SELECT Cast(Sum(Qty1)/Count(*)  As numeric(18,2)) From(SELECT Sum(Isnull(Qty,0)) AS Qty1,OrdDocId FROM Temp_TransOrder1  WHERE SMID=" + ConPer_Id + " AND PartyId=p.PartyId  GROUP BY OrdDocId UNION ALL SELECT Sum(Isnull(Qty,0)) AS Qty1,OrdDocId FROM TransOrder1    WHERE SMID=" + ConPer_Id + "AND PartyId=p.PartyId  GROUP BY OrdDocId )a ),0) AS Avgorderqty,";


            string Avgordervalue = @"ISnull((SELECT Cast(Sum(Amount1)/Count(*)  As numeric(18,2)) From(SELECT Sum(Isnull(Amount,0)) AS Amount1,OrdDocId FROM Temp_TransOrder1  WHERE SMID=" + ConPer_Id + " AND PartyId=p.PartyId  GROUP BY OrdDocId UNION ALL SELECT Sum(Isnull(Amount,0)) AS Amount1,OrdDocId FROM TransOrder1   WHERE SMID=" + ConPer_Id + " AND PartyId=p.PartyId  GROUP BY OrdDocId )a ),0) AS Avgordervalue ,";




            string Lastvisitqry = " ISnull((select top 1 Replace(Convert(varchar,VDate,106),' ','/') From(select  tv1.VisId,tv1.VDate from TransOrder tv left join transvisit tv1 on tv.visid=tv1.visid where tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  union  select  tv1.VisId,tv1.VDate  from temp_TransOrder tv left join transvisit tv1 on tv.visid=tv1.visid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  ";
            Lastvisitqry = Lastvisitqry + "   union ";
            Lastvisitqry = Lastvisitqry + " select  tv1.VisId,tv1.VDate  from transdemo tv left join transvisit tv1 on tv.visid=tv1.visid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  union  select  tv1.VisId,tv1.VDate  from temp_transdemo tv left join transvisit tv1 on tv.visid=tv1.visid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  ";
            Lastvisitqry = Lastvisitqry + " union ";
            Lastvisitqry = Lastvisitqry + " select  tv1.VisId,tv1.VDate  from TransFailedVisit tv left join transvisit tv1 on tv.visid=tv1.visid left join mastparty mp on mp.partyid=tv.partyid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId   union   select  tv1.VisId,tv1.VDate  from temp_TransFailedVisit tv   left join transvisit tv1 on tv.visid=tv1.visid left join mastparty mp on mp.partyid=tv.partyid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  ";
            Lastvisitqry = Lastvisitqry + " union ";
            Lastvisitqry = Lastvisitqry + " select  tv1.VisId,tv1.VDate  from transcompetitor tv left join transvisit tv1 on tv.visid=tv1.visid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId    union    select  tv1.VisId,tv1.VDate  from temp_transcompetitor tv left join transvisit tv1 on tv.visid=tv1.visid  where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId ";
            Lastvisitqry = Lastvisitqry + " union ";
            Lastvisitqry = Lastvisitqry + " select  tv1.VisId,tv1.VDate  from transcollection tv left join transvisit tv1 on tv.visid=tv1.visid left join mastparty mp on mp.partyid=tv.partyid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  union  select  tv1.VisId,tv1.VDate  from temp_transcollection tv left join transvisit tv1 on tv.visid=tv1.visid left join mastparty mp on mp.partyid=tv.partyid where  tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  ";
            Lastvisitqry = Lastvisitqry + " union ";
            Lastvisitqry = Lastvisitqry + " select  tv1.VisId,tv1.VDate  from TransSample tv left join transvisit tv1 on tv.visid=tv1.visid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  union  Select  tv1.VisId,tv1.VDate  from temp_TransSample tv left join transvisit tv1 on tv.visid=tv1.visid where  tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  ";
            Lastvisitqry = Lastvisitqry + " union ";
            Lastvisitqry = Lastvisitqry + " select  tv1.VisId,tv1.VDate  from transvisitdist tv left join transvisit tv1 on tv.visid=tv1.visid left join mastparty mp on mp.partyid=tv.DistId where   tv.SMID=" + ConPer_Id + " and   tv.DistId=p.PartyId    union     select  tv1.VisId,tv1.VDate  from temp_transvisitdist tv left join transvisit tv1 on tv.visid=tv1.visid left join mastparty mp on mp.partyid=tv.DistId where   tv.SMID=" + ConPer_Id + " and   tv.DistId=p.PartyId  ";
            Lastvisitqry = Lastvisitqry + " union ";
            Lastvisitqry = Lastvisitqry + " select tv1.VisId,tv1.VDate  from TransSalesreturn tv  left join transvisit tv1 on tv.visid=tv1.visid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  	union  select tv1.VisId,tv1.VDate from temp_TransSalesreturn tv left join transvisit tv1 on tv.visid=tv1.visid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId )b order by  b.VisId desc ),'') As LastVisit,";

            //  string LastVisit = DbConnectionDAL.GetScalarValue(CommandType.Text, Lastvisitqry).ToString();



            string Lastproductiveqry = " ISnull((select top 1 Replace(Convert(varchar,VDate,106),' ','/') From(select  tv1.VisId,tv1.VDate from TransOrder tv left join transvisit tv1 on tv.visid=tv1.visid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId   union  select  tv1.VisId,tv1.VDate  from temp_TransOrder tv left join transvisit tv1 on tv.visid=tv1.visid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  )b order by  b.VisId desc),'') As LastProductivecall ,";

            //  string LastProductivecall = DbConnectionDAL.GetScalarValue(CommandType.Text, Lastproductiveqry).ToString();

            string Linepercallqry = @"ISnull((SELECT sum(noofline)/count(*) from(select top 5 *
    From( select  tv.orddocid,count(tv.OrdDocId) As noofline from TransOrder1 tv  left join transvisit tv1 on tv.visid=tv1.visid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  group by tv.orddocid union select  tv.orddocid,count(tv.OrdDocId) As noofline from Temp_TransOrder1 tv left join transvisit tv1 on tv.visid=tv1.visid where   tv.SMID=" + ConPer_Id + " and   tv.PartyId=p.PartyId  group by tv.orddocid )b ORDER BY b.orddocid DESC) c),0) As  Linepercall ";

            // string Linepercall = DbConnectionDAL.GetScalarValue(CommandType.Text, Linepercallqry).ToString();

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();



            if (minDate.Contains("A"))
            {
                minDate = minDate.TrimStart('A');
                Query = @"select  *,msr.smname as cb from(SELECT  isnull(android_id,partyid) as androidid,Created_User_Id,PartyId As Id,AreaId As Area_Id,BeatId As Beat_Id,PartyType As PartyType
,PartyName As Name,IndId As Industry_Id,p.UnderId as DistId,phone,PartyType As Type_Id,ContactPerson ,isnull(Address1,'') as Add1,isnull(Address2,'') as Add2,
Pin,(select UnderId from MastArea where AreaId=p.AreaId) as CtyCodeP1,isnull(Mobile,'') as Mobile1,isnull(Email,'') as Email1,isnull(Potential,0) as Potential,
isnull(Active,'') as IsActive,isnull(Active,'') As Isblocked,isnull(CSTNo,'') as CST_No,isnull(VatTin,'') as VatTin_No,isnull(ServiceTax,'') as ServiceTaxReg_No,
Created_Date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)
AS [Milliseconds],isnull(BlockReason,'') as BlockedReason,isnull(Convert(varchar,[BlockDate],103),'') as Block_Date,isnull(BlockBy,'') as BlockedBy
,Active,isnull(Remark,'') as Remark,isnull(PANNo,'') as PANNo,isnull(Active,'') as Block,creditLimit,outstanding,replace(convert(NVARCHAR, DOA, 106), ' ', '/') AS DOA
,replace(convert(NVARCHAR, DOB, 106), ' ', '/') AS DOB,IMGURL,isnull(GSTINNo,'') as GSTINNo,SyncId,Isnull(PartyNote,'') As PartyNote,isnull(Isblock,'False') As Isblock," + totalorderQty + totalorderValue + Avgorderqty + Avgordervalue + Lastvisitqry + Lastproductiveqry + Linepercallqry + " from [MastParty]p where PartyDist=0 and Active=1 and AreaId in (" + minDate + ")) As T  left join mastsalesrep msr on T.Created_User_Id =msr.userid order by T.Created_date ";
            }
            else
            {
                Query = "select dataamt from mastenviro";
                int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
                double ticks = double.Parse(minDate);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");
                string MQry = "";


                if (Convert.ToInt64(minDate) > 0)
                {
                    // MQry = " and Created_date >='" + minDate1 + "'";
                    MQry = " where  T.[Milliseconds] >'" + minDate + "'";
                }

                Query = "select top " + NoOfRec + " *,msr.smname as cb from(SELECT isnull(android_id,partyid) as androidid,Created_User_Id,PartyId As Id,AreaId As Area_Id ,BeatId As Beat_Id,PartyType As PartyType,PartyName As Name,IndId As Industry_Id,p.UnderId as DistId,phone,PartyType As Type_Id,ContactPerson,isnull(Address1,'') as Add1,isnull(Address2,'') as Add2,Pin,(select UnderId from MastArea where AreaId=p.AreaId) as CtyCodeP1,isnull(Mobile,'') as Mobile1,isnull(Email,'') as Email1,isnull(Potential,0) as Potential,isnull(Active,'') as IsBlocked,isnull(CSTNo,'') as CST_No,isnull(VatTin,'') as VatTin_No,isnull(ServiceTax,'') as ServiceTaxReg_No,Created_Date,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS [Milliseconds],isnull(BlockReason,'') as BlockedReason,isnull(Convert(varchar,[BlockDate],103),'') as Block_Date,isnull(BlockBy,'') as BlockedBy,Active,isnull(Remark,'') as Remark,isnull(PANNo,'') as PANNo,isnull(Active,'') as Block,creditLimit,outstanding,replace(convert(NVARCHAR, DOA, 106), ' ', '/') AS DOA,replace(convert(NVARCHAR, DOB, 106), ' ', '/') AS DOB,IMGURL,isnull(GSTINNo,'') as GSTINNo,longitude,latitude,address,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(lat_long_datetime AS date), lat_long_datetime) AS [lat_long_datetime],SyncId,Isnull(PartyNote,'') As PartyNote,isnull(Isblock,'False') As Isblock," + totalorderQty + totalorderValue + Avgorderqty + Avgordervalue + Lastvisitqry + Lastproductiveqry + Linepercallqry + " from [MastParty]p where PartyDist=0 and Active=1 and AreaId in (select LinkCode from MastLink where PrimCode =" + ConPer_Id + " and Ecode='SA')) As T left join mastsalesrep msr on T.Created_User_Id =msr.userid  " + MQry + "  order by T.Created_date ";
            }

            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            List<xPartiesNewLatLong_V2> rst = new List<xPartiesNewLatLong_V2>();
            List<xPartiesNewLatLongimages> rstimges = new List<xPartiesNewLatLongimages>();
            for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            {
                string IMGURL = "";
                //if (dt.Rows[i]["IMGURL"].ToString() != "")
                //{
                //    IMGURL = "http://" + host + (dt.Rows[i]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                //}

                Dtimages = new DataTable();
                rstimges = new List<xPartiesNewLatLongimages>();
                Dtimages = DbConnectionDAL.GetDataTable(CommandType.Text, "Select * from  MastPartyImage where PartyId='" + dt.Rows[i]["Id"].ToString() + "'");
                if (Dtimages.Rows.Count > 0)
                {
                    for (int j = 0; j < Dtimages.Rows.Count; j++)
                    {
                        if (Dtimages.Rows[j]["IMGURL"].ToString() != "")
                        {
                            path = "http://" + host + (Dtimages.Rows[j]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                            //rstimges.Add(new xPartiesNewLatLongimages
                            //{
                            IMGURL = IMGURL + "&dataman&" + path;
                            //});
                        }

                    }
                }

                char[] chr = { '&', 'd', 'a', 't', 'a', 'm', 'a', 'n', '&' };
                IMGURL = IMGURL.Trim(chr);

                rst.Add(
                    new xPartiesNewLatLong_V2
                    {
                        ID = dt.Rows[i]["Id"].ToString(),
                        AD = dt.Rows[i]["Area_Id"].ToString(),
                        BD = dt.Rows[i]["Beat_Id"].ToString(),
                        PCD = dt.Rows[i]["PartyType"].ToString(),
                        NM = dt.Rows[i]["Name"].ToString(),
                        CP = dt.Rows[i]["ContactPerson"].ToString(),
                        IND = dt.Rows[i]["Industry_Id"].ToString(),
                        DSID = dt.Rows[i]["DistId"].ToString(),
                        AD1 = dt.Rows[i]["Add1"].ToString(),
                        AD2 = dt.Rows[i]["Add2"].ToString(),
                        PI = dt.Rows[i]["Pin"].ToString(),
                        CT = dt.Rows[i]["CtyCodeP1"].ToString(),
                        M = dt.Rows[i]["Mobile1"].ToString(),
                        E = dt.Rows[i]["Email1"].ToString(),
                        PL = dt.Rows[i]["Potential"].ToString(),
                        BLK = dt.Rows[i]["IsBlocked"].ToString(),
                        CST = dt.Rows[i]["GSTINNo"].ToString(),
                        VTN = dt.Rows[i]["VatTin_No"].ToString(),
                        STNO = dt.Rows[i]["ServiceTaxReg_No"].ToString(),
                        BRZN = dt.Rows[i]["BlockedReason"].ToString(),
                        BDT = dt.Rows[i]["Block_Date"].ToString(),
                        BBY = dt.Rows[i]["BlockedBy"].ToString(),
                        AT = dt.Rows[i]["Active"].ToString(),
                        R = dt.Rows[i]["Remark"].ToString(),
                        PAN = dt.Rows[i]["PANNo"].ToString(),
                        PHONENO = dt.Rows[i]["phone"].ToString(),
                        DA = dt.Rows[i]["DOA"].ToString(),
                        DB = dt.Rows[i]["DOB"].ToString(),
                        CREATEDBY = dt.Rows[i]["cb"].ToString(),
                        MS = dt.Rows[i]["Milliseconds"].ToString(),
                        ANDROIDID = dt.Rows[i]["androidid"].ToString(),
                        LONGITUDE = dt.Rows[i]["longitude"].ToString(),
                        LATITUDE = dt.Rows[i]["latitude"].ToString(),
                        LATLNGTIME = dt.Rows[i]["lat_long_datetime"].ToString(),
                        CREDITLIMIT = dt.Rows[i]["Creditlimit"].ToString(),
                        OUTSTANDING = dt.Rows[i]["Outstanding"].ToString(),
                        PARTY_IMAGE = IMGURL,
                        SYNC_ID = dt.Rows[i]["SyncId"].ToString(),
                        TOTALORDERQTY = dt.Rows[i]["totalorderQty"].ToString(),
                        TOTALORDERVALUE = dt.Rows[i]["totalorderValue"].ToString(),
                        AVGORDERQTY = dt.Rows[i]["Avgorderqty"].ToString(),
                        AVGORDERVALUE = dt.Rows[i]["Avgordervalue"].ToString(),
                        LASTPRODUCTIVECALL = dt.Rows[i]["LastProductivecall"].ToString(),
                        LINEPERCALL = dt.Rows[i]["Linepercall"].ToString(),
                        LASTVISIT = dt.Rows[i]["LastVisit"].ToString(),
                        PARTYNOTE = dt.Rows[i]["PartyNote"].ToString(),
                        ISBLOCK = Convert.ToBoolean(dt.Rows[i]["Isblock"].ToString())
                    }
                );
            }
            dt.Dispose();
            Dtimages.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        #endregion

        #region FFMSAppApp_GetProducts_V2

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSAppApp_GetProducts_V2()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var OBJRESPONSE = JsonConvert.DeserializeObject<disUserList>(bodyText);

            //  string minDate = OBJRESPONSE.body[0].MINDATE;


            double ticks = double.Parse(OBJRESPONSE.BODY[0].MINDATE);
            TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            DateTime startdate = new DateTime(1970, 1, 1) + time;
            string minDate1 = startdate.ToString("yyyy-MM-dd  HH:mm:ss.fff");

            string MQry = "";
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            if (Convert.ToInt64(OBJRESPONSE.BODY[0].MINDATE) > 0)
            { MQry = " WHERE  T.[MILLISECONDS] >='" + OBJRESPONSE.BODY[0].MINDATE + "'"; }

            Query = "SELECT  TOP " + NoOfRec + "  ITEMID ITEMID,REPLACE(REPLACE(REPLACE([ITEMNAME],'&','AND'),'>',' '),'<',' ') AS ITEMNAME,UNIT,(CASE WHEN ISNULL(ACTIVE,'') =1 THEN 'True' ELSE 'False' END) ACTIVE,ISNULL(STDPACK,0) STDPK,ISNULL(MRP,0) MRP,PRODUCTGROUPID,PRODUCTGROUPNAME,SEGMENTID,SEGMENTNAME,ISNULL(DIVISIONCODE,'') DIVISIONCODE,CREATEDDATE, ISNULL(MILLISECONDS,'')  MILISECOND,ISNULL(DP,0) DP,ISNULL(GST,0) GST ,ISNULL(DISCOUNT,0) DISCOUNT,ISNULL(RP,0) RP,ISNULL(CENTRALTAXPER,0) CGSTPER,ISNULL(STATETAXPER,0) SGSTPER,ISNULL(INTEGRATEDTAXPER,0) IGSTPER,ISNULL(PRIMARYUNIT,'') PRIMARYUNIT,ISNULL(SECONDARYUNIT,'') SECONDARYUNIT,ISNULL(PRIMARYUNITFACTOR,0) PRIMARYUNITFACTOR,ISNULL(SECONDARYUNITFACTOR,0) SECONADYUNITFACTOR,ISNULL(MOQ,0) MOQ,(CASE WHEN ISNULL(PROMOTED,'False') =1 THEN 'True' ELSE 'False' END) PROMOTED FROM (SELECT MI.ITEMID,REPLACE(REPLACE(REPLACE(MI.[ITEMNAME],'&','AND'),'>',' '),'<',' ') AS ITEMNAME,MI.UNIT, MI.ACTIVE,MI.STDPACK,MI.MRP,MI1.ITEMID AS PRODUCTGROUPID,MI1.ITEMNAME AS PRODUCTGROUPNAME,MS.ID AS SEGMENTID,MS.NAME AS SEGMENTNAME,MI.DIVISIONCODE,MI.CREATEDDATE,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MI.CREATEDDATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MI.CREATEDDATE AS DATE), MI.CREATEDDATE) AS[MILLISECONDS],MI.DP,MI.GST,MI.DISCOUNT,MI.RP,MI.CENTRALTAXPER, MI.STATETAXPER, MI.INTEGRATEDTAXPER, MI.PRIMARYUNIT, MI.SECONDARYUNIT, MI.PRIMARYUNITFACTOR, MI.SECONDARYUNITFACTOR, MI.MOQ, MI.PROMOTED,Isnull(mi.MustSell,'false') As MUSTSELL FROM MASTITEM MI LEFT JOIN MASTITEM MI1 ON MI.UNDERID=MI1.ITEMID LEFT JOIN MASTITEMSEGMENT MS ON MS.ID=MI.SEGMENTID WHERE MI.ITEMTYPE='ITEM'  AND MI.ITEMNAME NOT LIKE '%*') AS T  " + MQry + "  ORDER BY T.CREATEDDATE ";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);


            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        #endregion

        #region FFMSApp_BeatDeviation_V2

        public class BeatDeviation_V2
        {

            public string SMID { get; set; }
            public string VISID { get; set; }
            public string BEATID { get; set; }


        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_BeatDeviation_V2()
        {
            DataTable Dtplannedbeat = new DataTable();
            Common cls = new Common();

            var httprequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            var objResponse = JsonConvert.DeserializeObject<BeatDeviation_V2>(bodyText);
            string displaytitle = "";
            string title = "";
            string pagename = "";
            string Changebeatname = "";
            string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT COMPCODE FROM MASTENVIRO"));
            Dtplannedbeat = DbConnectionDAL.GetDataTable(CommandType.Text, @"SELECT TB.BEATID AS BEATID,ISNULL(MA.AREANAME,'') AS BEATNAME FROM TRANSBEATPLAN TB LEFT JOIN MASTAREA MA ON MA.AREAID=TB.BEATID WHERE SMID=" + objResponse.SMID + " AND PLANNEDDATE=CAST (GETDATE() AS DATE)");
            if (Dtplannedbeat.Rows.Count > 0 && Convert.ToInt32(Dtplannedbeat.Rows[0]["BEATID"].ToString()) > 0)
            {
                Changebeatname = DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT ISNULL(MA.AREANAME,'') AS BEATNAME FROM  MASTAREA MA WHERE AREAID=" + objResponse.BEATID + "").ToString();
                if (Convert.ToInt32(objResponse.BEATID) != Convert.ToInt32(Dtplannedbeat.Rows[0]["Beatid"].ToString()))
                {
                    DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT SMID ,SMNAME ,USERID,UNDERID,MS.ROLEID,MR.ROLENAME FROM MASTSALESREP MS LEFT JOIN MASTROLE MR ON MR.ROLEID=MS.ROLEID WHERE SMID=" + objResponse.SMID + "");

                    if (dtgrpsmid.Rows.Count > 0)
                    {
                        string pro_id = "BEATDEVIATION";
                        string sql_getsenior = "SELECT SMID,MOBILE,USERID FROM MASTSALESREP WHERE SMNAME<>'.'  AND SMID IN (SELECT MAINGRP FROM MASTSALESREPGRP WHERE SMID=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " AND LEVEL<(SELECT LEVEL FROM MASTSALESREPGRP WHERE SMID=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " AND MAINGRP=" + dtgrpsmid.Rows[0]["Smid"].ToString() + "))";
                        DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                        if (dt_getsenior.Rows.Count > 0)
                        {
                            for (int k = 0; k < dt_getsenior.Rows.Count; k++)
                            {


                                displaytitle = dtgrpsmid.Rows[0]["SMName"].ToString() + " changesd beat from  " + Dtplannedbeat.Rows[0]["BeatName"] + " to  " + Changebeatname;
                                title = "Beat Deviation";
                                //}

                                if (dtgrpsmid.Rows[0]["ROLENAME"].ToString().ToUpper() == "L1")
                                {
                                    pagename = "DSREntryForm.aspx?VisId=" + objResponse.VISID + "";
                                }
                                else if (dtgrpsmid.Rows[0]["ROLENAME"].ToString().ToUpper() == "L2")
                                {
                                    pagename = "DSREntryFormLevel2.aspx?VisId=" + objResponse.VISID + "";
                                }
                                else
                                {
                                    pagename = "DSRVistEntry.aspx?VisId=" + objResponse.VISID + "";

                                }
                                lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()), DateTime.Now, pagename, displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), Convert.ToInt32(dt_getsenior.Rows[k]["smid"].ToString()));

                                if (!string.IsNullOrEmpty(dt_getsenior.Rows[k]["mobile"].ToString()))
                                {



                                    cls.pushnotificationforBeatDeviation(displaytitle, compcode,
                                        dt_getsenior.Rows[k]["mobile"].ToString(),
                                      title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                        dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS", objResponse.BEATID, Dtplannedbeat.Rows[0]["Beatid"].ToString(), objResponse.VISID);

                                    cls.pushnotificationforBeatDeviation(displaytitle, compcode,
                                       dt_getsenior.Rows[k]["mobile"].ToString(),
                                      title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                       dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER", objResponse.BEATID, Dtplannedbeat.Rows[0]["Beatid"].ToString(), objResponse.VISID);
                                }
                            }
                        }
                    }
                }

            }
        }



        #endregion

        #region listofskubase

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_listofskubasedonsalevalue_V2()
        {
            DataTable Dt = new DataTable();
            var httpRequest = HttpContext.Current.Request;

            string str = "";
            string fdate = "";
            string tdate = "";
            string PartyId = "";
            fdate = httpRequest.Params["FROMDATE"].ToString();
            tdate = httpRequest.Params["TODATE"].ToString();
            PartyId = httpRequest.Params["PARTYID"].ToString();
            try
            {
                str = @"SELECT  b.ItemId ITEMID,Max(b.ItemName) AS ITEMNAME,Sum(b.Amount) AS SALEAMOUNT ,Max(b.ProductGrpId) AS PRODUCTGRPID,Max(b.ProductGrp) AS PRODUCTGRP From(SELECT TO1.ItemId,MI.ItemName AS ItemName,TO1.Amount AS Amount,MP.ItemId AS ProductGrpId,MP.ItemName AS ProductGrp FROM temp_transorder1 TO1 Left JOIN MastItem MI ON MI.ItemId=TO1.ItemId LEFT JOIN MastItem MP ON MP.ItemId=MI.underId
WHERE  TO1.vdate>='" + fdate + "' and TO1.vdate <='" + tdate + "' and TO1.PartyId=" + PartyId + "  UNION SELECT TO1.ItemId,MI.ItemName AS ItemName,TO1.Amount AS Amount,MP.ItemId AS ProductGrpId,MP.ItemName AS ProductGrp FROM transorder1 TO1 Left JOIN MastItem MI ON MI.ItemId=TO1.ItemId LEFT JOIN MastItem MP ON MP.ItemId=MI.underId WHERE  TO1.vdate>='" + fdate + "' and TO1.vdate <='" + tdate + "'  and TO1.PartyId=" + PartyId + "  )b GROUP BY b.ItemId ORDER BY Sum(b.Amount) DESC";

                Dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            }
            catch (Exception)
            {


            }

            Context.Response.Write(JsonConvert.SerializeObject(Dt));
            Dt.Dispose();
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_listofskubasedonsaleqty_V2()
        {
            DataTable Dt = new DataTable();
            var httpRequest = HttpContext.Current.Request;

            string str = "";
            string fdate = "";
            string tdate = "";
            string PartyId = "";
            fdate = httpRequest.Params["FROMDATE"].ToString();
            tdate = httpRequest.Params["TODATE"].ToString();
            PartyId = httpRequest.Params["PARTYID"].ToString();
            try
            {
                str = @"SELECT  b.ItemId ITEMID,Max(b.ItemName) AS ITEMNAME,Sum(b.qty) AS SALEQTY ,Max(b.ProductGrpId) AS PRODUCTGRPID,Max(b.ProductGrp) AS PRODUCTGRP
From(SELECT TO1.ItemId,MI.ItemName AS ItemName,TO1.Qty AS qty,MP.ItemId AS ProductGrpId,MP.ItemName AS ProductGrp FROM temp_transorder1 TO1
Left JOIN MastItem MI ON MI.ItemId=TO1.ItemId LEFT JOIN MastItem MP ON MP.ItemId=MI.underId
WHERE  TO1.vdate>='" + fdate + "' and TO1.vdate <='" + tdate + "'  and TO1.PartyId=" + PartyId + " UNION SELECT TO1.ItemId,MI.ItemName AS ItemName,TO1.Qty AS qty,MP.ItemId AS ProductGrpId,MP.ItemName AS ProductGrp FROM transorder1 TO1 Left JOIN MastItem MI ON MI.ItemId=TO1.ItemId LEFT JOIN MastItem MP ON MP.ItemId=MI.underId WHERE  TO1.vdate>='" + fdate + "' and TO1.vdate <='" + tdate + "' and TO1.PartyId=" + PartyId + " )b GROUP BY b.ItemId ORDER BY Sum(b.qty) DESC";

                Dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            }
            catch (Exception)
            {


            }

            Context.Response.Write(JsonConvert.SerializeObject(Dt));
            Dt.Dispose();
        }

        #endregion

        #region FFMSApp_UpdatePartyNote_V2

        public class partynote
        {
            public string PARTYID { get; set; }
            public string LATITUDE { get; set; }
            public string LONGITUTE { get; set; }
            public string ADDRESS { get; set; }
            public string LAT_LONGDATETIME { get; set; }
            public string PARTYNOTE { get; set; }
        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_UpdatePartyNote_V2()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            var objResponse = JsonConvert.DeserializeObject<partynote>(bodyText);

            DateTime mDate = DateTime.Parse("1970-01-01");
            mDate = mDate.AddMilliseconds(Convert.ToInt64(objResponse.LAT_LONGDATETIME) + 19800);
            string gpsdate = (mDate.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            try
            {

                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "Update MastParty set Latitude='" + objResponse.LATITUDE + "',Longitude='" + objResponse.LONGITUTE + "', Address='" + objResponse.ADDRESS + "',Lat_long_datetime='" + gpsdate + "',PartyNote='" + objResponse.PARTYNOTE + "' where PartyId=" + objResponse.PARTYID + "");

            }
            catch (Exception)
            {


            }
            bodyStream.Dispose();
        }

        #endregion

        #region MTDDATA

        public class MTDData
        {
            public List<PrimarySale> PRIMARYSALES { get; set; }
            public List<SecondarySale> SECONDARYSALES { get; set; }
            public SKUWiseSales SKUWISESALES { get; set; }
        }
        public class SKUWiseSales
        {
            public List<SKUSaleAmt> SKUSALESAMT { get; set; }
            public List<SKUSaleQty> SKUSALESQTY { get; set; }
        }
        public class PrimarySale
        {
            public string DISTNAME { get; set; }
            public string DISTMOBILE { get; set; }
            public string VDATE { get; set; }
            public string ORDERAMT { get; set; }
            public string DOCID { get; set; }
        }
        public class SecondarySale
        {
            public string NAME { get; set; }
            public string MOBILE { get; set; }
            public string VDATE { get; set; }
            public string ORDERAMT { get; set; }
            public string DOCID { get; set; }
        }

        public class SKUSaleAmt
        {
            public string NAME { get; set; }
            public string AMOUNT { get; set; }
            public string ID { get; set; }

        }
        public class SKUSaleQty
        {
            public string NAME { get; set; }
            public string QTY { get; set; }
            public string ID { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_MTDData_V2()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string smid = objResponse.BODY[0].CONPER_ID;
            string fromdate = objResponse.BODY[0].FROMDATE;
            string todate = objResponse.BODY[0].TODATE;
            string _qrycondition = "TP.Vdate between '" + fromdate + " 00:00:00' and '" + todate + " 23:59:59'";
            DataTable DtPrimarySale = new DataTable();
            DataTable DtSecondarySale = new DataTable();
            DataTable DtSKUSales = new DataTable();
            // DataTable DtSKUSaleQty = new DataTable();
            MTDData MTDData = new MTDData();
            try
            {


                DtPrimarySale = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT TP.PODocId AS Docid,Replace(Convert(VARCHAR,TP.VDate,106),' ','/') AS VDate,TP.OrderValue AS OrderAmt,MP.PartyName AS Distname,MP.Mobile AS Mobile FROM TransPurchOrder TP LEFT JOIN MastParty MP  ON MP.PartyId=TP.DistId  WHERE  " + _qrycondition + "  and  DistId IN ( SELECT Partyid FROM MastParty WHERE  AreaId IN (SELECT Linkcode FROM Mastlink WHERE PrimCode IN( select  smid from MastSalesRepGrp  where smid in (select smid from MastSalesRepGrp where MainGrp in (" + smid + ")) and  level>= (select distinct level from MastSalesRepGrp where MainGrp in (" + smid + ")))) AND PartyDist=1) ");
                MTDData.PRIMARYSALES = new List<PrimarySale>();
                for (int i = 0; i < DtPrimarySale.Rows.Count; i++)
                {
                    MTDData.PRIMARYSALES.Add(new PrimarySale
                    {
                        DISTNAME = DtPrimarySale.Rows[i]["Distname"].ToString(),
                        DISTMOBILE = DtPrimarySale.Rows[i]["Mobile"].ToString(),
                        DOCID = DtPrimarySale.Rows[i]["Docid"].ToString(),
                        ORDERAMT = DtPrimarySale.Rows[i]["OrderAmt"].ToString(),
                        VDATE = DtPrimarySale.Rows[i]["VDate"].ToString()

                    });
                }

                DtSecondarySale = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT TP.Orddocid AS Docid,Replace(Convert(VARCHAR,TP.VDate,106),' ','/') AS VDate,TP.OrderAmount AS OrderAmt,MP.PartyName AS name,MP.Mobile AS Mobile FROM TransOrder TP LEFT JOIN MastParty MP  ON MP.PartyId=TP.PartyId  WHERE " + _qrycondition + "  and  TP.PartyId IN ( SELECT Partyid FROM MastParty WHERE  AreaId IN (SELECT Linkcode FROM Mastlink WHERE PrimCode IN( select  smid from MastSalesRepGrp  where smid in (select smid from MastSalesRepGrp where MainGrp in (" + smid + ")) and  level>= (select distinct level from MastSalesRepGrp where MainGrp in (" + smid + "))))  AND PartyDist=0)  UNION ALL SELECT TP.Orddocid AS Docid,Replace(Convert(VARCHAR,TP.VDate,106),' ','/') AS VDate,TP.OrderAmount AS OrderAmt,MP.PartyName AS name,MP.Mobile AS Mobile FROM Temp_TransOrder TP LEFT JOIN MastParty MP  ON MP.PartyId=TP.PartyId  WHERE " + _qrycondition + " and  TP.PartyId IN ( SELECT Partyid FROM MastParty WHERE  AreaId IN (SELECT Linkcode FROM Mastlink WHERE PrimCode IN( select  smid from MastSalesRepGrp  where smid in (select smid from MastSalesRepGrp where MainGrp in (" + smid + ")) and  level>= (select distinct level from MastSalesRepGrp where MainGrp in (" + smid + "))))  AND PartyDist=0)");
                MTDData.SECONDARYSALES = new List<SecondarySale>();
                for (int i = 0; i < DtSecondarySale.Rows.Count; i++)
                {
                    MTDData.SECONDARYSALES.Add(new SecondarySale
                    {
                        NAME = DtSecondarySale.Rows[i]["name"].ToString(),
                        MOBILE = DtSecondarySale.Rows[i]["Mobile"].ToString(),
                        DOCID = DtSecondarySale.Rows[i]["Docid"].ToString(),
                        ORDERAMT = DtSecondarySale.Rows[i]["OrderAmt"].ToString(),
                        VDATE = DtSecondarySale.Rows[i]["VDate"].ToString()

                    });
                }

                DtSKUSales = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT Sum(T.qty ) AS qty, Sum(T.amount ) AS amount,Max(T.ItemName) As ItemName,T.ItemID From(SELECT TP.Orddocid AS Docid,Replace(Convert(VARCHAR,TP.VDate,106),' ','/') AS VDate,TP.amount AS amount,MP.PartyName AS name,MP.Mobile AS Mobile,MI.ItemName,MI.ItemId,TP.qty AS qty FROM TransOrder1 TP LEFT JOIN MastParty MP  ON MP.PartyId=TP.PartyId   LEFT JOIN MastItem MI  ON MI.ItemID=TP.ItemId  WHERE " + _qrycondition + " and  TP.PartyId IN ( SELECT Partyid FROM MastParty WHERE  AreaId IN (SELECT Linkcode FROM Mastlink  WHERE PrimCode IN( select  smid from MastSalesRepGrp  where smid in (select smid from MastSalesRepGrp  where MainGrp in (" + smid + ")) and  level>= (select distinct level from MastSalesRepGrp where MainGrp in (" + smid + "))))  AND PartyDist=0)  UNION ALL SELECT TP.Orddocid AS Docid,Replace(Convert(VARCHAR,TP.VDate,106),' ','/') AS VDate,TP.amount AS amount,MP.PartyName AS name,MP.Mobile AS Mobile,MI.ItemName,MI.ItemId,TP.qty AS qty  FROM Temp_TransOrder1 TP  LEFT JOIN MastParty MP  ON MP.PartyId=TP.PartyId    LEFT JOIN MastItem MI  ON MI.ItemID=TP.ItemId  WHERE " + _qrycondition + " and  TP.PartyId IN ( SELECT Partyid FROM MastParty WHERE   AreaId IN (SELECT Linkcode FROM Mastlink  WHERE PrimCode IN( select  smid from MastSalesRepGrp   where smid in (select smid from MastSalesRepGrp where MainGrp in (" + smid + ")) and  level>= (select distinct level from MastSalesRepGrp where MainGrp in (" + smid + "))))  AND PartyDist=0)) T GROUP BY T.ItemId ORDER BY	Max(T.ItemName)");
                MTDData.SKUWISESALES = new SKUWiseSales();
                MTDData.SKUWISESALES.SKUSALESAMT = new List<SKUSaleAmt>();
                MTDData.SKUWISESALES.SKUSALESQTY = new List<SKUSaleQty>();
                for (int i = 0; i < DtSKUSales.Rows.Count; i++)
                {
                    MTDData.SKUWISESALES.SKUSALESAMT.Add(new SKUSaleAmt
                    {
                        NAME = DtSKUSales.Rows[i]["ItemName"].ToString(),
                        AMOUNT = DtSKUSales.Rows[i]["amount"].ToString(),
                        ID = DtSKUSales.Rows[i]["ItemID"].ToString(),


                    });
                    MTDData.SKUWISESALES.SKUSALESQTY.Add(new SKUSaleQty
                    {
                        NAME = DtSKUSales.Rows[i]["ItemName"].ToString(),
                        QTY = DtSKUSales.Rows[i]["qty"].ToString(),
                        ID = DtSKUSales.Rows[i]["ItemID"].ToString(),


                    });
                }
            }
            catch (Exception)
            {

                // throw;
            }
            Context.Response.Write(JsonConvert.SerializeObject(MTDData));
        }

        #endregion

        #region PocketMIS Report

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_PrimarySaleDistributorbasedonorderValue_V2()
        {

            string _qry = "";
            DataTable Dt = new DataTable();
            DateTime now = DateTime.Now;
            DateTime startDate = new DateTime(now.Year, now.Month, 1);
            string fdate = startDate.ToString("dd/MMM/yyyy");
            string tdate = DateTime.Now.ToString("dd/MMM/yyyy");

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string smid = objResponse.BODY[0].CONPER_ID;

            string _qrycondition = "TP.Vdate between '" + fdate + "' and '" + tdate + "'";

            try
            {
                _qry = @"SELECT Max(MP.PartyName) AS DISTRIBUTORNAME,TP.DistId AS DISTID,Sum(TP.OrderValue) AS ORDERVALUE,Max(TP.VDate) As  LATESTORDERDATE FROM TransPurchOrder TP LEFT JOIN MastParty MP  ON MP.PartyId=TP.DistId  WHERE " + _qrycondition + "  and  DistId IN ( SELECT Partyid FROM MastParty WHERE  AreaId IN (SELECT Linkcode FROM Mastlink WHERE PrimCode IN( select  smid from MastSalesRepGrp  where smid in (select smid from MastSalesRepGrp where MainGrp in (" + smid + ")) and  level>= (select distinct level from MastSalesRepGrp where MainGrp in (" + smid + " )))) AND PartyDist=1) GROUP BY TP.DistId ORDER BY Sum(TP.OrderValue)  desc";
                Dt = DbConnectionDAL.GetDataTable(CommandType.Text, _qry);

            }
            catch (Exception)
            {


            }

            Context.Response.Write(JsonConvert.SerializeObject(Dt));
            Dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_PrimarySaleDistributororderforcurrentmonth_V2()
        {

            string _qry = "";
            DataTable Dt = new DataTable();
            DateTime now = DateTime.Now;
            DateTime startDate = new DateTime(now.Year, now.Month, 1);
            string fdate = startDate.ToString("dd/MMM/yyyy");
            string tdate = DateTime.Now.ToString("dd/MMM/yyyy");

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string DistId = objResponse.BODY[0].DISTID;

            string _qrycondition = "TP.Vdate between '" + fdate + "' and '" + tdate + "'";

            try
            {
                _qry = @"SELECT MP.PartyName PARTYNAME, PODocId AS DOCID,VDate AS ORDERDATE,OrderValue AS AMOUNT,TP.DistId  DISTID FROM TransPurchOrder TP
                       LEFT JOIN MastParty MP ON MP.PartyId=TP.DistId where " + _qrycondition + " and TP.DistId =" + DistId + "";
                Dt = DbConnectionDAL.GetDataTable(CommandType.Text, _qry);

            }
            catch (Exception)
            {


            }

            Context.Response.Write(JsonConvert.SerializeObject(Dt));
            Dt.Dispose();
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SecondarySalesSumm_V2()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string smid = objResponse.BODY[0].CONPER_ID;
            string fromdate = objResponse.BODY[0].FROMDATE;
            string todate = objResponse.BODY[0].TODATE;
            string _qry = "";
            DataTable Dt = new DataTable();
            string selectedbeat = "";
            string originalbeat = "";
            string Totalcall = "";
            string Productivecall = "";
            string _condition = "";
            _condition = " where tv.vdate between '" + fromdate + "' and '" + todate + "' and tv.smid=" + smid + " ";
            Totalcall = "Isnull((SELECT totalcall from GetTotalCallPerDay WHERE Smid=tv.SMId AND vdate=tv.VDate),0) AS TOTALCALL,";
            Productivecall = "Isnull((SELECT Productivecall from GetProductiveCallPerDay WHERE Smid= tv.SMId AND vdate=tv.VDate),0) AS PRODUCTIVECALL,";
            selectedbeat = "Isnull((SELECT substring((SELECT ', ' + [Name] FROM(SELECT Max(Areaname) AS Name FROM GetSalesDatewiseBeat GB LEFT JOIN MastArea MA ON MA.AreaId=GB.BeatId WHERE Smid= tv.SMId AND vdate=tv.VDate GROUP BY GB.BeatId ) AS T FOR XML PATH('') ),2,Len( (SELECT ', ' + [Name] FROM ( SELECT Max(Areaname) AS Name FROM GetSalesDatewiseBeat GB LEFT JOIN MastArea MA ON MA.AreaId=GB.BeatId WHERE Smid= tv.SMId AND vdate=tv.VDate GROUP BY GB.BeatId ) AS T FOR XML PATH('')))-1) ),'N/A') AS SELECTEDBEAT,";
            originalbeat = " Isnull( (SELECT Isnull(MA.AreaName,'') AS BeatName FROM TransBeatPlan TB LEFT JOIN MastArea MA ON MA.AreaId=TB.BeatID  WHERE Smid= tv.SMId AND PlannedDate=tv.VDate),'N/A') AS PLANNEDBEAT,";

            _qry = "select Replace(Convert(VARCHAR,tv.VDate,106),' ','/') AS VDATE,tv.SMId SMID," + Totalcall + Productivecall + selectedbeat + originalbeat + " tv.Mobile_Created_date AS STARTDAY,(CASE WHEN Isnull(tv.DSR_Type,'A')='P' THEN 'Working' ELSE 'Day Not Started' end) AS DSR  from transvisit tv " + _condition + " order by tv.vdate desc ";
            try
            {

                Dt = DbConnectionDAL.GetDataTable(CommandType.Text, _qry);

            }
            catch (Exception)
            {


            }
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(Dt));
            Dt.Dispose();
        }

        #endregion

        #region JSGetRetailerCompetitorWithStock_V2

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetRetailerCompetitorWithStock_V2()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            // DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.BODY[0].CONPER_ID;
            string minDate = objResponse.BODY[0].MINDATE;

            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = ""; string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            if (Convert.ToInt64(minDate) > 0)
            {
                MQry = " Where T.MS >='" + minDate + "'";
            }
            DataTable dt = new DataTable();
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            string vdate = "";
            //List<RetailerCompetitor> rst = new List<RetailerCompetitor>();
            if (dttopvisid.Rows.Count > 0)
            {
                vdate = Convert.ToDateTime(dttopvisid.Rows[0]["vdate"].ToString()).ToString("yyyy-MM-dd");
                Query = "SELECT * FROM (SELECT COMPTID AS COMPTID,VISID AS VISID,DOCID AS DOCID,ISNULL(ANDROID_ID,DOCID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID AS USERID,SMID AS SMID,PARTYID AS PARTYID,ITEM AS ITEM,QTY AS QTY,RATE AS RATE, (CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)  AS MS,REMARKS AS REMARKS,COMPNAME AS COMPNAME,ISNULL(DISCOUNT,0.00) AS DISCOUNT,BRANDACTIVITY AS BRANDACTIVITY,MEETACTIVITY AS MEETCTIVITY,ROADSHOW,[SCHEME/OFFERS] AS SCHEME,OTHERGENERALINFO AS OTHERGERNRALINFO,OTHERACTIVITY AS OTHERACTIVITY,(CASE WHEN ISNULL(IMGURL,'')<>'' THEN 'HTTP://' + '" + host + "' + REPLACE(IMGURL,'~','') ELSE '' END) AS IMGURL,LONGITUDE AS LONGITUDE,LATITUDE AS LATITUDE,ADDRESS AS ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE,STOCK FROM TRANSCOMPETITOR WHERE SMID IN (" + ConPer_Id + ") AND VDATE='" + vdate + "' ) AS T " + MQry + " "

                    + " UNION SELECT * FROM (SELECT COMPTID AS COMPTID,VISID AS VISID,DOCID AS DOCID,ISNULL(ANDROID_ID,DOCID) AS ANDROID_ID,REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/') AS VDATE,USERID AS USERID,SMID AS SMID,PARTYID AS PARTYID,ITEM AS ITEM,QTY AS QTY,RATE AS RATE, (CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(CREATED_DATE AS DATE), CREATED_DATE)  AS MS,REMARKS AS REMARKS,COMPNAME AS COMPNAME,ISNULL(DISCOUNT,0.00) AS DISCOUNT,BRANDACTIVITY AS BRANDACTIVITY,MEETACTIVITY AS MEETCTIVITY,ROADSHOW,[SCHEME/OFFERS] AS SCHEME,OTHERGENERALINFO AS OTHERGERNRALINFO,OTHERACTIVITY AS OTHERACTIVITY, (CASE WHEN ISNULL(IMGURL,'')<>'' THEN 'HTTP://' + '" + host + "' + REPLACE(IMGURL,'~','') ELSE '' END) AS IMGURL,LONGITUDE AS LONGITUDE,LATITUDE AS LATITUDE,ADDRESS AS ADDRESS,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(LAT_LONG_DATETIME AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(LAT_LONG_DATETIME AS DATE), LAT_LONG_DATETIME) AS LATLONGDT,(CAST(DATEDIFF(SECOND, '1970-01-01 05:30:00', CAST(MOBILE_CREATED_DATE AS DATE)) AS BIGINT)*1000)  + DATEDIFF(MS, CAST(MOBILE_CREATED_DATE AS DATE), MOBILE_CREATED_DATE) AS MOBILE_CREATED_DATE,STOCK FROM TEMP_TRANSCOMPETITOR WHERE SMID IN (" + ConPer_Id + ")  AND VDATE='" + vdate + "' ) AS T " + MQry + " ORDER BY MS";

                dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
            }
            dttopvisid.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransCompetitorWithStock_V2()
        {
            string createText = "";
            decimal Qty = 0;
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();

            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            if (string.IsNullOrEmpty(objResponse.BODYLINE[0].QTY.ToString()))
            {
                Qty = 0.00M;
            }
            else
            {
                Qty = objResponse.BODYLINE[0].QTY;
            }


            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            createText += "" + objResponse.BODYLINE[0].VISID + "," + objResponse.BODYLINE[0].VDATE + "," + objResponse.BODYLINE[0].USERID + "," + objResponse.BODYLINE[0].PARTYID + "," + objResponse.BODYLINE[0].ITEM + "," + Qty + "," + objResponse.BODYLINE[0].RATE + "," + objResponse.BODYLINE[0].SMID + "," + objResponse.BODYLINE[0].ANDROID_ID + "," + objResponse.BODYLINE[0].IMGURL + "," + objResponse.BODYLINE[0].REMARKS + "," + objResponse.BODYLINE[0].COMPNAME + "," + objResponse.BODYLINE[0].DISCOUNT + "," + objResponse.BODYLINE[0].BRANDACTIVITY + "," + objResponse.BODYLINE[0].MEETACTIVITY + ", " + objResponse.BODYLINE[0].ROADSHOW + "," + objResponse.BODYLINE[0].SCHEME + "," + objResponse.BODYLINE[0].OTHERGENERALINFO + "," + objResponse.BODYLINE[0].OTHERACTIVITY + "," + objResponse.BODYLINE[0].LONGITUDE + "," + objResponse.BODYLINE[0].LATITUDE + "," + objResponse.BODYLINE[0].LAT_LONG_DT + "," + objResponse.BODYLINE[0].IMAGE1 + ", " + objResponse.BODYLINE[0].MOBILE_CREATED_DATE + "," + objResponse.BODYLINE[0].STOCKINV + "" + Environment.NewLine;

            string Query = ""; string Query1 = ""; string filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "", stck = "";
            string[] imgurls = new string[1];
            int compid = 0;

            if (string.IsNullOrEmpty(objResponse.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                objResponse.BODYLINE[0].MOBILE_CREATED_DATE = "0";
            }

            if (!string.IsNullOrEmpty(objResponse.BODYLINE[0].LAT_LONG_DT))
            {
                double ticks = double.Parse(objResponse.BODYLINE[0].LAT_LONG_DT);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(objResponse.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                double ticks1 = double.Parse(objResponse.BODYLINE[0].MOBILE_CREATED_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string docID = Settings.GetDocID("COMPT", DateTime.Now);
            Settings.SetDocID("COMPT", docID);
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;

            if (objResponse.BODYLINE[0].IMAGE1.Contains("http://"))
            {
                objResponse.BODYLINE[0].IMGURL = objResponse.BODYLINE[0].IMAGE1.Replace(path, "~");
            }
            else if (objResponse.BODYLINE[0].IMAGE1 != "N/A")
            {
                string[] imges = objResponse.BODYLINE[0].IMAGE1.Split(new string[] { "&dataman&" }, StringSplitOptions.None);
                imgurls = new string[imges.Length];
                for (int i = 0; i < imges.Length; i++)
                {

                    byte[] bytes = Convert.FromBase64String(imges[i]);

                    Image image;
                    using (MemoryStream ms = new MemoryStream(bytes))
                    {
                        image = Image.FromStream(ms);
                    }
                    string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }
                    String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    filename = Path.GetFileName(objResponse.BODYLINE[0].SMID + "_" + docID.Replace(" ", "") + "_" + i + "_" + timeStamp);
                    {
                        //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                        string filePath = Server.MapPath("~/DSRImages" + "/C_" + filename + ".png");
                        File.WriteAllBytes(filePath, bytes);
                        imgurls[i] = "~/DSRImages" + "/C_" + filename + ".png";
                    }
                }
            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(objResponse.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");


            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + objResponse.BODYLINE[0].VISID + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + objResponse.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + objResponse.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + objResponse.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + objResponse.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                    dtfr.Dispose();
                }
            }

            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(objResponse.BODYLINE[0].VISID) + "").ToString();
            if (ChkLock == "True")
            {
                { }
            }
            else if (ChkLock == "False")
            {
                Query = "select ComptId As Id, DocId As DocumentId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date)   AS MS   from Temp_TransCompetitor where DocId='" + docID + "'";
                Query1 = "select docid from Temp_TransCompetitor where Android_Id='" + objResponse.BODYLINE[0].ANDROID_ID + "'";
                string docid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                if (!string.IsNullOrEmpty(docid))
                {
                    Query1 = "delete from Temp_TransCompetitor where Android_Id='" + objResponse.BODYLINE[0].ANDROID_ID + "'";
                    createText += "" + Query1 + "" + Environment.NewLine;
                    DbConnectionDAL.ExecuteQuery(Query1);

                    Query1 = "delete from Temp_TransCompetitorImage where DocId='" + docid + "'";
                    createText += "" + Query1 + "" + Environment.NewLine;

                    DbConnectionDAL.ExecuteQuery(Query1);


                }

                string Address = "";

                string str = "INSERT INTO dbo.Temp_TransCompetitor (VisId,DocId,UserId, VDate,PartyId,Item,Qty,Rate,SMID,Android_Id,ImgUrl,Remarks,CompName,Discount,BrandActivity,MeetActivity,RoadShow,[Scheme/offers],OtherGeneralInfo,OtherActivity,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,stock) OUTPUT INSERTED.ComptId " +
                " VALUES ('" + objResponse.BODYLINE[0].VISID + "', '" + docID + "', '" + objResponse.BODYLINE[0].USERID + "', '" + objResponse.BODYLINE[0].VDATE + "' , '" + objResponse.BODYLINE[0].PARTYID + "','" + objResponse.BODYLINE[0].ITEM + "', " + Qty + ", " + objResponse.BODYLINE[0].RATE + ", " + objResponse.BODYLINE[0].SMID + ", '" + objResponse.BODYLINE[0].ANDROID_ID + "', '" + objResponse.BODYLINE[0].IMGURL + "', '" + objResponse.BODYLINE[0].REMARKS + "', '" + objResponse.BODYLINE[0].COMPNAME + "', " + objResponse.BODYLINE[0].DISCOUNT + ", '" + objResponse.BODYLINE[0].BRANDACTIVITY + "', '" + objResponse.BODYLINE[0].MEETACTIVITY + "', '" + objResponse.BODYLINE[0].ROADSHOW + "', '" + objResponse.BODYLINE[0].SCHEME + "', '" + objResponse.BODYLINE[0].OTHERGENERALINFO + "', '" + objResponse.BODYLINE[0].OTHERACTIVITY + "',DateAdd(minute,330,getutcdate()),'" + objResponse.BODYLINE[0].LATITUDE + "','" + objResponse.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "'," + objResponse.BODYLINE[0].STOCKINV + ")";
                compid = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, str));

                createText += "" + str + "" + Environment.NewLine;

                if (compid > 0)
                {


                    for (int i = 0; i < imgurls.Length; i++)
                    {
                        str = "INSERT INTO dbo.Temp_TransCompetitorImage (DocId, ImgUrl,Visid) VALUES ('" + docID + "', '" + imgurls[i] + "'," + objResponse.BODYLINE[0].VISID + ")";
                        createText += "" + str + "" + Environment.NewLine;

                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, str);

                    }
                }
                //if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                //{ }
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

            createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["Id"].ToString() + ", " + dtvisit.Rows[0]["DocumentId"].ToString() + ", " + dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;

            createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;
            bodyStream.Dispose();
            using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + objResponse.BODYLINE[0].SMID + "_TransCompetitor_" + objResponse.BODYLINE[0].VDATE + ".txt"), true))
            {
                file2.WriteLine(createText);
                file2.Close();
            }

            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        #endregion

        #region TransCollectionInv_V2

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransCollectionInv_V2()
        {
            string createText = "";
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            createText += "" + objResponse.BODYLINE[0].USERID + "," + objResponse.BODYLINE[0].DISTID + "," + objResponse.BODYLINE[0].SMID + "," + objResponse.BODYLINE[0].MODE + "," + objResponse.BODYLINE[0].AMOUNT + "," + objResponse.BODYLINE[0].PAYMENTDATE + "," + objResponse.BODYLINE[0].CHEQUE_DDNO + "," + objResponse.BODYLINE[0].CHEQUE_DD_DATE + "," + objResponse.BODYLINE[0].BANK + "," + objResponse.BODYLINE[0].BRANCH + "," + objResponse.BODYLINE[0].REMARKS + "," + objResponse.BODYLINE[0].VISID + "," + objResponse.BODYLINE[0].VDATE + "," + objResponse.BODYLINE[0].AREAID + "," + objResponse.BODYLINE[0].STATUS + ", " + objResponse.BODYLINE[0].ANDROIDID + "," + objResponse.BODYLINE[0].LONGITUDE + "," + objResponse.BODYLINE[0].LATITUDE + "," + objResponse.BODYLINE[0].LAT_LONG_DT + ", " + objResponse.BODYLINE[0].MOBILE_CREATED_DATE + ", " + objResponse.BODYLINE[0].INVOICES + "" + Environment.NewLine;

            string Query = ""; string Query1 = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            if (string.IsNullOrEmpty(objResponse.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                objResponse.BODYLINE[0].MOBILE_CREATED_DATE = "0";
            }

            if (!string.IsNullOrEmpty(objResponse.BODYLINE[0].LAT_LONG_DT))
            {
                double ticks = double.Parse(objResponse.BODYLINE[0].LAT_LONG_DT);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(objResponse.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                double ticks1 = double.Parse(objResponse.BODYLINE[0].MOBILE_CREATED_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(objResponse.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

            String[] Invcs = new String[] { objResponse.BODYLINE[0].INVOICES };

            string Inv = objResponse.BODYLINE[0].INVOICES.TrimStart('[').TrimEnd(']');
            string actinv = "";

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + objResponse.BODYLINE[0].VISID + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + objResponse.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + objResponse.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + objResponse.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + objResponse.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                    dtfr.Dispose();
                }
            }

            string CollDocId = Settings.GetDocID("PACOL ", DateTime.Now);
            string ChkLock = DbConnectionDAL.GetScalarValue(CommandType.Text, "select Lock from transvisit where visid=" + Convert.ToInt32(objResponse.BODYLINE[0].VISID) + "").ToString();

            if (ChkLock == "True")
            {
                string insertfromtemp = @"INSERT INTO TransCollection([VisId] ,[CollDocId] ,[UserId] ,[VDate] ,[PartyId] ,[SMId] ,[AreaId] ,[ItemId] ,[Mode] ,[Amount] , [PaymentDate] ,[Cheque_DDNo],[Cheque_DD_Date] ,[Bank] ,[Branch]  ,[Remarks],created_date,android_id,Mobile_Created_date,RetInvDocId)
	                                   SELECT [VisId] ,[CollDocId]  ,[UserId]   ,[VDate]  ,[PartyId]   ,[SMId]   ,[AreaId]  ,[ItemId]  ,[Mode]  ,[Amount]
                                      ,[PaymentDate] ,[Cheque_DDNo] ,[Cheque_DD_Date] ,[Bank] ,[Branch] ,[Remarks],created_date,android_id,Mobile_Created_date,RetInvDocId
	                                   from [Temp_TransCollection] where VDate='" + objResponse.BODYLINE[0].VDATE + "' and smid=" + objResponse.BODYLINE[0].SMID + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp);
                string updatevisid = "update TransCollection set visid=" + objResponse.BODYLINE[0].VISID + " where VDate='" + objResponse.BODYLINE[0].VDATE + "' and smid=" + objResponse.BODYLINE[0].SMID + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, updatevisid);
                string deletefromtemp = "delete from  Temp_TransCollection  where VDate='" + objResponse.BODYLINE[0].VDATE + "' and smid=" + objResponse.BODYLINE[0].SMID + "";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp);
                Query1 = "select CollDocId from TransCollection where Android_Id='" + objResponse.BODYLINE[0].ANDROIDID + "'";
                string colldocid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                if (!string.IsNullOrEmpty(colldocid))
                {
                    Query1 = "delete from TransCollection where Android_Id='" + objResponse.BODYLINE[0].ANDROIDID + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);

                    string insertfromtemp1 = @"INSERT INTO [TransInvCol]([CollDocId],[RetInvDocId],[TotalAmo],[PaidAmo],[smid],[vdate],[Android_Id],[VisId])
	                                   SELECT [CollDocId],[RetInvDocId],[TotalAmo],[PaidAmo],[smid],[vdate],[Android_Id],[VisId] from [Temp_TransInvCol] where VDate='" + objResponse.BODYLINE[0].VDATE + "' and smid=" + objResponse.BODYLINE[0].SMID + "";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, insertfromtemp1);

                    string deletefromtemp1 = "delete from  Temp_TransInvCol  where Android_Id='" + objResponse.BODYLINE[0].ANDROIDID + "'";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, deletefromtemp1);
                }
                //  WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";

                string str = "INSERT INTO TransCollection([VisId] ,[CollDocId] ,[UserId] ,[VDate] ,[PartyId] ,[SMId] ,[AreaId] ,[Mode] ,[Amount] ,[PaymentDate] ,[Cheque_DDNo] ,[Cheque_DD_Date] ,[Bank] ,[Branch]  ,[Remarks],Android_Id,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,RetInvDocId) " +
                " values (" + objResponse.BODYLINE[0].VISID + ",'" + CollDocId + "'," + objResponse.BODYLINE[0].USERID + ",'" + objResponse.BODYLINE[0].VDATE + "'," + objResponse.BODYLINE[0].DISTID + "," + objResponse.BODYLINE[0].SMID + "," + objResponse.BODYLINE[0].AREAID + ",'" + objResponse.BODYLINE[0].MODE + "'," + objResponse.BODYLINE[0].AMOUNT + ",'" + objResponse.BODYLINE[0].PAYMENTDATE + "','" + objResponse.BODYLINE[0].CHEQUE_DDNO + "','" + objResponse.BODYLINE[0].CHEQUE_DD_DATE + "','" + objResponse.BODYLINE[0].BANK + "','" + objResponse.BODYLINE[0].BRANCH + "','" + objResponse.BODYLINE[0].REMARKS + "','" + objResponse.BODYLINE[0].ANDROIDID + "',DateAdd(minute,330,getutcdate()),'" + objResponse.BODYLINE[0].LATITUDE + "','" + objResponse.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + Inv + "')";
                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }
                decimal amo = Convert.ToDecimal(objResponse.BODYLINE[0].AMOUNT);
                if (Inv != "")
                {
                    string[] authorsList = Inv.Split(',');
                    for (int i = 0; i < authorsList.Length; i++)
                    {
                        string str1 = @"select * from TransRetailerInv where RetInvDocId = ('" + authorsList[i].ToString() + "')";
                        DataTable deptValueDt = DbConnectionDAL.GetDataTable(CommandType.Text, str1);
                        if (deptValueDt.Rows.Count > 0)
                        {
                            if (amo > 0)
                            {
                                //dataView.RowFilter = "RetInvDocId = '" + authorsList[i].ToString() + "'";

                                string bill = deptValueDt.Rows[0]["BILLAMOUNT"].ToString();

                                string str2 = @"select PaidAmo as Paid from Temp_TransInvCol where RetInvDocId = '" + authorsList[i].ToString() + "' union all select PaidAmo from TransInvCol where RetInvDocId = '" + authorsList[i].ToString() + "'";
                                DataTable Dt = DbConnectionDAL.GetDataTable(CommandType.Text, str2);

                                if (Dt.Rows.Count > 0)
                                {
                                    string str3 = @"select Sum(PaidAmo) as Paid from Temp_TransInvCol where RetInvDocId ='" + authorsList[i].ToString() + "' group by RetInvDocId union all select Sum(PaidAmo ) from TransInvCol where RetInvDocId ='" + authorsList[i].ToString() + "' group by RetInvDocId";
                                    DataTable Dt1 = DbConnectionDAL.GetDataTable(CommandType.Text, str3);

                                    if (Convert.ToDecimal(Dt1.Rows[0]["Paid"]) <= amo)
                                    {
                                        string insertquery = @"INSERT INTO [TransInvCol] ([CollDocId],[RetInvDocId],[TotalAmo],[PaidAmo],[vdate],[smid],[Android_Id],[VisId]) values('" + CollDocId + "','" + authorsList[i].ToString() + "','" + bill + "','" + Dt1.Rows[0]["Paid"] + "','" + objResponse.BODYLINE[0].VDATE + "','" + objResponse.BODYLINE[0].SMID + "','" + objResponse.BODYLINE[0].ANDROIDID + "'," + objResponse.BODYLINE[0].VISID + ")";
                                        DbConnectionDAL.ExecuteQuery(insertquery);
                                        amo = amo - Convert.ToDecimal(Dt1.Rows[0]["Paid"]);

                                        actinv += authorsList[i].ToString() + ",";


                                    }
                                    else
                                    {
                                        string insertquery = @"INSERT INTO [TransInvCol] ([CollDocId],[RetInvDocId],[TotalAmo],[PaidAmo],[vdate],[smid],[Android_Id],[VisId]) values('" + CollDocId + "','" + authorsList[i].ToString() + "','" + bill + "','" + amo + "','" + objResponse.BODYLINE[0].VDATE + "','" + objResponse.BODYLINE[0].SMID + "','" + objResponse.BODYLINE[0].ANDROIDID + "'," + objResponse.BODYLINE[0].VISID + ")";
                                        DbConnectionDAL.ExecuteQuery(insertquery);
                                        amo = amo - amo;
                                        actinv += authorsList[i].ToString() + ",";
                                    }
                                }
                                else
                                {
                                    if (Convert.ToDecimal(bill) <= amo)
                                    {
                                        string insertquery = @"INSERT INTO [TransInvCol] ([CollDocId],[RetInvDocId],[TotalAmo],[PaidAmo],[vdate],[smid],[Android_Id],[VisId]) values('" + CollDocId + "','" + authorsList[i].ToString() + "','" + bill + "','" + bill + "','" + objResponse.BODYLINE[0].VDATE + "','" + objResponse.BODYLINE[0].SMID + "','" + objResponse.BODYLINE[0].ANDROIDID + "'," + objResponse.BODYLINE[0].VISID + ")";
                                        DbConnectionDAL.ExecuteQuery(insertquery);
                                        amo = amo - Convert.ToDecimal(bill);
                                        actinv += authorsList[i].ToString() + ",";
                                    }
                                    else
                                    {
                                        string insertquery = @"INSERT INTO [TransInvCol] ([CollDocId],[RetInvDocId],[TotalAmo],[PaidAmo],[vdate],[smid],[Android_Id],[VisId]) values('" + CollDocId + "','" + authorsList[i].ToString() + "','" + bill + "','" + amo + "','" + objResponse.BODYLINE[0].VDATE + "','" + objResponse.BODYLINE[0].SMID + "','" + objResponse.BODYLINE[0].ANDROIDID + "'," + objResponse.BODYLINE[0].VISID + ")";
                                        DbConnectionDAL.ExecuteQuery(insertquery);
                                        amo = amo - amo;
                                        actinv += authorsList[i].ToString() + ",";
                                    }
                                }
                            }
                        }
                    }
                }

                actinv = actinv.TrimEnd(',').TrimStart(',');
                if (actinv != "")
                {
                    string insertquery1 = @"Update [TransCollection] set [RetInvDocId]='" + actinv + "' where CollDocId='" + CollDocId + "'";
                    DbConnectionDAL.ExecuteQuery(insertquery1);
                }
                createText += "" + str + "" + Environment.NewLine;

                Query = "select CollId As Id,CollDocId As DocumentId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS MS from TransCollection where CollDocId='" + CollDocId + "'";
            }
            else if (ChkLock == "False")
            {
                Query1 = "select CollDocId from Temp_transCollection where Android_Id='" + objResponse.BODYLINE[0].ANDROIDID + "'";
                createText += " @@@@@@   Query To Check Duplicasy On behalf Of Android_id @@@@@" + Query1 + "" + Environment.NewLine;
                string colldocid = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, Query1));
                if (!string.IsNullOrEmpty(colldocid))
                {
                    createText += " @@@@@@   Duplicate Exist @@@@@" + colldocid + "" + Environment.NewLine;
                    Query1 = "delete from Temp_transCollection where Android_Id='" + objResponse.BODYLINE[0].ANDROIDID + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                    createText += " @@@@@@   Query To Delete Duplicate Data @@@@@" + Query1 + "" + Environment.NewLine;
                }
                else
                {
                    createText += " @@@@@@  No  Duplicate Exist @@@@@" + "" + Environment.NewLine;
                }

                string Address = "";

                string str = "INSERT INTO Temp_transCollection ([VisId] ,[CollDocId] ,[UserId] ,[VDate] ,[PartyId] ,[SMId] ,[AreaId] ,[Mode] ,[Amount] ,[PaymentDate] ,[Cheque_DDNo] ,[Cheque_DD_Date] ,[Bank] ,[Branch]  ,[Remarks],Android_Id,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,RetInvDocId) " +
                " values (" + objResponse.BODYLINE[0].VISID + ",'" + CollDocId + "'," + objResponse.BODYLINE[0].USERID + ",'" + objResponse.BODYLINE[0].VDATE + "'," + objResponse.BODYLINE[0].DISTID + "," + objResponse.BODYLINE[0].SMID + "," + objResponse.BODYLINE[0].AREAID + ",'" + objResponse.BODYLINE[0].MODE + "'," + objResponse.BODYLINE[0].AMOUNT + ",'" + objResponse.BODYLINE[0].PAYMENTDATE + "','" + objResponse.BODYLINE[0].CHEQUE_DDNO + "','" + objResponse.BODYLINE[0].CHEQUE_DD_DATE + "','" + objResponse.BODYLINE[0].BANK + "','" + objResponse.BODYLINE[0].BRANCH + "','" + objResponse.BODYLINE[0].REMARKS + "','" + objResponse.BODYLINE[0].ANDROIDID + "',DateAdd(minute,330,getutcdate()),'" + objResponse.BODYLINE[0].LATITUDE + "','" + objResponse.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + Inv + "')";
                if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
                { }

                decimal amo = Convert.ToDecimal(objResponse.BODYLINE[0].AMOUNT);
                if (Inv != "")
                {
                    string[] authorsList = Inv.Split(',');
                    for (int i = 0; i < authorsList.Length; i++)
                    {
                        string str1 = @"select * from TransRetailerInv where RetInvDocId = ('" + authorsList[i].ToString() + "')";
                        DataTable deptValueDt = DbConnectionDAL.GetDataTable(CommandType.Text, str1);

                        if (amo > 0)
                        {
                            //dataView.RowFilter = "RetInvDocId = '" + authorsList[i].ToString() + "'";

                            string bill = deptValueDt.Rows[0]["BILLAMOUNT"].ToString();

                            string str2 = @"select PaidAmo as Paid from Temp_TransInvCol where RetInvDocId = '" + authorsList[i].ToString() + "' union all select PaidAmo from TransInvCol where RetInvDocId = '" + authorsList[i].ToString() + "'";
                            DataTable Dt = DbConnectionDAL.GetDataTable(CommandType.Text, str2);

                            if (Dt.Rows.Count > 0)
                            {
                                string str3 = @"select Sum(PaidAmo) as Paid from Temp_TransInvCol where RetInvDocId ='" + authorsList[i].ToString() + "' group by RetInvDocId union all select Sum(PaidAmo ) from TransInvCol where RetInvDocId ='" + authorsList[i].ToString() + "' group by RetInvDocId";
                                DataTable Dt1 = DbConnectionDAL.GetDataTable(CommandType.Text, str3);

                                if (Convert.ToDecimal(Dt1.Rows[0]["Paid"]) <= amo)
                                {
                                    string insertquery = @"INSERT INTO [Temp_transInvCol] ([CollDocId],[RetInvDocId],[TotalAmo],[PaidAmo],[vdate],[smid],[Android_Id],[VisId]) values('" + CollDocId + "','" + authorsList[i].ToString() + "','" + bill + "','" + Dt1.Rows[0]["Paid"] + "','" + objResponse.BODYLINE[0].VDATE + "','" + objResponse.BODYLINE[0].SMID + "','" + objResponse.BODYLINE[0].ANDROIDID + "'," + objResponse.BODYLINE[0].VISID + ")";
                                    DbConnectionDAL.ExecuteQuery(insertquery);
                                    amo = amo - Convert.ToDecimal(Dt1.Rows[0]["Paid"]);
                                    actinv += authorsList[i].ToString() + ",";
                                }
                                else
                                {
                                    string insertquery = @"INSERT INTO [Temp_transInvCol] ([CollDocId],[RetInvDocId],[TotalAmo],[PaidAmo],[vdate],[smid],[Android_Id],[VisId]) values('" + CollDocId + "','" + authorsList[i].ToString() + "','" + bill + "','" + amo + "','" + objResponse.BODYLINE[0].VDATE + "','" + objResponse.BODYLINE[0].SMID + "','" + objResponse.BODYLINE[0].ANDROIDID + "'," + objResponse.BODYLINE[0].VISID + ")";
                                    DbConnectionDAL.ExecuteQuery(insertquery);
                                    amo = amo - amo;
                                    actinv += authorsList[i].ToString() + ",";
                                }
                            }
                            else
                            {
                                if (Convert.ToDecimal(bill) <= amo)
                                {
                                    string insertquery = @"INSERT INTO [Temp_transInvCol] ([CollDocId],[RetInvDocId],[TotalAmo],[PaidAmo],[vdate],[smid],[Android_Id],[VisId]) values('" + CollDocId + "','" + authorsList[i].ToString() + "','" + bill + "','" + bill + "','" + objResponse.BODYLINE[0].VDATE + "','" + objResponse.BODYLINE[0].SMID + "','" + objResponse.BODYLINE[0].ANDROIDID + "'," + objResponse.BODYLINE[0].VISID + ")";
                                    DbConnectionDAL.ExecuteQuery(insertquery);
                                    amo = amo - Convert.ToDecimal(bill);
                                    actinv += authorsList[i].ToString() + ",";
                                }
                                else
                                {
                                    string insertquery = @"INSERT INTO [Temp_transInvCol] ([CollDocId],[RetInvDocId],[TotalAmo],[PaidAmo],[vdate],[smid],[Android_Id],[VisId]) values('" + CollDocId + "','" + authorsList[i].ToString() + "','" + bill + "','" + amo + "','" + objResponse.BODYLINE[0].VDATE + "','" + objResponse.BODYLINE[0].SMID + "','" + objResponse.BODYLINE[0].ANDROIDID + "'," + objResponse.BODYLINE[0].VISID + ")";
                                    DbConnectionDAL.ExecuteQuery(insertquery);
                                    amo = amo - amo;
                                    actinv += authorsList[i].ToString() + ",";
                                }
                            }
                        }
                    }
                }
                actinv = actinv.TrimEnd(',').TrimStart(',');
                if (actinv != "")
                {
                    string insertquery1 = @"Update [Temp_transCollection] set [RetInvDocId]='" + actinv + "' where CollDocId='" + CollDocId + "'";
                    DbConnectionDAL.ExecuteQuery(insertquery1);
                }
                createText += " @@@@@@  Insert to table   @@@@@" + str + "" + Environment.NewLine;

                Query = "select CollId As Id,CollDocId As DocumentId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_date AS date), Created_date) AS MS from Temp_transCollection where CollDocId='" + CollDocId + "'";

                createText += "  @@@@@@  Query for Providing Response To Android  @@@@@  " + Query + "" + Environment.NewLine;
            }
            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

            createText += " @@@@@@   Providing Response To Android  @@@@@" + dtvisit.Rows[0]["Id"].ToString() + ", " + dtvisit.Rows[0]["DocumentId"].ToString() + ", " + dtvisit.Rows[0]["MS"].ToString() + "" + Environment.NewLine;

            createText += " @@@@@@ End DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            bodyStream.Dispose();
            using (System.IO.StreamWriter file2 = new System.IO.StreamWriter(Server.MapPath("TextFileFolder/" + objResponse.BODYLINE[0].SMID + "_RetailerCollection_" + objResponse.BODYLINE[0].VDATE + ".txt"), true))
            {
                file2.WriteLine(createText);
                file2.Close();
            }
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetPartyCollectionInvUpd_V2()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //   DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.BODY[0].CONPER_ID;

            string Outlet_Id = objResponse.BODY[0].OUTLET_ID;

            string Date = objResponse.BODY[0].DATE;

            string webDoc_id = objResponse.BODY[0].WEBDOC_ID;

            //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            //string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            //string MQry = "";
            DataTable dt = new DataTable();
            // List<PartyCollection> rst = new List<PartyCollection>();
            //if (Convert.ToInt64(minDate) > 0)
            //{
            //    // MQry = " and CreatedDate >='" + minDate + "'";
            //    MQry = " where a.CreatedDate > '" + minDate + "'";
            //}
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

            Query = "select RetInvDocId from transretailerinv where partyid='" + Outlet_Id + "'";
            DataTable dtretinv = new DataTable();
            dtretinv = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                if (dtretinv.Rows.Count > 0)
                {
                    vdate = DateTime.Now.ToString("yyyy-MM-dd");
                    Query = "SELECT MAX(RETINVID) AS INVID,RETINVDOCID AS INVNO,MAX(REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/')) AS INVDATE,MAX(TOTAL) AS TOTALAMOUNT,SUM(PAID) AS PAIDAMOUNT,MAX(REPLACE(CONVERT(NVARCHAR, PAYMENTDATE, 106), ' ', '/')) AS PAYMENTDATE,CAST(MAX(TOTAL) AS FLOAT)-CAST(SUM(PAID) AS FLOAT) AS OSAMOUNT,MAX(PARTYID) AS PARTYID,MAX(SMID) AS SMID,'' AS USERID,'' AREAID,'' MODE,MAX(COLDOCID) AS COLDOCID,MAX(INVCOLID) AS INVCOLID FROM (SELECT TRANSRETAILERINV.RETINVID,TRANSRETAILERINV.RETINVDOCID,TRANSRETAILERINV.BILLAMOUNT AS TOTAL ,ISNULL((SELECT SUM(PAIDAMO) FROM TRANSINVCOL WHERE RETINVDOCID=TRANSRETAILERINV.RETINVDOCID GROUP BY RETINVDOCID),0) AS PAID,(BILLAMOUNT-ISNULL((SELECT SUM(PAIDAMO) FROM TRANSINVCOL WHERE RETINVDOCID=TRANSRETAILERINV.RETINVDOCID GROUP BY RETINVDOCID),0)) RESTBILLAMOUNT,TRANSRETAILERINV.VDATE AS VDATE,TTC.SMID AS SMID,TRANSRETAILERINV.PARTYID AS PARTYID,CASE WHEN TTC.PAYMENTDATE = '" + Date + "' THEN TTC.PAYMENTDATE ELSE NULL  END AS PAYMENTDATE,CASE WHEN TTC.COLLDOCID= '" + webDoc_id + "' THEN TTC.COLLDOCID ELSE NULL END AS COLDOCID,CASE WHEN TTI.COLLDOCID= '" + webDoc_id + "' THEN TTI.INVCOLID ELSE NULL END AS INVCOLID FROM TRANSRETAILERINV LEFT JOIN TRANSINVCOL TTI ON TTI.RETINVDOCID = TRANSRETAILERINV.RETINVDOCID LEFT JOIN TRANSCOLLECTION TTC ON TTC.COLLDOCID = TTI.COLLDOCID  WHERE TRANSRETAILERINV.PARTYID IN ('" + Outlet_Id + "') AND TRANSRETAILERINV.VDATE<'" + Date + "' GROUP BY TRANSRETAILERINV.RETINVID,TRANSRETAILERINV.RETINVDOCID,TRANSRETAILERINV.BILLAMOUNT,TRANSRETAILERINV.VDATE,TTC.SMID,TRANSRETAILERINV.PARTYID,TTC.PAYMENTDATE,TTC.SMID,TTC.COLLDOCID,TTI.INVCOLID,TTI.COLLDOCID " +
                        " UNION SELECT TRANSRETAILERINV.RETINVID,TRANSRETAILERINV.RETINVDOCID,TRANSRETAILERINV.BILLAMOUNT AS TOTAL ,ISNULL((SELECT SUM(PAIDAMO) FROM TEMP_TRANSINVCOL WHERE RETINVDOCID=TRANSRETAILERINV.RETINVDOCID GROUP BY RETINVDOCID),0) AS PAID,(BILLAMOUNT-ISNULL((SELECT SUM(PAIDAMO) FROM TEMP_TRANSINVCOL WHERE RETINVDOCID=TRANSRETAILERINV.RETINVDOCID GROUP BY RETINVDOCID),0)) RESTBILLAMOUNT,TRANSRETAILERINV.VDATE AS VDATE,TTC.SMID AS SMID,TRANSRETAILERINV.PARTYID AS PARTYID,CASE WHEN TTC.PAYMENTDATE = '" + Date + "' THEN TTC.PAYMENTDATE ELSE NULL  END AS PAYMENTDATE,CASE WHEN TTC.COLLDOCID= '" + webDoc_id + "' THEN TTC.COLLDOCID ELSE NULL END AS COLDOCID ,CASE WHEN TTI.COLLDOCID= '" + webDoc_id + "' THEN TTI.INVCOLID ELSE NULL END AS INVCOLID FROM TRANSRETAILERINV LEFT JOIN TEMP_TRANSINVCOL TTI ON TTI.RETINVDOCID = TRANSRETAILERINV.RETINVDOCID LEFT JOIN TEMP_TRANSCOLLECTION TTC ON TTC.COLLDOCID = TTI.COLLDOCID  WHERE TRANSRETAILERINV.PARTYID IN ('" + Outlet_Id + "') AND TRANSRETAILERINV.VDATE<'" + Date + "' GROUP BY TRANSRETAILERINV.RETINVID,TRANSRETAILERINV.RETINVDOCID,TRANSRETAILERINV.BILLAMOUNT,TRANSRETAILERINV.VDATE,TTC.SMID,TRANSRETAILERINV.PARTYID,TTC.PAYMENTDATE,TTC.COLLDOCID,TTI.INVCOLID,TTI.COLLDOCID) A GROUP BY RETINVDOCID";


                    dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                }
            }
            dttopvisid.Dispose();
            dtretinv.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetPartyCollectionInv_V2()
        {
            //  var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //   DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disUserList>(bodyText);
            string ConPer_Id = objResponse.BODY[0].CONPER_ID;

            string Outlet_Id = objResponse.BODY[0].OUTLET_ID;

            string minDate = objResponse.BODY[0].MINDATE;

            //string minDate1 = Convert.ToDateTime("01/01/1980").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string minDate1 = Convert.ToDateTime("01/01/1970 00:00:00").AddMilliseconds(Convert.ToDouble(minDate)).ToString("dd/MMM/yyyy");
            string MQry = "";
            DataTable dt = new DataTable();
            // List<PartyCollection> rst = new List<PartyCollection>();
            if (Convert.ToInt64(minDate) > 0)
            {
                // MQry = " and CreatedDate >='" + minDate + "'";
                MQry = " where a.CreatedDate > '" + minDate + "'";
            }
            Query = "select dataamt from mastenviro";
            int NoOfRec = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, Query).ToString());
            Query = "select top 1 visid,vdate from TransVisit where lock=0 and smid=" + ConPer_Id + " order by vdate desc";
            DataTable dttopvisid = new DataTable();
            dttopvisid = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

            Query = "select RetInvDocId from transretailerinv where partyid='" + Outlet_Id + "'";
            DataTable dtretinv = new DataTable();
            dtretinv = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

            string vdate = "";
            if (dttopvisid.Rows.Count > 0)
            {
                if (dtretinv.Rows.Count > 0)
                {
                    vdate = DateTime.Now.ToString("yyyy-MM-dd");
                    Query = "SELECT MAX(RETINVID) AS INVID,RETINVDOCID AS INVNO,MAX(REPLACE(CONVERT(NVARCHAR, VDATE, 106), ' ', '/')) AS INVDATE,MAX(TOTAL) AS TOTALAMOUNT,SUM(PAID) AS PAIDAMOUNT,ISNULL(MAX(REPLACE(CONVERT(NVARCHAR, PAYMENTDATE, 106), ' ', '/')),'') AS PAYMENTDATE,CAST(MAX(TOTAL) AS FLOAT)-CAST(SUM(PAID) AS FLOAT) AS OSAMOUNT,MAX(PARTYID) AS PARTYID,ISNULL(MAX(SMID),'') AS SMID,'' AS USERID,'' AREAID,'' MODE FROM (SELECT TRANSRETAILERINV.RETINVID,TRANSRETAILERINV.RETINVDOCID,TRANSRETAILERINV.BILLAMOUNT AS TOTAL ,ISNULL((SELECT SUM(PAIDAMO) FROM TRANSINVCOL WHERE RETINVDOCID=TRANSRETAILERINV.RETINVDOCID GROUP BY RETINVDOCID),0) AS PAID,(BILLAMOUNT-ISNULL((SELECT SUM(PAIDAMO) FROM TRANSINVCOL WHERE RETINVDOCID=TRANSRETAILERINV.RETINVDOCID GROUP BY RETINVDOCID),0)) RESTBILLAMOUNT,TRANSRETAILERINV.VDATE AS VDATE,TTC.SMID AS SMID,TRANSRETAILERINV.PARTYID AS PARTYID,TTC.PAYMENTDATE AS PAYMENTDATE FROM TRANSRETAILERINV LEFT JOIN TRANSINVCOL TTI ON TTI.RETINVDOCID = TRANSRETAILERINV.RETINVDOCID LEFT JOIN TRANSCOLLECTION TTC ON TTC.COLLDOCID = TTI.COLLDOCID  WHERE TRANSRETAILERINV.PARTYID IN (" + Outlet_Id + ") AND TRANSRETAILERINV.VDATE<'" + vdate + "' GROUP BY TRANSRETAILERINV.RETINVID,TRANSRETAILERINV.RETINVDOCID,TRANSRETAILERINV.BILLAMOUNT,TRANSRETAILERINV.VDATE,TTC.SMID,TRANSRETAILERINV.PARTYID,TTC.PAYMENTDATE,TTC.SMID" +

                       " UNION ALL SELECT TRANSRETAILERINV.RETINVID,TRANSRETAILERINV.RETINVDOCID,TRANSRETAILERINV.BILLAMOUNT AS TOTAL ,ISNULL((SELECT SUM(PAIDAMO) FROM TEMP_TRANSINVCOL WHERE RETINVDOCID=TRANSRETAILERINV.RETINVDOCID GROUP BY RETINVDOCID),0) AS PAID,(BILLAMOUNT-ISNULL((SELECT SUM(PAIDAMO) FROM TEMP_TRANSINVCOL WHERE RETINVDOCID=TRANSRETAILERINV.RETINVDOCID GROUP BY RETINVDOCID),0)) RESTBILLAMOUNT,TRANSRETAILERINV.VDATE AS VDATE,TTC.SMID AS SMID,TRANSRETAILERINV.PARTYID AS PARTYID,TTC.PAYMENTDATE AS PAYMENTDATE FROM TRANSRETAILERINV LEFT JOIN TEMP_TRANSINVCOL TTI ON TTI.RETINVDOCID = TRANSRETAILERINV.RETINVDOCID LEFT JOIN TEMP_TRANSCOLLECTION TTC ON TTC.COLLDOCID = TTI.COLLDOCID  WHERE TRANSRETAILERINV.PARTYID IN (" + Outlet_Id + ") AND TRANSRETAILERINV.VDATE<'" + vdate + "' GROUP BY TRANSRETAILERINV.RETINVID,TRANSRETAILERINV.RETINVDOCID,TRANSRETAILERINV.BILLAMOUNT,TRANSRETAILERINV.VDATE,TTC.SMID,TRANSRETAILERINV.PARTYID,TTC.PAYMENTDATE) A GROUP BY RETINVDOCID HAVING ROUND(CAST(MAX(TOTAL) AS FLOAT)-CAST(SUM(PAID) AS FLOAT),2) >0";


                    dt = DbConnectionDAL.GetDataTable(CommandType.Text, Query);
                }
            }
            dttopvisid.Dispose();
            dtretinv.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        #endregion

        #region JSInsertTransCall_V2

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSInsertTransCall_V2()
        {
            string createText = "";
            string Query = ""; string Query1 = ""; string filename = "";
            string minDate1 = "", mobiletime = "", mobiletimehm = "";

            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);

            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);

            createText = " @@@@@@ Start DateTime @@@@@" + "" + System.DateTime.Now + " @@@@@@  " + Environment.NewLine;

            createText += "" + objResponse.BODYLINE[0].USERID.ToString() + "," + objResponse.BODYLINE[0].PARTYID.ToString() + "," + objResponse.BODYLINE[0].SMID.ToString() + "," + objResponse.BODYLINE[0].VISID.ToString() + "," + objResponse.BODYLINE[0].VDATE + "," + objResponse.BODYLINE[0].AREAID.ToString() + ", " + objResponse.BODYLINE[0].ANDROIDID + "," + objResponse.BODYLINE[0].LONGITUDE + "," + objResponse.BODYLINE[0].LATITUDE + "," + objResponse.BODYLINE[0].LAT_LONG_DT + ", " + objResponse.BODYLINE[0].MOBILE_CREATED_DATE + "," + objResponse.BODYLINE[0].ADDRESS1 + "," + objResponse.BODYLINE[0].STARTCALL + "" + Environment.NewLine;

            if (string.IsNullOrEmpty(objResponse.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                objResponse.BODYLINE[0].MOBILE_CREATED_DATE = "0";
            }

            if (!string.IsNullOrEmpty(objResponse.BODYLINE[0].LAT_LONG_DT))
            {
                double ticks = double.Parse(objResponse.BODYLINE[0].LAT_LONG_DT);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }

            if (!string.IsNullOrEmpty(objResponse.BODYLINE[0].MOBILE_CREATED_DATE))
            {
                double ticks1 = double.Parse(objResponse.BODYLINE[0].MOBILE_CREATED_DATE);
                TimeSpan time1 = TimeSpan.FromMilliseconds(ticks1);
                DateTime startdate1 = new DateTime(1970, 1, 1) + time1;
                mobiletime = startdate1.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
                mobiletimehm = startdate1.AddMinutes(330).ToString("HH:mm");
            }

            string docID = Settings.GetDocID("VICAL", DateTime.Now);
            Settings.SetDocID("VICAL", docID);

            var frtime = "0";
            var totime = "0";
            string todaydate = Convert.ToDateTime(mobiletime).ToString("yyyy-MM-dd");
            string dtSuppliedDate = Convert.ToDateTime(objResponse.BODYLINE[0].VDATE).ToString("yyyy-MM-dd");

            if (Convert.ToDateTime(todaydate) == Convert.ToDateTime(dtSuppliedDate))
            {
                if (mobiletimehm != "00:00")
                {
                    string strchk = "select IsNULL(frTime1,'00:00') as frTime1,IsNULL(toTime1,'00:00') as toTime1 from TransVisit  where Visid=" + objResponse.BODYLINE[0].VISID + "";
                    DataTable dtfr = DbConnectionDAL.getFromDataTable(strchk);
                    if (dtfr.Rows.Count > 0)
                    {
                        TimeSpan tsmobiletimehm = TimeSpan.Parse(mobiletimehm);
                        TimeSpan tsfromtime = TimeSpan.Parse(dtfr.Rows[0]["frTime1"].ToString());
                        TimeSpan tstotimes = TimeSpan.Parse(dtfr.Rows[0]["toTime1"].ToString());

                        if (dtfr.Rows[0]["frTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set frTime1='" + mobiletimehm + "' where Visid=" + objResponse.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tsfromtime) < 0)
                            {
                                frtime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strfr = "update TransVisit set frTime1='" + frtime + "' where Visid=" + objResponse.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                            }
                        }
                        if (dtfr.Rows[0]["toTime1"].ToString() == "00:00")
                        {
                            string strfr = "update TransVisit set toTime1='" + mobiletimehm + "' where Visid=" + objResponse.BODYLINE[0].VISID + "";
                            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strfr);
                        }
                        else
                        {
                            if (tsmobiletimehm.CompareTo(tstotimes) > 0)
                            {
                                totime = tsmobiletimehm.ToString(@"hh\:mm");
                                string strto = "update TransVisit set toTime1='" + totime + "' where Visid=" + objResponse.BODYLINE[0].VISID + "";
                                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, strto);
                            }
                        }
                    }
                    dtfr.Dispose();
                }
            }

            string str = "";
            int exists = 0;
            string documentid = "0";
            Query = "select CallId,VisId,CallDocId from TransCall  where VisId='" + objResponse.BODYLINE[0].VISID + "' and SMId=" + objResponse.BODYLINE[0].SMID + " and PartyId=" + objResponse.BODYLINE[0].PARTYID + " ";
            createText += " @@@@@@  Select to table   @@@@@" + Query + "" + Environment.NewLine;
            DataTable dtdsr = DbConnectionDAL.getFromDataTable(Query);
            if (dtdsr.Rows.Count > 0)
            {
                exists = Convert.ToInt32(dtdsr.Rows[0]["visid"].ToString());

                if (exists > 0)
                {
                    string appstat = ""; string getcityidsfromweb = ""; string getcitynamessfromweb = "";

                    documentid = dtdsr.Rows[0]["CallDocId"].ToString();

                    //Lock = 0;
                    str = @"update TransCall set   EndCallTime=DateAdd(minute,330,getutcdate()) ,Mobile_Created_date=DateAdd(minute,330,getutcdate()),Created_date=DateAdd(minute,330,getutcdate()) where VisId='" + objResponse.BODYLINE[0].VISID + "' and SMId=" + objResponse.BODYLINE[0].SMID + " and PartyId=" + objResponse.BODYLINE[0].PARTYID + " ";
                    createText += " @@@@@@  Update to table   @@@@@" + Query + "" + Environment.NewLine;
                    exists = Convert.ToInt32(DbConnectionDAL.ExecuteQuery(Query));

                    Query = "select CallId As Id,CallDocId As CallDocId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date) AS MS from TransCall where CallDocId='" + documentid + "'";
                }
            }
            else
            {

                Query = "select CallId As Id,CallDocId As CallDocId,(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date) AS MS from TransCall where CallDocId='" + docID + "'";

                //Query1 = "select * from Transdemo where Android_Id='" + objResponse.BODYLINE[0].Android_Id + "'";

                Query1 = "select CallId from TransCall where Android_Id='" + objResponse.BODYLINE[0].ANDROID_ID + "'";
                DataTable dt = DbConnectionDAL.getFromDataTable(Query1);
                if (dt.Rows.Count > 0)
                {
                    Query1 = "delete from TransCall where Android_Id='" + objResponse.BODYLINE[0].ANDROID_ID + "'";
                    DbConnectionDAL.ExecuteQuery(Query1);
                }
                //  WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
                string Address = "";

                str = "INSERT INTO dbo.TransCall (VisId, UserId,VDate,SMId, PartyId,AreaId,StartCallTime,Android_Id,Created_date,Latitude,Longitude,Address,Lat_long_datetime,Mobile_Created_date,CallDocId) " +
                " VALUES ('" + objResponse.BODYLINE[0].VISID + "', '" + objResponse.BODYLINE[0].USERID + "', '" + objResponse.BODYLINE[0].VDATE + "', '" + objResponse.BODYLINE[0].SMID + "' , '" + objResponse.BODYLINE[0].PARTYID + "', '" + objResponse.BODYLINE[0].AREAID + "', '" + objResponse.BODYLINE[0].STARTCALL + "', '" + objResponse.BODYLINE[0].ANDROID_ID + "',DateAdd(minute,330,getutcdate()),'" + objResponse.BODYLINE[0].LATITUDE + "','" + objResponse.BODYLINE[0].LONGITUDE + "','" + Address + "','" + minDate1 + "','" + mobiletime + "','" + docID + "')";
            }

            if (DbConnectionDAL.GetScalarValue(CommandType.Text, str) != "0")
            { }

            DataTable dtvisit = new DataTable();
            dtvisit = DbConnectionDAL.GetDataTable(CommandType.Text, Query);

            dtdsr.Dispose();
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(dtvisit));
            dtvisit.Dispose();
        }

        #endregion

        #region FFMSApp_BlockParty_V2

        public class UserDetailList_V2
        {
            public string SMID { get; set; }
            public string DATE { get; set; }

        }

        public class BlockPartyUp_V2
        {
            public bool ISBLOCK { get; set; }
            public string APPBLOCKSTATUS { get; set; }
            public int SMID { get; set; }
            public int USERID { get; set; }
            public string BLOCKREASON { get; set; }
            public int PARTYID { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_BlockParty_V2()
        {

            var httprequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            var objResponse = JsonConvert.DeserializeObject<BlockPartyUp_V2>(bodyText);

            bool Isblock = objResponse.ISBLOCK;
            string AppBlockStatus = objResponse.APPBLOCKSTATUS;
            int smid = objResponse.SMID;
            int userid = objResponse.USERID;
            string BlockReason = objResponse.BLOCKREASON;
            int PartyId = objResponse.PARTYID;
            Result rs = new Result();

            Common cls = new Common();
            #region SentNotificationforblock
            try
            {

                if (PartyId != 0 && AppBlockStatus.ToUpper() == "PENDING")
                {
                    string sql = "UPDATE MASTPARTY SET ISBLOCK='" + Isblock + "',BLOCKREASON='" + BlockReason + "',APPBLOCKSTATUS='" + AppBlockStatus + "' WHERE PARTYID=" + PartyId + " ";
                    if (DbConnectionDAL.ExecuteQuery(sql) == 1)
                    {

                    }
                    string displaytitle = ""; string title = "";
                    string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT COMPCODE FROM MASTENVIRO"));
                    string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT CREATED_DATE FROM MASTPARTY WHERE PARTYID=" + PartyId + ""));
                    DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT SMID ,SMNAME ,USERID,UNDERID FROM MASTSALESREP WHERE USERID=" + userid + "");
                    string PartyName = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT PARTYNAME FROM MASTPARTY WHERE PARTYID=" + PartyId + ""));

                    if (dtgrpsmid.Rows.Count > 0)
                    {
                        string pro_id = "PARTYBAPPROVED";
                        string sql_getsenior = "SELECT SMID,MOBILE,USERID FROM MASTSALESREP WHERE SMNAME<>'.'  AND  SMID IN (SELECT MAINGRP FROM MASTSALESREPGRP WHERE SMID=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " AND LEVEL<(SELECT LEVEL FROM MASTSALESREPGRP WHERE SMID=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " AND MAINGRP=" + dtgrpsmid.Rows[0]["Smid"].ToString() + "))";
                        DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                        if (dt_getsenior.Rows.Count > 0)
                        {
                            for (int k = 0; k < dt_getsenior.Rows.Count; k++)
                            {

                                //if (PartyId != 0)
                                //{
                                //    displaytitle = PartyName + " -  Party Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                //    title = " Party Modified";
                                //}
                                //else
                                //{
                                displaytitle = PartyName.Replace("'", "''") + " - Outlet Blocked by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                title = "  Outlet Blocked";
                                //}


                                lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()), Convert.ToDateTime(createdatetime), "PartyMasterAstral.aspx?PartyId=" + PartyId + "&REQ=PRB", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), Convert.ToInt32(dt_getsenior.Rows[k]["smid"].ToString()));

                                if (!string.IsNullOrEmpty(dt_getsenior.Rows[k]["mobile"].ToString()))
                                {



                                    cls.pushnotificationforPartyCreation(displaytitle, compcode,
                                        dt_getsenior.Rows[k]["mobile"].ToString(),
                                      title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                        dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS", PartyId.ToString());

                                    cls.pushnotificationforPartyCreation(displaytitle, compcode,
                                       dt_getsenior.Rows[k]["mobile"].ToString(),
                                      title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                       dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER", PartyId.ToString());
                                }
                            }
                        }
                    }
                }
                else
                {

                    //Line file mismatch
                    //Status = "400";
                    // HeaderMsz = HeaderMsz + " - Line File Mismatch : Header Line Count: " + HeaderLineCOunt + " and LineFileCount: " + (Convert.ToInt32(Line_seqNo) + 1).ToString();
                }

                rs.msg = "Y";
            }
            catch (Exception ex)
            {
                rs.msg = "N";
            }

            #endregion

            Context.Response.Write(JsonConvert.SerializeObject(rs));
        }

        #endregion

        #region FFMSApp_JSGetBlockPartyList_V2

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_JSGetBlockPartyList_V2(string SMID)
        {
            string str = "";
            str = "SELECT PARTYNAME AS PARTY,MOBILE,APPBLOCKREMARK FROM MASTPARTY WHERE ISNULL(ACTIVE,0)=1 AND ISNULL(ISBLOCK,0)=1 AND (CREATED_USER_ID IN (SELECT USERID FROM MASTSALESREP WHERE SMID=" + SMID + ") OR AREAID IN (SELECT LINKCODE FROM MASTLINK WHERE PRIMCODE IN(" + SMID + ")))";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        #endregion

        public class disUserList
        {
            public List<Userdetail> BODY;
        }
        public class Userdetail
        {
            public string MINDATE { get; set; }
            public string PDA_ID { get; set; }
            public string MOBILE { get; set; }
            public string SMID { get; set; }
            public string CONPER_ID { get; set; }
            public string USERID { get; set; }
            public string TYPE { get; set; }
            public string APP { get; set; }
            public string VISITDATE { get; set; }
            public string ANDROIDID { get; set; }
            public string DISTID { get; set; }
            public string FROMDATE { get; set; }
            public string TODATE { get; set; }

            public string OUTLET_ID { get; set; }

            public string DATE { get; set; }

            public string WEBDOC_ID { get; set; }
        }

        #region Standard Time For EndDSR

        [DataContract]
        public class StandardTimeForEndDsr_Response
        {
            [DataMember]
            public string Status { get; set; }
            [DataMember]
            public string Headermsz { get; set; }
            [DataMember]
            public string StartTime { get; set; }
            [DataMember]
            public string EndTime { get; set; }
        }

        [WebMethod]
        public void StandardTimeBySmid_EndVisit_V2()
        {

            #region "Variable Declaration"

            string str = "";
            DataTable dt;
            string startTime = "", endTime = "";
            string status = "400", HeaderMsg = "";
            List<StandardTimeForEndDsr_Response> rst = new List<StandardTimeForEndDsr_Response>();

            //   var httprequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //  DataTable DTadmin = new DataTable();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            var OBJRESPONSE = JsonConvert.DeserializeObject<UserDetailList_V2>(bodyText);

            string SMID = OBJRESPONSE.SMID;

            #endregion

            if (!string.IsNullOrEmpty(SMID) && SMID != "0")
            {
                try
                {
                    str = "select FromTime,ToTime from MastSalesRep  where SMID=" + SMID;
                    dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);
                    if (dt.Rows.Count > 0)
                    {
                        status = "200";
                        HeaderMsg = "SuccessFull";
                        startTime = dt.Rows[0]["FromTime"].ToString();
                        endTime = dt.Rows[0]["ToTime"].ToString();
                    }
                    else
                    {
                        status = "200";
                        HeaderMsg = "No Record Found";
                        startTime = "00.00";
                        endTime = "00.00";
                    }
                }
                catch (Exception ex)
                {
                    status = "400";
                    HeaderMsg = ex.ToString();
                    startTime = "00.00";
                    endTime = "00.00";
                }
            }
            else
            {
                status = "400";
                HeaderMsg = "SalesPerson is not Found.";
                startTime = "00.00";
                endTime = "00.00";
            }


            bodyStream.Dispose();
            rst.Add(new StandardTimeForEndDsr_Response
            {
                Status = status,
                Headermsz = HeaderMsg,
                StartTime = startTime,
                EndTime = endTime
            });
            Context.Response.Write(JsonConvert.SerializeObject(rst));


        }


        #endregion

        #region ManagerApp_JSGetCountPendingParties_V2

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_JSGetCountPendingParties_V2(string SMID)
        {
            string str = @"SELECT Max(MS1.SMID) AS SMID,Max(MS1.smname) AS SMNAME,Count(MP.Partyid) AS PARTYCOUNT 
FROM MastParty MP LEFT JOIN Mastsalesrep MS1 ON MS1.UserId=MP.Created_User_id  
WHERE MP.Created_User_id IN ( SELECT Userid FROM MastSalesRep ms  
WHERE ms.SMID IN (SELECT SMID FROM MastSalesRepGrp WHERE maingrp=" + SMID + " AND SMID !=" + SMID + "  ) )  AND MP.Partydist=0 AND MP.AppStatus='Pending' GROUP BY MP.Created_User_id";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            Context.Response.Write(JsonConvert.SerializeObject(dt));
        }

        #endregion

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_JSGetlistPendingParties_V2(string SMID)
        {
            string str = @"SELECT MS1.SMID AS SMID,MS1.smname AS SMName,MP.Partyid AS PartyId,MP.PartyName AS PartyName ,MP.AreaId AS AreaId,MA.AreaName AS Area,MP.BeatId AS BeatId,MB.AreaName AS Beat,MP.Mobile FROM MastParty MP LEFT JOIN MastArea MA ON MA.AreaId=MP.AreaId
LEFT JOIN MastArea MB ON MB.AreaId=MP.BeatId LEFT JOIN Mastsalesrep MS1 ON MS1.UserId=MP.Created_User_id 
WHERE MS1.SMID=" + SMID + " AND MP.Partydist=0 AND MP.AppStatus='Pending' ";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        [DataContract]
        public class xPartiesNewLatLong_V2
        {
            [DataMember]
            public string MS { get; set; }
            [DataMember]
            public string ID { get; set; }
            [DataMember]
            public string AD { get; set; }
            [DataMember]
            public string BD { get; set; }
            [DataMember]
            public string PCD { get; set; }
            [DataMember]
            public string CP { get; set; }
            [DataMember]
            public string NM { get; set; }
            [DataMember]
            public string IND { get; set; }
            [DataMember]
            public string DSID { get; set; }
            [DataMember]

            public string AD1 { get; set; }
            [DataMember]
            public string AD2 { get; set; }
            [DataMember]
            public string PI { get; set; }
            [DataMember]
            public string CT { get; set; }
            [DataMember]
            public string M { get; set; }
            [DataMember]
            public string E { get; set; }
            [DataMember]
            public string PL { get; set; }
            [DataMember]
            public string BLK { get; set; }
            [DataMember]
            public string CST { get; set; }
            [DataMember]
            public string VTN { get; set; }
            [DataMember]
            public string STNO { get; set; }
            [DataMember]
            public string BRZN { get; set; }
            [DataMember]
            public string BDT { get; set; }
            [DataMember]
            public string BBY { get; set; }
            [DataMember]
            public string AT { get; set; }
            [DataMember]
            public string R { get; set; }
            [DataMember]
            public string PAN { get; set; }
            [DataMember]
            public string PHONENO { get; set; }
            [DataMember]
            public string CREATEDBY { get; set; }
            [DataMember]
            public string DA { get; set; }
            [DataMember]
            public string DB { get; set; }
            [DataMember]
            public string ANDROIDID { get; set; }
            [DataMember]
            public string LONGITUDE { get; set; }
            [DataMember]
            public string LATITUDE { get; set; }
            [DataMember]
            public string LATLNGTIME { get; set; }
            [DataMember]
            public string CREDITLIMIT { get; set; }
            [DataMember]
            public string OUTSTANDING { get; set; }
            [DataMember]
            public string PARTY_IMAGE { get; set; }
            [DataMember]
            public string SYNC_ID { get; set; }

            [DataMember]
            public string CREATEDUSERID { get; set; }


            [DataMember]
            public string AREANAME { get; set; }


            [DataMember]
            public string BEATNAME { get; set; }


            [DataMember]
            public string CITYNAME { get; set; }

            [DataMember]
            public string INDNAME { get; set; }

            [DataMember]
            public string PARTTYPENAME { get; set; }


            [DataMember]
            public string DISTRIBUTORNAME { get; set; }





            [DataMember]
            public bool ISBLOCK { get; set; }

            [DataMember]
            public int APPBLOCKBY { get; set; }
            [DataMember]
            public string APPBLOCKREMARK { get; set; }
            [DataMember]
            public string APPBLOCKSTATUS { get; set; }
            [DataMember]
            public int APPBYSMID { get; set; }
            [DataMember]
            public string APPSTATUS { get; set; }

            [DataMember]
            public string APPREMARK { get; set; }
            [DataMember]
            public int APPBY { get; set; }



            [DataMember]
            public string TOTALORDERQTY { get; set; }
            [DataMember]
            public string TOTALORDERVALUE { get; set; }
            [DataMember]
            public string AVGORDERQTY { get; set; }
            [DataMember]
            public string AVGORDERVALUE { get; set; }

            [DataMember]
            public string LASTVISIT { get; set; }
            [DataMember]
            public string LASTPRODUCTIVECALL { get; set; }
            [DataMember]
            public string LINEPERCALL { get; set; }
            [DataMember]
            public string PARTYNOTE { get; set; }
            //[DataMember]
            //public List<xPartiesNewLatLongimages> imgpaths { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_JSGetPartyDetail_V2(string Partyid)
        {
            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "", IMGURL = "";
            string str = @"SELECT MA.AreaName AS Areaname,MB.AreaName AS BeatName,PT.PartyTypeName AS ParttypeName,MI.IndName AS IndName,MC.AreaName AS CityName, msr.smname as cb, 
isnull(p.android_id,p.partyid) as androidid,p.Created_User_Id,p.PartyId As Id,p.AreaId As Area_Id,p.BeatId As Beat_Id,p.PartyType As PartyType,
p.PartyName As Name,MD.PartyName As DistributorName,p.IndId As Industry_Id,p.UnderId as DistId,p.phone,p.PartyType As Type_Id,p.ContactPerson ,isnull(p.Address1,'') as Add1,isnull(p.Address2,'') as Add2,p.Pin AS Pin,
(select UnderId from MastArea where AreaId=p.AreaId) as CtyCodeP1,isnull(p.Mobile,'') as Mobile1,isnull(p.Email,'') as Email1,isnull(p.Potential,0) as Potential,
isnull(p.Active,'') as IsBlocked,isnull(p.CSTNo,'') as CST_No,isnull(p.VatTin,'') as VatTin_No,isnull(p.ServiceTax,'') as ServiceTaxReg_No,p.Created_Date,
(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(p.Created_date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(p.Created_date AS date), p.Created_date) AS [Milliseconds],
isnull(p.BlockReason,'') as BlockedReason,isnull(Convert(varchar,p.[BlockDate],103),'') as Block_Date,isnull(p.BlockBy,'') as BlockedBy,p.Active,isnull(p.Remark,'') as Remark,
isnull(p.PANNo,'') as PANNo,isnull(p.Active,'') as Block,p.creditLimit,p.outstanding,replace(convert(NVARCHAR, p.DOA, 106), ' ', '/') AS DOA,
replace(convert(NVARCHAR, p.DOB, 106), ' ', '/') AS DOB,p.IMGURL,isnull(p.GSTINNo,'') as GSTINNo,p.longitude,p.latitude,p.address,
(CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(p.lat_long_datetime AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(p.lat_long_datetime AS date), p.lat_long_datetime) AS [lat_long_datetime],p.SyncId 
,Isnull(p.Isblock,0) AS Isblock,Isnull(p.AppBlockby,0) AS AppBlockby,Isnull(p.AppBlockRemark,'') AS AppBlockRemark,Isnull(p.AppBlockStatus,'') AS AppBlockStatus
,Isnull(p.Appbysmid,0) AS Appbysmid,Isnull(p.AppStatus,'') AS AppStatus,Isnull(p.AppRemark,'') AS AppRemark,Isnull(p.Appby,0) AS  Appby  from [MastParty]p left join mastsalesrep msr on p.Created_User_Id =msr.userid LEFT JOIN MastArea MA ON MA.AreaId=p.AreaId LEFT JOIN MastArea MC ON MC.AreaId=MA.UnderId
LEFT JOIN MastArea MB ON MB.AreaId=p.BeatId LEFT JOIN PartyType PT ON PT.PartyTypeId=p.PartyType LEFT JOIN MastIndustry MI ON MI.IndId=p.IndId
left join MastParty MD on MD.PartyId =p.UnderId 
where p.PartyDist=0  and p.PartyId=" + Partyid + "";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            xPartiesNewLatLong_V2 rst = new xPartiesNewLatLong_V2();


            DataTable Dtimages = new DataTable();

            Dtimages = DbConnectionDAL.GetDataTable(CommandType.Text, "Select * from  MastPartyImage where PartyId='" + dt.Rows[0]["Id"].ToString() + "'");
            if (Dtimages.Rows.Count > 0)
            {
                for (int j = 0; j < Dtimages.Rows.Count; j++)
                {
                    if (Dtimages.Rows[j]["IMGURL"].ToString() != "")
                    {
                        path = "http://" + host + (Dtimages.Rows[j]["IMGURL"].ToString()).Replace(@"~", string.Empty);
                        //rstimges.Add(new xPartiesNewLatLongimages
                        //{
                        IMGURL = IMGURL + "&dataman&" + path;
                        //});
                    }

                }
            }

            char[] chr = { '&', 'd', 'a', 't', 'a', 'm', 'a', 'n', '&' };
            IMGURL = IMGURL.Trim(chr);


            rst.ID = dt.Rows[0]["Id"].ToString();
            rst.AD = dt.Rows[0]["Area_Id"].ToString();
            rst.BD = dt.Rows[0]["Beat_Id"].ToString();
            rst.PCD = dt.Rows[0]["PartyType"].ToString();
            rst.NM = dt.Rows[0]["Name"].ToString();
            rst.CP = dt.Rows[0]["ContactPerson"].ToString();
            rst.IND = dt.Rows[0]["Industry_Id"].ToString();
            rst.DSID = dt.Rows[0]["DistId"].ToString();
            rst.AD1 = dt.Rows[0]["Add1"].ToString();
            rst.AD2 = dt.Rows[0]["Add2"].ToString();
            rst.PI = dt.Rows[0]["Pin"].ToString();
            rst.CT = dt.Rows[0]["CtyCodeP1"].ToString();
            rst.M = dt.Rows[0]["Mobile1"].ToString();
            rst.E = dt.Rows[0]["Email1"].ToString();
            rst.PL = dt.Rows[0]["Potential"].ToString();
            rst.BLK = dt.Rows[0]["IsBlocked"].ToString();
            rst.CST = dt.Rows[0]["GSTINNo"].ToString();
            rst.VTN = dt.Rows[0]["VatTin_No"].ToString();
            rst.STNO = dt.Rows[0]["ServiceTaxReg_No"].ToString();
            rst.BRZN = dt.Rows[0]["BlockedReason"].ToString();
            rst.BDT = dt.Rows[0]["Block_Date"].ToString();
            rst.BBY = dt.Rows[0]["BlockedBy"].ToString();
            rst.AT = dt.Rows[0]["Active"].ToString();
            rst.R = dt.Rows[0]["Remark"].ToString();
            rst.PAN = dt.Rows[0]["PANNo"].ToString();
            rst.PHONENO = dt.Rows[0]["phone"].ToString();
            rst.DA = dt.Rows[0]["DOA"].ToString();
            rst.DB = dt.Rows[0]["DOB"].ToString();
            rst.CREATEDBY = dt.Rows[0]["cb"].ToString();
            rst.MS = dt.Rows[0]["Milliseconds"].ToString();
            rst.ANDROIDID = dt.Rows[0]["androidid"].ToString();
            rst.LONGITUDE = dt.Rows[0]["longitude"].ToString();
            rst.LATITUDE = dt.Rows[0]["latitude"].ToString();
            rst.LATLNGTIME = dt.Rows[0]["lat_long_datetime"].ToString();
            rst.CREDITLIMIT = dt.Rows[0]["Creditlimit"].ToString();
            rst.OUTSTANDING = dt.Rows[0]["Outstanding"].ToString();
            rst.PARTY_IMAGE = IMGURL;
            rst.SYNC_ID = dt.Rows[0]["SyncId"].ToString();
            rst.CREATEDUSERID = dt.Rows[0]["Created_User_Id"].ToString();


            rst.AREANAME = dt.Rows[0]["Areaname"].ToString();
            rst.BEATNAME = dt.Rows[0]["BeatName"].ToString();
            rst.CITYNAME = dt.Rows[0]["CityName"].ToString();
            rst.INDNAME = dt.Rows[0]["IndName"].ToString();
            rst.PARTTYPENAME = dt.Rows[0]["ParttypeName"].ToString();
            rst.DISTRIBUTORNAME = dt.Rows[0]["DistributorName"].ToString();


            rst.ISBLOCK = Convert.ToBoolean(dt.Rows[0]["Isblock"].ToString());
            rst.APPBLOCKBY = Convert.ToInt32(dt.Rows[0]["AppBlockby"].ToString());
            rst.APPBLOCKREMARK = dt.Rows[0]["AppBlockRemark"].ToString();
            rst.APPBLOCKSTATUS = dt.Rows[0]["AppBlockStatus"].ToString();
            rst.APPBYSMID = Convert.ToInt32(dt.Rows[0]["Appbysmid"].ToString());
            rst.APPSTATUS = dt.Rows[0]["AppStatus"].ToString();
            rst.APPREMARK = dt.Rows[0]["AppRemark"].ToString();
            rst.APPBY = Convert.ToInt32(dt.Rows[0]["Appby"].ToString());
            // imgpaths=rstimges


            //List<xPartiesNewLatLongimages> rstimges = new List<xPartiesNewLatLongimages>();
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void FFMSApp_SaveParty_V2()
        {
            var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            DataTable DTadmin = new DataTable();
            Common cls = new Common();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);
            string str = "";

            //Int32 PartyId = objResponse.BODYLINE[0].PartyId;
            //string PartyName = objResponse.BODYLINE[0].PartyName;
            //string Address1 = objResponse.BODYLINE[0].Address1;
            //string Address2 = objResponse.BODYLINE[0].Address2;
            //Int32 CityId = objResponse.BODYLINE[0].CityId;
            //Int32 AreaId = objResponse.BODYLINE[0].AreaId;
            //Int32 BeatId = objResponse.BODYLINE[0].BeatId;
            //Int32 UnderId = objResponse.BODYLINE[0].UnderId;
            //string Pin = objResponse.BODYLINE[0].Pin;
            //string Mobile = objResponse.BODYLINE[0].Mobile;
            //string Phone = objResponse.BODYLINE[0].Phone;
            //string Remark = objResponse.BODYLINE[0].Remark;
            //string SyncId = objResponse.BODYLINE[0].SyncId;
            //string IndId = objResponse.BODYLINE[0].IndId;
            //decimal Potential = objResponse.BODYLINE[0].Potential;
            //bool Active = objResponse.BODYLINE[0].Active;
            //string BlockReason = objResponse.BODYLINE[0].BlockReason;
            //int PartyType = objResponse.BODYLINE[0].PartyType;
            //string ContactPerson = objResponse.BODYLINE[0].ContactPerson;
            //string CSTNo = objResponse.BODYLINE[0].CSTNo;
            //string VatTin = objResponse.BODYLINE[0].VatTin;
            //string ServiceTax = objResponse.BODYLINE[0].ServiceTax;
            //string PanNo = objResponse.BODYLINE[0].PanNo;
            //int UserId = objResponse.BODYLINE[0].UserId;
            //string DOA = objResponse.BODYLINE[0].DOA;
            //string DOB = objResponse.BODYLINE[0].DOB;
            //string Email = objResponse.BODYLINE[0].Email;
            //string androidid = objResponse.BODYLINE[0].androidid;
            //string Longitude = objResponse.BODYLINE[0].longitude;
            //string Latitude = objResponse.BODYLINE[0].latitude;
            //string LatlngTime = objResponse.BODYLINE[0].LatlngTime;
            //string ImgUrl = objResponse.BODYLINE[0].ImgUrl;
            //string image1 = objResponse.BODYLINE[0].image1;
            //string GSTINNo = objResponse.BODYLINE[0].GSTINNo;
            //bool Isblock = objResponse.BODYLINE[0].Isblock;


            //string AppBlockStatus = objResponse.BODYLINE[0].AppBlockStatus;
            string Partytype_Name = "";

            Partytype_Name = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select PartyTypeName From PartyType where PartyTypeId=" + objResponse.BODYLINE[0].PARTYTYPE + ""));
            bool RetailerCreationApproval = Convert.ToBoolean(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RetailerCreationApproval FROM MastEnviro"));
            if (RetailerCreationApproval == true)
            {
                if (Partytype_Name.ToUpper() != "INSTITUTIONAL" && objResponse.BODYLINE[0].PARTYID == 0)
                {
                    objResponse.BODYLINE[0].ACTIVE = false;
                }
            }
            else
            {

            }
            string[] imgurls = new string[1];

            string chk = "0"; string checkmobileno = string.Empty, _partyId = "", _Query = "";
            DataTable mobileno = new DataTable();
            DataTable dtandridid = new DataTable();
            string qry = "", Millisecond = "";
            //double ticks = double.Parse(LatlngTime);
            //TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            //DateTime startdate = new DateTime(1970, 1, 1) + time;
            //string minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string minDate1 = "";
            if (!string.IsNullOrEmpty(objResponse.BODYLINE[0].LATLNGTIME))
            {
                double ticks = double.Parse(objResponse.BODYLINE[0].LATLNGTIME);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }
            else
            {
                minDate1 = DateTime.Now.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }
            //WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
            string Address = "", filename = "";

            //if (Latitude != "")
            //{
            //    Address = DMT.InsertAddress(Latitude, Longitude);
            //}

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;


            //if (image1.Contains("http://"))
            //{
            //    ImgUrl = image1.Replace(path, "~");
            //}
            //else

            if (objResponse.BODYLINE[0].IMAGE1 != "N/A")
            {
                //  imgurls = image1.Split();
                string[] imges = objResponse.BODYLINE[0].IMAGE1.Split(new string[] { "&dataman&" }, StringSplitOptions.None);
                imgurls = new string[imges.Length];
                for (int i = 0; i < imges.Length; i++)
                {

                    try
                    {


                        byte[] bytes = Convert.FromBase64String(imges[i]);

                        Image image;
                        using (MemoryStream ms = new MemoryStream(bytes))
                        {
                            image = Image.FromStream(ms);
                        }
                        string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                        if (!Directory.Exists(directoryPath))
                        {
                            Directory.CreateDirectory(directoryPath);
                        }
                        String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");


                        filename = Path.GetFileName(objResponse.BODYLINE[0].SYNCID + '-' + timeStamp);
                        {
                            //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                            //string filePath = Server.MapPath("~/DSRImages" + "/C_" + filename + ".png");
                            //File.WriteAllBytes(filePath, bytes);
                            //imgurls[i] = "~/DSRImages" + "/C_" + filename + ".png";


                            string filePath = Server.MapPath("~/DSRImages" + "/NewParty_" + filename + ".png");
                            File.WriteAllBytes(filePath, bytes);
                            imgurls[i] = "~/DSRImages" + "/NewParty_" + filename + ".png";
                        }
                    }
                    catch (Exception)
                    {
                        if (imges[i].Contains("http://"))
                        {
                            imgurls[i] = imges[i].Replace(path, "~");
                        }

                    }
                }
            }


            PartyBAL PB = new PartyBAL();
            int retval = 0;


            int smid = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT SMId FROM MastSalesRep WHERE UserId=" + objResponse.BODYLINE[0].USERID + ""));

            int RoleId = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RoleId FROM MastRole WHERE RoleType='Distributor'"));
            string msz = "Record Inserted Successfully";
            if (objResponse.BODYLINE[0].INDID == "")
            {
                objResponse.BODYLINE[0].INDID = "0";
            }
            //   string partyoffline = DbConnectionDAL.GetStringScalarVal("select PartyOffLine from mastenviro").ToString();

            if (objResponse.BODYLINE[0].PARTYID == 0)
            {
                if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
                {
                   

                    retval = DB.InsertDistributors(objResponse.BODYLINE[0].PARTYNAME, objResponse.BODYLINE[0].ADDRESS1, objResponse.BODYLINE[0].ADDRESS2, Convert.ToString(objResponse.BODYLINE[0].CITYID), objResponse.BODYLINE[0].PIN, objResponse.BODYLINE[0].EMAIL, objResponse.BODYLINE[0].MOBILE, objResponse.BODYLINE[0].REMARK,
                         objResponse.BODYLINE[0].SYNCID, objResponse.BODYLINE[0].BLOCKREASON, objResponse.BODYLINE[0].MOBILE, objResponse.BODYLINE[0].ACTIVE, objResponse.BODYLINE[0].PHONE, RoleId, objResponse.BODYLINE[0].CONTACTPERSON, objResponse.BODYLINE[0].CSTNO, objResponse.BODYLINE[0].VATTIN, objResponse.BODYLINE[0].PANNO, 0, 0, 0, 0, objResponse.BODYLINE[0].USERID, "", "", objResponse.BODYLINE[0].PARTYNAME, smid, objResponse.BODYLINE[0].DOA, objResponse.BODYLINE[0].DOB,
                         objResponse.BODYLINE[0].AREAID, "", "", objResponse.BODYLINE[0].PARTYTYPE,
                         objResponse.BODYLINE[0].SERVICETAX);
                    if (objResponse.BODYLINE[0].SYNCID == "")
                    {
                        string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
                    }

                }
                else
                {
                    retval = PB.InsertPartyFromMobile(objResponse.BODYLINE[0].PARTYNAME, objResponse.BODYLINE[0].ADDRESS1, objResponse.BODYLINE[0].ADDRESS2, objResponse.BODYLINE[0].CITYID, objResponse.BODYLINE[0].AREAID, objResponse.BODYLINE[0].BEATID, objResponse.BODYLINE[0].UNDERID, objResponse.BODYLINE[0].PIN, objResponse.BODYLINE[0].MOBILE, objResponse.BODYLINE[0].PHONE, objResponse.BODYLINE[0].REMARK,
                         objResponse.BODYLINE[0].SYNCID, objResponse.BODYLINE[0].INDID,
                     objResponse.BODYLINE[0].POTENTIAL, objResponse.BODYLINE[0].ACTIVE, objResponse.BODYLINE[0].BLOCKREASON, Convert.ToInt32(objResponse.BODYLINE[0].PARTYTYPE), objResponse.BODYLINE[0].CONTACTPERSON, objResponse.BODYLINE[0].CSTNO, objResponse.BODYLINE[0].VATTIN, objResponse.BODYLINE[0].SERVICETAX,
                     objResponse.BODYLINE[0].PANNO, objResponse.BODYLINE[0].USERID, objResponse.BODYLINE[0].DOA, objResponse.BODYLINE[0].DOB, objResponse.BODYLINE[0].EMAIL, "", objResponse.BODYLINE[0].GSTINNO, objResponse.BODYLINE[0].ANDROIDID);
                }


                if (retval == -1)
                { msz = "Duplicate Party Exists"; }
                else if (retval == -3)
                {
                    msz = "Duplicate Mobile Exists";
                    _Query = @"select PartyId from MastParty Where Mobile='" + objResponse.BODYLINE[0].MOBILE + "'";
                    _partyId = DbConnectionDAL.GetStringScalarVal(_Query);
                }

                else if (retval == -4)
                {
                    msz = "Duplicate GSTNo Exists";
                    _Query = @"select PartyId from MastParty Where GSTINNo='" + objResponse.BODYLINE[0].GSTINNO + "'";
                    _partyId = DbConnectionDAL.GetStringScalarVal(_Query);
                }
                else
                {


                    for (int i = 0; i < imgurls.Length; i++)
                    {
                        str = "INSERT INTO dbo.MastPartyImage ( ImgUrl,PartyId) VALUES ('" + imgurls[i] + "'," + retval + ")";
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, str);

                    }



                    string sql = "update mastparty set android_id='" + objResponse.BODYLINE[0].ANDROIDID + "', Longitude = '" + objResponse.BODYLINE[0].LONGITUDE + "',Latitude='" + objResponse.BODYLINE[0].LATITUDE + "', Address='" + Address + "',Lat_long_datetime = '" + minDate1 + "',ImgUrl='" + objResponse.BODYLINE[0].IMGURL + "',GSTINNo='" + objResponse.BODYLINE[0].CSTNO + "' where partyid=" + retval + " ";
                    if (DbConnectionDAL.ExecuteQuery(sql) == 1)
                    { chk = "1"; }
                }







            }
            else
            {

                if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
                {


                    retval = DB.UpdateDistributors(objResponse.BODYLINE[0].PARTYID, objResponse.BODYLINE[0].PARTYNAME, objResponse.BODYLINE[0].ADDRESS1, objResponse.BODYLINE[0].ADDRESS2, Convert.ToString(objResponse.BODYLINE[0].CITYID), objResponse.BODYLINE[0].PIN, objResponse.BODYLINE[0].EMAIL, objResponse.BODYLINE[0].MOBILE, objResponse.BODYLINE[0].REMARK, objResponse.BODYLINE[0].SYNCID, objResponse.BODYLINE[0].BLOCKREASON, objResponse.BODYLINE[0].MOBILE, objResponse.BODYLINE[0].ACTIVE, objResponse.BODYLINE[0].PHONE, RoleId, "", objResponse.BODYLINE[0].CSTNO, objResponse.BODYLINE[0].VATTIN, objResponse.BODYLINE[0].PANNO, 0, 0, 0, 0, objResponse.BODYLINE[0].USERID, "", "", objResponse.BODYLINE[0].PARTYNAME, smid, objResponse.BODYLINE[0].DOA, objResponse.BODYLINE[0].DOB, objResponse.BODYLINE[0].AREAID, "", "", objResponse.BODYLINE[0].PARTYTYPE, objResponse.BODYLINE[0].SERVICETAX);
                    if (objResponse.BODYLINE[0].SYNCID == "")
                    {
                        string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
                        DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
                    }

                }
                else
                {

                    retval = PB.UpdatePartyFromMobile(objResponse.BODYLINE[0].PARTYID, objResponse.BODYLINE[0].PARTYNAME, objResponse.BODYLINE[0].ADDRESS1, objResponse.BODYLINE[0].ADDRESS2, objResponse.BODYLINE[0].CITYID, objResponse.BODYLINE[0].AREAID, objResponse.BODYLINE[0].BEATID, objResponse.BODYLINE[0].UNDERID, objResponse.BODYLINE[0].PIN, objResponse.BODYLINE[0].MOBILE, objResponse.BODYLINE[0].PHONE, objResponse.BODYLINE[0].REMARK, objResponse.BODYLINE[0].SYNCID, objResponse.BODYLINE[0].INDID, objResponse.BODYLINE[0].POTENTIAL, objResponse.BODYLINE[0].ACTIVE, objResponse.BODYLINE[0].BLOCKREASON, objResponse.BODYLINE[0].PARTYTYPE, objResponse.BODYLINE[0].CONTACTPERSON, objResponse.BODYLINE[0].CSTNO, objResponse.BODYLINE[0].VATTIN, objResponse.BODYLINE[0].SERVICETAX, objResponse.BODYLINE[0].PANNO, objResponse.BODYLINE[0].USERID, objResponse.BODYLINE[0].DOA, objResponse.BODYLINE[0].DOB, objResponse.BODYLINE[0].EMAIL, "", objResponse.BODYLINE[0].GSTINNO, objResponse.BODYLINE[0].ANDROIDID);

                }


                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "Delete from MastPartyImage where PartyId=" + objResponse.BODYLINE[0].PARTYID + " ");
                for (int i = 0; i < imgurls.Length; i++)
                {
                    str = "INSERT INTO dbo.MastPartyImage ( ImgUrl,PartyId) VALUES ('" + imgurls[i] + "'," + objResponse.BODYLINE[0].PARTYID + ")";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, str);

                }


            }


            #region SentNotification
            try
            {

                if (RetailerCreationApproval == true && Partytype_Name.ToUpper() != "INSTITUTIONAL" && objResponse.BODYLINE[0].PARTYID == 0)
                {
                    string displaytitle = ""; string title = "";
                    string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
                    string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from MastParty where Partyid=" + retval + ""));
                    DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid,UnderId from mastsalesrep where userid=" + objResponse.BODYLINE[0].USERID + "");


                    if (dtgrpsmid.Rows.Count > 0)
                    {
                        string pro_id = "PARTYCREATION";
                        string sql_getsenior = "select smid,Mobile,userid from mastsalesrep where smid =" + dtgrpsmid.Rows[0]["UnderId"].ToString() + "";
                        //string sql_getsenior = "select smid,Mobile,userid from mastsalesrep where SMName<>'.'  and  smid in (select MainGrp from mastsalesrepgrp where smid=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " and Level<(select level from mastsalesrepgrp where smid=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " and MainGrp=" + dtgrpsmid.Rows[0]["Smid"].ToString() + "))";
                        DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                        if (dt_getsenior.Rows.Count > 0)
                        {
                            for (int k = 0; k < dt_getsenior.Rows.Count; k++)
                            {

                                //if (PartyId != 0)
                                //{
                                //    displaytitle = PartyName + " -  Party Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                //    title = " Party Modified";
                                //}
                                //else
                                //{
                                displaytitle = objResponse.BODYLINE[0].PARTYNAME + " - Outlet created by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                                title = " New Outlet Created";
                                //}


                                lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()), Convert.ToDateTime(createdatetime), "PartyMasterAstral.aspx?PartyId=" + retval + "&REQ=PR", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), Convert.ToInt32(dt_getsenior.Rows[k]["smid"].ToString()));

                                if (!string.IsNullOrEmpty(dt_getsenior.Rows[k]["mobile"].ToString()))
                                {
                                    //cls.pushnotificationforPartyCreation(displaytitle, compcode,
                                    //    dt_getsenior.Rows[k]["mobile"].ToString(),
                                    //  title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                    //    dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS", retval.ToString());

                                    cls.pushnotificationforPartyCreation(displaytitle, compcode,
                                       dt_getsenior.Rows[k]["mobile"].ToString(),
                                      title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                       dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER", retval.ToString());
                                }
                            }
                        }

                        //DataTable dtdist = DbConnectionDAL.GetDataTable(CommandType.Text, "SELECT Mobile,  UserId FROM MastParty WHERE PartyId=" + Line_selectedDistId + "");
                        //if (dtdist.Rows.Count > 0)
                        //{
                        //    lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dtdist.Rows[0]["UserId"].ToString()), Convert.ToDateTime(createdatetime), "Retailerdispatchorderform.aspx?Docid=" + orddocid.Replace("-", " ") + "", displaytitle, 0, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToInt32(dtgrpsmid.Rows[0]["SMID"].ToString()), 0);

                        //    if (!string.IsNullOrEmpty(dtdist.Rows[0]["mobile"].ToString()))
                        //    {
                        //        pushnotificationonorderdispatchcancel(displaytitle, compcode,
                        //           dtdist.Rows[0]["mobile"].ToString(),
                        //            "New Order Created", dtgrpsmid.Rows[0]["SMID"].ToString(),
                        //            dtgrpsmid.Rows[0]["SMName"].ToString(), "GOLDIEE", orddocid, partyname);
                        //    }
                        //}

                    }
                }
                else
                {

                    //Line file mismatch
                    //Status = "400";
                    // HeaderMsz = HeaderMsz + " - Line File Mismatch : Header Line Count: " + HeaderLineCOunt + " and LineFileCount: " + (Convert.ToInt32(Line_seqNo) + 1).ToString();
                }


            }
            catch (Exception ex)
            {
                //  Line_Status = "200"; // status is set 200 becoz order is saved but exception in sending notification.
                // LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();

                // Status = "400";
                // HeaderMsz = HeaderMsz + " : " + LineMsz;
            }

            #endregion




            //////////////////block notification




            if (retval == -1)
            { msz = "Duplicate Party Exists"; }
            else if (retval == -3)
            { msz = "Duplicate Mobile Exists"; }
            else if (retval == -4)
            {
                msz = "Duplicate GSTNo Exists";

            }
            else
            {
                string sqlupdate = "update mastparty set android_id='" + objResponse.BODYLINE[0].ANDROIDID + "', Longitude = '" + objResponse.BODYLINE[0].LONGITUDE + "',Latitude='" + objResponse.BODYLINE[0].LATITUDE + "',Address='" + Address + "',Lat_long_datetime = '" + minDate1 + "',ImgUrl='" + objResponse.BODYLINE[0].IMGURL + "',GSTINNo='" + objResponse.BODYLINE[0].CSTNO + "' where partyid=" + objResponse.BODYLINE[0].PARTYID + " ";
                if (DbConnectionDAL.ExecuteQuery(sqlupdate) == 1)
                { chk = "2"; }
            }
            if (retval > 0)
            {
                if (chk == "1")
                { msz = "Record Inserted Successfully"; _partyId = retval.ToString(); }
                else if (chk == "2")
                { msz = "Record Updated Successfully"; _partyId = objResponse.BODYLINE[0].PARTYID.ToString(); }

                qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where android_id='" + objResponse.BODYLINE[0].ANDROIDID + "' ";

                //Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();
            }
            else
            {
                qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where mobile='" + objResponse.BODYLINE[0].MOBILE + "' ";
            }
            Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();

            List<Party> rst = new List<Party>();
            {
                rst.Add(
                    new Party
                    {
                        //Id = retval.ToString(),
                        ID = _partyId,
                        STATUS = msz,
                        MS = Millisecond
                    }
                );
            }
            bodyStream.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_SaveParty_V2()
        {
            // var httpRequest = HttpContext.Current.Request;
            var bodyStream = new StreamReader(HttpContext.Current.Request.InputStream);
            //  DataTable DTadmin = new DataTable();
            Common cls = new Common();
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var bodyText = bodyStream.ReadToEnd();
            //     string items = httpRequest.Params["orderdetail"].ToString();
            var objResponse = JsonConvert.DeserializeObject<disList>(bodyText);
            string str = "";
            //Int32 PartyId = objResponse.BODYLINE[0].PartyId;
            //string PartyName = objResponse.BODYLINE[0].PartyName;
            //string Address1 = objResponse.BODYLINE[0].Address1;
            //string Address2 = objResponse.BODYLINE[0].Address2;
            //Int32 CityId = objResponse.BODYLINE[0].CityId;
            //Int32 AreaId = objResponse.BODYLINE[0].AreaId;
            //Int32 BeatId = objResponse.BODYLINE[0].BeatId;
            //Int32 UnderId = objResponse.BODYLINE[0].UnderId;
            //string Pin = objResponse.BODYLINE[0].Pin;
            //string Mobile = objResponse.BODYLINE[0].Mobile;
            //string Phone = objResponse.BODYLINE[0].Phone;
            //string Remark = objResponse.BODYLINE[0].Remark;
            //string SyncId = objResponse.BODYLINE[0].SyncId;
            //string IndId = objResponse.BODYLINE[0].IndId;
            //decimal Potential = objResponse.BODYLINE[0].Potential;
            //bool Active = objResponse.BODYLINE[0].Active;
            //string BlockReason = objResponse.BODYLINE[0].BlockReason;
            //int PartyType = objResponse.BODYLINE[0].PartyType;
            //string ContactPerson = objResponse.BODYLINE[0].ContactPerson;
            //string CSTNo = objResponse.BODYLINE[0].CSTNo;
            //string VatTin = objResponse.BODYLINE[0].VatTin;
            //string ServiceTax = objResponse.BODYLINE[0].ServiceTax;
            //string PanNo = objResponse.BODYLINE[0].PanNo;
            //int UserId = objResponse.BODYLINE[0].UserId;
            //string DOA = objResponse.BODYLINE[0].DOA;
            //string DOB = objResponse.BODYLINE[0].DOB;
            //string Email = objResponse.BODYLINE[0].Email;
            //string androidid = objResponse.BODYLINE[0].androidid;
            //string Longitude = objResponse.BODYLINE[0].longitude;
            //string Latitude = objResponse.BODYLINE[0].latitude;
            //string LatlngTime = objResponse.BODYLINE[0].LatlngTime;
            //string ImgUrl = objResponse.BODYLINE[0].ImgUrl;
            //string image1 = objResponse.BODYLINE[0].image1;
            //string GSTINNo = objResponse.BODYLINE[0].GSTINNo;


            //string AppStatus = objResponse.BODYLINE[0].AppStatus;
            //string Appbyuserid = objResponse.BODYLINE[0].Appbyuserid;
            //string AppRemark = objResponse.BODYLINE[0].AppRemark;
            //string Appbysmid = objResponse.BODYLINE[0].Appbysmid;



            //bool Isblock = objResponse.BODYLINE[0].Isblock;
            //string AppBlockby = objResponse.BODYLINE[0].AppBlockby;
            //string AppBlockRemark = objResponse.BODYLINE[0].AppBlockRemark;
            //string AppBlockStatus = objResponse.BODYLINE[0].AppBlockStatus;

            string Partytype_Name = "";

            Partytype_Name = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select PartyTypeName From PartyType where PartyTypeId=" + objResponse.BODYLINE[0].PARTYTYPE + ""));
            bool RetailerCreationApproval = Convert.ToBoolean(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RetailerCreationApproval FROM MastEnviro"));
            if (RetailerCreationApproval == true)
            {
                if (Partytype_Name.ToUpper() != "INSTITUTIONAL" && objResponse.BODYLINE[0].PARTYID == 0)
                {
                    objResponse.BODYLINE[0].ACTIVE = false;
                }
            }
            else
            {

            }
            string[] imgurls = new string[1];

            string chk = "0"; string checkmobileno = string.Empty, _partyId = "", _Query = "";
            DataTable mobileno = new DataTable();
            DataTable dtandridid = new DataTable();
            string qry = "", Millisecond = "";
            //double ticks = double.Parse(LatlngTime);
            //TimeSpan time = TimeSpan.FromMilliseconds(ticks);
            //DateTime startdate = new DateTime(1970, 1, 1) + time;
            //string minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            string minDate1 = "";
            if (!string.IsNullOrEmpty(objResponse.BODYLINE[0].LATLNGTIME))
            {
                double ticks = double.Parse(objResponse.BODYLINE[0].LATLNGTIME);
                TimeSpan time = TimeSpan.FromMilliseconds(ticks);
                DateTime startdate = new DateTime(1970, 1, 1) + time;
                minDate1 = startdate.AddMinutes(330).ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }
            else
            {
                minDate1 = DateTime.Now.ToString("yyyy-MM-dd  HH:mm:ss.fff");
            }
            // WebServiceSoapClient DMT = new WebServiceSoapClient("WebServiceSoap");
            string Address = "", filename = "";

            //if (Latitude != "")
            //{
            //    Address = DMT.InsertAddress(Latitude, Longitude);
            //}

            string host = DbConnectionDAL.GetStringScalarVal("select compurl from mastenviro").ToString();
            string path = "http://" + host;


            //if (image1.Contains("http://"))
            //{
            //    ImgUrl = image1.Replace(path, "~");
            //}
            //else

            if (objResponse.BODYLINE[0].IMAGE1 != "N/A")
            {
                //  imgurls = image1.Split();
                string[] imges = objResponse.BODYLINE[0].IMAGE1.Split(new string[] { "&dataman&" }, StringSplitOptions.None);
                imgurls = new string[imges.Length];
                for (int i = 0; i < imges.Length; i++)
                {

                    try
                    {


                        byte[] bytes = Convert.FromBase64String(imges[i]);

                        Image image;
                        using (MemoryStream ms = new MemoryStream(bytes))
                        {
                            image = Image.FromStream(ms);
                        }
                        string directoryPath = Server.MapPath(string.Format("~/{0}/", "DSRImages"));
                        if (!Directory.Exists(directoryPath))
                        {
                            Directory.CreateDirectory(directoryPath);
                        }
                        String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");


                        filename = Path.GetFileName(objResponse.BODYLINE[0].SYNCID + '-' + timeStamp);
                        {
                            //   dsrImgFileUpload.SaveAs(Server.MapPath("~/DSRImages" + "/C_" + filename));
                            //string filePath = Server.MapPath("~/DSRImages" + "/C_" + filename + ".png");
                            //File.WriteAllBytes(filePath, bytes);
                            //imgurls[i] = "~/DSRImages" + "/C_" + filename + ".png";


                            string filePath = Server.MapPath("~/DSRImages" + "/NewParty_" + filename + ".png");
                            File.WriteAllBytes(filePath, bytes);
                            imgurls[i] = "~/DSRImages" + "/NewParty_" + filename + ".png";
                        }
                    }
                    catch (Exception)
                    {
                        if (imges[i].Contains("http://"))
                        {
                            imgurls[i] = imges[i].Replace(path, "~");
                        }

                    }
                }
            }


            PartyBAL PB = new PartyBAL();
            int retval = 0;


            int smid = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT SMId FROM MastSalesRep WHERE UserId=" + objResponse.BODYLINE[0].USERID + ""));

            int RoleId = Convert.ToInt32(DbConnectionDAL.GetScalarValue(CommandType.Text, "SELECT RoleId FROM MastRole WHERE RoleType='Distributor'"));
            string msz = "Record Inserted Successfully";
            if (objResponse.BODYLINE[0].INDID == "")
            {
                objResponse.BODYLINE[0].INDID = "0";
            }
            //   string partyoffline = DbConnectionDAL.GetStringScalarVal("select PartyOffLine from mastenviro").ToString();



            if (Partytype_Name.ToUpper() == "INSTITUTIONAL")
            {


                retval = DB.UpdateDistributors(objResponse.BODYLINE[0].PARTYID, objResponse.BODYLINE[0].PARTYNAME, objResponse.BODYLINE[0].ADDRESS1, objResponse.BODYLINE[0].ADDRESS2, Convert.ToString(objResponse.BODYLINE[0].CITYID), objResponse.BODYLINE[0].PIN, objResponse.BODYLINE[0].EMAIL, objResponse.BODYLINE[0].MOBILE, objResponse.BODYLINE[0].REMARK, objResponse.BODYLINE[0].SYNCID, objResponse.BODYLINE[0].BLOCKREASON, objResponse.BODYLINE[0].MOBILE, objResponse.BODYLINE[0].ACTIVE, objResponse.BODYLINE[0].PHONE, RoleId, "", objResponse.BODYLINE[0].CSTNO, objResponse.BODYLINE[0].VATTIN, objResponse.BODYLINE[0].PANNO, 0, 0, 0, 0, objResponse.BODYLINE[0].USERID, "", "", objResponse.BODYLINE[0].PARTYNAME, smid, objResponse.BODYLINE[0].DOA, objResponse.BODYLINE[0].DOB, objResponse.BODYLINE[0].AREAID, "", "", objResponse.BODYLINE[0].PARTYTYPE, objResponse.BODYLINE[0].SERVICETAX);
                if (objResponse.BODYLINE[0].SYNCID == "")
                {
                    string syncid = "update MastParty set SyncId='" + retval + "' where partyId=" + retval + " And PartyDist=1";
                    DbConnectionDAL.ExecuteNonQuery(CommandType.Text, syncid);
                }

            }
            else
            {
                if (Convert.ToInt32(objResponse.BODYLINE[0].APPBLOCKBY) != 0)
                {

                }
                else
                {
                    objResponse.BODYLINE[0].APPBLOCKBY = "0";
                }
                retval = PB.UpdatePartyMobileForApproval(objResponse.BODYLINE[0].PARTYID, objResponse.BODYLINE[0].PARTYNAME, objResponse.BODYLINE[0].ADDRESS1, objResponse.BODYLINE[0].ADDRESS2, objResponse.BODYLINE[0].CITYID, objResponse.BODYLINE[0].AREAID, objResponse.BODYLINE[0].BEATID, objResponse.BODYLINE[0].UNDERID, objResponse.BODYLINE[0].PIN, objResponse.BODYLINE[0].MOBILE, objResponse.BODYLINE[0].PHONE, objResponse.BODYLINE[0].REMARK, objResponse.BODYLINE[0].SYNCID, objResponse.BODYLINE[0].INDID,
                    objResponse.BODYLINE[0].POTENTIAL, objResponse.BODYLINE[0].ACTIVE, objResponse.BODYLINE[0].BLOCKREASON, objResponse.BODYLINE[0].PARTYTYPE, objResponse.BODYLINE[0].CONTACTPERSON, objResponse.BODYLINE[0].CSTNO, objResponse.BODYLINE[0].VATTIN, objResponse.BODYLINE[0].SERVICETAX, objResponse.BODYLINE[0].PANNO, objResponse.BODYLINE[0].USERID, objResponse.BODYLINE[0].DOA, objResponse.BODYLINE[0].DOB, objResponse.BODYLINE[0].EMAIL,
                    "", objResponse.BODYLINE[0].GSTINNO, 0, objResponse.BODYLINE[0].APPSTATUS, Convert.ToInt32(objResponse.BODYLINE[0].APPBYUSERID), objResponse.BODYLINE[0].APPREMARK, Convert.ToInt32(objResponse.BODYLINE[0].APPBYSMID), objResponse.BODYLINE[0].ISBLOCK, objResponse.BODYLINE[0].APPBLOCKREMARK, objResponse.BODYLINE[0].APPBLOCKSTATUS, Convert.ToInt32(objResponse.BODYLINE[0].APPBLOCKBY));

            }


            DbConnectionDAL.ExecuteNonQuery(CommandType.Text, "Delete from MastPartyImage where PartyId=" + objResponse.BODYLINE[0].PARTYID + " ");
            for (int i = 0; i < imgurls.Length; i++)
            {
                str = "INSERT INTO dbo.MastPartyImage ( ImgUrl,PartyId) VALUES ('" + imgurls[i] + "'," + objResponse.BODYLINE[0].PARTYID + ")";
                DbConnectionDAL.ExecuteNonQuery(CommandType.Text, str);

            }


            #region SentNotification
            try
            {

                if (RetailerCreationApproval == true && Partytype_Name.ToUpper() != "INSTITUTIONAL")
                {
                    string displaytitle = ""; string title = "";
                    string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
                    string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from MastParty where Partyid=" + retval + ""));
                    DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID,mobile ,SMName ,userid from mastsalesrep where userid=" + objResponse.BODYLINE[0].USERID + "");

                    DataTable dtappuser = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid from mastsalesrep where userid=" + objResponse.BODYLINE[0].APPBYUSERID + "");

                    if (dtgrpsmid.Rows.Count > 0)
                    {
                        string pro_id = "PARTYAPPROVED";
                        string sql_getsenior = "select smid,Mobile,userid from mastsalesrep where SMName<>'.'  and  smid in (select MainGrp from mastsalesrepgrp where smid=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " and Level<=(select level from mastsalesrepgrp where smid=" + dtgrpsmid.Rows[0]["Smid"].ToString() + " and MainGrp=" + dtgrpsmid.Rows[0]["Smid"].ToString() + "))";
                        DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                        if (dt_getsenior.Rows.Count > 0)
                        {
                            //for (int k = 0; k < dt_getsenior.Rows.Count; k++)
                            //{

                            //if (PartyId != 0)
                            //{
                            //    displaytitle = PartyName + " -  Party Modified by " + dtgrpsmid.Rows[0]["SMName"].ToString() + "";
                            //    title = " Party Modified";
                            //}
                            //else
                            //{
                            if (objResponse.BODYLINE[0].APPSTATUS == "Approve")
                            {


                                displaytitle = objResponse.BODYLINE[0].PARTYNAME + " - Outlet approved by " + dtappuser.Rows[0]["SMName"].ToString() + "";
                                title = " Outlet Approved";
                            }
                            else
                            {
                                displaytitle = objResponse.BODYLINE[0].PARTYNAME + " - Outlet rejected by " + dtappuser.Rows[0]["SMName"].ToString() + "";
                                title = " Outlet Rejected";
                            }
                            //}


                            lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dtgrpsmid.Rows[0]["userid"].ToString()), Convert.ToDateTime(createdatetime)
                                , "PartyMasterAstral.aspx?PartyId=" + retval + "&REQ=PRA", displaytitle, 0,
                                Convert.ToInt32(dtappuser.Rows[0]["userid"].ToString()), Convert.ToInt32(dtappuser.Rows[0]["SMID"].ToString())
                                , Convert.ToInt32(dtgrpsmid.Rows[0]["smid"].ToString()));

                            if (!string.IsNullOrEmpty(dtgrpsmid.Rows[0]["mobile"].ToString()))
                            {
                                cls.pushnotificationforPartyCreation(displaytitle, compcode,
                                    dtgrpsmid.Rows[0]["mobile"].ToString(),
                                  title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                    dtgrpsmid.Rows[0]["SMName"].ToString(), "FFMS", retval.ToString());

                                //cls.pushnotificationforPartyCreation(displaytitle, compcode,
                                //   dt_getsenior.Rows[k]["mobile"].ToString(),
                                //  title, dtgrpsmid.Rows[0]["SMID"].ToString(),
                                //   dtgrpsmid.Rows[0]["SMName"].ToString(), "CRM MANAGER", retval.ToString());
                            }
                            //  }
                        }



                    }
                }
                else
                {

                    //Line file mismatch
                    //Status = "400";
                    // HeaderMsz = HeaderMsz + " - Line File Mismatch : Header Line Count: " + HeaderLineCOunt + " and LineFileCount: " + (Convert.ToInt32(Line_seqNo) + 1).ToString();
                }


            }
            catch (Exception ex)
            {
                //  Line_Status = "200"; // status is set 200 becoz order is saved but exception in sending notification.
                // LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();

                // Status = "400";
                // HeaderMsz = HeaderMsz + " : " + LineMsz;
            }

            #endregion

            #region SentNotificationFORBLOCK

            try
            {
                if (objResponse.BODYLINE[0].APPBLOCKREMARK == null)
                {
                    objResponse.BODYLINE[0].APPBLOCKREMARK = "";
                }

                if (RetailerCreationApproval == true && Partytype_Name.ToUpper() != "INSTITUTIONAL" && objResponse.BODYLINE[0].APPBLOCKREMARK != "")
                {


                    string displaytitle = ""; string title = "";
                    string compcode = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select CompCode From MastEnviro"));
                    string createdatetime = Convert.ToString(DbConnectionDAL.GetScalarValue(CommandType.Text, "Select Created_date from MastParty where Partyid=" + retval + ""));
                    //   DataTable dtgrpsmid = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName,mobile ,userid,UnderId from mastsalesrep where userid=" + UserId + "");


                    DataTable dtappuser = DbConnectionDAL.GetDataTable(CommandType.Text, "Select SMID ,SMName ,userid from mastsalesrep where userid=" + objResponse.BODYLINE[0].APPBYUSERID + "");

                    if (dtappuser.Rows.Count > 0)
                    {
                        string pro_id = "PARTYBAPPROVED";
                        //   string sql_getsenior = "select smid,Mobile,userid from mastsalesrep where smid in (select MainGrp from mastsalesrepgrp 
                        //where smid=" + dtappuser.Rows[0]["Smid"].ToString() + " and Level<=(select level from mastsalesrepgrp where smid=" + dtappuser.Rows[0]["Smid"].ToString() + " and MainGrp=" + dtappuser.Rows[0]["Smid"].ToString() + "))";

                        string sql_getsenior = @"select SMName, smid,Mobile,userid from mastsalesrep where smid in (select maingrp from mastsalesrepgrp where smid in (" + dtappuser.Rows[0]["Smid"].ToString() + ") union  SELECT smid FROM mastsalesrepgrp WHERE  maingrp in (" + dtappuser.Rows[0]["Smid"].ToString() + ")) and active=1 and SMName<>'.' ";
                        DataTable dt_getsenior = DbConnectionDAL.GetDataTable(CommandType.Text, sql_getsenior);
                        if (dt_getsenior.Rows.Count > 0)
                        {
                            for (int k = 0; k < dt_getsenior.Rows.Count; k++)
                            {


                                if (objResponse.BODYLINE[0].APPBLOCKSTATUS == "Approve")
                                {


                                    displaytitle = objResponse.BODYLINE[0].PARTYNAME + " - Outlet Block approved by " + dtappuser.Rows[0]["SMName"].ToString() + "";
                                    title = " Outlet Block Approved";
                                }
                                else
                                {
                                    displaytitle = objResponse.BODYLINE[0].PARTYNAME + " - Outlet Block rejected by " + dtappuser.Rows[0]["SMName"].ToString() + "";
                                    title = " Outlet Block Rejected";
                                }
                                //}


                                lvAll.InsertTransNotification(pro_id, Convert.ToInt32(dt_getsenior.Rows[k]["userid"].ToString()), Convert.ToDateTime(createdatetime)
                                    , "PartyMasterAstral.aspx?PartyId=" + retval + "&REQ=PRAB", displaytitle, 0,
                                    Convert.ToInt32(dtappuser.Rows[0]["userid"].ToString()), Convert.ToInt32(dtappuser.Rows[0]["SMID"].ToString())
                                    , Convert.ToInt32(dt_getsenior.Rows[k]["smid"].ToString()));

                                if (!string.IsNullOrEmpty(dt_getsenior.Rows[0]["mobile"].ToString()))
                                {
                                    cls.pushnotificationforPartyCreation(displaytitle, compcode,
                                        dt_getsenior.Rows[k]["mobile"].ToString(),
                                      title, dt_getsenior.Rows[k]["SMID"].ToString(),
                                        dt_getsenior.Rows[k]["SMName"].ToString(), "FFMS", retval.ToString());

                                    cls.pushnotificationforPartyCreation(displaytitle, compcode,
                                       dt_getsenior.Rows[k]["mobile"].ToString(),
                                      title, dt_getsenior.Rows[k]["SMID"].ToString(),
                                       dt_getsenior.Rows[k]["SMName"].ToString(), "CRM MANAGER", retval.ToString());
                                }
                            }
                        }



                    }



                    else
                    {


                    }
                }

            }
            catch (Exception ex)
            {
                //  Line_Status = "200"; // status is set 200 becoz order is saved but exception in sending notification.
                // LineMsz = "Error While Inserting ItemId " + Line_ItemId + "  :  " + ex.ToString();

                // Status = "400";
                // HeaderMsz = HeaderMsz + " : " + LineMsz;
            }
            #endregion

            if (retval == -1)
            { msz = "Duplicate Party Exists"; }
            else if (retval == -3)
            { msz = "Duplicate Mobile Exists"; }
            else if (retval == -4)
            {
                msz = "Duplicate GSTNo Exists";

            }
            else
            {
                string sqlupdate = "update mastparty set android_id='" + objResponse.BODYLINE[0].ANDROIDID + "', Longitude = '" + objResponse.BODYLINE[0].LONGITUDE + "',Latitude='" + objResponse.BODYLINE[0].LATITUDE + "',Address='" + Address + "',Lat_long_datetime = '" + minDate1 + "',ImgUrl='" + objResponse.BODYLINE[0].IMGURL + "',GSTINNo='" + objResponse.BODYLINE[0].CSTNO + "' where partyid=" + objResponse.BODYLINE[0].PARTYID + " ";
                if (DbConnectionDAL.ExecuteQuery(sqlupdate) == 1)
                { chk = "2"; }
            }
            if (retval > 0)
            {
                if (chk == "1")
                { msz = "Record Inserted Successfully"; _partyId = retval.ToString(); }
                else if (chk == "2")
                { msz = "Record Updated Successfully"; _partyId = objResponse.BODYLINE[0].PARTYID.ToString(); }

                qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where android_id='" + objResponse.BODYLINE[0].ANDROIDID + "' ";

                //Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();
            }
            else
            {
                qry = "Select (CAST(DATEDIFF(second, '1970-01-01 05:30:00', CAST(Created_Date AS date)) AS bigint)*1000)  + DATEDIFF(ms, CAST(Created_Date AS date), Created_Date)   AS [Milliseconds]  from  [MastParty] where mobile='" + objResponse.BODYLINE[0].MOBILE + "' ";
            }
            Millisecond = DbConnectionDAL.GetScalarValue(CommandType.Text, qry).ToString();

            List<Party> rst = new List<Party>();
            {
                rst.Add(
                    new Party
                    {
                        //Id = retval.ToString(),
                        ID = _partyId,
                        STATUS = msz,
                        MS = Millisecond
                    }
                );
            }
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ManagerApp_JSGetAllBeatUnderUser_V2(string SMID, string MATCH)
        {

            string str = "";

            if (MATCH != "")
            {
                str = @"SELECT MAX(MP.BEATID) AS BTID,MAX(MP.AREAID) AS ARID,MAX(MP.CITYID) AS CTID,
(MAX(MR.AREANAME)+'-'+MAX(MAR.AREANAME)+'-'+MAX(MSTAR.AREANAME)) AS NAME FROM [MASTPARTY] MP 
LEFT JOIN MASTSALESREP MS1 ON MS1.USERID=MP.CREATED_USER_ID LEFT JOIN MASTAREA MAR ON MP.AREAID=MAR.AREAID LEFT JOIN MASTAREA MR ON MP.BEATID=MR.AREAID 
LEFT JOIN MASTAREA MSTAR ON MP.CITYID=MSTAR.AREAID WHERE  MP.AREAID IN (SELECT LINKCODE FROM MASTLINK WHERE PRIMCODE IN (SELECT DISTINCT SMID FROM MASTSALESREPGRP WHERE SMID IN (SELECT SMID FROM MASTSALESREPGRP 
WHERE MAINGRP IN (" + SMID + ")) AND  LEVEL> (SELECT DISTINCT LEVEL FROM MASTSALESREPGRP WHERE MAINGRP IN (" + SMID + " ))) ) AND MP.PARTYDIST=0 AND MP.APPSTATUS='APPROVE'  AND (MR.AREANAME LIKE '%" + MATCH + "%' OR MAR.AREANAME LIKE '%" + MATCH + "%' OR MSTAR.AREANAME LIKE '%" + MATCH + "%') GROUP BY MP.BEATID";
            }
            else
            {
                str = @"SELECT MAX(MP.BEATID) AS BTID,MAX(MP.AREAID) AS ARID,MAX(MP.CITYID) AS CTID,
(MAX(MR.AREANAME)+'-'+MAX(MAR.AREANAME)+'-'+MAX(MSTAR.AREANAME)) AS NAME FROM [MASTPARTY] MP 
LEFT JOIN MASTSALESREP MS1 ON MS1.USERID=MP.CREATED_USER_ID
LEFT JOIN MASTAREA MAR ON MP.AREAID=MAR.AREAID LEFT JOIN MASTAREA MR ON MP.BEATID=MR.AREAID 
LEFT JOIN MASTAREA MSTAR ON MP.CITYID=MSTAR.AREAID 
WHERE  MP.AREAID IN (SELECT LINKCODE FROM MASTLINK WHERE PRIMCODE IN (SELECT DISTINCT SMID FROM MASTSALESREPGRP WHERE SMID IN (SELECT SMID FROM MASTSALESREPGRP 
WHERE MAINGRP IN (" + SMID + ")) AND  LEVEL> (SELECT DISTINCT LEVEL FROM MASTSALESREPGRP WHERE MAINGRP IN (" + SMID + " ))) ) AND MP.PARTYDIST=0 AND MP.APPSTATUS='APPROVE'  GROUP BY MP.BEATID";
            }
            //        str = @"SELECT Max(mp.BeatId) AS BEAT_ID,Max(mp.AreaId) AS AREA_ID,Max(mp.CityId) AS CITY_ID,
            //(Max(mr.AreaName)+'-'+Max(mar.AreaName)+'-'+Max(mstar.AreaName)) AS LIST from [MastParty] mp 
            //Left Join MastArea mar on mp.AreaId=mar.AreaId Left Join MastArea mr on mp.BeatId=mr.AreaId 
            //Left Join MastArea mstar on mp.CityId=mstar.AreaId 
            //where mp.AppStatus='Approve' and  mp.AreaId in (select DISTINCT AreaId FROM [MastParty] 
            //where SMID in (SELECT SMId FROM MastSalesRepGrp WHERE maingrp=" + Smid + "   AND (mr.AreaName LIKE '%" + match + "%' or mar.AreaName LIKE '%" + match + "%' OR mstar.AreaName LIKE '%" + match + "%'))) and mp.Lvl=2 group by mp.BeatId";
            DataTable dt = new DataTable();
            dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            //List<GetUnderUsers> rst = new List<GetUnderUsers>();
            //for (int i = 0; i <= (dt.Rows.Count - 1); i++)
            //{
            //    rst.Add(
            //        new GetUnderUsers
            //        {
            //            BtId = dt.Rows[i]["BEAT_ID"].ToString(),
            //            ArId = dt.Rows[i]["AREA_ID"].ToString(),
            //            CtId = dt.Rows[i]["CITY_ID"].ToString(),
            //            Name = dt.Rows[i]["LIST"].ToString()
            //        }
            //    );
            //}
            Context.Response.Write(JsonConvert.SerializeObject(dt));
            dt.Dispose();
        }

        [DataContract]
        public class EnviroSetting
        {

            [DataMember]
            public string USECAMERA { get; set; }
            [DataMember]
            public string EMPGRACEDAYS { get; set; }
            [DataMember]
            public string PARTYCAPTION { get; set; }
            [DataMember]
            public string DISTSEARCH { get; set; }
            [DataMember]
            public string ITEMSEARCH { get; set; }
            [DataMember]
            public string ITEMWISESALE { get; set; }
            [DataMember]
            public string AREAWISEDISTRIBUTOR { get; set; }
            [DataMember]
            public string HOST { get; set; }
            [DataMember]
            public string USERNAME { get; set; }
            [DataMember]
            public string PASSWORD { get; set; }
            [DataMember]
            public string PORT { get; set; }
            [DataMember]
            public string FTP_DIRECTORY { get; set; }
            [DataMember]
            public string IMAGE_DIRECTORY_NAME { get; set; }
            [DataMember]
            public string DISTDISCUSSIONSTOCK { get; set; }
            [DataMember]
            public string DSRREMARKMANDATORY { get; set; }
            [DataMember]
            public string DSRENTRY_WITHWHOM { get; set; }
            [DataMember]
            public string DSRENTRY_NEXTVISITWITHWHOM { get; set; }
            [DataMember]
            public string DSRENTRY_NEXTVISITDATE { get; set; }
            [DataMember]
            public string DSRENTRY_RETAILERORDERBYEMAIL { get; set; }
            [DataMember]
            public string DSRENTRY_RETAILERORDERBYPHONE { get; set; }
            [DataMember]
            public string DSRENTRY_REMARKS { get; set; }
            [DataMember]
            public string DSRENTRY_EXPENSESFROMAREA { get; set; }
            [DataMember]
            public string DSRENTRY_VISITTYPE { get; set; }
            [DataMember]
            public string DSRENTRY_ATTENDANCE { get; set; }
            [DataMember]
            public string DSRENTRY_OTHEREXPENSES { get; set; }
            [DataMember]
            public string DSRENTRY_OTHEREXPENSESREMARKS { get; set; }
            [DataMember]
            public string DSRENTRY_WITHWHOM_RQ { get; set; }
            [DataMember]
            public string DSRENTRY_NEXTVISITWITHWHOM_RQ { get; set; }
            [DataMember]
            public string DSRENTRY_NEXTVISITDATE_RQ { get; set; }
            [DataMember]
            public string DSRENTRY_RETAILERORDERBYEMAIL_RQ { get; set; }
            [DataMember]
            public string DSRENTRY_RETAILERORDERBYPHONE_RQ { get; set; }
            [DataMember]
            public string DSRENTRY_REMARKS_RQ { get; set; }
            [DataMember]
            public string DSRENTRY_EXPENSESFROMAREA_RQ { get; set; }
            [DataMember]
            public string DSRENTRY_VISITTYPE_RQ { get; set; }
            [DataMember]
            public string DSRENTRY_ATTENDANCE_RQ { get; set; }
            [DataMember]
            public string DSRENTRY_OTHEREXPENSES_RQ { get; set; }
            [DataMember]
            public string DSRENTRY_OTHEREXPENSESREMARKS_RQ { get; set; }
            [DataMember]
            public string DSRENTRY_EXPENSETOAREA { get; set; }
            [DataMember]
            public string DSRENTRY_EXPENSETOAREA_REQ { get; set; }
            [DataMember]
            public string DSRENTRY_CHARGEABLE { get; set; }
            [DataMember]
            public string DSRENTRY_CHARGEABLE_REQ { get; set; }
            [DataMember]
            public string SHOW_PARTYCOLLECTION { get; set; }
            [DataMember]
            public string CHECKTRANSACTIONFORLOCK { get; set; }
            [DataMember]
            public string SHOW_GENERATEPDF { get; set; }
            [DataMember]
            public string PARTYMASTER_MOBILE_REQ { get; set; }
            [DataMember]
            public string DSR_COMPETITOR_STDPCK_REQ { get; set; }
            [DataMember]
            public string NOTIFICATIONINTERVAL_ANDROID { get; set; }
            [DataMember]
            public string PRIMARY_DISC_NEXTVDATE { get; set; }
            [DataMember]
            public string PRIMARY_DISC_NEXTVDATE_REQ { get; set; }
            [DataMember]
            public string PRIMARY_DISC_REMARK { get; set; }
            [DataMember]
            public string PRIMARY_DISC_REMARK_REQ { get; set; }
            [DataMember]
            public string PRIMARY_FAILEDVISIT_NEXTVDATE { get; set; }
            [DataMember]
            public string PRIMARY_FAILEDVISIT_NEXTVDATE_REQ { get; set; }
            [DataMember]
            public string PRIMARY_FAILEDVISIT_REMARK { get; set; }
            [DataMember]
            public string PRIMARY_FAILEDVISIT_REMARK_REQ { get; set; }
            [DataMember]
            public string PRIMARY_COLLECTION_REMARK { get; set; }
            [DataMember]
            public string PRIMARY_COLLECTION_REMARK_REQ { get; set; }
            [DataMember]
            public string SEC_BOOKORDREMARKITEM { get; set; }
            [DataMember]
            public string SEC_BOOKORDREMARKITEM_REQ { get; set; }
            [DataMember]
            public string SEC_BOOKORDREMARK { get; set; }
            [DataMember]
            public string SEC_BOOKORDREMARK_REQ { get; set; }
            [DataMember]
            public string SEC_DEMOENTRYREMARK { get; set; }
            [DataMember]
            public string SEC_DEMOENTRYREMARK_REQ { get; set; }
            [DataMember]
            public string SEC_FAILEDVISIT_NEXTVDATE { get; set; }
            [DataMember]
            public string SEC_FAILEDVISIT_NEXTVDATEREQ { get; set; }
            [DataMember]
            public string PRIMARY_DISC_NEXTVTIME { get; set; }
            [DataMember]
            public string PRIMARY_DISC_NEXTVTIME_REQ { get; set; }
            [DataMember]
            public string DSRENTRY_ATTENDANCEBYPHOTO { get; set; }
            [DataMember]
            public string DSRENTRY_ATTENDANCEBYPHOTO_REQ { get; set; }
            [DataMember]
            public string DSRENTRY_ATTENDANCEBYORDER { get; set; }
            [DataMember]
            public string DSRENTRY_ATTENDANCEBYORDER_REQ { get; set; }
            [DataMember]
            public string DSRENTRY_ATTENDANCEMANNUAL { get; set; }
            [DataMember]
            public string DSRENTRY_ATTENDANCEMANNUALREQ { get; set; }
            [DataMember]
            public string SEC_ORDER_RATE_EDITABLE { get; set; }
            [DataMember]
            public string PURCHASE_ORDER_RATE_EDITABLE { get; set; }
            [DataMember]
            public string PARTYCREDITLIMITVISIBILITY { get; set; }
            [DataMember]
            public string PARTYOUTSTANDINGVISIBILITY { get; set; }
            [DataMember]
            public string DISTRIBUTORWISERETAILER { get; set; }
            [DataMember]
            public string DISCAPPLICABLE { get; set; }
            [DataMember]
            public string SPLASHSCREENIMAGEURL { get; set; }
            [DataMember]
            public string SHOWDISPATCHINFO { get; set; }
            [DataMember]
            public string PARTYOFFLINE { get; set; }
            [DataMember]
            public string PRICELISTAPPLICABILITY { get; set; }
            [DataMember]
            public string DISTANCEAPIKEY { get; set; }
            [DataMember]
            public string RECORDLOG { get; set; }
            [DataMember]
            public string EXPORTLOGSMIDS { get; set; }
            [DataMember]
            public string PRODUCTCODE { get; set; }
            [DataMember]
            public string COMPCODE { get; set; }

            [DataMember]
            public string RETAILERCREATIONAPPROVAL { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void JSGetEnviroSetting()
        {
            //string str = "Select EmpGraceDays,DistSearchByName,ItemSearchByName,ItemwiseSeconadarySales,AreawiseDistributor,Host,UserName,Password,PortServer, FTP_DIRECTORY,IMAGE_DIRECTORY_NAME,DistDiscussionStock,DsrRemarkMandatory, PartyCaption from MastEnviro";
            string str = "Select * from MastEnviro";
            DataTable dt = DbConnectionDAL.GetDataTable(CommandType.Text, str);

            List<EnviroSetting> rst = new List<EnviroSetting>();
            {
                rst.Add(
                    new EnviroSetting
                    {
                        DISTSEARCH = dt.Rows[0]["DistSearchByName"].ToString(),
                        ITEMSEARCH = dt.Rows[0]["ItemSearchByName"].ToString(),
                        ITEMWISESALE = dt.Rows[0]["ItemwiseSeconadarySales"].ToString(),
                        AREAWISEDISTRIBUTOR = dt.Rows[0]["AreawiseDistributor"].ToString(),
                        HOST = dt.Rows[0]["Host"].ToString(),
                        USERNAME = dt.Rows[0]["UserName"].ToString(),
                        PASSWORD = dt.Rows[0]["Password"].ToString(),
                        PORT = dt.Rows[0]["PortServer"].ToString(),
                        FTP_DIRECTORY = dt.Rows[0]["FTP_DIRECTORY"].ToString(),
                        IMAGE_DIRECTORY_NAME = dt.Rows[0]["IMAGE_DIRECTORY_NAME"].ToString(),
                        DISTDISCUSSIONSTOCK = dt.Rows[0]["DistDiscussionStock"].ToString(),
                        DSRREMARKMANDATORY = dt.Rows[0]["DsrRemarkMandatory"].ToString(),
                        EMPGRACEDAYS = dt.Rows[0]["EmpGraceDays"].ToString(),
                        PARTYCAPTION = dt.Rows[0]["PartyCaption"].ToString(),
                        DSRENTRY_WITHWHOM = dt.Rows[0]["DSREntry_WithWhom"].ToString(),
                        DSRENTRY_NEXTVISITWITHWHOM = dt.Rows[0]["DSREntry_NextVisitWithWhom"].ToString(),
                        DSRENTRY_NEXTVISITDATE = dt.Rows[0]["DSREntry_NextVisitDate"].ToString(),
                        DSRENTRY_RETAILERORDERBYEMAIL = dt.Rows[0]["DSREntry_RetailerOrderByEmail"].ToString(),
                        DSRENTRY_RETAILERORDERBYPHONE = dt.Rows[0]["DSREntry_RetailerOrderByPhone"].ToString(),
                        DSRENTRY_REMARKS = dt.Rows[0]["DSREntry_Remarks"].ToString(),
                        DSRENTRY_EXPENSESFROMAREA = dt.Rows[0]["DSREntry_ExpensesFromArea"].ToString(),
                        DSRENTRY_VISITTYPE = dt.Rows[0]["DSREntry_VisitType"].ToString(),
                        DSRENTRY_ATTENDANCE = dt.Rows[0]["DSREntry_Attendance"].ToString(),
                        DSRENTRY_OTHEREXPENSES = dt.Rows[0]["DSREntry_OtherExpenses"].ToString(),
                        DSRENTRY_OTHEREXPENSESREMARKS = dt.Rows[0]["DSREntry_OtherExpensesRemarks"].ToString(),
                        DSRENTRY_WITHWHOM_RQ = dt.Rows[0]["DSREntry_WithWhom_Rq"].ToString(),
                        DSRENTRY_NEXTVISITWITHWHOM_RQ = dt.Rows[0]["DSREntry_NextVisitWithWhom_Rq"].ToString(),
                        DSRENTRY_NEXTVISITDATE_RQ = dt.Rows[0]["DSREntry_NextVisitDate_Rq"].ToString(),
                        DSRENTRY_RETAILERORDERBYEMAIL_RQ = dt.Rows[0]["DSREntry_RetailerOrderByEmail_Rq"].ToString(),
                        DSRENTRY_RETAILERORDERBYPHONE_RQ = dt.Rows[0]["DSREntry_RetailerOrderByPhone_Rq"].ToString(),
                        DSRENTRY_REMARKS_RQ = dt.Rows[0]["DSREntry_Remarks_Rq"].ToString(),
                        DSRENTRY_EXPENSESFROMAREA_RQ = dt.Rows[0]["DSREntry_ExpensesFromArea_Rq"].ToString(),
                        DSRENTRY_VISITTYPE_RQ = dt.Rows[0]["DSREntry_VisitType_Rq"].ToString(),
                        DSRENTRY_ATTENDANCE_RQ = dt.Rows[0]["DSREntry_Attendance_Rq"].ToString(),
                        DSRENTRY_OTHEREXPENSES_RQ = dt.Rows[0]["DSREntry_OtherExpenses_Rq"].ToString(),
                        DSRENTRY_OTHEREXPENSESREMARKS_RQ = dt.Rows[0]["DSREntry_OtherExpensesRemarks_Rq"].ToString(),
                        DSRENTRY_EXPENSETOAREA = dt.Rows[0]["DSRENTRY_ExpenseToArea"].ToString(),
                        DSRENTRY_EXPENSETOAREA_REQ = dt.Rows[0]["DSRENTRY_ExpenseToArea_req"].ToString(),
                        DSRENTRY_CHARGEABLE = dt.Rows[0]["DSRENTRY_Chargeable"].ToString(),
                        DSRENTRY_CHARGEABLE_REQ = dt.Rows[0]["DSRENTRY_Chargeable_req"].ToString(),
                        SHOW_PARTYCOLLECTION = dt.Rows[0]["Show_PartyCollection"].ToString(),
                        CHECKTRANSACTIONFORLOCK = dt.Rows[0]["CheckTransactionForLock"].ToString(),
                        SHOW_GENERATEPDF = dt.Rows[0]["Show_GeneratePDF"].ToString(),
                        USECAMERA = dt.Rows[0]["UseCamera"].ToString(),
                        PARTYMASTER_MOBILE_REQ = dt.Rows[0]["PartyMaster_Mobile_Req"].ToString(),
                        DSR_COMPETITOR_STDPCK_REQ = dt.Rows[0]["DSR_Competitor_StdPck_Req"].ToString(),
                        NOTIFICATIONINTERVAL_ANDROID = dt.Rows[0]["NotificationInterval_Android"].ToString(),
                        PRIMARY_DISC_NEXTVDATE = dt.Rows[0]["PrimaryDistributorDis_NextVisitDate"].ToString(),
                        PRIMARY_DISC_NEXTVDATE_REQ = dt.Rows[0]["PrimaryDistributorDis_NextVisitDate_Rq"].ToString(),
                        PRIMARY_DISC_NEXTVTIME = dt.Rows[0]["PrimaryDistributorDis_NextVisitTime"].ToString(),
                        PRIMARY_DISC_NEXTVTIME_REQ = dt.Rows[0]["PrimaryDistributorDis_NextVisitTime_Rq"].ToString(),
                        PRIMARY_FAILEDVISIT_NEXTVDATE = dt.Rows[0]["primaryfailedvisit_nextvisitdate"].ToString(),
                        PRIMARY_FAILEDVISIT_NEXTVDATE_REQ = dt.Rows[0]["primaryfailedvisit_nextvisitdate_rq"].ToString(),
                        DSRENTRY_ATTENDANCEBYPHOTO = dt.Rows[0]["AttByPhoto"].ToString(),
                        DSRENTRY_ATTENDANCEBYPHOTO_REQ = dt.Rows[0]["AttByPhoto_Rq"].ToString(),
                        DSRENTRY_ATTENDANCEBYORDER = dt.Rows[0]["AttByFirstLastOrder"].ToString(),
                        DSRENTRY_ATTENDANCEBYORDER_REQ = dt.Rows[0]["AttByFirstLastOrder_Rq"].ToString(),
                        DSRENTRY_ATTENDANCEMANNUAL = dt.Rows[0]["attbymanual"].ToString(),
                        DSRENTRY_ATTENDANCEMANNUALREQ = dt.Rows[0]["AttByManual_Rq"].ToString(),
                        SEC_ORDER_RATE_EDITABLE = dt.Rows[0]["Sec_Order_Rate_Editable"].ToString(),
                        PURCHASE_ORDER_RATE_EDITABLE = dt.Rows[0]["Pri_Order_Rate_Editable"].ToString(),
                        PARTYCREDITLIMITVISIBILITY = dt.Rows[0]["PartyCreditlimitVisibility"].ToString(),
                        PARTYOUTSTANDINGVISIBILITY = dt.Rows[0]["PartyOutstandingVisibility"].ToString(),
                        DISTRIBUTORWISERETAILER = dt.Rows[0]["distributorwiseretailer"].ToString(),
                        DISCAPPLICABLE = dt.Rows[0]["DiscApplicable"].ToString(),
                        SHOWDISPATCHINFO = dt.Rows[0]["showDispatchInfo"].ToString(),
                        SPLASHSCREENIMAGEURL = dt.Rows[0]["SplashScreenImageUrl"].ToString(),
                        PARTYOFFLINE = dt.Rows[0]["PartyOffline"].ToString(),
                        PRICELISTAPPLICABILITY = dt.Rows[0]["PriceListApplicability"].ToString(),
                        DISTANCEAPIKEY = dt.Rows[0]["DistanceAPIKey"].ToString(),
                        RECORDLOG = dt.Rows[0]["RecordLog"].ToString(),
                        EXPORTLOGSMIDS = dt.Rows[0]["EXPORTLOGSMIDS"].ToString(),
                        PRODUCTCODE = dt.Rows[0]["productcode"].ToString(),
                        COMPCODE = dt.Rows[0]["compcode"].ToString(),
                        RETAILERCREATIONAPPROVAL = dt.Rows[0]["RetailerCreationApproval"].ToString()


                    }
                );
            }
            dt.Dispose();
            Context.Response.Write(JsonConvert.SerializeObject(rst));
        }

        #endregion

    }
}
