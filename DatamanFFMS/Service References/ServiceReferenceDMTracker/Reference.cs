//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AstralFFMS.ServiceReferenceDMTracker {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceDMTracker.WebServiceSoap")]
    public interface WebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertPersonLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InsertPersonLicense(string compcode, string DeviceID, string PersonName, string URL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertPersonLicense", ReplyAction="*")]
        System.Threading.Tasks.Task<string> InsertPersonLicenseAsync(string compcode, string DeviceID, string PersonName, string URL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertPersonLicenseforFFMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InsertPersonLicenseforFFMS(string compcode, string DeviceID, string PersonName, string URL, string mob);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertPersonLicenseforFFMS", ReplyAction="*")]
        System.Threading.Tasks.Task<string> InsertPersonLicenseforFFMSAsync(string compcode, string DeviceID, string PersonName, string URL, string mob);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Insert_GrahaakLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Insert_GrahaakLicense(string compcode, string DeviceID, string PersonName, string URL, string mob, string product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Insert_GrahaakLicense", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Insert_GrahaakLicenseAsync(string compcode, string DeviceID, string PersonName, string URL, string mob, string product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Update_GrahaakLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Update_GrahaakLicense(string compcode, string DeviceID, string PersonName, string URL, string mob, string active, string olddevice, bool mobileaccess, string product, string hdnoldMobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Update_GrahaakLicense", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Update_GrahaakLicenseAsync(string compcode, string DeviceID, string PersonName, string URL, string mob, string active, string olddevice, bool mobileaccess, string product, string hdnoldMobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePersonLicenseForFFms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdatePersonLicenseForFFms(string NewDeviceID, string OldDeviceID, string PersonName, string active, string mob);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePersonLicenseForFFms", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdatePersonLicenseForFFmsAsync(string NewDeviceID, string OldDeviceID, string PersonName, string active, string mob);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeletePersonLicenseForFFMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeletePersonLicenseForFFMS(string DeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeletePersonLicenseForFFMS", ReplyAction="*")]
        System.Threading.Tasks.Task DeletePersonLicenseForFFMSAsync(string DeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePersonLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdatePersonLicense(string NewDeviceID, string OldDeviceID, string PersonName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePersonLicense", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdatePersonLicenseAsync(string NewDeviceID, string OldDeviceID, string PersonName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeletePersonLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeletePersonLicense(string DeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeletePersonLicense", ReplyAction="*")]
        System.Threading.Tasks.Task DeletePersonLicenseAsync(string DeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DMTApp_updateRegId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DMTApp_updateRegId(string Reg_ID, string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DMTApp_updateRegId", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DMTApp_updateRegIdAsync(string Reg_ID, string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GFFT_updateRegId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GFFT_updateRegId(string Reg_ID, string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GFFT_updateRegId", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GFFT_updateRegIdAsync(string Reg_ID, string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveLicense_Tracker", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SaveLicense_Tracker(string compcode, string DeviceID, string PersonName, string URL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveLicense_Tracker", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SaveLicense_TrackerAsync(string compcode, string DeviceID, string PersonName, string URL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateLicense_Tracker", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateLicense_Tracker(string PersonName, string Oldmobile, string Newmobile, string Active);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateLicense_Tracker", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateLicense_TrackerAsync(string PersonName, string Oldmobile, string Newmobile, string Active);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DMTApp_GetRegistrationId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DMTApp_GetRegistrationId(string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DMTApp_GetRegistrationId", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DMTApp_GetRegistrationIdAsync(string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DMTApp_GetLicenseInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DMTApp_GetLicenseInfo(string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DMTApp_GetLicenseInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DMTApp_GetLicenseInfoAsync(string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EnablePersonLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void EnablePersonLicense(string DeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EnablePersonLicense", ReplyAction="*")]
        System.Threading.Tasks.Task EnablePersonLicenseAsync(string DeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/JGetLicenseDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void JGetLicenseDetail(string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/JGetLicenseDetail", ReplyAction="*")]
        System.Threading.Tasks.Task JGetLicenseDetailAsync(string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLicenseDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetLicenseDetail(string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLicenseDetail", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetLicenseDetailAsync(string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateTrackerImeiByMobile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode UpdateTrackerImeiByMobile(string Mobile, string IMEI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateTrackerImeiByMobile", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> UpdateTrackerImeiByMobileAsync(string Mobile, string IMEI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/requestOTP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode requestOTP(string Mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/requestOTP", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> requestOTPAsync(string Mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/verifyOTP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode verifyOTP(string Mobile, string OTP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/verifyOTP", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> verifyOTPAsync(string Mobile, string OTP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetValidOrg", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetValidOrg(string Organisation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetValidOrg", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetValidOrgAsync(string Organisation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetVastralayaUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode SetVastralayaUser(string Organisation, string Product, string Username, string Mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetVastralayaUser", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SetVastralayaUserAsync(string Organisation, string Product, string Username, string Mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLicenseDetailForFFMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetLicenseDetailForFFMS(string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLicenseDetailForFFMS", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetLicenseDetailForFFMSAsync(string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FetchAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string FetchAddress(string Lat, string Long);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FetchAddress", ReplyAction="*")]
        System.Threading.Tasks.Task<string> FetchAddressAsync(string Lat, string Long);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getaddrfortest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void getaddrfortest(string Lat, string Long);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getaddrfortest", ReplyAction="*")]
        System.Threading.Tasks.Task getaddrfortestAsync(string Lat, string Long);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InsertAddress(string Lat, string Long);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertAddress", ReplyAction="*")]
        System.Threading.Tasks.Task<string> InsertAddressAsync(string Lat, string Long);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getActivePersonDaily", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void getActivePersonDaily();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getActivePersonDaily", ReplyAction="*")]
        System.Threading.Tasks.Task getActivePersonDailyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getInactivePersonDaily", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void getInactivePersonDaily();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getInactivePersonDaily", ReplyAction="*")]
        System.Threading.Tasks.Task getInactivePersonDailyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateAddressFromOldAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateAddressFromOldAddress();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateAddressFromOldAddress", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateAddressFromOldAddressAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPersondetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPersondetails(string deviceno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPersondetails", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetPersondetailsAsync(string deviceno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DMTApp_JInsertVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DMTApp_JInsertVersion(string Token, string DeviceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DMTApp_JInsertVersion", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DMTApp_JInsertVersionAsync(string Token, string DeviceNo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebServiceSoapChannel : AstralFFMS.ServiceReferenceDMTracker.WebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceSoapClient : System.ServiceModel.ClientBase<AstralFFMS.ServiceReferenceDMTracker.WebServiceSoap>, AstralFFMS.ServiceReferenceDMTracker.WebServiceSoap {
        
        public WebServiceSoapClient() {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string InsertPersonLicense(string compcode, string DeviceID, string PersonName, string URL) {
            return base.Channel.InsertPersonLicense(compcode, DeviceID, PersonName, URL);
        }
        
        public System.Threading.Tasks.Task<string> InsertPersonLicenseAsync(string compcode, string DeviceID, string PersonName, string URL) {
            return base.Channel.InsertPersonLicenseAsync(compcode, DeviceID, PersonName, URL);
        }
        
        public string InsertPersonLicenseforFFMS(string compcode, string DeviceID, string PersonName, string URL, string mob) {
            return base.Channel.InsertPersonLicenseforFFMS(compcode, DeviceID, PersonName, URL, mob);
        }
        
        public System.Threading.Tasks.Task<string> InsertPersonLicenseforFFMSAsync(string compcode, string DeviceID, string PersonName, string URL, string mob) {
            return base.Channel.InsertPersonLicenseforFFMSAsync(compcode, DeviceID, PersonName, URL, mob);
        }
        
        public string Insert_GrahaakLicense(string compcode, string DeviceID, string PersonName, string URL, string mob, string product) {
            return base.Channel.Insert_GrahaakLicense(compcode, DeviceID, PersonName, URL, mob, product);
        }
        
        public System.Threading.Tasks.Task<string> Insert_GrahaakLicenseAsync(string compcode, string DeviceID, string PersonName, string URL, string mob, string product) {
            return base.Channel.Insert_GrahaakLicenseAsync(compcode, DeviceID, PersonName, URL, mob, product);
        }
        
        public string Update_GrahaakLicense(string compcode, string DeviceID, string PersonName, string URL, string mob, string active, string olddevice, bool mobileaccess, string product, string hdnoldMobile) {
            return base.Channel.Update_GrahaakLicense(compcode, DeviceID, PersonName, URL, mob, active, olddevice, mobileaccess, product, hdnoldMobile);
        }
        
        public System.Threading.Tasks.Task<string> Update_GrahaakLicenseAsync(string compcode, string DeviceID, string PersonName, string URL, string mob, string active, string olddevice, bool mobileaccess, string product, string hdnoldMobile) {
            return base.Channel.Update_GrahaakLicenseAsync(compcode, DeviceID, PersonName, URL, mob, active, olddevice, mobileaccess, product, hdnoldMobile);
        }
        
        public string UpdatePersonLicenseForFFms(string NewDeviceID, string OldDeviceID, string PersonName, string active, string mob) {
            return base.Channel.UpdatePersonLicenseForFFms(NewDeviceID, OldDeviceID, PersonName, active, mob);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePersonLicenseForFFmsAsync(string NewDeviceID, string OldDeviceID, string PersonName, string active, string mob) {
            return base.Channel.UpdatePersonLicenseForFFmsAsync(NewDeviceID, OldDeviceID, PersonName, active, mob);
        }
        
        public void DeletePersonLicenseForFFMS(string DeviceID) {
            base.Channel.DeletePersonLicenseForFFMS(DeviceID);
        }
        
        public System.Threading.Tasks.Task DeletePersonLicenseForFFMSAsync(string DeviceID) {
            return base.Channel.DeletePersonLicenseForFFMSAsync(DeviceID);
        }
        
        public string UpdatePersonLicense(string NewDeviceID, string OldDeviceID, string PersonName) {
            return base.Channel.UpdatePersonLicense(NewDeviceID, OldDeviceID, PersonName);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePersonLicenseAsync(string NewDeviceID, string OldDeviceID, string PersonName) {
            return base.Channel.UpdatePersonLicenseAsync(NewDeviceID, OldDeviceID, PersonName);
        }
        
        public void DeletePersonLicense(string DeviceID) {
            base.Channel.DeletePersonLicense(DeviceID);
        }
        
        public System.Threading.Tasks.Task DeletePersonLicenseAsync(string DeviceID) {
            return base.Channel.DeletePersonLicenseAsync(DeviceID);
        }
        
        public string DMTApp_updateRegId(string Reg_ID, string DeviceNo) {
            return base.Channel.DMTApp_updateRegId(Reg_ID, DeviceNo);
        }
        
        public System.Threading.Tasks.Task<string> DMTApp_updateRegIdAsync(string Reg_ID, string DeviceNo) {
            return base.Channel.DMTApp_updateRegIdAsync(Reg_ID, DeviceNo);
        }
        
        public string GFFT_updateRegId(string Reg_ID, string DeviceNo) {
            return base.Channel.GFFT_updateRegId(Reg_ID, DeviceNo);
        }
        
        public System.Threading.Tasks.Task<string> GFFT_updateRegIdAsync(string Reg_ID, string DeviceNo) {
            return base.Channel.GFFT_updateRegIdAsync(Reg_ID, DeviceNo);
        }
        
        public string SaveLicense_Tracker(string compcode, string DeviceID, string PersonName, string URL) {
            return base.Channel.SaveLicense_Tracker(compcode, DeviceID, PersonName, URL);
        }
        
        public System.Threading.Tasks.Task<string> SaveLicense_TrackerAsync(string compcode, string DeviceID, string PersonName, string URL) {
            return base.Channel.SaveLicense_TrackerAsync(compcode, DeviceID, PersonName, URL);
        }
        
        public string UpdateLicense_Tracker(string PersonName, string Oldmobile, string Newmobile, string Active) {
            return base.Channel.UpdateLicense_Tracker(PersonName, Oldmobile, Newmobile, Active);
        }
        
        public System.Threading.Tasks.Task<string> UpdateLicense_TrackerAsync(string PersonName, string Oldmobile, string Newmobile, string Active) {
            return base.Channel.UpdateLicense_TrackerAsync(PersonName, Oldmobile, Newmobile, Active);
        }
        
        public string DMTApp_GetRegistrationId(string DeviceNo) {
            return base.Channel.DMTApp_GetRegistrationId(DeviceNo);
        }
        
        public System.Threading.Tasks.Task<string> DMTApp_GetRegistrationIdAsync(string DeviceNo) {
            return base.Channel.DMTApp_GetRegistrationIdAsync(DeviceNo);
        }
        
        public string DMTApp_GetLicenseInfo(string DeviceNo) {
            return base.Channel.DMTApp_GetLicenseInfo(DeviceNo);
        }
        
        public System.Threading.Tasks.Task<string> DMTApp_GetLicenseInfoAsync(string DeviceNo) {
            return base.Channel.DMTApp_GetLicenseInfoAsync(DeviceNo);
        }
        
        public void EnablePersonLicense(string DeviceID) {
            base.Channel.EnablePersonLicense(DeviceID);
        }
        
        public System.Threading.Tasks.Task EnablePersonLicenseAsync(string DeviceID) {
            return base.Channel.EnablePersonLicenseAsync(DeviceID);
        }
        
        public void JGetLicenseDetail(string DeviceNo) {
            base.Channel.JGetLicenseDetail(DeviceNo);
        }
        
        public System.Threading.Tasks.Task JGetLicenseDetailAsync(string DeviceNo) {
            return base.Channel.JGetLicenseDetailAsync(DeviceNo);
        }
        
        public System.Xml.XmlNode GetLicenseDetail(string DeviceNo) {
            return base.Channel.GetLicenseDetail(DeviceNo);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetLicenseDetailAsync(string DeviceNo) {
            return base.Channel.GetLicenseDetailAsync(DeviceNo);
        }
        
        public System.Xml.XmlNode UpdateTrackerImeiByMobile(string Mobile, string IMEI) {
            return base.Channel.UpdateTrackerImeiByMobile(Mobile, IMEI);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> UpdateTrackerImeiByMobileAsync(string Mobile, string IMEI) {
            return base.Channel.UpdateTrackerImeiByMobileAsync(Mobile, IMEI);
        }
        
        public System.Xml.XmlNode requestOTP(string Mobile) {
            return base.Channel.requestOTP(Mobile);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> requestOTPAsync(string Mobile) {
            return base.Channel.requestOTPAsync(Mobile);
        }
        
        public System.Xml.XmlNode verifyOTP(string Mobile, string OTP) {
            return base.Channel.verifyOTP(Mobile, OTP);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> verifyOTPAsync(string Mobile, string OTP) {
            return base.Channel.verifyOTPAsync(Mobile, OTP);
        }
        
        public System.Xml.XmlNode GetValidOrg(string Organisation) {
            return base.Channel.GetValidOrg(Organisation);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetValidOrgAsync(string Organisation) {
            return base.Channel.GetValidOrgAsync(Organisation);
        }
        
        public System.Xml.XmlNode SetVastralayaUser(string Organisation, string Product, string Username, string Mobile) {
            return base.Channel.SetVastralayaUser(Organisation, Product, Username, Mobile);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SetVastralayaUserAsync(string Organisation, string Product, string Username, string Mobile) {
            return base.Channel.SetVastralayaUserAsync(Organisation, Product, Username, Mobile);
        }
        
        public System.Xml.XmlNode GetLicenseDetailForFFMS(string DeviceNo) {
            return base.Channel.GetLicenseDetailForFFMS(DeviceNo);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetLicenseDetailForFFMSAsync(string DeviceNo) {
            return base.Channel.GetLicenseDetailForFFMSAsync(DeviceNo);
        }
        
        public string FetchAddress(string Lat, string Long) {
            return base.Channel.FetchAddress(Lat, Long);
        }
        
        public System.Threading.Tasks.Task<string> FetchAddressAsync(string Lat, string Long) {
            return base.Channel.FetchAddressAsync(Lat, Long);
        }
        
        public void getaddrfortest(string Lat, string Long) {
            base.Channel.getaddrfortest(Lat, Long);
        }
        
        public System.Threading.Tasks.Task getaddrfortestAsync(string Lat, string Long) {
            return base.Channel.getaddrfortestAsync(Lat, Long);
        }
        
        public string InsertAddress(string Lat, string Long) {
            return base.Channel.InsertAddress(Lat, Long);
        }
        
        public System.Threading.Tasks.Task<string> InsertAddressAsync(string Lat, string Long) {
            return base.Channel.InsertAddressAsync(Lat, Long);
        }
        
        public void getActivePersonDaily() {
            base.Channel.getActivePersonDaily();
        }
        
        public System.Threading.Tasks.Task getActivePersonDailyAsync() {
            return base.Channel.getActivePersonDailyAsync();
        }
        
        public void getInactivePersonDaily() {
            base.Channel.getInactivePersonDaily();
        }
        
        public System.Threading.Tasks.Task getInactivePersonDailyAsync() {
            return base.Channel.getInactivePersonDailyAsync();
        }
        
        public void UpdateAddressFromOldAddress() {
            base.Channel.UpdateAddressFromOldAddress();
        }
        
        public System.Threading.Tasks.Task UpdateAddressFromOldAddressAsync() {
            return base.Channel.UpdateAddressFromOldAddressAsync();
        }
        
        public System.Data.DataTable GetPersondetails(string deviceno) {
            return base.Channel.GetPersondetails(deviceno);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetPersondetailsAsync(string deviceno) {
            return base.Channel.GetPersondetailsAsync(deviceno);
        }
        
        public string DMTApp_JInsertVersion(string Token, string DeviceNo) {
            return base.Channel.DMTApp_JInsertVersion(Token, DeviceNo);
        }
        
        public System.Threading.Tasks.Task<string> DMTApp_JInsertVersionAsync(string Token, string DeviceNo) {
            return base.Channel.DMTApp_JInsertVersionAsync(Token, DeviceNo);
        }
    }
}
